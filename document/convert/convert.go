//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package convert

import (
	_gg "bytes"
	_ff "errors"
	_b "github.com/sanhuanshisanshao/unioffice/common/logger"
	_d "github.com/sanhuanshisanshao/unioffice/common/tempstorage"
	_ag "github.com/sanhuanshisanshao/unioffice/document"
	_eb "github.com/sanhuanshisanshao/unioffice/internal/convertutils"
	_ef "github.com/sanhuanshisanshao/unioffice/measurement"
	_fd "github.com/sanhuanshisanshao/unioffice/schema/soo/dml"
	_ac "github.com/sanhuanshisanshao/unioffice/schema/soo/dml/chart"
	_cc "github.com/sanhuanshisanshao/unioffice/schema/soo/dml/picture"
	_de "github.com/sanhuanshisanshao/unioffice/schema/soo/ofc/sharedTypes"
	_db "github.com/sanhuanshisanshao/unioffice/schema/soo/wml"
	_c "github.com/unidoc/unipdf/v3/creator"
	_cg "github.com/unidoc/unipdf/v3/model"
	_a "io/ioutil"
	_e "strconv"
	_f "strings"
)

func (_cfeg *convertContext) addRelativeRIC(_aade *_db.EG_RunInnerContent, _babf *_db.CT_RPr) {
	var _bdf *_c.TextChunk
	var _edead, _cgcee bool
	_cegd := false
	if _aade == nil {
		if _cfeg._dgfg != nil {
			_edead = true
			_bdf = _cfeg._bgda.Append(_cfeg._dgfg._bbea)
		}
	} else {
		if _aade.T != nil && _aade.T.Content != "" {
			_cedd := _aade.T.Content
			if _eeeaf := _cfeg._fbac; _eeeaf != nil && _eeeaf.IdAttr != nil {
				_cegd = true
				_bdf = _cfeg._bgda.AddExternalLink(_cedd, _cfeg._abea.GetTargetByRelId(*_eeeaf.IdAttr))
			} else {
				_bdf = _cfeg._bgda.Append(_cedd)
			}
		} else if _gagd := _aade.EndnoteReference; _gagd != nil {
			_eeee := _cfeg._abea.BodySection().X()
			_edead = true
			_eccf := _gagd.IdAttr
			_edgde := _eccf
			_gdac := _db.ST_NumberFormatLowerRoman
			if _faef := _eeee.EndnotePr; _faef != nil {
				if _ddea := _faef.NumFmt; _ddea != nil {
					_gdac = _ddea.ValAttr
				}
				if _bba := _faef.NumStart; _bba != nil {
					_edgde += _bba.ValAttr - 1
				}
			}
			_gdbe := _fegg(_edgde, _gdac)
			_dcc := _cfeg._abea.Endnote(_eccf).X()
			if _dcc != nil {
				_cfeg._fdde = append(_cfeg._fdde, note{_fc: _gdbe, _efb: _dcc.EG_BlockLevelElts})
				_bdf = _cfeg._bgda.Append(_gdbe)
			}
		} else if _fcfc := _aade.FootnoteReference; _fcfc != nil {
			_beda := _cfeg._abea.BodySection().X()
			_edead = true
			_bafg := _fcfc.IdAttr
			_dae := _bafg
			_dfgg := _db.ST_NumberFormatDecimal
			if _bgdf := _beda.FootnotePr; _bgdf != nil {
				if _bdag := _bgdf.NumFmt; _bdag != nil {
					_dfgg = _bdag.ValAttr
				}
				if _eagg := _bgdf.NumStart; _eagg != nil {
					_dae += _eagg.ValAttr - 1
				}
			}
			_gbgc := _fegg(_dae, _dfgg)
			_bdf = _cfeg._bgda.Append(_gbgc)
		}
	}
	if _bdf != nil {
		_bdf.Style, _, _, _ = _cfeg.makeRunStyle(_babf, _edead, _cgcee, true, false, _cegd)
	}
}
func _dfaa(_ebag float64) float64 { return _ebag * _ef.Millimeter }
func _dddd(_febc *_db.CT_Border) (_c.CellBorderStyle, *_c.Color, float64) {
	if _febc == nil {
		return _c.CellBorderStyleNone, nil, 0
	}
	var _bfdf _c.CellBorderStyle
	switch _febc.ValAttr {
	case _db.ST_BorderSingle:
		_bfdf = _c.CellBorderStyleSingle
	case _db.ST_BorderDouble:
		_bfdf = _c.CellBorderStyleDouble
	default:
		_bfdf = _c.CellBorderStyleNone
	}
	var _bgga _c.Color
	if _bacd := _febc.ColorAttr; _bacd != nil {
		if _adcb := _bacd.ST_HexColorRGB; _adcb != nil {
			_bgga = _c.ColorRGBFromHex("\u0023" + *_adcb)
		}
	}
	_efbf := 0.0
	if _dffb := _febc.SzAttr; _dffb != nil {
		_efbf = float64(*_dffb) / 8
	}
	return _bfdf, &_bgga, _efbf
}
func (_dfeb *convertContext) addSeparator() {
	_dfeb.newParagraph()
	_dfeb._fecf._edf = true
	_dfeb._fecf._gc = _efg
	if _dfeb.currentParagraphOverflowsCurrentPage() {
		_dfeb.moveCurrentParagraphToNewPage()
	}
	_dfeb.addCurrentParagraphToCurrentPage()
}

var _efg = _dfaa(6)

type word struct {
	_aee []*symbol
	_bbf float64
	_agc float64
	_aga bool
}

// RegisterFont makes a PdfFont accessible for using in converting to PDF.
func RegisterFont(name string, style FontStyle, font *_cg.PdfFont) {
	_eb.RegisterFont(name, style, font)
}
func _add(_gfe *_c.Creator, _gfc *image) { _gfc._fe.SetPos(_gfc._afc, _gfc._bge); _gfe.Draw(_gfc._fe) }
func (_eed *convertContext) addCurrentWordToParagraph() {
	for {
		_gcfg := _eed._edgdg._fcf
		_beae := _gcfg + _eed._beaa._agc
		if _beae > _eed._edgdg._dce {
			_eed.newLine()
		}
		_gced := _eed._fecf._bb + _eed._edgdg._da
		_cag := _gced + _eed._edgdg._gb
		_fdfg := false
		_addg := append(_eed._bage._aag, _eed._fecf._fdd...)
		for _, _eeab := range _addg {
			_ada := _eeab._dg
			if ((_gced > _ada.Top && _gced < _ada.Bottom) || (_cag > _ada.Top && _cag < _ada.Bottom)) && ((_gcfg > _ada.Left && _gcfg < _ada.Right) || (_beae > _ada.Left && _beae < _ada.Right)) {
				_fdfg = true
				if _eed._edgdg._fcf < _ada.Right {
					_eed._ebac._acg = _ada.Left
					_eed._edgdg._fcf = _ada.Right
					_eed.newSpan()
				}
			}
		}
		if !_fdfg {
			break
		}
	}
	if !_eed._beaa._aga || len(_eed._ebac._aeg) > 0 {
		_eed._beaa._bbf = _eed._edgdg._fcf
		_eed._ebac._aeg = append(_eed._ebac._aeg, _eed._beaa)
		_eed._edgdg._fcf += _eed._beaa._agc
		for _, _egca := range _eed._beaa._aee {
			_eed.adjustHeights(_egca._edgf)
		}
	}
}

const _aa = 0.67

func (_cdfa *convertContext) makePdfBlockFromChart(_ege *_ac.Chart, _babg, _ccce float64) (*_c.Block, error) {
	_bgfg := _ege.CT_RelId.IdAttr
	_dffg := _cdfa._abea.GetChartSpaceByRelId(_bgfg)
	if _dffg == nil {
		return nil, _ff.New("\u004e\u006f\u0020\u0063\u0068\u0061\u0072\u0074\u0073\u0070\u0061\u0063\u0065")
	}
	var _gadc *_fd.Theme
	_egbg := _cdfa._abea.Themes()
	if len(_egbg) > 0 {
		_gadc = _egbg[0]
	}
	return _eb.MakeBlockFromChartSpace(_dffg, _babg, _ccce, _gadc)
}
func (_ggg *convertContext) addRelativeCRC(_accg []*_db.EG_ContentRunContent, _deec *_db.CT_PPr) {
	for _, _bedb := range _accg {
		if _agece := _bedb.R; _agece != nil {
			_cdca := _ecb(_ggg._abea, _agece.RPr, _deec)
			if _ggg._dgfg != nil {
				_ggg.addRelativeRIC(nil, _cdca)
				_ggg._dgfg = nil
			}
			for _, _bgac := range _agece.EG_RunInnerContent {
				_ggg.addRelativeRIC(_bgac, _cdca)
			}
		}
	}
}
func _febb(_feae, _bbga *_db.CT_PPrGeneral) *_db.CT_PPrGeneral {
	if _feae == nil {
		return _feae
	}
	if _bbga == nil {
		return _feae
	}
	if _feae.PStyle == nil {
		_feae.PStyle = _bbga.PStyle
	}
	if _feae.KeepNext == nil {
		_feae.KeepNext = _bbga.KeepNext
	}
	if _feae.KeepLines == nil {
		_feae.KeepLines = _bbga.KeepLines
	}
	if _feae.PageBreakBefore == nil {
		_feae.PageBreakBefore = _bbga.PageBreakBefore
	}
	if _feae.FramePr == nil {
		_feae.FramePr = _bbga.FramePr
	}
	if _feae.WidowControl == nil {
		_feae.WidowControl = _bbga.WidowControl
	}
	if _feae.NumPr == nil {
		_feae.NumPr = _bbga.NumPr
	}
	if _feae.SuppressLineNumbers == nil {
		_feae.SuppressLineNumbers = _bbga.SuppressLineNumbers
	}
	if _feae.PBdr == nil {
		_feae.PBdr = _bbga.PBdr
	}
	if _feae.Shd == nil {
		_feae.Shd = _bbga.Shd
	}
	if _feae.Tabs == nil {
		_feae.Tabs = _bbga.Tabs
	}
	if _feae.SuppressAutoHyphens == nil {
		_feae.SuppressAutoHyphens = _bbga.SuppressAutoHyphens
	}
	if _feae.Kinsoku == nil {
		_feae.Kinsoku = _bbga.Kinsoku
	}
	if _feae.WordWrap == nil {
		_feae.WordWrap = _bbga.WordWrap
	}
	if _feae.OverflowPunct == nil {
		_feae.OverflowPunct = _bbga.OverflowPunct
	}
	if _feae.TopLinePunct == nil {
		_feae.TopLinePunct = _bbga.TopLinePunct
	}
	if _feae.AutoSpaceDE == nil {
		_feae.AutoSpaceDE = _bbga.AutoSpaceDE
	}
	if _feae.AutoSpaceDN == nil {
		_feae.AutoSpaceDN = _bbga.AutoSpaceDN
	}
	if _feae.Bidi == nil {
		_feae.Bidi = _bbga.Bidi
	}
	if _feae.AdjustRightInd == nil {
		_feae.AdjustRightInd = _bbga.AdjustRightInd
	}
	if _feae.SnapToGrid == nil {
		_feae.SnapToGrid = _bbga.SnapToGrid
	}
	if _feae.Spacing == nil {
		_feae.Spacing = _bbga.Spacing
	}
	if _feae.Ind == nil {
		_feae.Ind = _bbga.Ind
	}
	if _feae.ContextualSpacing == nil {
		_feae.ContextualSpacing = _bbga.ContextualSpacing
	}
	if _feae.MirrorIndents == nil {
		_feae.MirrorIndents = _bbga.MirrorIndents
	}
	if _feae.SuppressOverlap == nil {
		_feae.SuppressOverlap = _bbga.SuppressOverlap
	}
	if _feae.Jc == nil {
		_feae.Jc = _bbga.Jc
	}
	if _feae.TextDirection == nil {
		_feae.TextDirection = _bbga.TextDirection
	}
	if _feae.TextAlignment == nil {
		_feae.TextAlignment = _bbga.TextAlignment
	}
	if _feae.TextboxTightWrap == nil {
		_feae.TextboxTightWrap = _bbga.TextboxTightWrap
	}
	if _feae.OutlineLvl == nil {
		_feae.OutlineLvl = _bbga.OutlineLvl
	}
	if _feae.DivId == nil {
		_feae.DivId = _bbga.DivId
	}
	if _feae.CnfStyle == nil {
		_feae.CnfStyle = _bbga.CnfStyle
	}
	if _feae.PPrChange == nil {
		_feae.PPrChange = _bbga.PPrChange
	}
	return _feae
}
func (_bed *convertContext) alignParagraph() {
	_bbba := _bed._fecf
	if _bbba._ece == _c.TextAlignmentLeft {
		return
	}
	_egg := len(_bbba._ga) - 1
	for _bfbb, _eae := range _bbba._ga {
		_bfbe := len(_eae._afgb) - 1
		for _eff, _cbe := range _eae._afgb {
			_aff := true
			_efbe := len(_cbe._aeg)
			_bdd := 0.0
			for _agag := len(_cbe._aeg) - 1; _agag >= 0; _agag-- {
				_acf := _cbe._aeg[_agag]
				if _aff && _acf._aga {
					_efbe = _agag
				} else {
					_aff = false
					for _, _fee := range _acf._aee {
						_bdd += _fee._ggf
					}
				}
			}
			_cbe._aeg = _cbe._aeg[:_efbe]
			_ecc := _cbe._acg - _cbe._fa - _bdd
			switch _bbba._ece {
			case _c.TextAlignmentRight:
				_cbe.moveRight(_ecc)
			case _c.TextAlignmentCenter:
				_cbe.moveRight(_ecc / 2)
			case _c.TextAlignmentJustify:
				if _bfbb != _egg || _eff != _bfbe {
					_bab := []*word{}
					for _, _agcgg := range _cbe._aeg {
						if _agcgg._aga {
							_bab = append(_bab, _agcgg)
						}
					}
					_fbd := _ecc / float64(len(_bab))
					for _, _cgc := range _bab {
						_cgc._agc += _fbd
					}
					var _afgbd *word
					for _, _cgdf := range _cbe._aeg {
						if _afgbd != nil {
							_cgdf._bbf = _afgbd._bbf + _afgbd._agc
						}
						_afgbd = _cgdf
					}
				}
			}
		}
	}
}
func (_dfg *convertContext) addInlineSymbol(_eaec *symbol) {
	if len(_dfg._beaa._aee) > 0 {
		_gged := _dfg._beaa._aee[len(_dfg._beaa._aee)-1]._eeec
		if _gged == "\u0020" {
			_dfg.addCurrentWordToParagraph()
			_dfg.newWord()
		}
	}
	_dfg._beaa._aee = append(_dfg._beaa._aee, _eaec)
	_eaec._fad = _dfg._beaa._agc
	_dfg._beaa._agc += _eaec._ggf
	_dfg._beaa._aga = false
	_dfg.adjustHeights(_eaec._edgf)
}
func (_bga *span) moveRight(_egb float64) {
	for _, _cabb := range _bga._aeg {
		_cabb._bbf += _egb
	}
}

var _dacg = _dfaa(2.5)

func (_fcda *convertContext) addCurrentParagraphToCurrentPage() {
	_fcda._bage._ee = _fcda._fecf._bb + _fcda._fecf._eee.Top + _fcda._fecf._gc + _fcda._fecf._eee.Bottom
	_fcda._bage._ffc = append(_fcda._bage._ffc, _fcda._fecf._ea...)
	_fcda._bage._ce = append(_fcda._bage._ce, _fcda._fecf._eag...)
	_fcda._bage._edc = append(_fcda._bage._edc, _fcda._fecf._gcb...)
	_fcda._bage._edg = append(_fcda._bage._edg, _fcda._fecf._fbg...)
	_fcda._bage._aag = append(_fcda._bage._aag, _fcda._fecf._fdd...)
	_fcda._bage._ad = append(_fcda._bage._ad, _fcda._fecf)
	_fcda.adjustRightBoundOfLastSpan()
	_fcda.alignParagraph()
	if len(_fcda._bage._aaa) == 0 && len(_fcda._fecf._aae) > 0 {
		_fcda._bage._ec.Bottom -= _efg
	}
	_fcda._bage._aaa = append(_fcda._bage._aaa, _fcda._fecf._aae...)
	_fcda._bage._ec.Bottom -= _fcda._fecf._fba
}

// RegisterFontsFromDirectory registers all fonts from the given directory automatically detecting font families and styles. For composite fonts use RegisterCompositeFontsFromDirectory.
func RegisterFontsFromDirectory(dirName string) error { return _eb.RegisterFontsFromDirectory(dirName) }
func (_bcc *convertContext) alignSymbolsVertically() {
	for _, _aea := range _bcc._acab {
		for _, _gfd := range _aea._ad {
			for _, _cgd := range _gfd._ga {
				_cccf := 0.0
				for _, _bac := range _cgd._afgb {
					for _, _faf := range _bac._aeg {
						for _, _ggbd := range _faf._aee {
							if _ggbd._edgf > _cccf {
								_cccf = _ggbd._edgf
							}
						}
					}
				}
				for _, _cec := range _cgd._afgb {
					for _, _acc := range _cec._aeg {
						for _, _dda := range _acc._aee {
							if _dda._ca < _cccf {
								_dda._bc = _cccf - _dda._ca
							}
						}
					}
				}
			}
		}
	}
}

type convertContext struct {
	_bcba  *_c.Creator
	_abea  *_ag.Document
	_fdea  *_db.CT_PPrGeneral
	_aagf  *_db.CT_RPr
	_bgda  *_c.StyledParagraph
	_acab  []*page
	_bage  *page
	_cabc  *_eb.Rectangle
	_fecf  *paragraph
	_edgdg *line
	_ebac  *span
	_beaa  *word
	_fbac  *_db.CT_Hyperlink
	_aacd  *_db.CT_ParaRPr
	_fdde  []note
	_dgfg  *prefix
	_dafd  bool
	_gabdg bool
	_aagc  bool
	_dafcd float64
	_cbbb  float64
	_gbgb  float64
	_baca  float64
	_eacg  bool
	_dafa  map[int64]map[int64]int
}

func (_fbea *convertContext) combinePPrWithStyles(_bcfc *_db.CT_PPr) (*_db.CT_PPr, *prefix) {
	if _bcfc == nil {
		return nil, nil
	}
	var _bggg *prefix
	if _bcfc != nil && _bcfc.NumPr != nil {
		if _fggc, _fbcb := _bcfc.NumPr.Ilvl, _bcfc.NumPr.NumId; _fggc != nil && _fbcb != nil {
			_dceg := _fbea._abea.GetNumberingLevelByIds(_fbcb.ValAttr, _fggc.ValAttr).X()
			_bcfc = _aafc(_bcfc, _dceg.PPr, _dceg.RPr)
			if _abca := _dceg.NumFmt; _abca != nil {
				if _ggeb := _abca.ValAttr; _ggeb == _db.ST_NumberFormatBullet || _ggeb == _db.ST_NumberFormatDecimal {
					var _cca []float64
					if _cfad := _bcfc.Tabs; _cfad != nil && len(_cfad.Tab) != 0 {
						for _, _fcgb := range _cfad.Tab {
							_cca = append(_cca, _eb.PointsFromTwips(*_fcgb.PosAttr.Int64))
						}
					}
					_bggg = &prefix{_geab: _cca, _eacc: true}
					if _ggeb == _db.ST_NumberFormatBullet {
						if _cgeac := _dceg.LvlText; _cgeac != nil {
							if _bdeb := _cgeac.ValAttr; _bdeb != nil && *_bdeb != "" {
								_bggg._bbea = *_bdeb
								_bggg._ggfc = true
							}
						}
					} else {
						_aegf, _aabe := _fbcb.ValAttr, _fggc.ValAttr
						if _, _ggac := _fbea._dafa[_aegf]; !_ggac {
							_fbea._dafa[_aegf] = map[int64]int{}
						}
						if _, _cbd := _fbea._dafa[_aegf][_aabe]; !_cbd {
							_fbea._dafa[_aegf][_aabe] = 1
						}
						_aedc := _fbea._dafa[_aegf][_aabe]
						_fbea._dafa[_aegf][_aabe]++
						_bggg._bbea = _e.Itoa(_aedc) + "\u002e"
					}
				}
			}
		}
	}
	if _bcfc != nil && _bcfc.PStyle != nil {
		_cbbbb, _fgd := _fbea.getStyleProps(_bcfc.PStyle.ValAttr)
		_bcfc = _aafc(_bcfc, _cbbbb, _fgd)
	}
	return _bcfc, _bggg
}

type page struct {
	_ec  *_eb.Rectangle
	_ad  []*paragraph
	_ee  float64
	_aag []*zoneToSkip
	_ffc []*image
	_ce  []*image
	_edc []*block
	_edg []*block
	_aaa []*note
	_bg  bool
}

const (
	FontStyle_Regular    FontStyle = 0
	FontStyle_Bold       FontStyle = 1
	FontStyle_Italic     FontStyle = 2
	FontStyle_BoldItalic FontStyle = 3
)

func _dgce(_ccdgc *_db.EG_RunInnerContent) bool {
	if _dedd := _ccdgc.Br; _dedd != nil {
		return _dedd.TypeAttr == _db.ST_BrTypePage
	}
	return false
}

var _dab = []romanMatch{romanMatch{1000, "\u006d"}, romanMatch{900, "\u0063\u006d"}, romanMatch{500, "\u0064"}, romanMatch{400, "\u0063\u0064"}, romanMatch{100, "\u0063"}, romanMatch{90, "\u0078\u0063"}, romanMatch{50, "\u006c"}, romanMatch{40, "\u0078\u006c"}, romanMatch{10, "\u0078"}, romanMatch{9, "\u0069\u0078"}, romanMatch{5, "\u0076"}, romanMatch{4, "\u0069\u0076"}, romanMatch{1, "\u0069"}}

func (_cdd *convertContext) addAbsoluteCBCs(_agb []*_db.EG_ContentBlockContent) {
	for _, _ccc := range _agb {
		for _, _aged := range _ccc.P {
			_cdd.newParagraph()
			_aagb, _fca := _cdd.combinePPrWithStyles(_aged.PPr)
			if _fca != nil {
				_cdd._dgfg = _fca
			}
			_cdd.assignPropsToAbsoluteParagraph(_aagb, _cdd._fecf)
			_cdd.determineParagraphBounds()
			_cdd.newLine()
			_cdd.newWord()
			_ceb := _aged.EG_PContent
			if len(_ceb) == 0 {
				_cdd.addEmptyLine()
			} else {
				_cdd.addAnchorBlocks(_ceb)
				_cdd.addAnchorExtra(_ceb)
				if _cdd.addAbsoluteEGPC(_ceb, _aagb) {
					_cdd.newPage()
					continue
				}
				if _cdd.currentParagraphOverflowsCurrentPage() {
					_cdd.moveCurrentParagraphToNewPage()
					_cdd.addAbsoluteEGPC(_ceb, _aagb)
				}
				_cdd.addCurrentWordToParagraph()
			}
			_cdd.addCurrentParagraphToCurrentPage()
		}
		for _, _bef := range _ccc.Tbl {
			_cdd.addAbsoluteTable(_bef)
		}
	}
}
func _fagf(_fge, _adeb *_db.CT_RPr) *_db.CT_RPr {
	if _fge == nil {
		return _adeb
	}
	if _adeb == nil {
		return _fge
	}
	if _fge.RStyle == nil {
		_fge.RStyle = _adeb.RStyle
	}
	if _fge.RFonts == nil {
		_fge.RFonts = _adeb.RFonts
	}
	if _fge.B == nil {
		_fge.B = _adeb.B
	}
	if _fge.BCs == nil {
		_fge.BCs = _adeb.BCs
	}
	if _fge.I == nil {
		_fge.I = _adeb.I
	}
	if _fge.ICs == nil {
		_fge.ICs = _adeb.ICs
	}
	if _fge.Caps == nil {
		_fge.Caps = _adeb.Caps
	}
	if _fge.SmallCaps == nil {
		_fge.SmallCaps = _adeb.SmallCaps
	}
	if _fge.Strike == nil {
		_fge.Strike = _adeb.Strike
	}
	if _fge.Dstrike == nil {
		_fge.Dstrike = _adeb.Dstrike
	}
	if _fge.Outline == nil {
		_fge.Outline = _adeb.Outline
	}
	if _fge.Shadow == nil {
		_fge.Shadow = _adeb.Shadow
	}
	if _fge.Emboss == nil {
		_fge.Emboss = _adeb.Emboss
	}
	if _fge.Imprint == nil {
		_fge.Imprint = _adeb.Imprint
	}
	if _fge.NoProof == nil {
		_fge.NoProof = _adeb.NoProof
	}
	if _fge.SnapToGrid == nil {
		_fge.SnapToGrid = _adeb.SnapToGrid
	}
	if _fge.Vanish == nil {
		_fge.Vanish = _adeb.Vanish
	}
	if _fge.WebHidden == nil {
		_fge.WebHidden = _adeb.WebHidden
	}
	if _fge.Color == nil {
		_fge.Color = _adeb.Color
	}
	if _fge.Spacing == nil {
		_fge.Spacing = _adeb.Spacing
	}
	if _fge.W == nil {
		_fge.W = _adeb.W
	}
	if _fge.Kern == nil {
		_fge.Kern = _adeb.Kern
	}
	if _fge.Position == nil {
		_fge.Position = _adeb.Position
	}
	if _fge.Sz == nil {
		_fge.Sz = _adeb.Sz
	}
	if _fge.SzCs == nil {
		_fge.SzCs = _adeb.SzCs
	}
	if _fge.Highlight == nil {
		_fge.Highlight = _adeb.Highlight
	}
	if _fge.U == nil {
		_fge.U = _adeb.U
	}
	if _fge.Effect == nil {
		_fge.Effect = _adeb.Effect
	}
	if _fge.Bdr == nil {
		_fge.Bdr = _adeb.Bdr
	}
	if _fge.Shd == nil {
		_fge.Shd = _adeb.Shd
	}
	if _fge.FitText == nil {
		_fge.FitText = _adeb.FitText
	}
	if _fge.VertAlign == nil {
		_fge.VertAlign = _adeb.VertAlign
	}
	if _fge.Rtl == nil {
		_fge.Rtl = _adeb.Rtl
	}
	if _fge.Cs == nil {
		_fge.Cs = _adeb.Cs
	}
	if _fge.Em == nil {
		_fge.Em = _adeb.Em
	}
	if _fge.Lang == nil {
		_fge.Lang = _adeb.Lang
	}
	if _fge.EastAsianLayout == nil {
		_fge.EastAsianLayout = _adeb.EastAsianLayout
	}
	if _fge.SpecVanish == nil {
		_fge.SpecVanish = _adeb.SpecVanish
	}
	if _fge.OMath == nil {
		_fge.OMath = _adeb.OMath
	}
	if _fge.RPrChange == nil {
		_fge.RPrChange = _adeb.RPrChange
	}
	return _fge
}
func _ecb(_abb *_ag.Document, _affc *_db.CT_RPr, _aaafc *_db.CT_PPr) *_db.CT_RPr {
	var _cdce, _aaga *_db.CT_RPr
	if _affc == nil {
		_affc = _db.NewCT_RPr()
	}
	var _ddg *_db.CT_ParaRPr
	if _aaafc != nil && _aaafc.RPr != nil {
		_ddg = _aaafc.RPr
	}
	if _ddg == nil {
		_ddg = _db.NewCT_ParaRPr()
	}
	if _affc.RStyle != nil {
		_fdac := _abb.GetStyleByID(_affc.RStyle.ValAttr)
		if _acca := _fdac.X(); _acca != nil {
			_cdce = _acca.RPr
		}
	}
	if _cdce == nil {
		_cdce = _db.NewCT_RPr()
	}
	if _ddg.RStyle != nil {
		_gfdc := _abb.GetStyleByID(_ddg.RStyle.ValAttr)
		if _dba := _gfdc.X(); _dba != nil {
			_aaga = _dba.RPr
		}
	}
	if _aaga == nil {
		_aaga = _db.NewCT_RPr()
	}
	if _affc.Color == nil {
		if _cdce.Color != nil {
			_affc.Color = _cdce.Color
		} else if _ddg.Color != nil {
			_affc.Color = _ddg.Color
		} else if _aaga.Color != nil {
			_affc.Color = _aaga.Color
		}
	}
	if _affc.Spacing == nil {
		if _cdce.Spacing != nil {
			_affc.Spacing = _cdce.Spacing
		} else if _ddg.Spacing != nil {
			_affc.Spacing = _ddg.Spacing
		} else if _aaga.Spacing != nil {
			_affc.Spacing = _aaga.Spacing
		}
	}
	if _affc.Sz == nil {
		if _cdce.Sz != nil {
			_affc.Sz = _cdce.Sz
		} else if _ddg.Sz != nil {
			_affc.Sz = _ddg.Sz
		} else if _aaga.Sz != nil {
			_affc.Sz = _aaga.Sz
		}
	}
	if _affc.SzCs == nil {
		if _cdce.SzCs != nil {
			_affc.SzCs = _cdce.SzCs
		} else if _ddg.SzCs != nil {
			_affc.SzCs = _ddg.SzCs
		} else if _aaga.SzCs != nil {
			_affc.SzCs = _aaga.SzCs
		}
	}
	if _affc.B == nil {
		if _cdce.B != nil {
			_affc.B = _cdce.B
		} else if _ddg.B != nil {
			_affc.B = _ddg.B
		} else if _aaga.B != nil {
			_affc.B = _aaga.B
		}
	}
	if _affc.I == nil {
		if _cdce.I != nil {
			_affc.I = _cdce.I
		} else if _ddg.I != nil {
			_affc.I = _ddg.I
		} else if _aaga.I != nil {
			_affc.I = _aaga.I
		}
	}
	if _affc.RFonts == nil {
		if _cdce.RFonts != nil {
			_affc.RFonts = _cdce.RFonts
		} else if _ddg.RFonts != nil {
			_affc.RFonts = _ddg.RFonts
		} else if _aaga.RFonts != nil {
			_affc.RFonts = _aaga.RFonts
		}
	}
	if _affc.VertAlign == nil {
		if _cdce.VertAlign != nil {
			_affc.VertAlign = _cdce.VertAlign
		} else if _ddg.VertAlign != nil {
			_affc.VertAlign = _ddg.VertAlign
		} else if _aaga.VertAlign != nil {
			_affc.VertAlign = _aaga.VertAlign
		}
	}
	return _affc
}
func (_ffg *convertContext) drawPages() {
	for _, _gcg := range _ffg._acab {
		_ffg._bcba.NewPage()
		_ffg.drawPage(_gcg)
	}
}
func _fgff(_cagf *_ag.Document, _gbcc *_db.CT_TblPr) *_db.CT_TblPr {
	if _gbcc == nil {
		_gbcc = _db.NewCT_TblPr()
	}
	if _gbcc.TblStyle != nil {
		_bgbf := _cagf.GetStyleByID(_gbcc.TblStyle.ValAttr)
		if _beag := _bgbf.X(); _beag != nil {
			if _eaeg := _beag.TblPr; _eaeg != nil {
				_geac := _gbcc.TblBorders
				_fecc := _eaeg.TblBorders
				if _geac == nil {
					_geac = _fecc
				} else {
					if _geac.Top == nil {
						_geac.Top = _fecc.Top
					}
					if _geac.Bottom == nil {
						_geac.Bottom = _fecc.Bottom
					}
					if _geac.Left == nil {
						_geac.Left = _fecc.Left
					}
					if _geac.Right == nil {
						_geac.Right = _fecc.Right
					}
					if _geac.InsideH == nil {
						_geac.InsideH = _fecc.InsideH
					}
					if _geac.InsideV == nil {
						_geac.InsideV = _fecc.InsideV
					}
				}
				_gbcc.TblBorders = _geac
				_dagd := _gbcc.Shd
				_cceb := _eaeg.Shd
				if _dagd == nil {
					_dagd = _cceb
				} else {
					if _cceb != nil && _dagd.FillAttr == nil {
						_dagd.FillAttr = _cceb.FillAttr
					}
				}
				_gbcc.Shd = _dagd
				_deecg := _gbcc.TblCellMar
				_fccb := _eaeg.TblCellMar
				if _deecg == nil {
					_deecg = _fccb
				} else {
					if _fccb != nil && _deecg.Left == nil {
						_deecg.Left = _fccb.Left
					}
				}
				_gbcc.TblCellMar = _deecg
				if _gbcc.TblInd == nil {
					_gbcc.TblInd = _eaeg.TblInd
				}
				if _gbcc.Jc == nil {
					_gbcc.Jc = _eaeg.Jc
				}
			}
		}
	}
	return _gbcc
}
func (_bgcd *convertContext) addEndnotes() {
	for _fcgg, _gcgf := range _bgcd._fdde {
		if _fcgg == 0 {
			_bgcd.addSeparator()
		}
		_bgcd._dgfg = &prefix{_bbea: _gcgf._fc}
		for _bgb, _caed := range _gcgf._efb {
			if _fcgg != 0 || _bgb != 0 {
				_bgcd._eacg = true
			}
			_bgcd.addAbsoluteCBCs(_caed.EG_ContentBlockContent)
		}
	}
	_bgcd._eacg = false
}
func (_cade *convertContext) makeBlockFromWdWsp(_gccg *_db.WdWsp) (*block, error) {
	if _edac := _gccg.WChoice; _edac != nil {
		if _fgce := _edac.Txbx; _fgce != nil {
			if _eab := _fgce.TxbxContent; _eab != nil {
				if _dcgd := _eab.EG_ContentBlockContent; len(_dcgd) > 0 {
					if _afbd := _gccg.SpPr; _afbd != nil {
						if _egcae := _afbd.Xfrm; _egcae != nil {
							if _faec := _egcae.Ext; _faec != nil {
								_fbdc := _ef.FromEMU(_faec.CxAttr)
								_gadff := _ef.FromEMU(_faec.CyAttr)
								_ebcba := &_eb.Rectangle{Top: _dacg, Bottom: _dacg, Left: _dacg, Right: _dacg}
								_egfa, _deee := _cade.makePdfBlockFromCBCs([][]*_db.EG_ContentBlockContent{_dcgd}, _fbdc, _gadff, _ebcba, false, nil)
								if _deee != nil {
									return nil, _deee
								}
								var _ebf bool
								var _gaa float64
								var _dge _c.Color
								if _cgdcc := _afbd.PrstGeom; _cgdcc != nil {
									if _cgdcc.PrstAttr == _fd.ST_ShapeTypeRect {
										if _afgf := _afbd.Ln; _afgf != nil {
											if _fdafg := _afgf.WAttr; _fdafg != nil {
												_ebf = true
												_gaa = _ef.FromEMU(int64(*_fdafg))
												_dge = _c.ColorBlack
												if _aafb := _afgf.SolidFill; _aafb != nil {
													if _cdebd := _aafb.SrgbClr; _cdebd != nil {
														_dge = _c.ColorRGBFromHex("\u0023" + _cdebd.ValAttr)
													}
												}
											}
										}
									}
								}
								_ddca := &block{_dcd: _egfa, _adf: _ebf, _fec: _gaa, _gee: _dge}
								return _ddca, nil
							}
						}
					}
				}
			}
		}
	}
	return nil, nil
}
func (_cdebc *convertContext) adjustHeights(_bca float64) {
	if _cdebc._edgdg._gb < _bca {
		_cdebc._fecf._gc += (_bca - _cdebc._edgdg._gb)
		_cdebc._edgdg._gb = _bca
	}
}
func _gcfgg(_bfbd *_db.CT_OnOff) bool {
	if _bfbd != nil {
		if _daeg := _bfbd.ValAttr; _daeg != nil {
			if _cbed := _daeg.Bool; _cbed != nil {
				return *_cbed
			}
			return _daeg.ST_OnOff1 == _de.ST_OnOff1On
		}
		return true
	}
	return false
}
func _bdac(_fcge *_db.CT_TblPr, _adcad *_db.CT_TblPrEx, _dcgbc *_db.CT_TcPr, _bcff, _gafgd, _eeag, _dfag int) *_db.CT_TcPr {
	if _dcgbc == nil {
		_dcgbc = _db.NewCT_TcPr()
	}
	if _dcgbc == nil {
		_dcgbc = _db.NewCT_TcPr()
	}
	if _adcad == nil {
		_adcad = _db.NewCT_TblPrEx()
	}
	if _fcge == nil {
		_fcge = _db.NewCT_TblPr()
	}
	if _dcgbc.TcBorders == nil {
		_dcgbc.TcBorders = _db.NewCT_TcBorders()
	}
	if _adcad.TblBorders == nil {
		_adcad.TblBorders = _db.NewCT_TblBorders()
	}
	if _fcge.TblBorders == nil {
		_fcge.TblBorders = _db.NewCT_TblBorders()
	}
	if _dcgbc.TcBorders.Top == nil {
		if _adcad.TblBorders.Top == nil {
			_dcgbc.TcBorders.Top = _cafe(_fcge.TblBorders.Top, _fcge.TblBorders.InsideH, _bcff == 0)
		} else {
			_dcgbc.TcBorders.Top = _cafe(_adcad.TblBorders.Top, _adcad.TblBorders.InsideH, _bcff == 0)
		}
	}
	if _dcgbc.TcBorders.Bottom == nil {
		if _adcad.TblBorders.Bottom == nil {
			_dcgbc.TcBorders.Bottom = _cafe(_fcge.TblBorders.Bottom, _fcge.TblBorders.InsideH, _bcff == _eeag-1)
		} else {
			_dcgbc.TcBorders.Bottom = _cafe(_adcad.TblBorders.Bottom, _adcad.TblBorders.InsideH, _bcff == _eeag-1)
		}
	}
	if _dcgbc.TcBorders.Left == nil {
		if _adcad.TblBorders.Left == nil {
			_dcgbc.TcBorders.Left = _cafe(_fcge.TblBorders.Left, _fcge.TblBorders.InsideV, _gafgd == 0)
		} else {
			_dcgbc.TcBorders.Left = _cafe(_adcad.TblBorders.Left, _adcad.TblBorders.InsideV, _gafgd == 0)
		}
	}
	if _dcgbc.TcBorders.Right == nil {
		if _adcad.TblBorders.Right == nil {
			_dcgbc.TcBorders.Right = _cafe(_fcge.TblBorders.Right, _fcge.TblBorders.InsideV, _gafgd == _dfag-1)
		} else {
			_dcgbc.TcBorders.Right = _cafe(_adcad.TblBorders.Right, _adcad.TblBorders.InsideV, _gafgd == _dfag-1)
		}
	}
	if _dcgbc.Shd == nil {
		if _bgbg := _fcge.Shd; _bgbg != nil {
			_dcgbc.Shd = _bgbg
		}
	} else {
		if _fcge.Shd != nil && _dcgbc.Shd.FillAttr == nil {
			_dcgbc.Shd.FillAttr = _fcge.Shd.FillAttr
		}
	}
	if _dcgbc.TcMar == nil {
		if _fcab := _fcge.TblCellMar; _fcab != nil {
			_dcgbc.TcMar = _db.NewCT_TcMar()
			_dcgbc.TcMar.Left = _fcab.Left
		}
	} else {
		if _fcge.TblCellMar != nil && _dcgbc.TcMar.Left == nil {
			_dcgbc.TcMar.Left = _fcge.TblCellMar.Left
		}
	}
	return _dcgbc
}
func _ecg(_bbc, _bfa string, _adg, _cde bool) []*symbol {
	_ebba := []*symbol{}
	for _, _fac := range _bbc {
		_aeab := &symbol{_eeec: string(_fac), _cf: _adg, _fde: _cde, _agad: _bfa}
		_ebba = append(_ebba, _aeab)
	}
	return _ebba
}

type line struct {
	_da   float64
	_dc   float64
	_dce  float64
	_fcf  float64
	_gb   float64
	_afgb []*span
}

func (_daga *convertContext) addAbsoluteRIC(_fef *_db.EG_RunInnerContent, _ede *_db.CT_RPr) bool {
	var _bec, _eeb bool
	_fga := []*symbol{}
	_cefa := false
	if _fef == nil {
		if _daga._dgfg != nil {
			for _, _bfba := range _daga._dgfg._bbea {
				if _gfec, _cgce := _cdab[_bfba]; _cgce {
					_eeb = _daga._dgfg._ggfc
					_daga._dgfg._bbea = string(rune(_gfec))
				}
			}
			_fga = _ecg(_daga._dgfg._bbea, "", true, false)
		}
	} else {
		if _dgce(_fef) {
			return true
		} else if _fef.T != nil && _fef.T.Content != "" {
			_fgg := _fef.T.Content
			if _bgef := _daga._fbac; _bgef != nil && _bgef.IdAttr != nil {
				_cefa = true
				_fga = _ecg(_fgg, _daga._abea.GetTargetByRelId(*_bgef.IdAttr), false, false)
			} else {
				_fga = _ecg(_fgg, "", false, false)
			}
		} else if _bgcc := _fef.EndnoteReference; _bgcc != nil {
			_eeea := _daga._abea.BodySection().X()
			_eeed := _bgcc.IdAttr
			_bedc := _eeed
			_cdbf := _db.ST_NumberFormatLowerRoman
			if _eba := _eeea.EndnotePr; _eba != nil {
				if _bea := _eba.NumFmt; _bea != nil {
					_cdbf = _bea.ValAttr
				}
				if _fcfb := _eba.NumStart; _fcfb != nil {
					_bedc += _fcfb.ValAttr - 1
				}
			}
			_efaa := _fegg(_bedc, _cdbf)
			_faa := _daga._abea.Endnote(_eeed).X()
			if _faa != nil {
				_daga._fdde = append(_daga._fdde, note{_fc: _efaa, _efb: _faa.EG_BlockLevelElts})
				_fga = _ecg(_efaa, "", true, false)
			}
		} else if _ccga := _fef.FootnoteReference; _ccga != nil {
			_bdef := _daga._abea.BodySection().X()
			_fbcf := _ccga.IdAttr
			_daa := _fbcf
			_cbc := _db.ST_NumberFormatDecimal
			if _fab := _bdef.FootnotePr; _fab != nil {
				if _cgdfc := _fab.NumFmt; _cgdfc != nil {
					_cbc = _cgdfc.ValAttr
				}
				if _bcb := _fab.NumStart; _bcb != nil {
					_daa += _bcb.ValAttr - 1
				}
			}
			_cbf := _fegg(_daa, _cbc)
			_fbdd := _daga._abea.Footnote(_fbcf).X()
			if _fbdd != nil {
				_aggc := &note{_fc: _cbf, _efb: _fbdd.EG_BlockLevelElts}
				_cba := [][]*_db.EG_ContentBlockContent{}
				for _, _aeb := range _fbdd.EG_BlockLevelElts {
					_cba = append(_cba, _aeb.EG_ContentBlockContent)
				}
				_eaf := &prefix{_bbea: _cbf}
				_cebf, _dff := _daga.makePdfBlockFromCBCs(_cba, _daga._bage._ec.Right-_daga._bage._ec.Left, _dfaa(1000), nil, true, _eaf)
				if _dff != nil {
					_b.Log.Debug("C\u0061\u006e\u006e\u006f\u0074\u0020c\u006f\u006e\u0076\u0065\u0072\u0074\u0020\u0066\u006fo\u0074\u006e\u006ft\u0065:\u0020\u0025\u0073", _dff)
					return false
				}
				_aggc._gd = _cebf
				_daga._fecf._aae = append(_daga._fecf._aae, _aggc)
				_daga._fecf._fba += _aggc._gd.Height()
				_fga = _ecg(_cbf, "", true, false)
			}
		} else if _gcd := _fef.Drawing; _gcd != nil {
			for _, _gge := range _gcd.Inline {
				if _caf := _gge.Graphic; _caf != nil {
					if _adc := _caf.GraphicData; _adc != nil {
						_edd := _gge.Extent
						if _edd == nil {
							return false
						}
						_fcg := _ef.FromEMU(_edd.CxAttr)
						_bcgc := _ef.FromEMU(_edd.CyAttr)
						for _, _dac := range _adc.Any {
							if _gafgb, _def := _dac.(*_cc.Pic); _def {
								_dee := &symbol{_edgf: _bcgc, _ggf: _fcg}
								_bafa, _fbb := _daga.makePdfImageFromGraphics(_gafgb)
								if _fbb != nil {
									_b.Log.Debug("C\u0061\u006e\u006e\u006ft \u0072e\u0061\u0064\u0020\u0069\u006da\u0067\u0065\u003a\u0020\u0025\u0073", _fbb)
								}
								if _bafa == nil {
									_dee._eeec = "\u0020"
								} else {
									_bafa.Scale(_fcg/_bafa.Width(), _bcgc/_bafa.Height())
									_dee._cgf = _bafa
									_bec = true
								}
								_fga = []*symbol{_dee}
							} else if _fceg, _dfc := _dac.(*_ac.Chart); _dfc {
								_bee := &symbol{_edgf: _bcgc, _ggf: _fcg}
								_bad, _aggf := _daga.makePdfBlockFromChart(_fceg, _fcg, _bcgc)
								if _aggf != nil {
									_b.Log.Debug("C\u0061\u006e\u006e\u006ft \u0072e\u0061\u0064\u0020\u0062\u006co\u0063\u006b\u003a\u0020\u0025\u0073", _aggf)
								}
								if _bad == nil {
									_bee._eeec = "\u0020"
								} else {
									_bee._be = &block{_dcd: _bad}
									_bec = true
								}
								_fga = []*symbol{_bee}
							}
						}
					}
				}
			}
		}
	}
	var _fcaca _c.TextStyle
	var _eggf, _adca bool
	var _dcaf *_c.Color
	if !_bec {
		_fcaca, _eggf, _adca, _dcaf = _daga.makeRunStyle(_ede, false, false, false, _eeb, _cefa)
	}
	for _, _cgfd := range _fga {
		if _cgfd._cgf != nil || _cgfd._be != nil {
			_daga.addInlineSymbol(_cgfd)
		} else {
			_cgfd._gea = &_fcaca
			_cgfd._cf = _eggf
			_cgfd._fde = _adca
			_cgfd._bcg = _dcaf
			_daga.addTextSymbol(_cgfd)
		}
	}
	if _daga._dgfg != nil && _daga._dgfg._eacc {
		var _bbbe, _cbb float64
		for _, _gfg := range _fga {
			_bbbe += _gfg._ggf
		}
		_ceg := 0
		_ffgb := _daga._bage._ec.Left
		_cdfb := len(_daga._dgfg._geab)
		_cfg := _daga._fecf._afg < _bbbe
		_aeag := _daga._edgdg._dc + _bbbe
		for {
			var _geb float64
			if _cfg || _ceg >= _cdfb {
				_geb = _aaaf
			} else {
				_geb = _daga._dgfg._geab[_ceg]
				_ceg++
			}
			_ffgb += _geb
			if _ffgb > _aeag {
				_cbb = _ffgb - _aeag
				break
			}
		}
		_daga.addTextSymbol(&symbol{_eeec: "\u0020", _ggf: _cbb})
	}
	return false
}
func (_fgc *convertContext) determineParagraphBounds() {
	_fgc._fecf._eea = _fgc._bage._ec.Left + _fgc._fecf._eee.Left
	_fgc._fecf._ae = _fgc._fecf._eea + _fgc._fecf._afg
	_fgc._fecf._fb = _fgc._bage._ec.Right - _fgc._fecf._eee.Right
}
func _cbba(_acfb, _cfda *_db.CT_HpsMeasure) float64 {
	var _ffdb float64
	_abg := _eb.DefaultFontSize
	if _acfb != nil {
		_ffdb = float64(*_acfb.ValAttr.ST_UnsignedDecimalNumber)
	} else if _cfda != nil {
		_ffdb = float64(*_cfda.ValAttr.ST_UnsignedDecimalNumber)
	}
	if _ffdb != 0 {
		_abg = _ffdb / 24 * _eb.DefaultFontSize
	}
	return _abg
}

type block struct {
	_dcd  *_c.Block
	_fbe  float64
	_aeef float64
	_adf  bool
	_fec  float64
	_gee  _c.Color
}
type image struct {
	_fe  *_c.Image
	_afc float64
	_bge float64
}

func (_cecg *convertContext) addAnchorExtra(_fbae []*_db.EG_PContent) {
	for _, _bccb := range _fbae {
		for _, _acgdc := range _bccb.EG_ContentRunContent {
			if _edgd := _acgdc.R; _edgd != nil {
				for _, _fdf := range _edgd.Extra {
					if _egc, _eeefd := _fdf.(*_db.AlternateContentRun); _eeefd {
						if _fgfg := _egc.Choice; _fgfg != nil {
							if _fgcc := _fgfg.Drawing; _fgcc != nil {
								for _, _baa := range _fgcc.Anchor {
									var _fdfc, _bacb, _cfa, _cfc float64
									_acfe, _ccb := _baa.PositionH, _baa.PositionV
									if _efbd := _acfe.Choice; _efbd != nil {
										if _efbd.PosOffset != nil {
											_fdfc = _ef.FromEMU(int64(*_efbd.PosOffset))
										}
									}
									if _gbe := _ccb.Choice; _gbe != nil {
										if _gbe.PosOffset != nil {
											_bacb = _ef.FromEMU(int64(*_gbe.PosOffset))
										}
									}
									if _gcad := _baa.Extent; _gcad != nil {
										_cfc = _ef.FromEMU(_gcad.CxAttr)
										_cfa = _ef.FromEMU(_gcad.CyAttr)
									}
									_gga := _cecg._fecf._bb + _bacb
									_dea := _gga + _cfa
									_cfcf := _cecg._fecf._eea + _fdfc
									_cfab := _cfcf + _cfc
									_efge := _bacb + _cfa
									if _efge > _cecg._fecf._gf {
										_cecg._fecf._gf = _efge
									}
									if _baa.Choice != nil && _baa.Choice.WrapNone == nil {
										_cecg._fecf._fdd = append(_cecg._fecf._fdd, &zoneToSkip{_dg: &_eb.Rectangle{Top: _gga, Bottom: _dea, Left: _cfcf, Right: _cfab}, _ge: _baa.Choice})
									}
									if _cdeb := _baa.Graphic; _cdeb != nil {
										if _fega := _cdeb.GraphicData; _fega != nil {
											for _, _cda := range _fega.Any {
												if _ceba, _gbb := _cda.(*_db.WdWsp); _gbb {
													_afd, _aeee := _cecg.makeBlockFromWdWsp(_ceba)
													if _aeee != nil {
														_b.Log.Debug("C\u0061\u006e\u006e\u006ft \u0072e\u0061\u0064\u0020\u0062\u006co\u0063\u006b\u003a\u0020\u0025\u0073", _aeee)
													}
													if _afd != nil {
														_afd._dcd.Scale(_cfc/_afd._dcd.Width(), _cfa/_afd._dcd.Height())
														_afd._fbe = _cfcf
														_afd._aeef = _gga
														if _baa.BehindDocAttr {
															_cecg._fecf._fbg = append(_cecg._fecf._fbg, _afd)
														} else {
															_cecg._fecf._gcb = append(_cecg._fecf._gcb, _afd)
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
func (_dafc *convertContext) addTextSymbol(_gfda *symbol) {
	_bebb := _c.New()
	_ebcb := _bebb.NewStyledParagraph()
	_ebcb.SetMargins(0, 0, 0, 0)
	_gae := _ebcb.Append(_gfda._eeec)
	_gce := 0.0
	if _gfda._gea != nil {
		_gae.Style = *_gfda._gea
		if _gfda._gea.CharSpacing != 0 {
			_gce = _gfda._gea.CharSpacing
		}
	}
	if _gfda._be == nil && _gfda._cgf == nil {
		_gfda._edgf = _ebcb.Height() * 1.2
		_gfda._ca = _ebcb.Height()
	}
	if _gfda._edgf < _dafc._fecf._gcf {
		_gfda._edgf = _dafc._fecf._gcf
	}
	if _gfda._ggf == 0 {
		_gfda._ggf = _ebcb.Width() + _gce
	}
	if len(_dafc._beaa._aee) > 0 {
		_cbbd := _dafc._beaa._aee[len(_dafc._beaa._aee)-1]._eeec
		if _eb.IsNoSpaceLanguage(_cbbd) || (_cbbd == "\u0020") != (_gfda._eeec == "\u0020") {
			_dafc.addCurrentWordToParagraph()
			_dafc.newWord()
		}
	}
	_dafc._beaa._aee = append(_dafc._beaa._aee, _gfda)
	_gfda._fad = _dafc._beaa._agc
	_dafc._beaa._agc += _gfda._ggf
	if _gfda._eeec != "\u0020" {
		_dafc._beaa._aga = false
	}
	if _gfda._eeec == "\u000d" {
		_dafc.adjustHeights(_gfda._edgf * 1.13)
		_dafc.adjustHeights(_gfda._edgf)
	}
}

var _ed = _dfaa(1.9)
var _af = _dfaa(0.25)

type tableWrapper struct {
	_efc *_c.Table
	_aec float64
}

func (_ffce *convertContext) addAbsoluteCRC(_acd []*_db.EG_ContentRunContent, _ccgf *_db.CT_PPr) bool {
	for _, _fdae := range _acd {
		if _efd := _fdae.R; _efd != nil {
			_aaadc := _ecb(_ffce._abea, _efd.RPr, _ccgf)
			if _ffce._dgfg != nil {
				_ffce.addAbsoluteRIC(nil, _aaadc)
				_ffce._dgfg = nil
			}
			for _, _ebb := range _efd.EG_RunInnerContent {
				if _ffce.addAbsoluteRIC(_ebb, _aaadc) {
					return true
				}
			}
			for _, _ebc := range _efd.Extra {
				if _fadg, _fadf := _ebc.(*_db.AlternateContentRun); _fadf {
					if _agf := _fadg.Choice; _agf != nil {
						if _dde := _agf.Drawing; _dde != nil {
							if len(_dde.Inline) > 0 {
								for _, _acde := range _dde.Inline {
									_gff := _acde.Extent
									if _gff == nil {
										return false
									}
									_eac := _ef.FromEMU(_gff.CxAttr)
									_dgf := _ef.FromEMU(_gff.CyAttr)
									if _bdb := _acde.Graphic; _bdb != nil {
										if _beb := _bdb.GraphicData; _beb != nil {
											for _, _fbf := range _beb.Any {
												if _fdg, _agab := _fbf.(*_db.WdWsp); _agab {
													_cggb, _dfa := _ffce.makeBlockFromWdWsp(_fdg)
													if _dfa != nil {
														_b.Log.Debug("C\u0061\u006e\u006e\u006ft \u0072e\u0061\u0064\u0020\u0062\u006co\u0063\u006b\u003a\u0020\u0025\u0073", _dfa)
													}
													if _cggb == nil {
														continue
													}
													_cggb._dcd.Scale(_eac/_cggb._dcd.Width(), _dgf/_cggb._dcd.Height())
													_ffce.addInlineSymbol(&symbol{_edgf: _dgf, _ggf: _eac, _be: _cggb})
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	return false
}
func _aafc(_abaa *_db.CT_PPr, _cbfc *_db.CT_PPrGeneral, _cbbfd *_db.CT_RPr) *_db.CT_PPr {
	if _abaa == nil {
		_abaa = _db.NewCT_PPr()
	}
	if _cbfc != nil {
		if _abaa.Jc == nil && _cbfc.Jc != nil {
			_abaa.Jc = _cbfc.Jc
		}
		if _abaa.Spacing == nil {
			_abaa.Spacing = _cbfc.Spacing
		} else if _cdaag := _cbfc.Spacing; _cdaag != nil {
			if _abaa.Spacing.BeforeAttr == nil {
				_abaa.Spacing.BeforeAttr = _cdaag.BeforeAttr
			}
			if _abaa.Spacing.AfterAttr == nil {
				_abaa.Spacing.AfterAttr = _cdaag.AfterAttr
			}
			if _abaa.Spacing.LineAttr == nil {
				_abaa.Spacing.LineAttr = _cdaag.LineAttr
			}
		}
		if _cbfc.Ind != nil {
			if _abaa.Ind == nil {
				_abaa.Ind = _cbfc.Ind
			} else {
				_cdcd, _eacb := _abaa.Ind.FirstLineAttr == nil, _abaa.Ind.HangingAttr == nil
				if _cdcd && _eacb && _cbfc.Ind.FirstLineAttr != nil {
					_abaa.Ind.FirstLineAttr = _cbfc.Ind.FirstLineAttr
					_cdcd = false
				}
				if _cdcd && _eacb && _cbfc.Ind.HangingAttr != nil {
					_abaa.Ind.HangingAttr = _cbfc.Ind.HangingAttr
				}
				if _abaa.Ind.LeftAttr == nil {
					_abaa.Ind.LeftAttr = _cbfc.Ind.LeftAttr
				}
				if _abaa.Ind.RightAttr == nil {
					_abaa.Ind.RightAttr = _cbfc.Ind.RightAttr
				}
			}
		}
		if _abaa.Tabs == nil && _cbfc.Tabs != nil {
			_abaa.Tabs = _cbfc.Tabs
		}
	}
	if _cbbfd != nil {
		var _aegg _db.CT_ParaRPr
		if _abaa.RPr == nil {
			_aegg = *_db.NewCT_ParaRPr()
		} else {
			_aegg = *_abaa.RPr
		}
		if _aegg.Color == nil && _cbbfd.Color != nil {
			_aegg.Color = _cbbfd.Color
		}
		if _aegg.Spacing == nil && _cbbfd.Spacing != nil {
			_aegg.Spacing = _cbbfd.Spacing
		}
		if _aegg.Sz == nil && _cbbfd.Sz != nil {
			_aegg.Sz = _cbbfd.Sz
		}
		if _aegg.SzCs == nil && _cbbfd.SzCs != nil {
			_aegg.SzCs = _cbbfd.SzCs
		}
		if _aegg.B == nil && _cbbfd.B != nil {
			_aegg.B = _cbbfd.B
		}
		if _aegg.I == nil && _cbbfd.I != nil {
			_aegg.I = _cbbfd.I
		}
		if _aegg.RFonts == nil && _cbbfd.RFonts != nil {
			_aegg.RFonts = _cbbfd.RFonts
		}
		if _aegg.VertAlign == nil && _cbbfd.VertAlign != nil {
			_aegg.VertAlign = _cbbfd.VertAlign
		}
		_abaa.RPr = &_aegg
	}
	return _abaa
}
func (_addf *convertContext) addAbsoluteTable(_bda *_db.CT_Tbl) {
	_abad := _bda.TblGrid
	if _abad == nil {
		return
	}
	_bbg := len(_abad.GridCol)
	if _bbg == 0 {
		return
	}
	_ebg := []float64{}
	_ddac := []float64{}
	_cccc := 0.0
	for _, _cbcb := range _abad.GridCol {
		_fdaf := 0.0
		if _cbcb.WAttr.ST_UnsignedDecimalNumber != nil {
			_fdaf = _eb.PointsFromTwips(int64(*_cbcb.WAttr.ST_UnsignedDecimalNumber))
		}
		_ebg = append(_ebg, _fdaf)
		_cccc += _fdaf
	}
	for _ebgg := 0; _ebgg < _bbg; _ebgg++ {
		_ddac = append(_ddac, _ebg[_ebgg]/_cccc)
	}
	_dfd := _addf._bcba.NewTable(_bbg)
	_dfd.SetColumnWidths(_ddac...)
	_ecec := _addf._bcba.NewTable(_bbg)
	_ecec.SetColumnWidths(_ddac...)
	_gcbg := _fgff(_addf._abea, _bda.TblPr)
	_ccf := _dcad(_gcbg.TblW, _addf._bage._ec.Right-_addf._bage._ec.Left, 0)
	_cgba := _dcad(_gcbg.TblInd, _addf._bage._ec.Right-_addf._bage._ec.Left, 0)
	_eafb := _addf._bage._ec.Bottom - _addf._fecf._bb
	_cgfda := len(_bda.EG_ContentRowContent)
	for _gaeg, _cce := range _bda.EG_ContentRowContent {
		if _cce == nil {
			continue
		}
		_fcgf := _addf._bcba.NewTable(_bbg)
		_fcgf.SetColumnWidths(_ddac...)
		if _cbeb := _cce.Tr; len(_cbeb) > 0 {
			_beeg := _cbeb[0]
			_adbe := _beeg.TblPrEx
			for _acfga, _agcga := range _beeg.EG_ContentCellContent {
				if _gabf := _agcga.Tc; len(_gabf) > 0 {
					if _cfd := _gabf[0]; _cfd != nil {
						_addf.addCellToTable(_ecec, _cfd, _gcbg, _adbe, _gaeg, _acfga, _cgfda, _bbg)
						_addf.addCellToTable(_fcgf, _cfd, _gcbg, _adbe, _gaeg, _acfga, _cgfda, _bbg)
					}
				}
			}
			var _ggfd float64
			if _ggd := _beeg.TrPr; _ggd != nil {
				if len(_ggd.TrHeight) != 0 {
					_aegb := _ggd.TrHeight[0]
					if _aad := _aegb.ValAttr; _aad != nil {
						if _aad.ST_UnsignedDecimalNumber != nil {
							_ggfd = _eb.PointsFromTwips(int64(*_aad.ST_UnsignedDecimalNumber))
						}
					}
				}
			}
			if _ggfd < _fcgf.Height() {
				_ggfd = _fcgf.Height()
			}
			if _ggfd < _dfaa(4) {
				_ggfd = _dfaa(4)
			}
			_ecec.SetRowHeight(_ecec.CurRow(), _ggfd)
			_fcgf.SetRowHeight(_fcgf.CurRow(), _ggfd)
			if _ccf == 0 {
				_ccf = _addf._bage._ec.Right - _addf._bage._ec.Left
			}
			_bfae := _eb.MakeTempCreator(_ccf, _dfaa(1000))
			_bfae.Draw(_ecec)
			if _ecec.Height() >= _eafb {
				_addf.addParagraphWithTable(*_dfd, _ccf, _cgba)
				_addf.newPage()
				*_ecec = *_fcgf
				_ecec.SetRowHeight(_ecec.CurRow(), _ggfd)
				_eafb = _addf._bage._ec.Bottom - _addf._bage._ec.Top
				_dfd = nil
			} else {
				if _dfd == nil {
					_dfd = _addf._bcba.NewTable(_bbg)
					_dfd.SetColumnWidths(_ddac...)
				}
				*_dfd = *_ecec
			}
		}
	}
	if _dfd != nil {
		_addf.addParagraphWithTable(*_dfd, _ccf, _cgba)
	}
}

// FontStyle represents a kind of font styling. It can be FontStyle_Regular, FontStyle_Bold, FontStyle_Italic and FontStyle_BoldItalic.
type FontStyle = _eb.FontStyle

func (_gdc *convertContext) addRelativeCBCs(_egdf []*_db.EG_ContentBlockContent) {
	for _, _egeb := range _egdf {
		_gdc.addHdrFtr(_egeb.P)
	}
}
func _dcad(_gffc *_db.CT_TblWidth, _adcg, _gadf float64) float64 {
	if _gffc != nil {
		if _dafe := _gffc.WAttr; _dafe != nil {
			if _gbeb := _dafe.ST_DecimalNumberOrPercent; _gbeb != nil {
				if _gdfae := _gbeb.ST_UnqualifiedPercentage; _gdfae != nil {
					switch _gffc.TypeAttr {
					case _db.ST_TblWidthDxa:
						return float64(*_gdfae) / 56.7
					case _db.ST_TblWidthPct:
						return float64(*_gdfae) / 100 * _adcg
					default:
						return _gadf
					}
				}
			}
		}
	}
	return _gadf
}
func _cdac(_eaad int, _gaeaf bool) string {
	_fcdc := (_eaad-1)/26 + 1
	_efcf := byte((_eaad - 1) % 26)
	if _gaeaf {
		_efcf += byte(65)
	} else {
		_efcf += byte(97)
	}
	_cggbf := _gg.NewBuffer([]byte{})
	for _deca := 0; _deca < _fcdc; _deca++ {
		_cggbf.Write([]byte{_efcf})
	}
	return _cggbf.String()
}
func (_gccgf *convertContext) makeRunStyle(_adgg *_db.CT_RPr, _fecb, _dgfc, _dgad, _eddc, _cgdfg bool) (_c.TextStyle, bool, bool, *_c.Color) {
	var _eedc *_c.Color
	_fbee := _gccgf._bcba.NewTextStyle()
	if _adgg != nil {
		_bbcc := _eb.FontStyle_Regular
		_efcb := _gcfgg(_adgg.B)
		_cfdg := _gcfgg(_adgg.I)
		if _efcb && _cfdg {
			_bbcc = _eb.FontStyle_BoldItalic
		} else if _efcb {
			_bbcc = _eb.FontStyle_Bold
		} else if _cfdg {
			_bbcc = _eb.FontStyle_Italic
		}
		if _eddc {
			_fbee.Font = _eb.AssignStdFontByName(_fbee, "\u0053\u0079\u006d\u0062\u006f\u006c")
		} else {
			_ddeb := "\u0064e\u0066\u0061\u0075\u006c\u0074"
			if _deeg := _adgg.RFonts; _deeg != nil {
				if _ecddc := _deeg.AsciiAttr; _ecddc != nil {
					_ddeb = *_ecddc
				} else if _fbef := _deeg.HAnsiAttr; _fbef != nil {
					_ddeb = *_fbef
				} else {
					_baad := _gccgf._aagf
					if _baad != nil {
						if _fcbaa := _baad.RFonts; _fcbaa != nil {
							if _gedb := _deeg.HintAttr; _gedb == _db.ST_HintEastAsia {
								if _fcbaa.EastAsiaAttr != nil {
									_ddeb = *_baad.RFonts.EastAsiaAttr
								}
							} else {
								if _fdffe := _fcbaa.AsciiAttr; _fdffe != nil {
									_ddeb = *_fdffe
								} else if _geae := _fcbaa.HAnsiAttr; _geae != nil {
									_ddeb = *_geae
								}
							}
						}
					}
				}
			}
			if _fcbe, _dgfgf := _eb.StdFontsMap[_ddeb]; _dgfgf {
				_fbee.Font = _eb.AssignStdFontByName(_fbee, _fcbe[_bbcc])
			} else if _bedf := _eb.GetRegisteredFont(_ddeb, _bbcc); _bedf != nil {
				_fbee.Font = _bedf
			} else {
				_b.Log.Debug("\u0046\u006f\u006e\u0074\u0020\u0025\u0073\u0020\u0077\u0069\u0074h\u0020\u0073\u0074\u0079\u006c\u0065\u0020\u0025s\u0020i\u0073\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064\u002c\u0020\u0072\u0065\u0073\u0065\u0074 \u0074\u006f\u0020\u0064\u0065\u0066\u0061\u0075\u006c\u0074\u002e", _ddeb, _bbcc)
				_fbee.Font = _eb.AssignStdFontByName(_fbee, _eb.StdFontsMap["\u0064e\u0066\u0061\u0075\u006c\u0074"][_bbcc])
			}
		}
		_egbga := _cbba(_adgg.Sz, _adgg.SzCs)
		if _bbff := _adgg.VertAlign; _bbff != nil {
			_aeaf := _bbff.ValAttr
			_fecb = _aeaf == _de.ST_VerticalAlignRunSuperscript
			_dgfc = _aeaf == _de.ST_VerticalAlignRunSubscript
		}
		if _egbga > _gccgf._baca {
			_gccgf._baca = _egbga
		}
		if _fecb || _dgfc {
			_egbga *= 0.64
		}
		if _dgad {
			if _fecb {
				_fbee.TextRise = 1.5
			}
			if _dgfc {
				_fbee.TextRise = -1.5
			}
		}
		_fbee.FontSize = _egbga
		_ffgc := 0.0
		if _cgdd := _adgg.Spacing; _cgdd != nil {
			_ffgc = _eb.PointsFromTwips(*_cgdd.ValAttr.Int64)
		}
		_fbee.CharSpacing = _ffgc
		_feff := _c.ColorBlack
		if _adgg.Color != nil {
			_abac := _adgg.Color.ValAttr.ST_HexColorRGB
			if _abac != nil {
				_feff = _c.ColorRGBFromHex("\u0023" + *_abac)
			}
		}
		if _dgad {
			_fddc, _geaag, _fcce := _feff.ToRGB()
			_fddc, _geaag, _fcce = _eb.Lighten(_fddc), _eb.Lighten(_geaag), _eb.Lighten(_fcce)
			_feff = _c.ColorRGBFromArithmetic(_fddc, _geaag, _fcce)
		}
		_fbee.Color = _feff
		if _cgdfg {
			_eedc = &_feff
		}
		if _adgg.U != nil && _adgg.U.ValAttr != _db.ST_UnderlineNone && !_eddc {
			_eedc = &_feff
			if _cfbc := _adgg.U.ColorAttr; _cfbc != nil {
				if _cfcad := _cfbc.ST_HexColorRGB; _cfcad != nil {
					_baae := _c.ColorRGBFromHex("\u0023" + *_cfcad)
					_eedc = &_baae
				}
			}
		}
	}
	return _fbee, _fecb, _dgfc, _eedc
}
func (_dgc *convertContext) addHdrFtr(_cfcc []*_db.CT_P) {
	for _, _gec := range _cfcc {
		_gdgd := _dgc._bcba.NewStyledParagraph()
		_dgc._bgda = _gdgd
		_bacab, _gdfa := _dgc.combinePPrWithStyles(_gec.PPr)
		_cac, _aagbe := _dgc.assignPropsToRelativeParagraph(_bacab, _gdgd)
		_dgc.addRelativeEGPC(_gec.EG_PContent, _bacab, _gdfa)
		if _dgc._gabdg {
			_dgc._bcba.DrawHeader(func(_gefb *_c.Block, _gcbb _c.HeaderFunctionArgs) {
				_gdgd.SetPos(_dgc._dafcd+_aagbe, _cac+_dgc._cbbb)
				_gefb.Draw(_gdgd)
			})
		} else if _dgc._aagc {
			_dgc._bcba.DrawFooter(func(_afgbe *_c.Block, _gfbe _c.FooterFunctionArgs) {
				_gdgd.SetPos(_dgc._dafcd+_aagbe, _cac+_dgc._gbgb-_dgc._baca)
				_afgbe.Draw(_gdgd)
			})
		}
	}
}
func (_dfdc *convertContext) getStyleProps(_dabe string) (*_db.CT_PPrGeneral, *_db.CT_RPr) {
	var _gcef *_db.CT_PPrGeneral
	var _fcba *_db.CT_RPr
	_eefd := _dfdc._abea.GetStyleByID(_dabe)
	if _gefg := _eefd.X(); _gefg != nil {
		_gcef = _gefg.PPr
		_fcba = _gefg.RPr
		if _cacg := _gefg.BasedOn; _cacg != nil {
			_aacf, _fadfcg := _dfdc.getStyleProps(_cacg.ValAttr)
			_gcef = _febb(_gcef, _aacf)
			_fcba = _fagf(_fcba, _fadfcg)
		}
	}
	return _gcef, _fcba
}
func (_becg *convertContext) makePdfBlockFromCBCs(_aeae [][]*_db.EG_ContentBlockContent, _fbgc, _cfb float64, _afe *_eb.Rectangle, _dfdcb bool, _agea *prefix) (*_c.Block, error) {
	if _afe == nil {
		_afe = &_eb.Rectangle{}
	}
	_ebd := &_eb.Rectangle{Top: _afe.Top, Bottom: _cfb - _afe.Bottom, Left: _afe.Left, Right: _fbgc - _afe.Right}
	_gfbg := _eb.MakeTempCreator(_fbgc, _cfb)
	_aef := &convertContext{_bcba: _gfbg, _abea: _becg._abea, _cabc: _ebd, _dgfg: _agea}
	for _, _dgd := range _aeae {
		_aef.addAbsoluteCBCs(_dgd)
	}
	if _dfdcb {
		_fgbe := 0.0
		for _, _dbff := range _aef._acab {
			for _, _ecdd := range _dbff._ad {
				_fgbe += (_ecdd._gc + _ecdd._eee.Top + _ecdd._eee.Bottom)
			}
		}
		_ebd.Bottom = _fgbe - _afe.Bottom
		_gfbg = _eb.MakeTempCreator(_fbgc, _fgbe)
		_aef = &convertContext{_bcba: _gfbg, _abea: _becg._abea, _cabc: _ebd, _dgfg: _agea}
		for _, _adddg := range _aeae {
			_aef.addAbsoluteCBCs(_adddg)
		}
	}
	_aef.alignSymbolsVertically()
	_aef._bcba.NewPage()
	_aef.drawPage(_aef._acab[len(_aef._acab)-1])
	return _eb.MakeBlockFromCreator(_gfbg)
}
func _fegg(_dgb int64, _dcgf _db.ST_NumberFormat) string {
	_cfca := int(_dgb)
	switch _dcgf {
	case _db.ST_NumberFormatDecimal:
		return _e.Itoa(_cfca)
	case _db.ST_NumberFormatUpperRoman:
		return _fdbe(_cfca, true)
	case _db.ST_NumberFormatLowerRoman:
		return _fdbe(_cfca, false)
	case _db.ST_NumberFormatUpperLetter:
		return _cdac(_cfca, true)
	case _db.ST_NumberFormatLowerLetter:
		return _cdac(_cfca, false)
	default:
		return _e.Itoa(_cfca)
	}
}
func (_afac *convertContext) newWord() { _afac._beaa = &word{_aga: true, _bbf: _afac._edgdg._fcf} }
func _cafe(_dgab, _geegf *_db.CT_Border, _adgf bool) *_db.CT_Border {
	if _adgf {
		return _dgab
	}
	return _geegf
}
func (_cbfg *convertContext) addCellToTable(_dced *_c.Table, _ggbg *_db.CT_Tc, _geaa *_db.CT_TblPr, _fadfc *_db.CT_TblPrEx, _effe, _egff, _cfag, _deg int) {
	var _afda *_c.TableCell
	_dcdg := 1
	_agecf := _bdac(_geaa, _fadfc, _ggbg.TcPr, _effe, _egff, _cfag, _deg)
	_cega := _ed
	_bgf := _c.CellVerticalAlignmentTop
	if _agecf != nil {
		if _agecf.GridSpan != nil {
			_dcdg = int(_agecf.GridSpan.ValAttr)
		}
		_afda = _dced.MultiColCell(_dcdg)
		if _cbcd := _agecf.TcBorders; _cbcd != nil {
			if _ead := _cbcd.Left; _ead != nil {
				_cae, _agee, _dcga := _dddd(_ead)
				_afda.SetBorder(_c.CellBorderSideLeft, _cae, _dcga)
				if _agee != nil && *_agee != nil {
					_afda.SetSideBorderColor(_c.CellBorderSideLeft, *_agee)
				}
			}
			if _gdf := _cbcd.Top; _gdf != nil {
				_agfg, _becb, _gdfb := _dddd(_gdf)
				_afda.SetBorder(_c.CellBorderSideTop, _agfg, _gdfb)
				if _becb != nil && *_becb != nil {
					_afda.SetSideBorderColor(_c.CellBorderSideTop, *_becb)
				}
			}
			if _aaadf := _cbcd.Right; _aaadf != nil {
				_bfad, _gda, _ffa := _dddd(_aaadf)
				_afda.SetBorder(_c.CellBorderSideRight, _bfad, _ffa)
				if _gda != nil && *_gda != nil {
					_afda.SetSideBorderColor(_c.CellBorderSideRight, *_gda)
				}
			}
			if _dfdf := _cbcd.Bottom; _dfdf != nil {
				_ggfb, _eggb, _cad := _dddd(_dfdf)
				_afda.SetBorder(_c.CellBorderSideBottom, _ggfb, _cad)
				if _eggb != nil && *_eggb != nil {
					_afda.SetSideBorderColor(_c.CellBorderSideBottom, *_eggb)
				}
			}
		} else {
			_afda.SetBorder(_c.CellBorderSideAll, _c.CellBorderStyleSingle, _dfaa(0.125))
			_afda.SetBorderColor(_c.ColorBlack)
		}
		if _abeg := _agecf.Shd; _abeg != nil {
			if _ddec := _abeg.FillAttr; _ddec != nil {
				if _bbbed := _ddec.ST_HexColorRGB; _bbbed != nil {
					_bbdf := _c.ColorRGBFromHex("\u0023" + *_bbbed)
					_afda.SetBackgroundColor(_bbdf)
				}
			}
		}
		if _fccc := _agecf.TcMar; _fccc != nil {
			_cega = _dcad(_fccc.Left, 0, _ed)
		}
		if _ecd := _agecf.VAlign; _ecd != nil {
			switch _ecd.ValAttr {
			case _db.ST_VerticalJcCenter:
				_bgf = _c.CellVerticalAlignmentMiddle
			case _db.ST_VerticalJcBottom:
				_bgf = _c.CellVerticalAlignmentBottom
			}
		}
	}
	if _afda == nil {
		_afda = _dced.NewCell()
	}
	_afda.SetVerticalAlignment(_bgf)
	_afda.SetIndent(_cega)
	_ace := _ggbg.EG_BlockLevelElts
	_ade := _cbfg._bcba.NewStyledParagraph()
	_aaadfb := false
	for _, _eacf := range _ace {
		for _, _dfb := range _eacf.EG_ContentBlockContent {
			for _, _ggfg := range _dfb.P {
				if _aaadfb {
					_fegaf := _ade.Append("\u000a")
					_aggfe := _cbfg._bcba.NewTextStyle()
					_aggfe.FontSize = 0
					_fegaf.Style = _aggfe
				}
				_gba, _ := _cbfg.combinePPrWithStyles(_ggfg.PPr)
				for _, _faff := range _ggfg.EG_PContent {
					for _, _efgg := range _faff.EG_ContentRunContent {
						if _gbg := _efgg.R; _gbg != nil {
							_cfaf := _ecb(_cbfg._abea, _gbg.RPr, _gba)
							for _, _edb := range _gbg.EG_RunInnerContent {
								var _bcec *_c.TextChunk
								if _edb.T != nil && _edb.T.Content != "" {
									_aaadfb = true
									_bcec = _ade.Append(_edb.T.Content)
									_bcec.Style, _, _, _ = _cbfg.makeRunStyle(_cfaf, false, false, false, false, false)
								}
							}
						}
					}
				}
				if !_aaadfb {
					_ecf := _ecb(_cbfg._abea, _db.NewCT_RPr(), _gba)
					_agfa := _ade.Append("\u0020")
					_agfa.Style, _, _, _ = _cbfg.makeRunStyle(_ecf, false, false, false, false, false)
				}
				if _ade != nil {
					_cbfg.assignPropsToRelativeParagraph(_gba, _ade)
				}
			}
		}
	}
	_afda.SetContent(_ade)
}
func (_eagb *convertContext) moveCurrentParagraphToNewPage() {
	_eagb.newPage()
	_edba := _eagb._fecf._bb - _eagb._bage._ee
	_eagb._fecf._bb -= _edba
	for _, _cbcf := range _eagb._fecf._fdd {
		_cbcf._dg.Translate(0, -_edba)
	}
	for _, _dggc := range _eagb._fecf._gcb {
		_dggc._aeef -= _edba
	}
	for _, _fabd := range _eagb._fecf._fbg {
		_fabd._aeef -= _edba
	}
	for _, _fea := range _eagb._fecf._ea {
		_fea._bge -= _edba
	}
	for _, _abaf := range _eagb._fecf._eag {
		_abaf._bge -= _edba
	}
}

var _cdab = map[int32]int32{61623: 8226, 61607: 8226, 61558: 9830, 61656: 8594, 61692: 8730}

func (_cgbd *convertContext) makePdfImageFromGraphics(_dbg *_cc.Pic) (*_c.Image, error) {
	if _fgeb := _dbg.BlipFill; _fgeb != nil {
		if _cfce := _fgeb.Blip; _cfce != nil {
			if _ddge := _cfce.EmbedAttr; _ddge != nil {
				_deae, _ddda := _cgbd._abea.GetImageObjByRelId(*_ddge)
				if _ddda != nil {
					return nil, _ddda
				}
				_gaga, _ddda := _d.Open(_deae.Path)
				if _ddda != nil {
					return nil, _ddda
				}
				_afb, _ddda := _a.ReadAll(_gaga)
				if _ddda != nil {
					return nil, _ddda
				}
				_bdada, _ddda := _cgbd._bcba.NewImageFromData(_afb)
				if _ddda != nil {
					return nil, _ddda
				}
				return _bdada, nil
			}
		}
	}
	return nil, nil
}

type romanMatch struct {
	_edea int
	_gbaf string
}

func (_dca *convertContext) addAbsoluteEGPC(_fcb []*_db.EG_PContent, _cdde *_db.CT_PPr) bool {
	for _, _cdcc := range _fcb {
		for _, _bfb := range _cdcc.FldSimple {
			if _bfb != nil {
				_dca.addAbsoluteEGPC(_bfb.EG_PContent, _cdde)
			}
		}
		if _baf := _cdcc.Hyperlink; _baf != nil {
			_dca._fbac = _baf
			_dca.addAbsoluteCRC(_baf.EG_ContentRunContent, _cdde)
		}
		_dca._fbac = nil
		if _dca.addAbsoluteCRC(_cdcc.EG_ContentRunContent, _cdde) {
			return true
		}
	}
	return false
}

type span struct {
	_fa  float64
	_acg float64
	_aeg []*word
}

func (_gcee *convertContext) newLine() {
	if _gcee._fecf == nil {
		_gcee.newParagraph()
	}
	_bbfc := _gcee._fecf._gc + _gcee._fecf._eee.Top
	_bbfg := &line{}
	if len(_gcee._fecf._ga) == 0 {
		_bbfg._dc = _gcee._fecf._ae
	} else {
		_bbfg._dc = _gcee._fecf._eea
	}
	_bbfg._dce = _gcee._fecf._fb
	_bbfg._fcf = _bbfg._dc
	_bbfg._da = _bbfc
	_gcee._fecf._ga = append(_gcee._fecf._ga, _bbfg)
	_gcee._edgdg = _bbfg
	_gcee.newSpan()
}
func (_fabb *convertContext) assignPropsToRelativeParagraph(_daaa *_db.CT_PPr, _bdad *_c.StyledParagraph) (float64, float64) {
	_daaa = _aafc(_daaa, _fabb._fdea, _fabb._aagf)
	_bgdb := 1.1
	if _daaa == nil {
		_bdad.SetLineHeight(_bgdb)
		return 0, 0
	}
	if _daaa.Jc != nil {
		var _bcca _c.TextAlignment
		switch _daaa.Jc.ValAttr {
		case _db.ST_JcRight:
			_bcca = _c.TextAlignmentRight
		case _db.ST_JcCenter:
			_bcca = _c.TextAlignmentCenter
		case _db.ST_JcBoth:
			_bcca = _c.TextAlignmentJustify
		default:
			_bcca = _c.TextAlignmentLeft
		}
		_bdad.SetTextAlignment(_bcca)
	}
	var _cadc, _bcab, _gcaf, _fbbc float64
	if _eggc := _daaa.Spacing; _eggc != nil {
		if _cage := _eggc.BeforeAttr; _cage != nil {
			if _cage.ST_UnsignedDecimalNumber != nil {
				_cadc = _eb.PointsFromTwips(int64(*_cage.ST_UnsignedDecimalNumber))
			}
		}
		if _dcgb := _eggc.AfterAttr; _dcgb != nil {
			if _dcgb.ST_UnsignedDecimalNumber != nil {
				_bcab = _eb.PointsFromTwips(int64(*_dcgb.ST_UnsignedDecimalNumber))
			}
		}
		if _ebbg := _eggc.LineAttr; _ebbg != nil {
			if _ebbg.Int64 != nil {
				_bgdb = float64(*_ebbg.Int64 / 240)
			}
		}
	}
	_bdad.SetLineHeight(_bgdb)
	if _faad := _daaa.Ind; _faad != nil {
		if _gdg := _faad.LeftAttr; _gdg != nil {
			if _gdg.Int64 != nil {
				_gcaf = _eb.PointsFromTwips(*_gdg.Int64)
			}
		}
		if _gfgd := _faad.RightAttr; _gfgd != nil {
			if _gfgd.Int64 != nil {
				_fbbc = _eb.PointsFromTwips(*_gfgd.Int64)
			}
		}
	}
	_bdad.SetMargins(_gcaf, _fbbc, _cadc-_bgdb/2, _bcab+_bgdb/2)
	return _cadc, _gcaf
}

type zoneToSkip struct {
	_dg *_eb.Rectangle
	_ge *_db.WdEG_WrapTypeChoice
}

func (_baga *convertContext) assignPropsToAbsoluteParagraph(_bada *_db.CT_PPr, _eceb *paragraph) (float64, float64) {
	_bada = _aafc(_bada, _baga._fdea, _baga._aagf)
	_bagd := 12.4
	if _bada == nil {
		return 0, 0
	}
	if _cgdc := _bada.RPr; _cgdc != nil {
		_gcc := _cbba(_cgdc.Sz, _cgdc.SzCs)
		if _bagd <= _gcc {
			_bagd = _gcc
		}
	}
	if _bada.Jc != nil {
		switch _bada.Jc.ValAttr {
		case _db.ST_JcRight:
			_eceb._ece = _c.TextAlignmentRight
		case _db.ST_JcCenter:
			_eceb._ece = _c.TextAlignmentCenter
		case _db.ST_JcBoth:
			_eceb._ece = _c.TextAlignmentJustify
		default:
			_eceb._ece = _c.TextAlignmentLeft
		}
	}
	var _gdb, _dcda, _acgda, _bbed, _dded float64
	if _ggdd := _bada.Spacing; _ggdd != nil {
		if _gbc := _ggdd.BeforeAttr; _gbc != nil {
			if _gbc.ST_UnsignedDecimalNumber != nil {
				_gdb = _eb.PointsFromTwips(int64(*_gbc.ST_UnsignedDecimalNumber))
			}
		}
		if _caeb := _ggdd.AfterAttr; _caeb != nil {
			if _caeb.ST_UnsignedDecimalNumber != nil {
				_dcda = _eb.PointsFromTwips(int64(*_caeb.ST_UnsignedDecimalNumber))
			}
		}
		if _cfgc := _ggdd.LineAttr; _cfgc != nil {
			if _cfgc.Int64 != nil && *_cfgc.Int64 != 0 {
				_bagd = float64(*_cfgc.Int64) / 20
			}
		}
	}
	_eceb._gcf = _bagd
	if _ccdd := _bada.Ind; _ccdd != nil {
		if _gef := _ccdd.FirstLineAttr; _gef != nil {
			if _gef.ST_UnsignedDecimalNumber != nil {
				_dded = _eb.PointsFromTwips(int64(*_gef.ST_UnsignedDecimalNumber))
			}
		}
		if _gbgd := _ccdd.HangingAttr; _gbgd != nil {
			if _gbgd.ST_UnsignedDecimalNumber != nil {
				_dded -= _eb.PointsFromTwips(int64(*_gbgd.ST_UnsignedDecimalNumber))
			}
		}
		if _bfd := _ccdd.LeftAttr; _bfd != nil {
			if _bfd.Int64 != nil {
				_acgda = _eb.PointsFromTwips(*_bfd.Int64)
			}
		}
		if _fbdg := _ccdd.RightAttr; _fbdg != nil {
			if _fbdg.Int64 != nil {
				_bbed = _eb.PointsFromTwips(*_fbdg.Int64)
			}
		}
	}
	_addd := _baga._bage._ad
	if len(_addd) > 0 {
		_gdb -= _addd[len(_addd)-1]._eee.Bottom
		if _gdb < 0 {
			_gdb = 0
		}
	}
	_eceb._eee = &_eb.Rectangle{Top: _gdb, Bottom: _dcda, Left: _acgda, Right: _bbed}
	_eceb._afg = _dded
	return _gdb, _acgda
}
func (_egfe *convertContext) addAnchorBlocks(_bfbg []*_db.EG_PContent) {
	for _, _ffga := range _bfbg {
		for _, _abe := range _ffga.EG_ContentRunContent {
			if _geea := _abe.R; _geea != nil {
				for _, _aegd := range _geea.EG_RunInnerContent {
					if _acgd := _aegd.Drawing; _acgd != nil {
						for _, _bbbd := range _acgd.Anchor {
							var _efgb, _fcac, _fddb, _aeefb float64
							_eeecb, _aca := _bbbd.PositionH, _bbbd.PositionV
							if _fcc := _eeecb.Choice; _fcc != nil {
								if _fcc.PosOffset != nil {
									_efgb = _ef.FromEMU(int64(*_fcc.PosOffset))
								}
							}
							if _gcaa := _aca.Choice; _gcaa != nil {
								if _gcaa.PosOffset != nil {
									_fcac = _ef.FromEMU(int64(*_gcaa.PosOffset))
								}
							}
							if _gfeb := _bbbd.Extent; _gfeb != nil {
								_aeefb = _ef.FromEMU(_gfeb.CxAttr)
								_fddb = _ef.FromEMU(_gfeb.CyAttr)
							}
							_bcf := _egfe._fecf._bb + _fcac
							_dcb := _bcf + _fddb
							_ccd := _egfe._fecf._eea + _efgb
							_ddc := _ccd + _aeefb
							_fcd := _fcac + _fddb
							if _fcd > _egfe._fecf._gf {
								_egfe._fecf._gf = _fcd
							}
							if _bbbd.Choice != nil && _bbbd.Choice.WrapNone == nil {
								_egfe._fecf._fdd = append(_egfe._fecf._fdd, &zoneToSkip{_dg: &_eb.Rectangle{Top: _bcf, Bottom: _dcb, Left: _ccd, Right: _ddc}, _ge: _bbbd.Choice})
							}
							if _fgfa := _bbbd.Graphic; _fgfa != nil {
								if _dfe := _fgfa.GraphicData; _dfe != nil {
									for _, _efgd := range _dfe.Any {
										if _aba, _eeef := _efgd.(*_cc.Pic); _eeef {
											_ffb, _ged := _egfe.makePdfImageFromGraphics(_aba)
											if _ged != nil {
												_b.Log.Debug("C\u0061\u006e\u006e\u006ft \u0072e\u0061\u0064\u0020\u0069\u006da\u0067\u0065\u003a\u0020\u0025\u0073", _ged)
											}
											if _ffb != nil {
												_ffb.Scale(_aeefb/_ffb.Width(), _fddb/_ffb.Height())
												_bce := &image{_fe: _ffb, _afc: _ccd, _bge: _bcf}
												if _bbbd.BehindDocAttr {
													_egfe._fecf._eag = append(_egfe._fecf._eag, _bce)
												} else {
													_egfe._fecf._ea = append(_egfe._fecf._ea, _bce)
												}
											}
										} else if _agg, _eaa := _efgd.(*_ac.Chart); _eaa {
											_beff, _ccdg := _egfe.makePdfBlockFromChart(_agg, _aeefb, _fddb)
											if _ccdg != nil {
												_b.Log.Debug("C\u0061\u006e\u006e\u006ft \u0072e\u0061\u0064\u0020\u0062\u006co\u0063\u006b\u003a\u0020\u0025\u0073", _ccdg)
											}
											if _beff != nil {
												_fcef := &block{_dcd: _beff, _fbe: _ccd, _aeef: _bcf}
												if _bbbd.BehindDocAttr {
													_egfe._fecf._fbg = append(_egfe._fecf._fbg, _fcef)
												} else {
													_egfe._fecf._gcb = append(_egfe._fecf._gcb, _fcef)
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
func (_dfce *convertContext) addParagraphWithTable(_dfea _c.Table, _edcb, _aafd float64) {
	_dfce.newParagraph()
	_dfce._fecf._eee = &_eb.Rectangle{Top: _dfaa(2), Bottom: _dfaa(2), Left: 0, Right: 0}
	_dfce._fecf._cd = &tableWrapper{_efc: &_dfea, _aec: _edcb}
	_dfce._fecf._afg = _aafd
	_dfce._fecf._gc = _dfea.Height()
	_dfce.determineParagraphBounds()
	_dfce.addCurrentParagraphToCurrentPage()
}
func _fdbe(_faaa int, _cebg bool) string {
	_adddf := _gg.NewBuffer([]byte{})
	for _, _cdfg := range _dab {
		for {
			if _faaa < _cdfg._edea {
				break
			}
			_adddf.WriteString(_cdfg._gbaf)
			_faaa -= _cdfg._edea
		}
	}
	_efcc := _adddf.String()
	if _cebg {
		_efcc = _f.ToUpper(_efcc)
	}
	return _efcc
}
func (_df *convertContext) drawPage(_dgg *page) {
	if _dgg._bg {
		_gag := _dgg._ec.Top + _efg*_aa
		_eg := _dgg._ec.Left
		_dbd := _dgg._ec.Right
		_eb.DrawLine(_df._bcba, _eg, _gag, _dbd, _gag, _af, _c.ColorBlack)
	}
	for _, _aaea := range _dgg._ce {
		_add(_df._bcba, _aaea)
	}
	for _, _ba := range _dgg._edg {
		_bd(_df._bcba, _ba)
	}
	for _, _cgb := range _dgg._ad {
		if _cgb._edf {
			_bgeb := _cgb._bb + _efg*_aa
			_daf := _dgg._ec.Left
			_cdc := _daf + _dfaa(50)
			_eb.DrawLine(_df._bcba, _daf, _bgeb, _cdc, _bgeb, _af, _c.ColorBlack)
		} else {
			for _, _eda := range _cgb._ga {
				for _, _dag := range _eda._afgb {
					for _, _bf := range _dag._aeg {
						for _, _fdb := range _bf._aee {
							if _fdb._cgf != nil {
								_fdb._cgf.SetPos(_bf._bbf+_fdb._fad, _cgb._bb+_eda._da)
								_df._bcba.Draw(_fdb._cgf)
							} else if _fdb._be != nil {
								_fdb._be._fbe = _bf._bbf + _fdb._fad
								_fdb._be._aeef = _cgb._bb + _eda._da
								_bd(_df._bcba, _fdb._be)
							} else {
								_dd := _df._bcba.NewStyledParagraph()
								if _fdb._cf {
									_fdb._bc = 0
								} else if _fdb._fde {
									_fdb._bc = 1.2*_eda._gb - _fdb._edgf
								}
								_cge := _bf._bbf + _fdb._fad
								_agec := _cgb._bb + _eda._da + _fdb._bc
								_dd.SetPos(_cge, _agec)
								var _feg *_c.TextChunk
								if _fdb._agad != "" {
									_feg = _dd.AddExternalLink(_fdb._eeec, _fdb._agad)
								} else {
									_feg = _dd.Append(_fdb._eeec)
								}
								if _fdb._gea != nil {
									_feg.Style = *_fdb._gea
								}
								_df._bcba.Draw(_dd)
								if _fdb._bcg != nil {
									_ab := _agec + _fdb._ca + 2.0
									_eb.DrawLine(_df._bcba, _cge, _ab, _cge+_fdb._ggf, _ab, 1, *_fdb._bcg)
								}
							}
						}
					}
				}
			}
			if _cgb._cd != nil {
				_bbe := _c.NewBlock(_cgb._cd._aec, _cgb._eee.Top+_cgb._gc+_cgb._eee.Bottom)
				_bbe.SetPos(_cgb._ae, _cgb._bb+_cgb._eee.Top)
				_bbe.Draw(_cgb._cd._efc)
				_df._bcba.Draw(_bbe)
			}
		}
	}
	for _, _fg := range _dgg._ffc {
		_add(_df._bcba, _fg)
	}
	for _, _fgf := range _dgg._edc {
		_bd(_df._bcba, _fgf)
	}
	if len(_dgg._aaa) > 0 {
		_cga := _dgg._ec.Bottom + _efg*_aa
		_bbd := _dgg._ec.Left
		_bag := _bbd + _dfaa(50)
		_eb.DrawLine(_df._bcba, _bbd, _cga, _bag, _cga, _af, _c.ColorBlack)
		_agcg := _dgg._ec.Bottom + _efg
		for _, _gca := range _dgg._aaa {
			_gca._gd.SetPos(_dgg._ec.Left, _agcg)
			_df._bcba.Draw(_gca._gd)
			_agcg += _gca._gd.Height()
		}
	}
}
func _bd(_dbf *_c.Creator, _efe *block) {
	_efe._dcd.SetPos(_efe._fbe, _efe._aeef)
	_dbf.Draw(_efe._dcd)
	if _efe._adf {
		_eb.DrawRectangle(_dbf, &_eb.Rectangle{Top: _efe._aeef, Bottom: _efe._aeef + _efe._dcd.Height(), Left: _efe._fbe, Right: _efe._fbe + _efe._dcd.Width()}, _efe._fec, _efe._gee)
	}
}
func (_abc *convertContext) newParagraph() {
	if _abc._bage == nil {
		_abc.newPage()
	}
	_afaa := &paragraph{}
	_afaa._eee = &_eb.Rectangle{}
	_afaa._bb = _abc._bage._ee
	_abc._fecf = _afaa
}
func (_ffbb *convertContext) newSpan() {
	_cdaa := &span{_fa: _ffbb._edgdg._fcf, _acg: _ffbb._edgdg._dce}
	_ffbb._ebac = _cdaa
	_ffbb._edgdg._afgb = append(_ffbb._edgdg._afgb, _cdaa)
}

type prefix struct {
	_bbea string
	_geab []float64
	_eacc bool
	_ggfc bool
}
type note struct {
	_fc  string
	_efb []*_db.EG_BlockLevelElts
	_gd  *_c.Block
}

func (_acgcg *convertContext) addRelativeEGPC(_fagg []*_db.EG_PContent, _cbbf *_db.CT_PPr, _bfg *prefix) {
	if len(_fagg) == 0 {
		_acgcg._bgda.Append("\u000d")
		return
	}
	if _bfg != nil {
		_acgcg._dgfg = _bfg
	}
	for _, _ffee := range _fagg {
		for _, _fbga := range _ffee.FldSimple {
			if _fbga != nil {
				_acgcg.addRelativeEGPC(_fbga.EG_PContent, _cbbf, _bfg)
			}
		}
		if _cccg := _ffee.Hyperlink; _cccg != nil {
			_acgcg._fbac = _cccg
			_acgcg.addRelativeCRC(_cccg.EG_ContentRunContent, _cbbf)
		}
		_acgcg._fbac = nil
		_acgcg.addRelativeCRC(_ffee.EG_ContentRunContent, _cbbf)
	}
}

var _aaaf float64

// ConvertToPdf converts document to PDF file. This package is beta, breaking changes can take place.
func ConvertToPdf(d *_ag.Document) *_c.Creator {
	var _gedd *_db.CT_PPrGeneral
	var _bff *_db.CT_RPr
	if _egee := d.Styles.X().DocDefaults; _egee != nil {
		if _ddd := _egee.PPrDefault; _ddd != nil {
			_gedd = _ddd.PPr
		}
		if _cdda := _egee.RPrDefault; _cdda != nil {
			_bff = _cdda.RPr
		}
	}
	_defa := d.BodySection().X()
	var _bfdg, _bgg, _aecb, _aeedb, _gaff, _ded float64
	_dad := _defa.PgMar
	if _dad.LeftAttr.ST_UnsignedDecimalNumber != nil {
		_bfdg = _eb.PointsFromTwips(int64(*_dad.LeftAttr.ST_UnsignedDecimalNumber))
	}
	if _dad.LeftAttr.ST_UnsignedDecimalNumber != nil {
		_bgg = _eb.PointsFromTwips(int64(*_dad.RightAttr.ST_UnsignedDecimalNumber))
	}
	if _dad.TopAttr.Int64 != nil {
		_aecb = _eb.PointsFromTwips(*_dad.TopAttr.Int64)
	}
	if _dad.BottomAttr.Int64 != nil {
		_aeedb = _eb.PointsFromTwips(*_dad.BottomAttr.Int64)
	}
	_efcdc := _defa.PgSz
	_ebgb, _ggff := _dfaa(210), _dfaa(297)
	if _efcdc.WAttr != nil {
		_ebgb = _eb.PointsFromTwips(int64(*_efcdc.WAttr.ST_UnsignedDecimalNumber))
	}
	if _efcdc.HAttr != nil {
		_ggff = _eb.PointsFromTwips(int64(*_efcdc.HAttr.ST_UnsignedDecimalNumber))
	}
	if _dad.HeaderAttr.ST_UnsignedDecimalNumber != nil {
		_gaff = _eb.PointsFromTwips(int64(*_dad.HeaderAttr.ST_UnsignedDecimalNumber))
	}
	if _dad.FooterAttr.ST_UnsignedDecimalNumber != nil {
		_ded = _aeedb - _eb.PointsFromTwips(int64(*_dad.FooterAttr.ST_UnsignedDecimalNumber))
	}
	if d.Settings.X().DefaultTabStop == nil {
		_aaaf = _dfaa(12.7)
	} else {
		_aaaf = _eb.PointsFromTwips(int64(*d.Settings.X().DefaultTabStop.ValAttr.ST_UnsignedDecimalNumber))
	}
	_bebc := _c.New()
	_bebc.SetPageSize(_c.PageSize{_ebgb, _ggff})
	_bebc.SetPageMargins(_bfdg, _bgg, _aecb, _aeedb)
	for _, _acgc := range d.Headers() {
		_fag := &convertContext{_bcba: _bebc, _abea: d, _fdea: _gedd, _aagf: _bff, _gabdg: true, _dafcd: _bfdg, _cbbb: _gaff}
		_fag.addRelativeCBCs(_acgc.X().EG_ContentBlockContent)
	}
	for _, _efbg := range d.Footers() {
		_eef := &convertContext{_bcba: _bebc, _abea: d, _fdea: _gedd, _aagf: _bff, _aagc: true, _dafcd: _bfdg, _gbgb: _ded}
		_eef.addRelativeCBCs(_efbg.X().EG_ContentBlockContent)
	}
	_ecgd := &convertContext{_bcba: _bebc, _abea: d, _fdea: _gedd, _aagf: _bff, _cabc: &_eb.Rectangle{Top: _aecb, Bottom: _ggff - _aeedb, Left: _bfdg, Right: _ebgb - _bgg}, _fdde: []note{}, _dafa: map[int64]map[int64]int{}}
	for _, _badf := range d.X().Body.EG_BlockLevelElts {
		_ecgd.addAbsoluteCBCs(_badf.EG_ContentBlockContent)
	}
	_ecgd.addEndnotes()
	_ecgd.alignSymbolsVertically()
	_ecgd.drawPages()
	return _bebc
}
func (_fdgd *convertContext) adjustRightBoundOfLastSpan() {
	_efcd := _fdgd._ebac._acg
	_gaea := _fdgd._edgdg._da + _fdgd._fecf._bb
	_bgd := _gaea + _fdgd._edgdg._gb
	for _, _egbf := range _fdgd._bage._aag {
		if ((_gaea > _egbf._dg.Top && _gaea < _egbf._dg.Bottom) || (_bgd > _egbf._dg.Top && _gaea < _egbf._dg.Bottom)) && (_efcd > _egbf._dg.Left) {
			_efcd = _egbf._dg.Left
		}
	}
	_fdgd._ebac._acg = _efcd
}
func (_ffd *convertContext) currentParagraphOverflowsCurrentPage() bool {
	_dga := _ffd._fecf._bb + _ffd._fecf._eee.Top + _ffd._fecf._eee.Bottom
	_fgb := _ffd._bage._ec.Bottom - _ffd._fecf._fba
	if len(_ffd._bage._aaa) == 0 && len(_ffd._fecf._aae) > 0 {
		_fgb -= _efg
	}
	return _dga+_ffd._fecf._gc > _fgb || _dga+_ffd._fecf._gf > _fgb
}

type symbol struct {
	_eeec string
	_fad  float64
	_bc   float64
	_ggf  float64
	_edgf float64
	_ca   float64
	_gea  *_c.TextStyle
	_cgf  *_c.Image
	_be   *block
	_agad string
	_cf   bool
	_fde  bool
	_bcg  *_c.Color
}
type paragraph struct {
	_afg float64
	_eee *_eb.Rectangle
	_ae  float64
	_eea float64
	_fb  float64
	_bb  float64
	_gc  float64
	_ece _c.TextAlignment
	_gcf float64
	_ga  []*line
	_cd  *tableWrapper
	_ea  []*image
	_eag []*image
	_gcb []*block
	_fbg []*block
	_aae []*note
	_fba float64
	_fdd []*zoneToSkip
	_gf  float64
	_edf bool
}

func (_egbd *convertContext) addEmptyLine() {
	_egbd.addTextSymbol(&symbol{_eeec: "\u000d", _ggf: 0, _edgf: _egbd._fecf._gcf})
}
func (_geef *convertContext) newPage() {
	_fade := &page{}
	_fade._ec = _geef._cabc
	_fade._ee = _fade._ec.Top
	if _geef._eacg {
		_fade._bg = true
		_fade._ee += _efg
	}
	_geef._acab = append(_geef._acab, _fade)
	_geef._bage = _fade
}
