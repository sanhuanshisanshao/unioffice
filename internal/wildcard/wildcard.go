//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package wildcard

func Index(pattern, name string) (_ba int) {
	if pattern == "" || pattern == "\u002a" {
		return 0
	}
	_fd := make([]rune, 0, len(name))
	_dgb := make([]rune, 0, len(pattern))
	for _, _g := range name {
		_fd = append(_fd, _g)
	}
	for _, _dga := range pattern {
		_dgb = append(_dgb, _dga)
	}
	return _fc(_fd, _dgb, 0)
}
func Match(pattern, name string) (_ef bool) {
	if pattern == "" {
		return name == pattern
	}
	if pattern == "\u002a" {
		return true
	}
	_ed := make([]rune, 0, len(name))
	_a := make([]rune, 0, len(pattern))
	for _, _dg := range name {
		_ed = append(_ed, _dg)
	}
	for _, _fg := range pattern {
		_a = append(_a, _fg)
	}
	_bg := false
	return _cd(_ed, _a, _bg)
}
func _fc(_df, _fe []rune, _aa int) int {
	for len(_fe) > 0 {
		switch _fe[0] {
		default:
			if len(_df) == 0 {
				return -1
			}
			if _df[0] != _fe[0] {
				return _fc(_df[1:], _fe, _aa+1)
			}
		case '?':
			if len(_df) == 0 {
				return -1
			}
		case '*':
			if len(_df) == 0 {
				return -1
			}
			_cf := _fc(_df, _fe[1:], _aa)
			if _cf != -1 {
				return _aa
			} else {
				_cf = _fc(_df[1:], _fe, _aa)
				if _cf != -1 {
					return _aa
				} else {
					return -1
				}
			}
		}
		_df = _df[1:]
		_fe = _fe[1:]
	}
	return _aa
}
func _cd(_bf, _ac []rune, _dgd bool) bool {
	for len(_ac) > 0 {
		switch _ac[0] {
		default:
			if len(_bf) == 0 || _bf[0] != _ac[0] {
				return false
			}
		case '?':
			if len(_bf) == 0 && !_dgd {
				return false
			}
		case '*':
			return _cd(_bf, _ac[1:], _dgd) || (len(_bf) > 0 && _cd(_bf[1:], _ac, _dgd))
		}
		_bf = _bf[1:]
		_ac = _ac[1:]
	}
	return len(_bf) == 0 && len(_ac) == 0
}
func MatchSimple(pattern, name string) bool {
	if pattern == "" {
		return name == pattern
	}
	if pattern == "\u002a" {
		return true
	}
	_fb := make([]rune, 0, len(name))
	_b := make([]rune, 0, len(pattern))
	for _, _d := range name {
		_fb = append(_fb, _d)
	}
	for _, _eb := range pattern {
		_b = append(_b, _eb)
	}
	_dd := true
	return _cd(_fb, _b, _dd)
}
