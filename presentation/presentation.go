//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package presentation

import (
	_e "archive/zip"
	_ebg "bytes"
	_df "encoding/xml"
	_ab "errors"
	_da "fmt"
	_ga "github.com/sanhuanshisanshao/unioffice"
	_b "github.com/sanhuanshisanshao/unioffice/common"
	_c "github.com/sanhuanshisanshao/unioffice/common/logger"
	_ag "github.com/sanhuanshisanshao/unioffice/common/tempstorage"
	_fd "github.com/sanhuanshisanshao/unioffice/drawing"
	_aa "github.com/sanhuanshisanshao/unioffice/internal/license"
	_g "github.com/sanhuanshisanshao/unioffice/measurement"
	_dc "github.com/sanhuanshisanshao/unioffice/schema/soo/dml"
	_f "github.com/sanhuanshisanshao/unioffice/schema/soo/dml/chart"
	_dd "github.com/sanhuanshisanshao/unioffice/schema/soo/ofc/sharedTypes"
	_dgb "github.com/sanhuanshisanshao/unioffice/schema/soo/pkg/relationships"
	_eb "github.com/sanhuanshisanshao/unioffice/schema/soo/pml"
	_a "github.com/sanhuanshisanshao/unioffice/zippkg"
	_fg "image"
	_ded "image/jpeg"
	_ddg "io"
	_fb "math"
	_ec "os"
	_aag "path"
	_cd "sort"
	_de "strconv"
	_dg "strings"
)

// AddImage adds an image textbox to a slide.
func (_eagg Slide) AddImage(img _b.ImageRef) Image {
	_ecf := _eb.NewCT_GroupShapeChoice()
	_eagg._agcb.CSld.SpTree.Choice = append(_eagg._agcb.CSld.SpTree.Choice, _ecf)
	_fdade := _eb.NewCT_Picture()
	_ecf.Pic = append(_ecf.Pic, _fdade)
	_fdade.NvPicPr.CNvPicPr = _dc.NewCT_NonVisualPictureProperties()
	_fdade.NvPicPr.CNvPicPr.PicLocks = _dc.NewCT_PictureLocking()
	_fdade.NvPicPr.CNvPicPr.PicLocks.NoChangeAspectAttr = _ga.Bool(true)
	_fdade.BlipFill = _dc.NewCT_BlipFillProperties()
	_fdade.BlipFill.Blip = _dc.NewCT_Blip()
	_cffa := _eagg.AddImageToRels(img)
	_fdade.BlipFill.Blip.EmbedAttr = _ga.String(_cffa)
	_fdade.BlipFill.Stretch = _dc.NewCT_StretchInfoProperties()
	_fdade.BlipFill.Stretch.FillRect = _dc.NewCT_RelativeRect()
	_fdade.SpPr = _dc.NewCT_ShapeProperties()
	_fdade.SpPr.PrstGeom = _dc.NewCT_PresetGeometry2D()
	_fdade.SpPr.PrstGeom.PrstAttr = _dc.ST_ShapeTypeRect
	_dag := Image{_fdade}
	_cdce := img.Size()
	_dag.Properties().SetWidth(_g.Distance(_cdce.X) * _g.Pixel72)
	_dag.Properties().SetHeight(_g.Distance(_cdce.Y) * _g.Pixel72)
	_dag.Properties().SetPosition(0, 0)
	return _dag
}

func (_baf *Presentation) nextSlideID() uint32 {
	_bdf := uint32(256)
	for _, _gfdd := range _baf._fff.SldIdLst.SldId {
		if _gfdd.IdAttr >= _bdf {
			_bdf = _gfdd.IdAttr + 1
		}
	}
	return _bdf
}

// X returns the inner wrapped XML type.
func (_edbd SlideMaster) X() *_eb.SldMaster { return _edbd._abfd }

// ShowCommentsAttr returns the WebPr property.
func (_fbad ViewProperties) ShowCommentsAttr() *bool { return _fbad._agdd.ShowCommentsAttr }

// Properties returns the properties of the TextBox.
func (_dfcf TextBox) Properties() _fd.ShapeProperties {
	if _dfcf._eaeec.SpPr == nil {
		_dfcf._eaeec.SpPr = _dc.NewCT_ShapeProperties()
	}
	return _fd.MakeShapeProperties(_dfcf._eaeec.SpPr)
}

// SlideText is an array of extracted text items which has some methods for representing extracted text from a slide.
type SlideText struct{ Items []*TextItem }

// Text returns text from a presentation as one string separated with line breaks.
func (_ff *PresentationText) Text() string {
	_ffd := _ebg.NewBuffer([]byte{})
	for _, _ace := range _ff.Slides {
		_ffd.WriteString(_ace.Text())
	}
	return _ffd.String()
}

type rectangle struct {
	_adc int64
	_dge int64
	_bcf int64
	_bf  int64
}

// GetColorBySchemeColor returns *dml.CT_Color mapped to scheme colors like dk1, lt1 etc. depending on what theme is used in the presentation.
func (_deac *Presentation) GetColorBySchemeColor(schClr _dc.ST_SchemeColorVal) *_dc.CT_Color {
	if len(_deac._feg) == 0 || len(_deac._cffe) == 0 {
		return nil
	}
	var _fgde _dc.ST_ColorSchemeIndex
	_efg := _deac._feg[0]
	_fdfc := _efg.ClrMap
	switch schClr.String() {
	case "\u0062\u0067\u0031":
		_fgde = _fdfc.Bg1Attr
	case "\u0062\u0067\u0032":
		_fgde = _fdfc.Bg2Attr
	case "\u0074\u0078\u0031":
		_fgde = _fdfc.Tx1Attr
	case "\u0074\u0078\u0032":
		_fgde = _fdfc.Tx2Attr
	case "\u0061c\u0063\u0065\u006e\u0074\u0031":
		_fgde = _fdfc.Accent1Attr
	case "\u0061c\u0063\u0065\u006e\u0074\u0032":
		_fgde = _fdfc.Accent2Attr
	case "\u0061c\u0063\u0065\u006e\u0074\u0033":
		_fgde = _fdfc.Accent3Attr
	case "\u0061c\u0063\u0065\u006e\u0074\u0034":
		_fgde = _fdfc.Accent4Attr
	case "\u0061c\u0063\u0065\u006e\u0074\u0035":
		_fgde = _fdfc.Accent5Attr
	case "\u0061c\u0063\u0065\u006e\u0074\u0036":
		_fgde = _fdfc.Accent6Attr
	case "\u0068\u006c\u0069n\u006b":
		_fgde = _fdfc.HlinkAttr
	case "\u0066\u006f\u006c\u0048\u006c\u0069\u006e\u006b":
		_fgde = _fdfc.FolHlinkAttr
	case "\u0064\u006b\u0031":
		_fgde = _dc.ST_ColorSchemeIndexDk1
	case "\u0064\u006b\u0032":
		_fgde = _dc.ST_ColorSchemeIndexDk2
	case "\u006c\u0074\u0031":
		_fgde = _dc.ST_ColorSchemeIndexLt1
	case "\u006c\u0074\u0032":
		_fgde = _dc.ST_ColorSchemeIndexLt2
	default:
		_fgde = _dc.ST_ColorSchemeIndexUnset
	}
	_deea := _deac._cffe[0]
	_fee := _deea.ThemeElements
	if _fee == nil {
		return nil
	}
	var _agc *_dc.CT_Color
	_dccc := _fee.ClrScheme
	switch _fgde.String() {
	case "\u0064\u006b\u0031":
		_agc = _dccc.Dk1
	case "\u0064\u006b\u0032":
		_agc = _dccc.Dk2
	case "\u006c\u0074\u0031":
		_agc = _dccc.Lt1
	case "\u006c\u0074\u0032":
		_agc = _dccc.Lt2
	case "\u0061c\u0063\u0065\u006e\u0074\u0031":
		_agc = _dccc.Accent1
	case "\u0061c\u0063\u0065\u006e\u0074\u0032":
		_agc = _dccc.Accent2
	case "\u0061c\u0063\u0065\u006e\u0074\u0033":
		_agc = _dccc.Accent3
	case "\u0061c\u0063\u0065\u006e\u0074\u0034":
		_agc = _dccc.Accent4
	case "\u0061c\u0063\u0065\u006e\u0074\u0035":
		_agc = _dccc.Accent5
	case "\u0061c\u0063\u0065\u006e\u0074\u0036":
		_agc = _dccc.Accent6
	case "\u0068\u006c\u0069n\u006b":
		_agc = _dccc.Hlink
	case "\u0066\u006f\u006c\u0048\u006c\u0069\u006e\u006b":
		_agc = _dccc.FolHlink
	default:
		return nil
	}
	return _agc
}

type chart struct {
	_fe  *_f.ChartSpace
	_ed  string
	_daa string
}

// SetOffsetY sets vertical offset of text box in distance units (see measurement package).
func (_ffc TextBox) SetOffsetY(offY float64) {
	_bfbg := _ffc.getOff()
	_bdfe := _g.ToEMU(offY)
	_bfbg.YAttr = _dc.ST_Coordinate{ST_CoordinateUnqualified: &_bdfe}
}

// AddSlideWithLayout adds a new slide with content copied from a layout.  Normally you should
// use AddDefaultSlideWithLayout as it will do some post processing similar to PowerPoint to
// clear place holder text, etc.
func (_gda *Presentation) AddSlideWithLayout(l SlideLayout) (Slide, error) {
	_aacc := _eb.NewCT_SlideIdListEntry()
	_aacc.IdAttr = 256
	for _, _addca := range _gda._fff.SldIdLst.SldId {
		if _addca.IdAttr >= _aacc.IdAttr {
			_aacc.IdAttr = _addca.IdAttr + 1
		}
	}
	_gda._fff.SldIdLst.SldId = append(_gda._fff.SldIdLst.SldId, _aacc)
	_edg := _eb.NewSld()
	_babb := _ebg.Buffer{}
	_egf := _df.NewEncoder(&_babb)
	_cab := _df.StartElement{Name: _df.Name{Local: "\u0073\u006c\u0069d\u0065"}}
	_cab.Attr = append(_cab.Attr, _df.Attr{Name: _df.Name{Local: "\u0078\u006d\u006cn\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069o\u006e\u006d\u006c\u002f\u0032\u00300\u0036\u002f\u006da\u0069\u006e"})
	_cab.Attr = append(_cab.Attr, _df.Attr{Name: _df.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0061"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e"})
	_cab.Attr = append(_cab.Attr, _df.Attr{Name: _df.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0070"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069o\u006e\u006d\u006c\u002f\u0032\u00300\u0036\u002f\u006da\u0069\u006e"})
	_cab.Attr = append(_cab.Attr, _df.Attr{Name: _df.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0072"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073"})
	_cab.Attr = append(_cab.Attr, _df.Attr{Name: _df.Name{Local: "\u0078\u006d\u006c\u006e\u0073\u003a\u0073\u0068"}, Value: "\u0068\u0074\u0074\u0070\u003a/\u002f\u0073\u0063\u0068\u0065m\u0061s\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067/\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002f\u0073\u0068\u0061\u0072e\u0064\u0054\u0079\u0070\u0065\u0073"})
	_cab.Attr = append(_cab.Attr, _df.Attr{Name: _df.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"}, Value: "\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"})
	if _dged := l._egb.CSld.MarshalXML(_egf, _cab); _dged != nil {
		return Slide{}, _dged
	}
	_egf.Flush()
	_acg := _df.NewDecoder(&_babb)
	_edg.CSld = _eb.NewCT_CommonSlideData()
	if _fbc := _acg.Decode(_edg.CSld); _fbc != nil {
		return Slide{}, _fbc
	}
	_edg.CSld.NameAttr = nil
	_edg.CSld.SpTree.Choice = _facg(_edg.CSld.SpTree.Choice)
	_gda._dee = append(_gda._dee, _edg)
	_adbdf := _gda._ead.AddAutoRelationship(_ga.DocTypePresentation, _ga.OfficeDocumentType, len(_gda._dee), _ga.SlideType)
	_aacc.RIdAttr = _adbdf.ID()
	_cge := _ga.AbsoluteFilename(_ga.DocTypePresentation, _ga.SlideType, len(_gda._dee))
	_gda.ContentTypes.AddOverride(_cge, _ga.SlideContentType)
	_fdad := _b.NewRelationships()
	_gda._bgac = append(_gda._bgac, _fdad)
	_daf := len(_gda._bgac) - 1
	for _acf, _addd := range _gda._eeg {
		if _addd == l.X() {
			_bfdf := _gda._abefb[_acf]
			for _, _fga := range _bfdf.X().Relationship {
				if _fga.TypeAttr != _ga.SlideMasterType {
					_gda._bgac[_daf].X().Relationship = append(_gda._bgac[_daf].X().Relationship, _fga)
				}
			}
			_fdad.AddAutoRelationship(_ga.DocTypePresentation, _ga.SlideType, _acf+1, _ga.SlideLayoutType)
		}
	}
	_dcfd := Slide{_aacc, _edg, _gda, nil}
	return _dcfd, nil
}

// Text returns text from a slide as one string separated with line breaks.
func (_bba *SlideText) Text() string {
	_efc := _ebg.NewBuffer([]byte{})
	for _, _dgf := range _bba.Items {
		if _dgf.Text != "" {
			_efc.WriteString(_dgf.Text)
			_efc.WriteString("\u000a")
		}
	}
	return _efc.String()
}

// AddDefaultSlideWithLayout tries to replicate what PowerPoint does when
// inserting a slide with a new style by clearing placeholder content and removing
// some placeholders.  Use AddSlideWithLayout if you need more control.
func (_fgc *Presentation) AddDefaultSlideWithLayout(l SlideLayout) (Slide, error) {
	_cef, _ccg := _fgc.AddSlideWithLayout(l)
	for _, _ecb := range _cef.PlaceHolders() {
		_ecb.Clear()
		switch _ecb.Type() {
		case _eb.ST_PlaceholderTypeFtr, _eb.ST_PlaceholderTypeDt, _eb.ST_PlaceholderTypeSldNum:
			_ecb.Remove()
		}
	}
	return _cef, _ccg
}

// GetTextBoxes returns a list of all text boxes from a slide.
func (_face Slide) GetTextBoxes() []*TextBox {
	_ggf := []*TextBox{}
	_facc := _face._agcb.CSld.SpTree.Choice
	for _, _eabg := range _facc {
		for _, _dgaa := range _eabg.Sp {
			if _dgaa.NvSpPr.CNvSpPr.TxBoxAttr != nil && *_dgaa.NvSpPr.CNvSpPr.TxBoxAttr {
				_ggf = append(_ggf, &TextBox{_dgaa})
			}
		}
	}
	return _ggf
}

// Presentation returns a slide's presentation.
func (_eaa Slide) Presentation() *Presentation { return _eaa._fea }

// SlideViewPr returns the SlideViewPr property.
func (_cfba ViewProperties) SlideViewPr() *_eb.CT_SlideViewProperties {
	return _cfba._agdd.SlideViewPr
}

func _cff(_eg *Presentation, _caf *_eb.CT_Shape, _ebf *_eb.CT_GraphicalObjectFrame, _bd *TableInfo, _abe *_dc.CT_Transform2D, _aab int, _dab []rectangle, _feb []*_dc.CT_TextParagraph) []*TextItem {
	_bfd := []*TextItem{}
	var _bb, _fdc, _dcc, _db, _fcdd, _ce int64
	_ac := _abe == nil
	_edd := 0
	for _, _dfce := range _feb {
		for _, _bdd := range _dfce.EG_TextRun {
			if _aga := _bdd.R; _aga != nil {
				if !_ac {
					if _abe.Off != nil {
						if _agd := _abe.Ext; _agd != nil {
							_fcdd, _ce = _agd.CxAttr, _agd.CyAttr
						}
						if _eef := _abe.Off.XAttr.ST_CoordinateUnqualified; _eef != nil {
							_bb = *_eef
							_fdc = _bb + _fcdd
							_ac = true
						}
						if _bbf := _abe.Off.YAttr.ST_CoordinateUnqualified; _bbf != nil {
							_dcc = *_bbf
							_db = _dcc + _ce
							_ac = true
						}
					}
				}
				_dda := append([]rectangle{}, _dab...)
				_dda = append(_dda, rectangle{_adc: _bb, _bcf: _fdc, _dge: _dcc, _bf: _db})
				_bfd = append(_bfd, &TextItem{Presentation: _eg, Shape: _caf, GraphicFrame: _ebf, TableInfo: _bd, Paragraph: _dfce, Run: _aga, Text: _aga.T, _dga: _dda, _fc: _aab, _ca: _edd})
				_edd++
			}
		}
	}
	return _bfd
}

// ViewProperties contains presentation specific properties.
type ViewProperties struct{ _agdd *_eb.ViewPr }

// NewPresentationProperties constructs a new PresentationProperties.
func NewPresentationProperties() PresentationProperties {
	return PresentationProperties{_bdg: _eb.NewPresentationPr()}
}

// OutlineViewPr returns the OutlineViewPr property.
func (_fgbc ViewProperties) OutlineViewPr() *_eb.CT_OutlineViewProperties {
	return _fgbc._agdd.OutlineViewPr
}

// Type returns the type of the slide layout.
func (_geea SlideLayout) Type() _eb.ST_SlideLayoutType { return _geea._egb.TypeAttr }

// Save writes the presentation out to a writer in the Zip package format
func (_afc *Presentation) Save(w _ddg.Writer) error { return _afc.save(w, false) }

// SorterViewPr returns the SorterViewPr property.
func (_ebga ViewProperties) SorterViewPr() *_eb.CT_SlideSorterViewProperties {
	return _ebga._agdd.SorterViewPr
}

// SlideMaster is the slide master for a presentation.
type SlideMaster struct {
	_dbc  *Presentation
	_eaee _b.Relationships
	_abfd *_eb.SldMaster
}

// NotesViewPr returns the NotesViewPr property.
func (_fded ViewProperties) NotesViewPr() *_eb.CT_NotesViewProperties {
	return _fded._agdd.NotesViewPr
}

// TextItem is used for keeping text with references to a paragraph and run, a shape or a table, a row and a cell where it is located.
type TextItem struct {
	Text         string
	Presentation *Presentation
	Shape        *_eb.CT_Shape
	GraphicFrame *_eb.CT_GraphicalObjectFrame
	Paragraph    *_dc.CT_TextParagraph
	Run          *_dc.CT_RegularTextRun
	TableInfo    *TableInfo
	_dga         []rectangle
	_fc          int
	_ca          int
}

// SlideMasters returns the slide masters defined in the presentation.
func (_egg *Presentation) SlideMasters() []SlideMaster {
	_aff := []SlideMaster{}
	for _bfab, _def := range _egg._feg {
		_aff = append(_aff, SlideMaster{_egg, _egg._aaa[_bfab], _def})
	}
	return _aff
}

// GetSlideLayout returns a slide layout related to the slide.
func (_fdde *Slide) GetSlideLayout() *_eb.SldLayout {
	for _gbde, _ggcg := range _fdde._fea.Slides() {
		if *_fdde == _ggcg {
			return _fdde._fea._eeg[len(_fdde._fea.Slides())-_gbde-1]
		}
	}
	return nil
}

// TextBox is a text box within a slide.
type TextBox struct{ _eaeec *_eb.CT_Shape }

func (_dcb sort2d) Len() int { return len(_dcb) }

func _bfff() *Presentation {
	_fcf := &Presentation{_fff: _eb.NewPresentation()}
	_fcf._fff.SldIdLst = _eb.NewCT_SlideIdList()
	_fcf._fff.ConformanceAttr = _dd.ST_ConformanceClassTransitional
	_fcf.AppProperties = _b.NewAppProperties()
	_fcf.CoreProperties = _b.NewCoreProperties()
	_fcf._afa = _b.NewTableStyles()
	_fcf.ContentTypes = _b.NewContentTypes()
	_fcf.Rels = _b.NewRelationships()
	_fcf._ead = _b.NewRelationships()
	_fcf._cca = NewPresentationProperties()
	_fcf._dccg = NewViewProperties()
	_fcf._afb = map[string]string{}
	return _fcf
}

// NormalViewPr returns the NormalViewPr property.
func (_fbdd ViewProperties) NormalViewPr() *_eb.CT_NormalViewProperties {
	return _fbdd._agdd.NormalViewPr
}

func (_fgab *Presentation) Validate() error {
	if _agdb := _fgab._fff.Validate(); _agdb != nil {
		return _agdb
	}
	for _ceff, _ecbg := range _fgab.Slides() {
		if _cga := _ecbg.ValidateWithPath(_da.Sprintf("\u0053l\u0069\u0064\u0065\u005b\u0025\u0064]", _ceff)); _cga != nil {
			return _cga
		}
	}
	for _eff, _eec := range _fgab._feg {
		if _bfe := _eec.ValidateWithPath(_da.Sprintf("\u0053l\u0069d\u0065\u004d\u0061\u0073\u0074\u0065\u0072\u005b\u0025\u0064\u005d", _eff)); _bfe != nil {
			return _bfe
		}
	}
	for _fdf, _dgfa := range _fgab._eeg {
		if _facd := _dgfa.ValidateWithPath(_da.Sprintf("\u0053l\u0069d\u0065\u004c\u0061\u0079\u006f\u0075\u0074\u005b\u0025\u0064\u005d", _fdf)); _facd != nil {
			return _facd
		}
	}
	return nil
}

// RemoveSlide removes a slide from a presentation.
func (_bcgd *Presentation) RemoveSlide(s Slide) error {
	_ffb := false
	_gcca := 0
	for _dgd, _egga := range _bcgd._dee {
		if _egga == s._agcb {
			if _bcgd._fff.SldIdLst.SldId[_dgd] != s._gde {
				return _ab.New("i\u006e\u0063\u006f\u006e\u0073\u0069s\u0074\u0065\u006e\u0063\u0079\u0020i\u006e\u0020\u0073\u006c\u0069\u0064\u0065s\u0020\u0061\u006e\u0064\u0020\u0049\u0044\u0020\u006c\u0069s\u0074")
			}
			copy(_bcgd._dee[_dgd:], _bcgd._dee[_dgd+1:])
			_bcgd._dee = _bcgd._dee[0 : len(_bcgd._dee)-1]
			copy(_bcgd._bgac[_dgd:], _bcgd._bgac[_dgd+1:])
			_bcgd._bgac = _bcgd._bgac[0 : len(_bcgd._bgac)-1]
			copy(_bcgd._fff.SldIdLst.SldId[_dgd:], _bcgd._fff.SldIdLst.SldId[_dgd+1:])
			_bcgd._fff.SldIdLst.SldId = _bcgd._fff.SldIdLst.SldId[0 : len(_bcgd._fff.SldIdLst.SldId)-1]
			_ffb = true
			_gcca = _dgd
		}
	}
	if !_ffb {
		return _ab.New("u\u006ea\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0066i\u006e\u0064\u0020\u0073li\u0064\u0065")
	}
	_gbf := _ga.AbsoluteFilename(_ga.DocTypePresentation, _ga.SlideType, 0)
	return _bcgd.ContentTypes.RemoveOverrideByIndex(_gbf, _gcca)
}

// SaveToFile writes the Presentation out to a file.
func (_gbga *Presentation) SaveToFile(path string) error { return _gbga.saveToFile(path, false) }

// ExtractText returns text from a presentation as a PresentationText object.
func (_fgf *Presentation) ExtractText() *PresentationText {
	_dfc := []*SlideText{}
	for _, _ba := range _fgf.Slides() {
		_bg := _ba.ExtractText()
		if _bg != nil {
			_dfc = append(_dfc, _bg)
		}
	}
	return &PresentationText{Slides: _dfc}
}

// GetImageByRelID returns an ImageRef with the associated relation ID in the
// document.
func (_aad *Presentation) GetImageByRelID(relID string) (_b.ImageRef, bool) {
	for _, _gbda := range _aad.Images {
		if _gbda.RelID() == relID {
			return _gbda, true
		}
	}
	return _b.ImageRef{}, false
}

// AddTable adds an empty table to a slide.
func (_cgcc Slide) AddTable() *_b.Table {
	_dde := _eb.NewCT_GroupShapeChoice()
	_cgcc._agcb.CSld.SpTree.Choice = append(_cgcc._agcb.CSld.SpTree.Choice, _dde)
	_cfbe := _eb.NewCT_GraphicalObjectFrame()
	_dde.GraphicFrame = append(_dde.GraphicFrame, _cfbe)
	_cfbe.Xfrm.Off = _dc.NewCT_Point2D()
	_edc := int64(1)
	_cfbe.Xfrm.Off.XAttr = _dc.ST_Coordinate{ST_CoordinateUnqualified: &_edc}
	_cfbe.Xfrm.Off.YAttr = _dc.ST_Coordinate{ST_CoordinateUnqualified: &_edc}
	_gafc := _cfbe.Graphic.CT_GraphicalObject.GraphicData
	_gafc.UriAttr = "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0074\u0061\u0062\u006c\u0065"
	_agdf := _b.NewTableWithXfrm(_cfbe.Xfrm)
	_gafc.Any = append(_gafc.Any, _agdf.X())
	return _agdf
}

// PlaceHolders returns all of the content place holders within a given slide.
func (_fcbf Slide) PlaceHolders() []PlaceHolder {
	_bbfa := []PlaceHolder{}
	for _, _cbgg := range _fcbf._agcb.CSld.SpTree.Choice {
		for _, _ffec := range _cbgg.Sp {
			if _ffec.NvSpPr != nil && _ffec.NvSpPr.NvPr != nil && _ffec.NvSpPr.NvPr.Ph != nil {
				_bbfa = append(_bbfa, PlaceHolder{_ffec, _fcbf._agcb})
			}
		}
	}
	return _bbfa
}

// New initializes and reurns a new presentation
func New() *Presentation {
	_fcfg := _bfff()
	_fcfg.ContentTypes.AddOverride("/\u0070\u0070\u0074\u002fpr\u0065s\u0065\u006e\u0074\u0061\u0074i\u006f\u006e\u002e\u0078\u006d\u006c", "\u0061\u0070\u0070\u006c\u0069\u0063\u0061t\u0069\u006f\u006e\u002f\u0076\u006e\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002d\u006ff\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006de\u006e\u0074\u002e\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e\u006d\u006c\u002e\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e\u002e\u006d\u0061\u0069\u006e\u002b\u0078\u006d\u006c")
	_fcfg.Rels.AddRelationship("\u0064\u006f\u0063\u0050\u0072\u006f\u0070\u0073\u002f\u0063\u006f\u0072e\u002e\u0078\u006d\u006c", "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061s\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066o\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0070\u0061\u0063\u006ba\u0067\u0065\u002f\u0032\u0030\u0030\u0036\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073\u002f\u006d\u0065\u0074\u0061\u0064\u0061\u0074\u0061/\u0063\u006f\u0072\u0065\u002d\u0070\u0072\u006f\u0070e\u0072\u0074i\u0065\u0073")
	_fcfg.Rels.AddRelationship("\u0064\u006fc\u0050\u0072\u006fp\u0073\u002f\u0061\u0070\u0070\u002e\u0078\u006d\u006c", "\u0068t\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072\u006da\u0074\u0073.\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002f\u0072\u0065\u006c\u0061\u0074i\u006f\u006e\u0073\u0068\u0069p\u0073\u002f\u0065x\u0074\u0065\u006e\u0064\u0065d\u002d\u0070\u0072\u006f\u0070\u0065\u0072\u0074\u0069\u0065\u0073")
	_fcfg.Rels.AddRelationship("p\u0070t\u002f\u0070\u0072\u0065\u0073\u0065\u006e\u0074a\u0074\u0069\u006f\u006e.x\u006d\u006c", "\u0068\u0074\u0074\u0070\u003a\u002f\u002fs\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006da\u0074\u0073\u002e\u006f\u0072g\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006fc\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074")
	_fcfg.Rels.AddRelationship("\u0070\u0070\u0074\u002f\u0070\u0072\u0065\u0073\u0050\u0072\u006f\u0070s\u002e\u0078\u006d\u006c", "ht\u0074\u0070\u003a\u002f\u002f\u0073\u0063he\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006da\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006et\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068i\u0070s\u002f\u0070\u0072\u0065\u0073\u0050\u0072\u006f\u0070\u0073")
	_fcfg.Rels.AddRelationship("\u0070\u0070\u0074\u002f\u0076\u0069\u0065\u0077\u0050\u0072\u006f\u0070s\u002e\u0078\u006d\u006c", "ht\u0074\u0070\u003a\u002f\u002f\u0073\u0063he\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006da\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006et\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068i\u0070s\u002f\u0076\u0069\u0065\u0077\u0050\u0072\u006f\u0070\u0073")
	_fcfg.Rels.AddRelationship("\u0070\u0070\u0074\u002fta\u0062\u006c\u0065\u0053\u0074\u0079\u006c\u0065\u0073\u002e\u0078\u006d\u006c", "\u0068\u0074\u0074\u0070\u003a\u002f\u002fs\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006cf\u006fr\u006d\u0061\u0074\u0073\u002e\u006fr\u0067\u002f\u006f\u0066\u0066\u0069\u0063e\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073\u002f\u0074\u0061\u0062\u006c\u0065\u0053\u0074\u0079\u006ce\u0073")
	_fcfg._fff.SldMasterIdLst = _eb.NewCT_SlideMasterIdList()
	_gc := _eb.NewSldMaster()
	_gc.ClrMap.Bg1Attr = _dc.ST_ColorSchemeIndexLt1
	_gc.ClrMap.Bg2Attr = _dc.ST_ColorSchemeIndexLt2
	_gc.ClrMap.Tx1Attr = _dc.ST_ColorSchemeIndexDk1
	_gc.ClrMap.Tx2Attr = _dc.ST_ColorSchemeIndexDk2
	_gc.ClrMap.Accent1Attr = _dc.ST_ColorSchemeIndexAccent1
	_gc.ClrMap.Accent2Attr = _dc.ST_ColorSchemeIndexAccent2
	_gc.ClrMap.Accent3Attr = _dc.ST_ColorSchemeIndexAccent3
	_gc.ClrMap.Accent4Attr = _dc.ST_ColorSchemeIndexAccent4
	_gc.ClrMap.Accent5Attr = _dc.ST_ColorSchemeIndexAccent5
	_gc.ClrMap.Accent6Attr = _dc.ST_ColorSchemeIndexAccent6
	_gc.ClrMap.HlinkAttr = _dc.ST_ColorSchemeIndexHlink
	_gc.ClrMap.FolHlinkAttr = _dc.ST_ColorSchemeIndexFolHlink
	_fcfg._feg = append(_fcfg._feg, _gc)
	_gfab := _ga.AbsoluteFilename(_ga.DocTypePresentation, _ga.SlideMasterType, 1)
	_fcfg.ContentTypes.AddOverride(_gfab, _ga.SlideMasterContentType)
	_ecd := _fcfg._ead.AddAutoRelationship(_ga.DocTypePresentation, _ga.OfficeDocumentType, 1, _ga.SlideMasterType)
	_dacg := _eb.NewCT_SlideMasterIdListEntry()
	_dacg.IdAttr = _ga.Uint32(2147483648)
	_dacg.RIdAttr = _ecd.ID()
	_fcfg._fff.SldMasterIdLst.SldMasterId = append(_fcfg._fff.SldMasterIdLst.SldMasterId, _dacg)
	_dce := _b.NewRelationships()
	_fcfg._aaa = append(_fcfg._aaa, _dce)
	_ccb := _eb.NewSldLayout()
	_cedd := _dce.AddAutoRelationship(_ga.DocTypePresentation, _ga.SlideMasterType, 1, _ga.SlideLayoutType)
	_dfa := _ga.AbsoluteFilename(_ga.DocTypePresentation, _ga.SlideLayoutType, 1)
	_fcfg.ContentTypes.AddOverride(_dfa, _ga.SlideLayoutContentType)
	_dce.AddAutoRelationship(_ga.DocTypePresentation, _ga.SlideMasterType, 1, _ga.ThemeType)
	_fcfg._eeg = append(_fcfg._eeg, _ccb)
	_gc.SldLayoutIdLst = _eb.NewCT_SlideLayoutIdList()
	_ccc := _eb.NewCT_SlideLayoutIdListEntry()
	_ccc.IdAttr = _ga.Uint32(2147483649)
	_ccc.RIdAttr = _cedd.ID()
	_gc.SldLayoutIdLst.SldLayoutId = append(_gc.SldLayoutIdLst.SldLayoutId, _ccc)
	_acaf := _b.NewRelationships()
	_fcfg._abefb = append(_fcfg._abefb, _acaf)
	_acaf.AddAutoRelationship(_ga.DocTypePresentation, _ga.SlideType, 1, _ga.SlideMasterType)
	_fcfg._fff.NotesSz.CxAttr = 6858000
	_fcfg._fff.NotesSz.CyAttr = 9144000
	_gdgg := _dc.NewTheme()
	_gdgg.NameAttr = _ga.String("\u0075n\u0069o\u0066\u0066\u0069\u0063\u0065\u0020\u0054\u0068\u0065\u006d\u0065")
	_gdgg.ThemeElements.ClrScheme.NameAttr = "\u004f\u0066\u0066\u0069\u0063\u0065"
	_gdgg.ThemeElements.ClrScheme.Dk1.SysClr = _dc.NewCT_SystemColor()
	_gdgg.ThemeElements.ClrScheme.Dk1.SysClr.LastClrAttr = _ga.String("\u0030\u0030\u0030\u0030\u0030\u0030")
	_gdgg.ThemeElements.ClrScheme.Dk1.SysClr.ValAttr = _dc.ST_SystemColorValWindowText
	_gdgg.ThemeElements.ClrScheme.Lt1.SysClr = _dc.NewCT_SystemColor()
	_gdgg.ThemeElements.ClrScheme.Lt1.SysClr.LastClrAttr = _ga.String("\u0066\u0066\u0066\u0066\u0066\u0066")
	_gdgg.ThemeElements.ClrScheme.Lt1.SysClr.ValAttr = _dc.ST_SystemColorValWindow
	_gdgg.ThemeElements.ClrScheme.Dk2.SrgbClr = _dc.NewCT_SRgbColor()
	_gdgg.ThemeElements.ClrScheme.Dk2.SrgbClr.ValAttr = "\u0034\u0034\u0035\u0034\u0036\u0061"
	_gdgg.ThemeElements.ClrScheme.Lt2.SrgbClr = _dc.NewCT_SRgbColor()
	_gdgg.ThemeElements.ClrScheme.Lt2.SrgbClr.ValAttr = "\u0065\u0037\u0065\u0037\u0065\u0036"
	_gdgg.ThemeElements.ClrScheme.Accent1.SrgbClr = _dc.NewCT_SRgbColor()
	_gdgg.ThemeElements.ClrScheme.Accent1.SrgbClr.ValAttr = "\u0034\u0034\u0037\u0032\u0063\u0034"
	_gdgg.ThemeElements.ClrScheme.Accent2.SrgbClr = _dc.NewCT_SRgbColor()
	_gdgg.ThemeElements.ClrScheme.Accent2.SrgbClr.ValAttr = "\u0065\u0064\u0037\u0064\u0033\u0031"
	_gdgg.ThemeElements.ClrScheme.Accent3.SrgbClr = _dc.NewCT_SRgbColor()
	_gdgg.ThemeElements.ClrScheme.Accent3.SrgbClr.ValAttr = "\u0061\u0035\u0061\u0035\u0061\u0035"
	_gdgg.ThemeElements.ClrScheme.Accent4.SrgbClr = _dc.NewCT_SRgbColor()
	_gdgg.ThemeElements.ClrScheme.Accent4.SrgbClr.ValAttr = "\u0066\u0066\u0063\u0030\u0030\u0030"
	_gdgg.ThemeElements.ClrScheme.Accent5.SrgbClr = _dc.NewCT_SRgbColor()
	_gdgg.ThemeElements.ClrScheme.Accent5.SrgbClr.ValAttr = "\u0035\u0062\u0039\u0062\u0064\u0035"
	_gdgg.ThemeElements.ClrScheme.Accent6.SrgbClr = _dc.NewCT_SRgbColor()
	_gdgg.ThemeElements.ClrScheme.Accent6.SrgbClr.ValAttr = "\u0037\u0030\u0061\u0064\u0034\u0037"
	_gdgg.ThemeElements.ClrScheme.Hlink.SrgbClr = _dc.NewCT_SRgbColor()
	_gdgg.ThemeElements.ClrScheme.Hlink.SrgbClr.ValAttr = "\u0030\u0035\u0036\u0033\u0063\u0031"
	_gdgg.ThemeElements.ClrScheme.FolHlink.SrgbClr = _dc.NewCT_SRgbColor()
	_gdgg.ThemeElements.ClrScheme.FolHlink.SrgbClr.ValAttr = "\u0039\u0035\u0034\u0066\u0037\u0032"
	_gdgg.ThemeElements.FontScheme.NameAttr = "\u004f\u0066\u0066\u0069\u0063\u0065"
	_gdgg.ThemeElements.FontScheme.MajorFont.Latin.TypefaceAttr = "\u0043\u0061\u006c\u0069\u0062\u0072\u0069\u0020\u004c\u0069\u0067\u0068\u0074"
	_gdgg.ThemeElements.FontScheme.MinorFont.Latin.TypefaceAttr = "\u0043a\u006c\u0069\u0062\u0072\u0069"
	_gdgg.ThemeElements.FmtScheme.NameAttr = _ga.String("\u004f\u0066\u0066\u0069\u0063\u0065")
	_ddbf := _dc.NewEG_FillProperties()
	_gdgg.ThemeElements.FmtScheme.FillStyleLst.EG_FillProperties = append(_gdgg.ThemeElements.FmtScheme.FillStyleLst.EG_FillProperties, _ddbf)
	_ddbf.SolidFill = &_dc.CT_SolidColorFillProperties{SchemeClr: &_dc.CT_SchemeColor{ValAttr: _dc.ST_SchemeColorValPhClr}}
	_ddbf = _dc.NewEG_FillProperties()
	_gdgg.ThemeElements.FmtScheme.FillStyleLst.EG_FillProperties = append(_gdgg.ThemeElements.FmtScheme.FillStyleLst.EG_FillProperties, _ddbf)
	_gdgg.ThemeElements.FmtScheme.FillStyleLst.EG_FillProperties = append(_gdgg.ThemeElements.FmtScheme.FillStyleLst.EG_FillProperties, _ddbf)
	_ddbf.GradFill = &_dc.CT_GradientFillProperties{RotWithShapeAttr: _ga.Bool(true), GsLst: &_dc.CT_GradientStopList{}, Lin: &_dc.CT_LinearShadeProperties{}}
	_ddbf.GradFill.Lin.AngAttr = _ga.Int32(5400000)
	_ddbf.GradFill.Lin.ScaledAttr = _ga.Bool(false)
	_ebag := _dc.NewCT_GradientStop()
	_ebag.PosAttr.ST_PositiveFixedPercentageDecimal = _ga.Int32(0)
	_ebag.SchemeClr = &_dc.CT_SchemeColor{ValAttr: _dc.ST_SchemeColorValPhClr}
	_ddbf.GradFill.GsLst.Gs = append(_ddbf.GradFill.GsLst.Gs, _ebag)
	_ebag = _dc.NewCT_GradientStop()
	_ebag.PosAttr.ST_PositiveFixedPercentageDecimal = _ga.Int32(50000)
	_ebag.SchemeClr = &_dc.CT_SchemeColor{ValAttr: _dc.ST_SchemeColorValPhClr}
	_ddbf.GradFill.GsLst.Gs = append(_ddbf.GradFill.GsLst.Gs, _ebag)
	_gdgg.ThemeElements.FmtScheme.LnStyleLst = _dc.NewCT_LineStyleList()
	for _ffe := 0; _ffe < 3; _ffe++ {
		_dbf := _dc.NewCT_LineProperties()
		_dbf.WAttr = _ga.Int32(int32(6350 * (_ffe + 1)))
		_dbf.CapAttr = _dc.ST_LineCapFlat
		_dbf.CmpdAttr = _dc.ST_CompoundLineSng
		_dbf.AlgnAttr = _dc.ST_PenAlignmentCtr
		_gdgg.ThemeElements.FmtScheme.LnStyleLst.Ln = append(_gdgg.ThemeElements.FmtScheme.LnStyleLst.Ln, _dbf)
	}
	_gdgg.ThemeElements.FmtScheme.EffectStyleLst = _dc.NewCT_EffectStyleList()
	for _ddd := 0; _ddd < 3; _ddd++ {
		_cfaa := _dc.NewCT_EffectStyleItem()
		_cfaa.EffectLst = _dc.NewCT_EffectList()
		_gdgg.ThemeElements.FmtScheme.EffectStyleLst.EffectStyle = append(_gdgg.ThemeElements.FmtScheme.EffectStyleLst.EffectStyle, _cfaa)
	}
	_bcecb := _dc.NewEG_FillProperties()
	_bcecb.SolidFill = &_dc.CT_SolidColorFillProperties{SchemeClr: &_dc.CT_SchemeColor{ValAttr: _dc.ST_SchemeColorValPhClr}}
	_gdgg.ThemeElements.FmtScheme.BgFillStyleLst.EG_FillProperties = append(_gdgg.ThemeElements.FmtScheme.BgFillStyleLst.EG_FillProperties, _bcecb)
	_gdgg.ThemeElements.FmtScheme.BgFillStyleLst.EG_FillProperties = append(_gdgg.ThemeElements.FmtScheme.BgFillStyleLst.EG_FillProperties, _bcecb)
	_gdgg.ThemeElements.FmtScheme.BgFillStyleLst.EG_FillProperties = append(_gdgg.ThemeElements.FmtScheme.BgFillStyleLst.EG_FillProperties, _ddbf)
	_fcfg._cffe = append(_fcfg._cffe, _gdgg)
	_geac := _ga.AbsoluteFilename(_ga.DocTypePresentation, _ga.ThemeType, 1)
	_fcfg.ContentTypes.AddOverride(_geac, _ga.ThemeContentType)
	_fcfg._ead.AddAutoRelationship(_ga.DocTypePresentation, _ga.OfficeDocumentType, 1, _ga.ThemeType)
	_cfb := _b.NewRelationships()
	_fcfg._adfb = append(_fcfg._adfb, _cfb)
	return _fcfg
}

// ExtLst returns the ExtLst property.
func (_geaf PresentationProperties) ExtLst() *_eb.CT_ExtensionList { return _geaf._bdg.ExtLst }

// SlideLayouts returns a slice of all layouts in SlideMaster.
func (_eebb SlideMaster) SlideLayouts() []SlideLayout {
	_bbda := map[string]int{}
	_eagd := []SlideLayout{}
	for _, _cdgd := range _eebb._eaee.Relationships() {
		_ddgea := _dg.Replace(_cdgd.Target(), ".\u002e\u002f\u0073\u006c\u0069\u0064e\u004c\u0061\u0079\u006f\u0075\u0074\u0073\u002f\u0073l\u0069\u0064\u0065L\u0061y\u006f\u0075\u0074", "", -1)
		_ddgea = _dg.Replace(_ddgea, "\u002e\u0078\u006d\u006c", "", -1)
		if _bac, _bbcc := _de.ParseInt(_ddgea, 10, 32); _bbcc == nil {
			_bbda[_cdgd.ID()] = int(_bac)
		}
	}
	for _, _fdcc := range _eebb._abfd.SldLayoutIdLst.SldLayoutId {
		if _bag, _ccef := _bbda[_fdcc.RIdAttr]; _ccef {
			_dbfa := _eebb._dbc._eeg[_bag-1]
			_eagd = append(_eagd, SlideLayout{_dbfa})
		}
	}
	return _eagd
}

// AddSlide adds a new slide to the presentation.
func (_fgg *Presentation) AddSlide() Slide {
	_acea := _eb.NewCT_SlideIdListEntry()
	_acea.IdAttr = _fgg.nextSlideID()
	_fgg._fff.SldIdLst.SldId = append(_fgg._fff.SldIdLst.SldId, _acea)
	_ecdb := _eb.NewSld()
	_ecdb.CSld.SpTree.NvGrpSpPr.CNvPr.IdAttr = 1
	_ecdb.CSld.SpTree.GrpSpPr.Xfrm = _dc.NewCT_GroupTransform2D()
	_ecdb.CSld.SpTree.GrpSpPr.Xfrm.Off = _dc.NewCT_Point2D()
	_ecdb.CSld.SpTree.GrpSpPr.Xfrm.Off.XAttr.ST_CoordinateUnqualified = _ga.Int64(0)
	_ecdb.CSld.SpTree.GrpSpPr.Xfrm.Off.YAttr.ST_CoordinateUnqualified = _ga.Int64(0)
	_ecdb.CSld.SpTree.GrpSpPr.Xfrm.Ext = _dc.NewCT_PositiveSize2D()
	_ecdb.CSld.SpTree.GrpSpPr.Xfrm.Ext.CxAttr = int64(0 * _g.Point)
	_ecdb.CSld.SpTree.GrpSpPr.Xfrm.Ext.CyAttr = int64(0 * _g.Point)
	_ecdb.CSld.SpTree.GrpSpPr.Xfrm.ChOff = _ecdb.CSld.SpTree.GrpSpPr.Xfrm.Off
	_ecdb.CSld.SpTree.GrpSpPr.Xfrm.ChExt = _ecdb.CSld.SpTree.GrpSpPr.Xfrm.Ext
	_fgg._dee = append(_fgg._dee, _ecdb)
	_dad := _fgg._ead.AddAutoRelationship(_ga.DocTypePresentation, _ga.OfficeDocumentType, len(_fgg._dee), _ga.SlideType)
	_acea.RIdAttr = _dad.ID()
	_cec := _ga.AbsoluteFilename(_ga.DocTypePresentation, _ga.SlideType, len(_fgg._dee))
	_fgg.ContentTypes.AddOverride(_cec, _ga.SlideContentType)
	_acaa := _b.NewRelationships()
	_fgg._bgac = append(_fgg._bgac, _acaa)
	_acaa.AddAutoRelationship(_ga.DocTypePresentation, _ga.SlideType, len(_fgg._eeg), _ga.SlideLayoutType)
	return Slide{_acea, _ecdb, _fgg, nil}
}

func (_cde *Presentation) onNewRelationship(_gbaaf *_a.DecodeMap, _dfe, _gfg string, _edga []*_e.File, _bbb *_dgb.Relationship, _dcedg _a.Target) error {
	_bad := _ga.DocTypePresentation
	switch _gfg {
	case _ga.OfficeDocumentType:
		_cde._fff = _eb.NewPresentation()
		_gbaaf.AddTarget(_dfe, _cde._fff, _gfg, 0)
		_gbaaf.AddTarget(_a.RelationsPathFor(_dfe), _cde._ead.X(), _gfg, 0)
		_bbb.TargetAttr = _ga.RelativeFilename(_bad, _dcedg.Typ, _gfg, 0)
	case _ga.CorePropertiesType:
		_gbaaf.AddTarget(_dfe, _cde.CoreProperties.X(), _gfg, 0)
		_bbb.TargetAttr = _ga.RelativeFilename(_bad, _dcedg.Typ, _gfg, 0)
	case _ga.CustomPropertiesType:
		_gbaaf.AddTarget(_dfe, _cde.CustomProperties.X(), _gfg, 0)
		_bbb.TargetAttr = _ga.RelativeFilename(_bad, _dcedg.Typ, _gfg, 0)
	case _ga.PresentationPropertiesType:
		_gbaaf.AddTarget(_dfe, _cde._cca.X(), _gfg, 0)
		_bbb.TargetAttr = _ga.RelativeFilename(_bad, _dcedg.Typ, _gfg, 0)
	case _ga.ViewPropertiesType:
		_gbaaf.AddTarget(_dfe, _cde._dccg.X(), _gfg, 0)
		_bbb.TargetAttr = _ga.RelativeFilename(_bad, _dcedg.Typ, _gfg, 0)
	case _ga.TableStylesType:
		_gbaaf.AddTarget(_dfe, _cde._afa.X(), _gfg, 0)
		_bbb.TargetAttr = _ga.RelativeFilename(_bad, _dcedg.Typ, _gfg, 0)
	case _ga.HyperLinkType:
		_fad := _dc.NewCT_Hyperlink()
		_fae := uint32(len(_cde._eab))
		_gbaaf.AddTarget(_dfe, _fad, _gfg, _fae)
		_cde._eab = append(_cde._eab, _fad)
	case _ga.CustomXMLType:
		_fggd := &_ga.XSDAny{}
		_abg := uint32(len(_cde._fda))
		_gbaaf.AddTarget(_dfe, _fggd, _gfg, _abg)
		_cde._fda = append(_cde._fda, _fggd)
		_bbb.TargetAttr = _ga.RelativeFilename(_bad, _dcedg.Typ, _gfg, len(_cde._fda))
	case _ga.ChartType:
		_ccac := chart{_fe: _f.NewChartSpace()}
		_effc := uint32(len(_cde._cbe))
		_gbaaf.AddTarget(_dfe, _ccac._fe, _gfg, _effc)
		_cde._cbe = append(_cde._cbe, &_ccac)
		_bbb.TargetAttr = _ga.RelativeFilename(_bad, _dcedg.Typ, _gfg, len(_cde._cbe))
		_ccac._daa = _bbb.TargetAttr
	case _ga.HandoutMasterType:
		_fcfe := _eb.NewHandoutMaster()
		_bcga := uint32(len(_cde._gfa))
		_gbaaf.AddTarget(_dfe, _fcfe, _gfg, _bcga)
		_cde._gfa = append(_cde._gfa, _fcfe)
		_bbb.TargetAttr = _ga.RelativeFilename(_bad, _dcedg.Typ, _gfg, len(_cde._gfa))
	case _ga.NotesMasterType:
		_efcc := _eb.NewNotesMaster()
		_facf := uint32(len(_cde._cac))
		_gbaaf.AddTarget(_dfe, _efcc, _gfg, _facf)
		_cde._cac = append(_cde._cac, _efcc)
		_bbb.TargetAttr = _ga.RelativeFilename(_bad, _dcedg.Typ, _gfg, len(_cde._cac))
	case _ga.ExtendedPropertiesType:
		_gbaaf.AddTarget(_dfe, _cde.AppProperties.X(), _gfg, 0)
		_bbb.TargetAttr = _ga.RelativeFilename(_bad, _dcedg.Typ, _gfg, 0)
	case _ga.SlideType:
		_ebc := _eb.NewSld()
		_cde._dee = append(_cde._dee, _ebc)
		_gbaaf.AddTarget(_dfe, _ebc, _gfg, uint32(len(_cde._dee)))
		_bbb.TargetAttr = _ga.RelativeFilename(_bad, _dcedg.Typ, _gfg, len(_cde._dee))
		_eeed := _b.NewRelationships()
		_gbaaf.AddTarget(_a.RelationsPathFor(_dfe), _eeed.X(), _gfg, 0)
		_cde._bgac = append(_cde._bgac, _eeed)
	case _ga.SlideMasterType:
		_dff := _eb.NewSldMaster()
		if !_gbaaf.AddTarget(_dfe, _dff, _gfg, uint32(len(_cde._feg)+1)) {
			return nil
		}
		_cde._feg = append(_cde._feg, _dff)
		_bbb.TargetAttr = _ga.RelativeFilename(_bad, _dcedg.Typ, _gfg, len(_cde._feg))
		_ebcg := _b.NewRelationships()
		_gbaaf.AddTarget(_a.RelationsPathFor(_dfe), _ebcg.X(), _gfg, 0)
		_cde._aaa = append(_cde._aaa, _ebcg)
	case _ga.SlideLayoutType:
		_eadb := _eb.NewSldLayout()
		if !_gbaaf.AddTarget(_dfe, _eadb, _gfg, uint32(len(_cde._eeg)+1)) {
			return nil
		}
		_cde._eeg = append(_cde._eeg, _eadb)
		_bbb.TargetAttr = _ga.RelativeFilename(_bad, _dcedg.Typ, _gfg, len(_cde._eeg))
		_bdfg := _b.NewRelationships()
		_gbaaf.AddTarget(_a.RelationsPathFor(_dfe), _bdfg.X(), _gfg, 0)
		_cde._abefb = append(_cde._abefb, _bdfg)
	case _ga.ThumbnailType:
		for _afd, _bdc := range _edga {
			if _bdc == nil {
				continue
			}
			if _bdc.Name == _dfe {
				_gec, _dcg := _bdc.Open()
				if _dcg != nil {
					return _da.Errorf("e\u0072\u0072\u006f\u0072\u0020\u0072e\u0061\u0064\u0069\u006e\u0067\u0020\u0074\u0068\u0075m\u0062\u006e\u0061i\u006c:\u0020\u0025\u0073", _dcg)
				}
				_cde.Thumbnail, _, _dcg = _fg.Decode(_gec)
				_gec.Close()
				if _dcg != nil {
					return _da.Errorf("\u0065\u0072\u0072\u006fr\u0020\u0064\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020t\u0068u\u006d\u0062\u006e\u0061\u0069\u006c\u003a \u0025\u0073", _dcg)
				}
				_edga[_afd] = nil
			}
		}
	case _ga.ThemeType:
		_gfe := _dc.NewTheme()
		if !_gbaaf.AddTarget(_dfe, _gfe, _gfg, uint32(len(_cde._cffe)+1)) {
			return nil
		}
		_cde._cffe = append(_cde._cffe, _gfe)
		_bbb.TargetAttr = _ga.RelativeFilename(_bad, _dcedg.Typ, _gfg, len(_cde._cffe))
		_cafd := _b.NewRelationships()
		_gbaaf.AddTarget(_a.RelationsPathFor(_dfe), _cafd.X(), _gfg, 0)
		_cde._adfb = append(_cde._adfb, _cafd)
	case _ga.ImageType:
		_dfe = _aag.Clean(_dfe)
		if _gge, _eegf := _cde._afb[_dfe]; _eegf {
			_bbb.TargetAttr = _gge
			return nil
		}
		_gcc := ""
		for _gcd, _bgc := range _edga {
			if _bgc == nil {
				continue
			}
			if _bgc.Name == _dfe {
				_ddac, _caa := _a.ExtractToDiskTmp(_bgc, _cde.TmpPath)
				if _caa != nil {
					return _caa
				}
				_dbb, _caa := _b.ImageFromStorage(_ddac)
				if _caa != nil {
					return _caa
				}
				_gcc = _dbb.Format
				_dec := _b.MakeImageRef(_dbb, &_cde.DocBase, _cde._ead)
				_dec.SetTarget("\u002e\u002e\u002f" + _dfe[4:])
				_cde.Images = append(_cde.Images, _dec)
				_edga[_gcd] = nil
				_gbaaf.RecordIndex(_dfe, len(_cde.Images))
				break
			}
		}
		_bbbb := _gbaaf.IndexFor(_dfe)
		_bbb.TargetAttr = _ga.RelativeImageFilename(_bad, _dcedg.Typ, _gfg, _bbbb, _gcc)
		_cde._afb[_dfe] = _bbb.TargetAttr
	default:
		_c.Log.Debug("\u0075\u006e\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006fn\u0073\u0068\u0069\u0070\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0073\u0020\u0074\u0067\u0074\u003a\u0020\u0025\u0073", _gfg, _dfe)
	}
	return nil
}

// AddParagraph adds a new paragraph to a placeholder.
func (_aac PlaceHolder) AddParagraph() _fd.Paragraph {
	_ccd := _fd.MakeParagraph(_dc.NewCT_TextParagraph())
	_aac._ggg.TxBody.P = append(_aac._ggg.TxBody.P, _ccd.X())
	return _ccd
}

func (_ggd TextBox) getOff() *_dc.CT_Point2D {
	if _ggd._eaeec.SpPr == nil {
		_ggd._eaeec.SpPr = _dc.NewCT_ShapeProperties()
	}
	if _ggd._eaeec.SpPr.Xfrm == nil {
		_ggd._eaeec.SpPr.Xfrm = _dc.NewCT_Transform2D()
	}
	if _ggd._eaeec.SpPr.Xfrm.Off == nil {
		_ggd._eaeec.SpPr.Xfrm.Off = _dc.NewCT_Point2D()
	}
	return _ggd._eaeec.SpPr.Xfrm.Off
}

// Slide represents a slide of a presentation.
type Slide struct {
	_gde  *_eb.CT_SlideIdListEntry
	_agcb *_eb.Sld
	_fea  *Presentation
	_feeg *_dc.CT_ColorMapping
}

// SetTextAnchor controls the text anchoring
func (_efda TextBox) SetTextAnchor(a _dc.ST_TextAnchoringType) {
	_efda._eaeec.TxBody.BodyPr = _dc.NewCT_TextBodyProperties()
	_efda._eaeec.TxBody.BodyPr.AnchorAttr = a
}

var _dcd = false

// X returns the inner wrapped XML type.
func (_agbg SlideLayout) X() *_eb.SldLayout { return _agbg._egb }

func _cdc(_afe *Presentation, _gae []*_eb.CT_GroupShapeChoice, _ae []rectangle, _eca []*TextItem) []*TextItem {
	for _, _ee := range _gae {
		_add := append([]rectangle{}, _ae...)
		for _, _cb := range _ee.Sp {
			_eca = append(_eca, _cff(_afe, _cb, nil, nil, _cb.SpPr.Xfrm, 0, _ae, _cb.TxBody.P)...)
		}
		for _, _cc := range _ee.GraphicFrame {
			if _cc != nil && _cc.Graphic != nil && _cc.Graphic.GraphicData != nil {
				_fec := _cc.Xfrm
				for _, _fcc := range _cc.Graphic.GraphicData.Any {
					if _eba, _aea := _fcc.(*_dc.Tbl); _aea {
						_fed := &_eba.CT_Table
						_efb := 0
						for _fcd, _ge := range _eba.Tr {
							for _aeb, _gd := range _ge.Tc {
								_ddb := &TableInfo{Table: _fed, Row: _ge, Cell: _gd, RowIndex: _fcd, ColIndex: _aeb}
								_eca = append(_eca, _cff(_afe, nil, _cc, _ddb, _fec, _efb, _ae, _gd.TxBody.P)...)
								_efb++
							}
						}
					}
				}
			}
		}
		for _, _gbg := range _ee.GrpSp {
			if _gbg.GrpSpPr != nil {
				_dgeb := _gbg.GrpSpPr.Xfrm
				var _cf, _fa int64
				if _dgeb.Off != nil {
					_fac, _ea := _dgeb.Off.XAttr.ST_CoordinateUnqualified, _dgeb.Off.YAttr.ST_CoordinateUnqualified
					if _fac != nil && _ea != nil {
						if _cfa := _dgeb.Ext; _cfa != nil {
							_cf, _fa = _cfa.CxAttr, _cfa.CyAttr
						}
						_add = append(_add, rectangle{_adc: *_fac, _dge: *_ea, _bcf: *_fac + _cf, _bf: *_ea + _fa})
					}
				}
			}
			_eca = _cdc(_afe, _gbg.Choice, _add, _eca)
		}
	}
	return _eca
}

// AddTextBox adds an empty textbox to a slide.
func (_ceb Slide) AddTextBox() TextBox {
	_cdfa := _eb.NewCT_GroupShapeChoice()
	_ceb._agcb.CSld.SpTree.Choice = append(_ceb._agcb.CSld.SpTree.Choice, _cdfa)
	_gab := _eb.NewCT_Shape()
	_cdfa.Sp = append(_cdfa.Sp, _gab)
	_gab.SpPr = _dc.NewCT_ShapeProperties()
	_gab.SpPr.Xfrm = _dc.NewCT_Transform2D()
	_gab.SpPr.PrstGeom = _dc.NewCT_PresetGeometry2D()
	_gab.SpPr.PrstGeom.PrstAttr = _dc.ST_ShapeTypeRect
	_gab.NvSpPr = _eb.NewCT_ShapeNonVisual()
	_gab.NvSpPr.CNvSpPr = _dc.NewCT_NonVisualDrawingShapeProps()
	_gede := true
	_gab.NvSpPr.CNvSpPr.TxBoxAttr = &_gede
	_gab.TxBody = _dc.NewCT_TextBody()
	_gab.TxBody.BodyPr = _dc.NewCT_TextBodyProperties()
	_gab.TxBody.BodyPr.WrapAttr = _dc.ST_TextWrappingTypeSquare
	_gab.TxBody.BodyPr.SpAutoFit = _dc.NewCT_TextShapeAutofit()
	_dgcb := TextBox{_gab}
	_dgcb.Properties().SetWidth(3 * _g.Inch)
	_dgcb.Properties().SetHeight(1 * _g.Inch)
	_dgcb.Properties().SetPosition(0, 0)
	return _dgcb
}

// Image is an image within a slide.
type Image struct{ _ffg *_eb.CT_Picture }

// AddImage adds an image to the document package, returning a reference that
// can be used to add the image to a run and place it in the document contents.
func (_ccda *Presentation) AddImage(i _b.Image) (_b.ImageRef, error) {
	_egd := _b.MakeImageRef(i, &_ccda.DocBase, _ccda._ead)
	if i.Data == nil && i.Path == "" {
		return _egd, _ab.New("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0064\u0061t\u0061\u0020\u006f\u0072\u0020\u0061\u0020\u0070\u0061\u0074\u0068")
	}
	if i.Format == "" {
		return _egd, _ab.New("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0061\u0020v\u0061\u006c\u0069\u0064\u0020\u0066\u006f\u0072\u006d\u0061\u0074")
	}
	if i.Size.X == 0 || i.Size.Y == 0 {
		return _egd, _ab.New("\u0069\u006d\u0061\u0067e\u0020\u006d\u0075\u0073\u0074\u0020\u0068\u0061\u0076\u0065 \u0061 \u0076\u0061\u006c\u0069\u0064\u0020\u0073i\u007a\u0065")
	}
	if i.Path != "" {
		_ccbg := _ag.Add(i.Path)
		if _ccbg != nil {
			return _egd, _ccbg
		}
	}
	_ccda.Images = append(_ccda.Images, _egd)
	_ccda.ContentTypes.EnsureDefault("\u0070\u006e\u0067", "\u0069m\u0061\u0067\u0065\u002f\u0070\u006eg")
	_ccda.ContentTypes.EnsureDefault("\u006a\u0070\u0065\u0067", "\u0069\u006d\u0061\u0067\u0065\u002f\u006a\u0070\u0065\u0067")
	_ccda.ContentTypes.EnsureDefault("\u006a\u0070\u0067", "\u0069\u006d\u0061\u0067\u0065\u002f\u006a\u0070\u0065\u0067")
	_ccda.ContentTypes.EnsureDefault("\u0077\u006d\u0066", "i\u006d\u0061\u0067\u0065\u002f\u0078\u002d\u0077\u006d\u0066")
	_ccda.ContentTypes.EnsureDefault(i.Format, "\u0069\u006d\u0061\u0067\u0065\u002f"+i.Format)
	return _egd, nil
}

// GetPlaceholderByIndex returns a placeholder given its index.  If there are multiplace
// placeholders of the same index, this method returns the first one.  You must use the
// PlaceHolders() method to access the others.
func (_bdgb Slide) GetPlaceholderByIndex(idx uint32) (PlaceHolder, error) {
	for _, _cgf := range _bdgb._agcb.CSld.SpTree.Choice {
		for _, _bffcg := range _cgf.Sp {
			if _bffcg.NvSpPr != nil && _bffcg.NvSpPr.NvPr != nil && _bffcg.NvSpPr.NvPr.Ph != nil {
				if (idx == 0 && _bffcg.NvSpPr.NvPr.Ph.IdxAttr == nil) || (_bffcg.NvSpPr.NvPr.Ph.IdxAttr != nil && *_bffcg.NvSpPr.NvPr.Ph.IdxAttr == idx) {
					return PlaceHolder{_bffcg, _bdgb._agcb}, nil
				}
			}
		}
	}
	return PlaceHolder{}, _ab.New("\u0075\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0066i\u006e\u0064\u0020\u0070\u006c\u0061\u0063\u0065\u0068\u006fl\u0064\u0065\u0072")
}

// Type returns the placeholder type
func (_bdb PlaceHolder) Type() _eb.ST_PlaceholderType { return _bdb._ggg.NvSpPr.NvPr.Ph.TypeAttr }

// GetLayoutByName retrieves a slide layout given a layout name.
func (_gad *Presentation) GetLayoutByName(name string) (SlideLayout, error) {
	for _, _bbd := range _gad._eeg {
		if _bbd.CSld.NameAttr != nil && name == *_bbd.CSld.NameAttr {
			return SlideLayout{_bbd}, nil
		}
	}
	return SlideLayout{}, _ab.New("\u0075\u006eab\u006c\u0065\u0020t\u006f\u0020\u0066\u0069nd \u006cay\u006f\u0075\u0074\u0020\u0077\u0069\u0074h \u0074\u0068\u0061\u0074\u0020\u006e\u0061m\u0065")
}

// X returns the inner wrapped XML type.
func (_bgg ViewProperties) X() *_eb.ViewPr { return _bgg._agdd }

// X returns the inner wrapped XML type.
func (_adf PlaceHolder) X() *_eb.CT_Shape { return _adf._ggg }

// WebPr returns the WebPr property.
func (_gff PresentationProperties) WebPr() *_eb.CT_WebProperties { return _gff._bdg.WebPr }

func (_fdbf *Presentation) save(_ffa _ddg.Writer, _faf bool) error {
	const _egc = "\u0050\u0072\u0065\u0073en\u0074\u0061\u0074\u0069\u006f\u006e\u003a\u0070\u002e\u0053\u0061\u0076\u0065"
	if _abf := _fdbf._fff.Validate(); _abf != nil {
		_c.Log.Debug("\u0076\u0061\u006c\u0069\u0064\u0061\u0074\u0069\u006f\u006e\u0020\u0065\u0072\u0072\u006fr\u0020i\u006e\u0020\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u003a\u0020\u0025\u0073", _abf)
	}
	//if !_aa.GetLicenseKey().IsLicensed() && !_dcd {
	//	_da.Println("\u0055\u006e\u006ci\u0063\u0065\u006e\u0073e\u0064\u0020\u0076\u0065\u0072\u0073\u0069o\u006e\u0020\u006f\u0066\u0020\u0055\u006e\u0069\u004f\u0066\u0066\u0069\u0063\u0065")
	//	_da.Println("\u002d\u0020\u0047e\u0074\u0020\u0061\u0020\u0074\u0072\u0069\u0061\u006c\u0020\u006c\u0069\u0063\u0065\u006e\u0073\u0065\u0020\u006f\u006e\u0020\u0068\u0074\u0074\u0070\u0073\u003a\u002f\u002fu\u006e\u0069\u0064\u006f\u0063\u002e\u0069\u006f")
	//	return _ab.New("\u0075\u006e\u0069\u006f\u0066\u0066\u0069\u0063\u0065\u0020\u006ci\u0063\u0065\u006e\u0073\u0065\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0064")
	//}
	if len(_fdbf._aed) == 0 {
		_fcfa, _gef := _aa.GenRefId("\u0070\u0077")
		if _gef != nil {
			_c.Log.Error("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v", _gef)
			return _gef
		}
		_fdbf._aed = _fcfa
	}
	if _fce := _aa.Track(_fdbf._aed, _egc); _fce != nil {
		_c.Log.Error("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v", _fce)
		return _fce
	}
	if _faf {
		_fdbf.ContentTypes.RemoveOverride("\u0061\u0070\u0070\u006c\u0069\u0063\u0061t\u0069\u006f\u006e\u002f\u0076\u006e\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002d\u006ff\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006de\u006e\u0074\u002e\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e\u006d\u006c\u002e\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e\u002e\u006d\u0061\u0069\u006e\u002b\u0078\u006d\u006c")
		_fdbf.ContentTypes.EnsureOverride("/\u0070\u0070\u0074\u002fpr\u0065s\u0065\u006e\u0074\u0061\u0074i\u006f\u006e\u002e\u0078\u006d\u006c", "\u0061\u0070pl\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0076\u006e\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066o\u0072\u006d\u0061\u0074s\u002d\u006f\u0066\u0066ic\u0065\u0064o\u0063u\u006d\u0065\u006e\u0074\u002e\u0070r\u0065\u0073\u0065n\u0074\u0061t\u0069\u006f\u006e\u006d\u006c\u002e\u0074\u0065\u006d\u0070\u006c\u0061\u0074\u0065.\u006d\u0061\u0069\u006e\u002b\u0078\u006d\u006c")
	} else {
		_fdbf.ContentTypes.RemoveOverride("\u0061\u0070pl\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0076\u006e\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066o\u0072\u006d\u0061\u0074s\u002d\u006f\u0066\u0066ic\u0065\u0064o\u0063u\u006d\u0065\u006e\u0074\u002e\u0070r\u0065\u0073\u0065n\u0074\u0061t\u0069\u006f\u006e\u006d\u006c\u002e\u0074\u0065\u006d\u0070\u006c\u0061\u0074\u0065.\u006d\u0061\u0069\u006e\u002b\u0078\u006d\u006c")
		_fdbf.ContentTypes.EnsureOverride("/\u0070\u0070\u0074\u002fpr\u0065s\u0065\u006e\u0074\u0061\u0074i\u006f\u006e\u002e\u0078\u006d\u006c", "\u0061\u0070\u0070\u006c\u0069\u0063\u0061t\u0069\u006f\u006e\u002f\u0076\u006e\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002d\u006ff\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006de\u006e\u0074\u002e\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e\u006d\u006c\u002e\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e\u002e\u006d\u0061\u0069\u006e\u002b\u0078\u006d\u006c")
	}
	_agb := _ga.DocTypePresentation
	_fbf := _e.NewWriter(_ffa)
	defer _fbf.Close()
	if _fddc := _a.MarshalXML(_fbf, _ga.BaseRelsFilename, _fdbf.Rels.X()); _fddc != nil {
		return _fddc
	}
	if _egfg := _a.MarshalXMLByType(_fbf, _agb, _ga.ExtendedPropertiesType, _fdbf.AppProperties.X()); _egfg != nil {
		return _egfg
	}
	if _ffaf := _a.MarshalXMLByType(_fbf, _agb, _ga.CorePropertiesType, _fdbf.CoreProperties.X()); _ffaf != nil {
		return _ffaf
	}
	if _bfa := _a.MarshalXMLByType(_fbf, _agb, _ga.PresentationPropertiesType, _fdbf._cca.X()); _bfa != nil {
		return _bfa
	}
	if _cfe := _a.MarshalXMLByType(_fbf, _agb, _ga.ViewPropertiesType, _fdbf._dccg.X()); _cfe != nil {
		return _cfe
	}
	if _fag := _a.MarshalXMLByType(_fbf, _agb, _ga.TableStylesType, _fdbf._afa.X()); _fag != nil {
		return _fag
	}
	if _fdbf.CustomProperties.X() != nil {
		if _bffc := _a.MarshalXMLByType(_fbf, _agb, _ga.CustomPropertiesType, _fdbf.CustomProperties.X()); _bffc != nil {
			return _bffc
		}
	}
	if _fdbf.Thumbnail != nil {
		_gefe, _feba := _fbf.Create("\u0064\u006f\u0063Pr\u006f\u0070\u0073\u002f\u0074\u0068\u0075\u006d\u0062\u006e\u0061\u0069\u006c\u002e\u006a\u0070\u0065\u0067")
		if _feba != nil {
			return _feba
		}
		if _dea := _ded.Encode(_gefe, _fdbf.Thumbnail, nil); _dea != nil {
			return _dea
		}
	}
	_dced := _ga.AbsoluteFilename(_agb, _ga.OfficeDocumentType, 0)
	if _geee := _a.MarshalXML(_fbf, _dced, _fdbf._fff); _geee != nil {
		return _geee
	}
	if _dcbda := _a.MarshalXML(_fbf, _a.RelationsPathFor(_dced), _fdbf._ead.X()); _dcbda != nil {
		return _dcbda
	}
	for _eag, _dbe := range _fdbf._dee {
		_cag := _ga.AbsoluteFilename(_ga.DocTypePresentation, _ga.SlideType, _eag+1)
		_a.MarshalXML(_fbf, _cag, _dbe)
		if !_fdbf._bgac[_eag].IsEmpty() {
			_cecc := _a.RelationsPathFor(_cag)
			_a.MarshalXML(_fbf, _cecc, _fdbf._bgac[_eag].X())
		}
	}
	for _baec, _cffd := range _fdbf._feg {
		_abc := _ga.AbsoluteFilename(_ga.DocTypePresentation, _ga.SlideMasterType, _baec+1)
		_a.MarshalXML(_fbf, _abc, _cffd)
		if !_fdbf._aaa[_baec].IsEmpty() {
			_gggb := _a.RelationsPathFor(_abc)
			_a.MarshalXML(_fbf, _gggb, _fdbf._aaa[_baec].X())
		}
	}
	for _dfb, _gbaa := range _fdbf._eeg {
		_cgcd := _ga.AbsoluteFilename(_ga.DocTypePresentation, _ga.SlideLayoutType, _dfb+1)
		_a.MarshalXML(_fbf, _cgcd, _gbaa)
		if !_fdbf._abefb[_dfb].IsEmpty() {
			_gdf := _a.RelationsPathFor(_cgcd)
			_a.MarshalXML(_fbf, _gdf, _fdbf._abefb[_dfb].X())
		}
	}
	for _gaf, _eac := range _fdbf._cffe {
		_cba := _ga.AbsoluteFilename(_ga.DocTypePresentation, _ga.ThemeType, _gaf+1)
		_a.MarshalXML(_fbf, _cba, _eac)
		if !_fdbf._adfb[_gaf].IsEmpty() {
			_fgd := _a.RelationsPathFor(_cba)
			_a.MarshalXML(_fbf, _fgd, _fdbf._adfb[_gaf].X())
		}
	}
	for _gaef, _eeb := range _fdbf._cbe {
		_eed := _ga.AbsoluteFilename(_agb, _ga.ChartType, _gaef+1)
		_a.MarshalXML(_fbf, _eed, _eeb)
	}
	for _cddg, _ege := range _fdbf._gfa {
		_bcg := _ga.AbsoluteFilename(_agb, _ga.HandoutMasterType, _cddg+1)
		_a.MarshalXML(_fbf, _bcg, _ege)
	}
	for _baa, _cgee := range _fdbf._cac {
		_acgb := _ga.AbsoluteFilename(_agb, _ga.NotesMasterType, _baa+1)
		_a.MarshalXML(_fbf, _acgb, _cgee)
	}
	for _cagb, _acc := range _fdbf._fda {
		_dgfd := _ga.AbsoluteFilename(_agb, _ga.CustomXMLType, _cagb+1)
		_a.MarshalXML(_fbf, _dgfd, _acc)
	}
	for _beb, _beg := range _fdbf.Images {
		if _gfdde := _b.AddImageToZip(_fbf, _beg, _beb+1, _ga.DocTypePresentation); _gfdde != nil {
			return _gfdde
		}
	}
	_fdbf.ContentTypes.EnsureDefault("\u0070\u006e\u0067", "\u0069m\u0061\u0067\u0065\u002f\u0070\u006eg")
	_fdbf.ContentTypes.EnsureDefault("\u006a\u0070\u0065\u0067", "\u0069\u006d\u0061\u0067\u0065\u002f\u006a\u0070\u0065\u0067")
	_fdbf.ContentTypes.EnsureDefault("\u006a\u0070\u0067", "\u0069\u006d\u0061\u0067\u0065\u002f\u006a\u0070\u0065\u0067")
	_fdbf.ContentTypes.EnsureDefault("\u0077\u006d\u0066", "i\u006d\u0061\u0067\u0065\u002f\u0078\u002d\u0077\u006d\u0066")
	if _aegb := _a.MarshalXML(_fbf, _ga.ContentTypesFilename, _fdbf.ContentTypes.X()); _aegb != nil {
		return _aegb
	}
	if _cece := _fdbf.WriteExtraFiles(_fbf); _cece != nil {
		return _cece
	}
	return nil
}

// AddParagraph adds a paragraph to the text box
func (_aee TextBox) AddParagraph() _fd.Paragraph {
	_edgg := _dc.NewCT_TextParagraph()
	_aee._eaeec.TxBody.P = append(_aee._eaeec.TxBody.P, _edgg)
	return _fd.MakeParagraph(_edgg)
}

// X returns the inner wrapped XML type.
func (_adbd PresentationProperties) X() *_eb.PresentationPr { return _adbd._bdg }

// Index returns the placeholder index
func (_cgc PlaceHolder) Index() uint32 {
	if _cgc._ggg.NvSpPr.NvPr.Ph.IdxAttr == nil {
		return 0
	}
	return *_cgc._ggg.NvSpPr.NvPr.Ph.IdxAttr
}

// PlaceHolder is a place holder from a slide.
type PlaceHolder struct {
	_ggg *_eb.CT_Shape
	_dcf *_eb.Sld
}

// ClearAll completely clears a placeholder. To be useable, at least one
// paragraph must be added after ClearAll via AddParagraph.
func (_gba PlaceHolder) ClearAll() {
	_gba._ggg.SpPr = _dc.NewCT_ShapeProperties()
	_gba._ggg.TxBody = _dc.NewCT_TextBody()
	_gba._ggg.TxBody.LstStyle = _dc.NewCT_TextListStyle()
}

// X returns the inner wrapped XML type.
func (_gccd Slide) X() *_eb.Sld { return _gccd._agcb }

// PresentationProperties contains document specific properties.
type PresentationProperties struct{ _bdg *_eb.PresentationPr }

// Less is for implementing sorting of two locations. Symbols share the same location if they are in the same paragraph or table. One location is 'less' than another first by y coordinate, if y coordinates are equal or differ by less than yEpsilon, then x coordinates are compared, then if they are also equal, indexes of locations in the table are compared, then positions of locations in a paragraph.
func (_bcec sort2d) Less(i, j int) bool {
	_efbe, _cad := _bcec[i], _bcec[j]
	_fbd, _fbe := _efbe._dga, _cad._dga
	_ecg, _addc := len(_fbd)-1, len(_fbe)-1
	_gg, _gbdd := 0, 0
	for {
		_aebf, _gfd, _be, _gdg, _cdf, _ebb, _bcb, _aeg := _fbd[_gg]._dge, _fbe[_gbdd]._dge, _fbd[_gg]._bf, _fbe[_gbdd]._bf, _fbd[_gg]._adc, _fbe[_gbdd]._adc, _fbd[_gg]._bcf, _fbe[_gbdd]._bcf
		if _aebf == _gfd || ((_fb.Abs(float64(_aebf)-float64(_gfd)) < _gbgg) && ((_aebf >= _gfd && _aebf <= _gdg) || (_gfd >= _aebf && _gfd <= _be)) && (_bcb < _ebb || _cdf > _aeg)) {
			if _cdf == _ebb {
				if _gg < _ecg && _gbdd < _addc {
					_gg++
					_gbdd++
					continue
				}
				if _gg >= _ecg && _gbdd >= _addc {
					break
				}
				return _gg >= _ecg
			} else {
				return _cdf < _ebb
			}
		} else {
			return _aebf < _gfd
		}
	}
	_aca, _edb, _fdd, _aegg := _efbe._fc, _cad._fc, _efbe._ca, _cad._ca
	if _aca == _edb {
		return _fdd <= _aegg
	}
	return _aca < _edb
}

// Clear clears the placeholder contents and adds a single empty paragraph.  The
// empty paragrah is required by PowerPoint or it will report the file as being
// invalid.
func (_fdg PlaceHolder) Clear() {
	_fdg.ClearAll()
	_dccb := _dc.NewCT_TextParagraph()
	_fdg._ggg.TxBody.P = []*_dc.CT_TextParagraph{_dccb}
	_dccb.EndParaRPr = _dc.NewCT_TextCharacterProperties()
	_dccb.EndParaRPr.LangAttr = _ga.String("\u0065\u006e\u002dU\u0053")
}

func (_ggc *Slide) getSlideRels() _b.Relationships {
	_dcdae := _ggc._fea
	for _dgac, _gfabf := range _dcdae.Slides() {
		if *_ggc._agcb == *_gfabf._agcb {
			return _dcdae._bgac[len(_dcdae._bgac)-_dgac-1]
		}
	}
	return _b.Relationships{}
}

const _gbgg float64 = 500000

func (_ad *chart) RelId() string { return _ad._ed }

// OpenTemplate opens a template file.
func OpenTemplate(fn string) (*Presentation, error) {
	_fdb, _bga := Open(fn)
	if _bga != nil {
		return nil, _bga
	}
	return _fdb, nil
}

// ExtLst returns the ExtLst property.
func (_baeb ViewProperties) ExtLst() *_eb.CT_ExtensionList { return _baeb._agdd.ExtLst }

// SaveAsTemplate writes the presentation out to a writer in the Zip package format as a template
func (_cadf *Presentation) SaveAsTemplate(w _ddg.Writer) error { return _cadf.save(w, true) }

// Properties returns the properties of the TextBox.
func (_bcfe Image) Properties() _fd.ShapeProperties {
	if _bcfe._ffg.SpPr == nil {
		_bcfe._ffg.SpPr = _dc.NewCT_ShapeProperties()
	}
	return _fd.MakeShapeProperties(_bcfe._ffg.SpPr)
}

// Remove removes a placeholder from a presentation.
func (_acb PlaceHolder) Remove() error {
	for _cbg, _dcbd := range _acb._dcf.CSld.SpTree.Choice {
		for _, _cdg := range _dcbd.Sp {
			if _cdg == _acb._ggg {
				copy(_acb._dcf.CSld.SpTree.Choice[_cbg:], _acb._dcf.CSld.SpTree.Choice[_cbg+1:])
				_acb._dcf.CSld.SpTree.Choice = _acb._dcf.CSld.SpTree.Choice[0 : len(_acb._dcf.CSld.SpTree.Choice)-1]
				return nil
			}
		}
	}
	return _ab.New("\u0070\u006c\u0061\u0063\u0065\u0068\u006f\u006c\u0064\u0065r\u0020\u006e\u006f\u0074\u0020\u0066\u006fu\u006e\u0064\u0020\u0069\u006e\u0020\u0073\u006c\u0069\u0064\u0065")
}

// Read reads a document from an io.Reader.
func Read(r _ddg.ReaderAt, size int64) (*Presentation, error) {
	const _dgc = "\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e:\u0052\u0065\u0061\u0064"
	//if !_aa.GetLicenseKey().IsLicensed() && !_dcd {
	//	_da.Println("\u0055\u006e\u006ci\u0063\u0065\u006e\u0073e\u0064\u0020\u0076\u0065\u0072\u0073\u0069o\u006e\u0020\u006f\u0066\u0020\u0055\u006e\u0069\u004f\u0066\u0066\u0069\u0063\u0065")
	//	_da.Println("\u002d\u0020\u0047e\u0074\u0020\u0061\u0020\u0074\u0072\u0069\u0061\u006c\u0020\u006c\u0069\u0063\u0065\u006e\u0073\u0065\u0020\u006f\u006e\u0020\u0068\u0074\u0074\u0070\u0073\u003a\u002f\u002fu\u006e\u0069\u0064\u006f\u0063\u002e\u0069\u006f")
	//	return nil, _ab.New("\u0075\u006e\u0069\u006f\u0066\u0066\u0069\u0063\u0065\u0020\u006ci\u0063\u0065\u006e\u0073\u0065\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0064")
	//}
	_eedg := _bfff()
	_bafa, _bge := _aa.GenRefId("\u0070\u0072")
	if _bge != nil {
		_c.Log.Error("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v", _bge)
		return nil, _bge
	}
	_eedg._aed = _bafa
	if _ebbe := _aa.Track(_eedg._aed, _dgc); _ebbe != nil {
		_c.Log.Error("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v", _ebbe)
		return nil, _ebbe
	}
	_cbf, _bge := _ag.TempDir("\u0075\u006e\u0069\u006f\u0066\u0066\u0069\u0063\u0065-\u0070\u0070\u0074\u0078")
	if _bge != nil {
		return nil, _bge
	}
	_eedg.TmpPath = _cbf
	_efbeb, _bge := _e.NewReader(r, size)
	if _bge != nil {
		return nil, _da.Errorf("\u0070a\u0072s\u0069\u006e\u0067\u0020\u007a\u0069\u0070\u003a\u0020\u0025\u0073", _bge)
	}
	_eggad := []*_e.File{}
	_eggad = append(_eggad, _efbeb.File...)
	_fgdf := false
	for _, _fgb := range _eggad {
		if _fgb.FileHeader.Name == "\u0064\u006f\u0063\u0050ro\u0070\u0073\u002f\u0063\u0075\u0073\u0074\u006f\u006d\u002e\u0078\u006d\u006c" {
			_fgdf = true
			break
		}
	}
	if _fgdf {
		_eedg.CreateCustomProperties()
	}
	_fbcd := _a.DecodeMap{}
	_fbcd.SetOnNewRelationshipFunc(_eedg.onNewRelationship)
	_fbcd.AddTarget(_ga.ContentTypesFilename, _eedg.ContentTypes.X(), "", 0)
	_fbcd.AddTarget(_ga.BaseRelsFilename, _eedg.Rels.X(), "", 0)
	if _cabe := _fbcd.Decode(_eggad); _cabe != nil {
		return nil, _cabe
	}
	for _, _gdd := range _eggad {
		if _gdd == nil {
			continue
		}
		if _dcbb := _eedg.AddExtraFileFromZip(_gdd); _dcbb != nil {
			return nil, _dcbb
		}
	}
	if _fgdf {
		_gged := false
		for _, _fde := range _eedg.Rels.X().Relationship {
			if _fde.TargetAttr == "\u0064\u006f\u0063\u0050ro\u0070\u0073\u002f\u0063\u0075\u0073\u0074\u006f\u006d\u002e\u0078\u006d\u006c" {
				_gged = true
				break
			}
		}
		if !_gged {
			_eedg.AddCustomRelationships()
		}
	}
	return _eedg, nil
}

// Presentation is the a presentation base document.
type Presentation struct {
	_b.DocBase
	_fff   *_eb.Presentation
	_ead   _b.Relationships
	_dee   []*_eb.Sld
	_bgac  []_b.Relationships
	_feg   []*_eb.SldMaster
	_aaa   []_b.Relationships
	_eeg   []*_eb.SldLayout
	_abefb []_b.Relationships
	_cffe  []*_dc.Theme
	_adfb  []_b.Relationships
	_afa   _b.TableStyles
	_cca   PresentationProperties
	_dccg  ViewProperties
	_eab   []*_dc.CT_Hyperlink
	_cbe   []*chart
	_gfa   []*_eb.HandoutMaster
	_cac   []*_eb.NotesMaster
	_fda   []*_ga.XSDAny
	_afb   map[string]string
	_aed   string
}

// ShowPr returns the ShowPr property.
func (_ced PresentationProperties) ShowPr() *_eb.CT_ShowProperties { return _ced._bdg.ShowPr }

// GetColorBySchemeColor returns *dml.CT_Color mapped to scheme colors like dk1, lt1 etc. depending on what theme is used in the presentation.
func (_abcd *Slide) GetColorBySchemeColor(schClr _dc.ST_SchemeColorVal) *_dc.CT_Color {
	_abcd.ensureClrMap()
	_dae := _abcd._feeg
	if _dae == nil {
		return nil
	}
	var _bfg _dc.ST_ColorSchemeIndex
	switch schClr.String() {
	case "\u0062\u0067\u0031":
		_bfg = _dae.Bg1Attr
	case "\u0062\u0067\u0032":
		_bfg = _dae.Bg2Attr
	case "\u0074\u0078\u0031":
		_bfg = _dae.Tx1Attr
	case "\u0074\u0078\u0032":
		_bfg = _dae.Tx2Attr
	case "\u0061c\u0063\u0065\u006e\u0074\u0031":
		_bfg = _dae.Accent1Attr
	case "\u0061c\u0063\u0065\u006e\u0074\u0032":
		_bfg = _dae.Accent2Attr
	case "\u0061c\u0063\u0065\u006e\u0074\u0033":
		_bfg = _dae.Accent3Attr
	case "\u0061c\u0063\u0065\u006e\u0074\u0034":
		_bfg = _dae.Accent4Attr
	case "\u0061c\u0063\u0065\u006e\u0074\u0035":
		_bfg = _dae.Accent5Attr
	case "\u0061c\u0063\u0065\u006e\u0074\u0036":
		_bfg = _dae.Accent6Attr
	case "\u0068\u006c\u0069n\u006b":
		_bfg = _dae.HlinkAttr
	case "\u0066\u006f\u006c\u0048\u006c\u0069\u006e\u006b":
		_bfg = _dae.FolHlinkAttr
	case "\u0064\u006b\u0031":
		_bfg = _dc.ST_ColorSchemeIndexDk1
	case "\u0064\u006b\u0032":
		_bfg = _dc.ST_ColorSchemeIndexDk2
	case "\u006c\u0074\u0031":
		_bfg = _dc.ST_ColorSchemeIndexLt1
	case "\u006c\u0074\u0032":
		_bfg = _dc.ST_ColorSchemeIndexLt2
	default:
		_bfg = _dc.ST_ColorSchemeIndexUnset
	}
	_eebd := _abcd._fea._cffe[0]
	_daca := _eebd.ThemeElements
	if _daca == nil {
		return nil
	}
	var _baeg *_dc.CT_Color
	_fca := _daca.ClrScheme
	switch _bfg.String() {
	case "\u0064\u006b\u0031":
		_baeg = _fca.Dk1
	case "\u0064\u006b\u0032":
		_baeg = _fca.Dk2
	case "\u006c\u0074\u0031":
		_baeg = _fca.Lt1
	case "\u006c\u0074\u0032":
		_baeg = _fca.Lt2
	case "\u0061c\u0063\u0065\u006e\u0074\u0031":
		_baeg = _fca.Accent1
	case "\u0061c\u0063\u0065\u006e\u0074\u0032":
		_baeg = _fca.Accent2
	case "\u0061c\u0063\u0065\u006e\u0074\u0033":
		_baeg = _fca.Accent3
	case "\u0061c\u0063\u0065\u006e\u0074\u0034":
		_baeg = _fca.Accent4
	case "\u0061c\u0063\u0065\u006e\u0074\u0035":
		_baeg = _fca.Accent5
	case "\u0061c\u0063\u0065\u006e\u0074\u0036":
		_baeg = _fca.Accent6
	case "\u0068\u006c\u0069n\u006b":
		_baeg = _fca.Hlink
	case "\u0066\u006f\u006c\u0048\u006c\u0069\u006e\u006b":
		_baeg = _fca.FolHlink
	default:
		return nil
	}
	return _baeg
}

// HtmlPubPr returns the HtmlPubPr property.
func (_gea PresentationProperties) HtmlPubPr() *_eb.CT_HtmlPublishProperties {
	return _gea._bdg.HtmlPubPr
}

// ValidateWithPath validates the slide passing path informaton for a better
// error message.
func (_ddge Slide) ValidateWithPath(path string) error {
	if _egca := _ddge._agcb.ValidateWithPath(path); _egca != nil {
		return _egca
	}
	for _, _cefd := range _ddge._agcb.CSld.SpTree.Choice {
		for _, _decf := range _cefd.Sp {
			if _decf.TxBody != nil {
				if len(_decf.TxBody.P) == 0 {
					return _ab.New(path + "\u0020\u003a \u0073\u006c\u0069\u0064\u0065 \u0073\u0068\u0061\u0070\u0065 \u0077\u0069\u0074\u0068\u0020\u0061\u0020\u0074\u0078\u0062\u006f\u0064\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0070\u0061\u0072\u0061\u0067\u0072\u0061\u0070\u0068\u0073")
				}
			}
		}
	}
	return nil
}

// PresentationText is an array of extracted text items which has some methods for representing extracted text.
type PresentationText struct{ Slides []*SlideText }

func (_dfd *Slide) ensureClrMap() {
	if len(_dfd._fea._feg) == 0 || len(_dfd._fea._cffe) == 0 {
		return
	}
	_bfae := _dfd._fea._feg[0]
	_cgfc := _bfae.ClrMap
	if _ddc := _dfd._agcb.ClrMapOvr; _ddc != nil {
		if _cce := _ddc.Choice; _cce != nil {
			if _cce.MasterClrMapping == nil {
				if _aeaf := _cce.OverrideClrMapping; _aeaf != nil {
					if _aeaf.Bg1Attr != _dc.ST_ColorSchemeIndexUnset {
						_cgfc.Bg1Attr = _aeaf.Bg1Attr
					}
					if _aeaf.Tx1Attr != _dc.ST_ColorSchemeIndexUnset {
						_cgfc.Tx1Attr = _aeaf.Tx1Attr
					}
					if _aeaf.Bg2Attr != _dc.ST_ColorSchemeIndexUnset {
						_cgfc.Bg2Attr = _aeaf.Bg2Attr
					}
					if _aeaf.Tx2Attr != _dc.ST_ColorSchemeIndexUnset {
						_cgfc.Tx2Attr = _aeaf.Tx2Attr
					}
					if _aeaf.Accent1Attr != _dc.ST_ColorSchemeIndexUnset {
						_cgfc.Accent1Attr = _aeaf.Accent1Attr
					}
					if _aeaf.Accent2Attr != _dc.ST_ColorSchemeIndexUnset {
						_cgfc.Accent2Attr = _aeaf.Accent2Attr
					}
					if _aeaf.Accent3Attr != _dc.ST_ColorSchemeIndexUnset {
						_cgfc.Accent3Attr = _aeaf.Accent3Attr
					}
					if _aeaf.Accent4Attr != _dc.ST_ColorSchemeIndexUnset {
						_cgfc.Accent4Attr = _aeaf.Accent4Attr
					}
					if _aeaf.Accent5Attr != _dc.ST_ColorSchemeIndexUnset {
						_cgfc.Accent5Attr = _aeaf.Accent5Attr
					}
					if _aeaf.Accent6Attr != _dc.ST_ColorSchemeIndexUnset {
						_cgfc.Accent6Attr = _aeaf.Accent6Attr
					}
					if _aeaf.HlinkAttr != _dc.ST_ColorSchemeIndexUnset {
						_cgfc.HlinkAttr = _aeaf.HlinkAttr
					}
					if _aeaf.FolHlinkAttr != _dc.ST_ColorSchemeIndexUnset {
						_cgfc.FolHlinkAttr = _aeaf.FolHlinkAttr
					}
				}
			}
		}
	}
	_dfd._feeg = _cgfc
}

// SetText sets the text of a placeholder for the initial paragraph. This is a
// shortcut method that is useful for things like titles which only contain a
// single paragraph.
func (_cdga PlaceHolder) SetText(text string) {
	_cdga.Clear()
	_adb := _dc.NewEG_TextRun()
	_adb.R = _dc.NewCT_RegularTextRun()
	_adb.R.T = text
	if len(_cdga._ggg.TxBody.P) == 0 {
		_cdga._ggg.TxBody.P = append(_cdga._ggg.TxBody.P, _dc.NewCT_TextParagraph())
	}
	_cdga._ggg.TxBody.P[0].EG_TextRun = nil
	_cdga._ggg.TxBody.P[0].EG_TextRun = append(_cdga._ggg.TxBody.P[0].EG_TextRun, _adb)
}

// GetImageByRelID returns an ImageRef with the associated relation ID in the
// slide.
func (_gbb *Slide) GetImageByRelID(relID string) (_b.ImageRef, bool) {
	_bbac := _gbb.getSlideRels()
	if (_bbac == _b.Relationships{}) {
		return _b.ImageRef{}, false
	}
	var _bef string
	for _, _eecc := range _bbac.X().Relationship {
		if _eecc.IdAttr == relID {
			_bef = _eecc.TargetAttr
			break
		}
	}
	for _, _debg := range _gbb._fea.Images {
		if _debg.Target() == _bef {
			return _debg, true
		}
	}
	return _b.ImageRef{}, false
}

// Themes returns an array of presentation themes.
func (_bdgg *Presentation) Themes() []*_dc.Theme { return _bdgg._cffe }

func (_aagb *Presentation) saveToFile(_dfcc string, _cfae bool) error {
	_eee, _cgec := _ec.Create(_dfcc)
	if _cgec != nil {
		return _cgec
	}
	defer _eee.Close()
	return _aagb.save(_eee, _cfae)
}

// TableInfo is used for keep information about a table, a row and a cell where the text is located.
type TableInfo struct {
	Table    *_dc.CT_Table
	Row      *_dc.CT_TableRow
	Cell     *_dc.CT_TableCell
	RowIndex int
	ColIndex int
}

// ExtractText returns text from a slide as a SlideText object.
func (_dac *Slide) ExtractText() *SlideText {
	_gb := _cdc(_dac._fea, _dac._agcb.CSld.SpTree.Choice, []rectangle{}, []*TextItem{})
	_cd.Sort(sort2d(_gb))
	return &SlideText{Items: _gb}
}

// PrnPr returns the PrnPr property.
func (_cfg PresentationProperties) PrnPr() *_eb.CT_PrintProperties { return _cfg._bdg.PrnPr }

// GetChartSpaceByRelId returns a *crt.ChartSpace with the associated relation ID in the
// slide.
func (_ebgd *Slide) GetChartSpaceByRelId(relId string) *_f.ChartSpace {
	_ddbc := _ebgd.getSlideRels()
	if (_ddbc == _b.Relationships{}) {
		return nil
	}
	_ggea := _ddbc.GetTargetByRelId(relId)
	for _, _aec := range _ebgd._fea._cbe {
		if _ggea == _aec.Target() {
			return _aec._fe
		}
	}
	return nil
}

// ClrMru returns the ClrMru property.
func (_ddbe PresentationProperties) ClrMru() *_dc.CT_ColorMRU { return _ddbe._bdg.ClrMru }

// LastViewAttr returns the LastViewAttr property.
func (_dgab ViewProperties) LastViewAttr() _eb.ST_ViewType { return _dgab._agdd.LastViewAttr }

func (_af *chart) X() *_f.ChartSpace { return _af._fe }

// SlideLayout is a layout from which slides can be created.
type SlideLayout struct{ _egb *_eb.SldLayout }

func _facg(_fdba []*_eb.CT_GroupShapeChoice) []*_eb.CT_GroupShapeChoice {
	var _adcf []*_eb.CT_GroupShapeChoice
	for _, _efa := range _fdba {
		if len(_efa.Pic) == 0 {
			_adcf = append(_adcf, _efa)
		}
	}
	return _adcf
}

// Open opens and reads a document from a file (.pptx).
func Open(filename string) (*Presentation, error) {
	_dedg, _bgf := _ec.Open(filename)
	if _bgf != nil {
		return nil, _da.Errorf("e\u0072r\u006f\u0072\u0020\u006f\u0070\u0065\u006e\u0069n\u0067\u0020\u0025\u0073: \u0025\u0073", filename, _bgf)
	}
	defer _dedg.Close()
	_acd, _bgf := _ec.Stat(filename)
	if _bgf != nil {
		return nil, _da.Errorf("e\u0072r\u006f\u0072\u0020\u006f\u0070\u0065\u006e\u0069n\u0067\u0020\u0025\u0073: \u0025\u0073", filename, _bgf)
	}
	_ = _acd
	return Read(_dedg, _acd.Size())
}

// X returns the inner wrapped XML type.
func (_dcfc *Presentation) X() *_eb.Presentation { return _dcfc._fff }

// NotesTextViewPr returns the NotesTextViewPr property.
func (_cbc ViewProperties) NotesTextViewPr() *_eb.CT_NotesTextViewProperties {
	return _cbc._agdd.NotesTextViewPr
}

// X returns TextBox's underlying *pml.CT_Shape.
func (_bfb TextBox) X() *_eb.CT_Shape { return _bfb._eaeec }

type sort2d []*TextItem

// Close closes the presentation, removing any temporary files that might have been
// created when opening a document.
func (_baaa *Presentation) Close() error {
	if _baaa.TmpPath != "" {
		return _ag.RemoveAll(_baaa.TmpPath)
	}
	return nil
}

// NewViewProperties constructs a new ViewProperties.
func NewViewProperties() ViewProperties { return ViewProperties{_agdd: _eb.NewViewPr()} }

func (_cg sort2d) Swap(i, j int) { _cg[i], _cg[j] = _cg[j], _cg[i] }

// Paragraphs returns the paragraphs defined in the placeholder.
func (_cfad PlaceHolder) Paragraphs() []_fd.Paragraph {
	_acag := []_fd.Paragraph{}
	for _, _abef := range _cfad._ggg.TxBody.P {
		_acag = append(_acag, _fd.MakeParagraph(_abef))
	}
	return _acag
}

func (_bc *chart) Target() string { return _bc._daa }

// GridSpacing returns the GridSpacing property.
func (_fafg ViewProperties) GridSpacing() *_dc.CT_PositiveSize2D { return _fafg._agdd.GridSpacing }

// SetOffsetX sets horizontal offset of text box in distance units (see measurement package).
func (_gbfb TextBox) SetOffsetX(offX float64) {
	_aadc := _gbfb.getOff()
	_ade := _g.ToEMU(offX)
	_aadc.XAttr = _dc.ST_Coordinate{ST_CoordinateUnqualified: &_ade}
}

// AddImageToRels adds an image relationship to a slide without putting image on the slide.
func (_edgag Slide) AddImageToRels(img _b.ImageRef) string {
	_gfb := 0
	for _bafag, _gbggf := range _edgag._fea.Images {
		if _gbggf == img {
			_gfb = _bafag + 1
			break
		}
	}
	var _fbee string
	for _gggf, _daaf := range _edgag._fea.Slides() {
		if _daaf._agcb == _edgag._agcb {
			_eacc := _da.Sprintf("\u002e\u002e\u002f\u006ded\u0069\u0061\u002f\u0069\u006d\u0061\u0067\u0065\u0025\u0064\u002e\u0025\u0073", _gfb, img.Format())
			_gdac := _edgag._fea._bgac[_gggf].AddRelationship(_eacc, _ga.ImageType)
			_fbee = _gdac.ID()
		}
	}
	return _fbee
}

// GetPlaceholder returns a placeholder given its type.  If there are multiplace
// placeholders of the same type, this method returns the first one.  You must use the
// PlaceHolders() method to access the others.
func (_cbfe Slide) GetPlaceholder(t _eb.ST_PlaceholderType) (PlaceHolder, error) {
	for _, _gafa := range _cbfe._agcb.CSld.SpTree.Choice {
		for _, _efd := range _gafa.Sp {
			if _efd.NvSpPr != nil && _efd.NvSpPr.NvPr != nil && _efd.NvSpPr.NvPr.Ph != nil {
				if _efd.NvSpPr.NvPr.Ph.TypeAttr == t {
					return PlaceHolder{_efd, _cbfe._agcb}, nil
				}
			}
		}
	}
	return PlaceHolder{}, _ab.New("\u0075\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0066i\u006e\u0064\u0020\u0070\u006c\u0061\u0063\u0065\u0068\u006fl\u0064\u0065\u0072")
}

// Slides returns the slides in the presentation.
func (_gdfa *Presentation) Slides() []Slide {
	_ged := []Slide{}
	for _dbbb, _eegg := range _gdfa._dee {
		_ged = append(_ged, Slide{_gdfa._fff.SldIdLst.SldId[_dbbb], _eegg, _gdfa, nil})
	}
	return _ged
}

// GetTableStyleById returns *dml.CT_TableStyle by its style id.
func (_fafa *Presentation) GetTableStyleById(id string) *_dc.CT_TableStyle {
	_cgeb := _fafa._afa.TblStyle()
	for _, _bca := range _cgeb {
		if _bca.StyleIdAttr == id {
			return _bca
		}
	}
	return nil
}

// Name returns the name of the slide layout.
func (_fbb SlideLayout) Name() string {
	if _fbb._egb.CSld != nil && _fbb._egb.CSld.NameAttr != nil {
		return *_fbb._egb.CSld.NameAttr
	}
	return ""
}

// SaveToFileAsTemplate writes the Presentation out to a file as a template.
func (_deb *Presentation) SaveToFileAsTemplate(path string) error {
	return _deb.saveToFile(path, true)
}

// SlideLayouts returns the slide layouts defined in the presentation.
func (_fdcg *Presentation) SlideLayouts() []SlideLayout {
	_cade := []SlideLayout{}
	for _, _efbed := range _fdcg._eeg {
		_cade = append(_cade, SlideLayout{_efbed})
	}
	return _cade
}
