//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package activeX

import (
	_b "encoding/xml"
	_e "fmt"
	_fc "github.com/sanhuanshisanshao/unioffice"
	_a "github.com/sanhuanshisanshao/unioffice/common/logger"
)

type CT_OcxPrChoice struct {
	Font    *CT_Font
	Picture *CT_Picture
}

func NewCT_Picture() *CT_Picture { _dfc := &CT_Picture{}; return _dfc }
func (_agd *CT_OcxPrChoice) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_bae:
	for {
		_agg, _adac := d.Token()
		if _adac != nil {
			return _adac
		}
		switch _fg := _agg.(type) {
		case _b.StartElement:
			switch _fg.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073c\u0068\u0065\u006das\u002e\u006d\u0069\u0063\u0072\u006fs\u006f\u0066\u0074\u002e\u0063\u006f\u006d\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u002f2\u0030\u0030\u0036\u002f\u0061\u0063\u0074\u0069v\u0065\u0058", Local: "\u0066\u006f\u006e\u0074"}:
				_agd.Font = NewCT_Font()
				if _ebed := d.DecodeElement(_agd.Font, &_fg); _ebed != nil {
					return _ebed
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073c\u0068\u0065\u006das\u002e\u006d\u0069\u0063\u0072\u006fs\u006f\u0066\u0074\u002e\u0063\u006f\u006d\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u002f2\u0030\u0030\u0036\u002f\u0061\u0063\u0074\u0069v\u0065\u0058", Local: "\u0070i\u0063\u0074\u0075\u0072\u0065"}:
				_agd.Picture = NewCT_Picture()
				if _eab := d.DecodeElement(_agd.Picture, &_fg); _eab != nil {
					return _eab
				}
			default:
				_a.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069n\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006et\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u004f\u0063\u0078\u0050\u0072\u0043\u0068o\u0069c\u0065\u0020\u0025\u0076", _fg.Name)
				if _dd := d.Skip(); _dd != nil {
					return _dd
				}
			}
		case _b.EndElement:
			break _bae
		case _b.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_OcxPr and its children, prefixing error messages with path
func (_ebe *CT_OcxPr) ValidateWithPath(path string) error {
	if _ebe.Choice != nil {
		if _gcc := _ebe.Choice.ValidateWithPath(path + "\u002fC\u0068\u006f\u0069\u0063\u0065"); _gcc != nil {
			return _gcc
		}
	}
	return nil
}
func (_cgd *ST_Persistence) UnmarshalXMLAttr(attr _b.Attr) error {
	switch attr.Value {
	case "":
		*_cgd = 0
	case "\u0070e\u0072s\u0069\u0073\u0074\u0050\u0072o\u0070\u0065r\u0074\u0079\u0042\u0061\u0067":
		*_cgd = 1
	case "\u0070\u0065\u0072\u0073\u0069\u0073\u0074\u0053\u0074\u0072\u0065\u0061\u006d":
		*_cgd = 2
	case "\u0070\u0065\u0072\u0073\u0069\u0073\u0074\u0053\u0074\u0072\u0065\u0061m\u0049\u006e\u0069\u0074":
		*_cgd = 3
	case "\u0070\u0065\u0072\u0073\u0069\u0073\u0074\u0053\u0074o\u0072\u0061\u0067\u0065":
		*_cgd = 4
	}
	return nil
}

// ValidateWithPath validates the CT_OcxPrChoice and its children, prefixing error messages with path
func (_dag *CT_OcxPrChoice) ValidateWithPath(path string) error {
	if _dag.Font != nil {
		if _ebd := _dag.Font.ValidateWithPath(path + "\u002f\u0046\u006fn\u0074"); _ebd != nil {
			return _ebd
		}
	}
	if _dag.Picture != nil {
		if _eeca := _dag.Picture.ValidateWithPath(path + "\u002f\u0050\u0069\u0063\u0074\u0075\u0072\u0065"); _eeca != nil {
			return _eeca
		}
	}
	return nil
}
func (_eec *CT_Ocx) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0061\u0078\u003a\u0063\u006c\u0061\u0073\u0073\u0069\u0064"}, Value: _e.Sprintf("\u0025\u0076", _eec.ClassidAttr)})
	if _eec.LicenseAttr != nil {
		start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0061\u0078\u003a\u006c\u0069\u0063\u0065\u006e\u0073\u0065"}, Value: _e.Sprintf("\u0025\u0076", *_eec.LicenseAttr)})
	}
	if _eec.IdAttr != nil {
		start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0072\u003a\u0069\u0064"}, Value: _e.Sprintf("\u0025\u0076", *_eec.IdAttr)})
	}
	_cg, _beb := _eec.PersistenceAttr.MarshalXMLAttr(_b.Name{Local: "\u0061\u0078\u003a\u0070\u0065\u0072\u0073\u0069\u0073t\u0065\u006e\u0063\u0065"})
	if _beb != nil {
		return _beb
	}
	start.Attr = append(start.Attr, _cg)
	e.EncodeToken(start)
	if _eec.OcxPr != nil {
		_da := _b.StartElement{Name: _b.Name{Local: "\u0061\u0078\u003a\u006f\u0063\u0078\u0050\u0072"}}
		for _, _bc := range _eec.OcxPr {
			e.EncodeElement(_bc, _da)
		}
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_fdc ST_Persistence) MarshalXMLAttr(name _b.Name) (_b.Attr, error) {
	_eed := _b.Attr{}
	_eed.Name = name
	switch _fdc {
	case ST_PersistenceUnset:
		_eed.Value = ""
	case ST_PersistencePersistPropertyBag:
		_eed.Value = "\u0070e\u0072s\u0069\u0073\u0074\u0050\u0072o\u0070\u0065r\u0074\u0079\u0042\u0061\u0067"
	case ST_PersistencePersistStream:
		_eed.Value = "\u0070\u0065\u0072\u0073\u0069\u0073\u0074\u0053\u0074\u0072\u0065\u0061\u006d"
	case ST_PersistencePersistStreamInit:
		_eed.Value = "\u0070\u0065\u0072\u0073\u0069\u0073\u0074\u0053\u0074\u0072\u0065\u0061m\u0049\u006e\u0069\u0074"
	case ST_PersistencePersistStorage:
		_eed.Value = "\u0070\u0065\u0072\u0073\u0069\u0073\u0074\u0053\u0074o\u0072\u0061\u0067\u0065"
	}
	return _eed, nil
}
func NewOcx() *Ocx { _fcc := &Ocx{}; _fcc.CT_Ocx = *NewCT_Ocx(); return _fcc }

// ValidateWithPath validates the CT_Picture and its children, prefixing error messages with path
func (_dge *CT_Picture) ValidateWithPath(path string) error { return nil }
func (_be *CT_Font) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _be.PersistenceAttr != ST_PersistenceUnset {
		_ed, _aa := _be.PersistenceAttr.MarshalXMLAttr(_b.Name{Local: "\u0061\u0078\u003a\u0070\u0065\u0072\u0073\u0069\u0073t\u0065\u006e\u0063\u0065"})
		if _aa != nil {
			return _aa
		}
		start.Attr = append(start.Attr, _ed)
	}
	if _be.IdAttr != nil {
		start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0072\u003a\u0069\u0064"}, Value: _e.Sprintf("\u0025\u0076", *_be.IdAttr)})
	}
	e.EncodeToken(start)
	if _be.OcxPr != nil {
		_ac := _b.StartElement{Name: _b.Name{Local: "\u0061\u0078\u003a\u006f\u0063\u0078\u0050\u0072"}}
		for _, _edg := range _be.OcxPr {
			e.EncodeElement(_edg, _ac)
		}
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_Picture and its children
func (_edgb *CT_Picture) Validate() error {
	return _edgb.ValidateWithPath("\u0043\u0054\u005f\u0050\u0069\u0063\u0074\u0075\u0072\u0065")
}
func (_dg *CT_OcxPr) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _fcfg := range start.Attr {
		if _fcfg.Name.Local == "\u006e\u0061\u006d\u0065" {
			_ef, _bce := _fcfg.Value, error(nil)
			if _bce != nil {
				return _bce
			}
			_dg.NameAttr = _ef
			continue
		}
		if _fcfg.Name.Local == "\u0076\u0061\u006cu\u0065" {
			_cc, _agf := _fcfg.Value, error(nil)
			if _agf != nil {
				return _agf
			}
			_dg.ValueAttr = &_cc
			continue
		}
	}
_dec:
	for {
		_dgf, _bde := d.Token()
		if _bde != nil {
			return _bde
		}
		switch _abf := _dgf.(type) {
		case _b.StartElement:
			switch _abf.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073c\u0068\u0065\u006das\u002e\u006d\u0069\u0063\u0072\u006fs\u006f\u0066\u0074\u002e\u0063\u006f\u006d\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u002f2\u0030\u0030\u0036\u002f\u0061\u0063\u0074\u0069v\u0065\u0058", Local: "\u0066\u006f\u006e\u0074"}:
				_dg.Choice = NewCT_OcxPrChoice()
				if _eea := d.DecodeElement(&_dg.Choice.Font, &_abf); _eea != nil {
					return _eea
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073c\u0068\u0065\u006das\u002e\u006d\u0069\u0063\u0072\u006fs\u006f\u0066\u0074\u002e\u0063\u006f\u006d\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u002f2\u0030\u0030\u0036\u002f\u0061\u0063\u0074\u0069v\u0065\u0058", Local: "\u0070i\u0063\u0074\u0075\u0072\u0065"}:
				_dg.Choice = NewCT_OcxPrChoice()
				if _ga := d.DecodeElement(&_dg.Choice.Picture, &_abf); _ga != nil {
					return _ga
				}
			default:
				_a.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006eg\u0020\u0075\u006es\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u004f\u0063\u0078\u0050\u0072\u0020\u0025\u0076", _abf.Name)
				if _efa := d.Skip(); _efa != nil {
					return _efa
				}
			}
		case _b.EndElement:
			break _dec
		case _b.CharData:
		}
	}
	return nil
}
func (_ffc ST_Persistence) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	return e.EncodeElement(_ffc.String(), start)
}

// ValidateWithPath validates the Ocx and its children, prefixing error messages with path
func (_agdd *Ocx) ValidateWithPath(path string) error {
	if _aaa := _agdd.CT_Ocx.ValidateWithPath(path); _aaa != nil {
		return _aaa
	}
	return nil
}

// Validate validates the CT_Font and its children
func (_gdc *CT_Font) Validate() error {
	return _gdc.ValidateWithPath("\u0043T\u005f\u0046\u006f\u006e\u0074")
}

// Validate validates the CT_Ocx and its children
func (_aec *CT_Ocx) Validate() error {
	return _aec.ValidateWithPath("\u0043\u0054\u005f\u004f\u0063\u0078")
}
func (_aba *Ocx) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_aba.CT_Ocx = *NewCT_Ocx()
	for _, _cb := range start.Attr {
		if _cb.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073" && _cb.Name.Local == "\u0069\u0064" || _cb.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f\u002fp\u0075\u0072\u006c.\u006f\u0063\u006cc\u002e\u006fr\u0067\u002f\u006f\u006f\u0078\u006dl\u002fof\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073" && _cb.Name.Local == "\u0069\u0064" {
			_agdb, _agc := _cb.Value, error(nil)
			if _agc != nil {
				return _agc
			}
			_aba.IdAttr = &_agdb
			continue
		}
		if _cb.Name.Local == "\u0063l\u0061\u0073\u0073\u0069\u0064" {
			_gef, _efag := _cb.Value, error(nil)
			if _efag != nil {
				return _efag
			}
			_aba.ClassidAttr = _gef
			continue
		}
		if _cb.Name.Local == "\u006ci\u0063\u0065\u006e\u0073\u0065" {
			_eba, _aggf := _cb.Value, error(nil)
			if _aggf != nil {
				return _aggf
			}
			_aba.LicenseAttr = &_eba
			continue
		}
		if _cb.Name.Local == "p\u0065\u0072\u0073\u0069\u0073\u0074\u0065\u006e\u0063\u0065" {
			_aba.PersistenceAttr.UnmarshalXMLAttr(_cb)
			continue
		}
	}
_dbf:
	for {
		_abe, _fe := d.Token()
		if _fe != nil {
			return _fe
		}
		switch _fgg := _abe.(type) {
		case _b.StartElement:
			switch _fgg.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073c\u0068\u0065\u006das\u002e\u006d\u0069\u0063\u0072\u006fs\u006f\u0066\u0074\u002e\u0063\u006f\u006d\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u002f2\u0030\u0030\u0036\u002f\u0061\u0063\u0074\u0069v\u0065\u0058", Local: "\u006f\u0063\u0078P\u0072"}:
				_gg := NewCT_OcxPr()
				if _ceaa := d.DecodeElement(_gg, &_fgg); _ceaa != nil {
					return _ceaa
				}
				_aba.OcxPr = append(_aba.OcxPr, _gg)
			default:
				_a.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0020\u006fn\u0020\u004fc\u0078\u0020\u0025\u0076", _fgg.Name)
				if _cff := d.Skip(); _cff != nil {
					return _cff
				}
			}
		case _b.EndElement:
			break _dbf
		case _b.CharData:
		}
	}
	return nil
}
func (_g *CT_Font) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _bec := range start.Attr {
		if _bec.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073" && _bec.Name.Local == "\u0069\u0064" || _bec.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f\u002fp\u0075\u0072\u006c.\u006f\u0063\u006cc\u002e\u006fr\u0067\u002f\u006f\u006f\u0078\u006dl\u002fof\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073" && _bec.Name.Local == "\u0069\u0064" {
			_eg, _c := _bec.Value, error(nil)
			if _c != nil {
				return _c
			}
			_g.IdAttr = &_eg
			continue
		}
		if _bec.Name.Local == "p\u0065\u0072\u0073\u0069\u0073\u0074\u0065\u006e\u0063\u0065" {
			_g.PersistenceAttr.UnmarshalXMLAttr(_bec)
			continue
		}
	}
_ade:
	for {
		_eb, _gf := d.Token()
		if _gf != nil {
			return _gf
		}
		switch _ebb := _eb.(type) {
		case _b.StartElement:
			switch _ebb.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073c\u0068\u0065\u006das\u002e\u006d\u0069\u0063\u0072\u006fs\u006f\u0066\u0074\u002e\u0063\u006f\u006d\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u002f2\u0030\u0030\u0036\u002f\u0061\u0063\u0074\u0069v\u0065\u0058", Local: "\u006f\u0063\u0078P\u0072"}:
				_d := NewCT_OcxPr()
				if _ag := d.DecodeElement(_d, &_ebb); _ag != nil {
					return _ag
				}
				_g.OcxPr = append(_g.OcxPr, _d)
			default:
				_a.Log.Debug("\u0073\u006b\u0069p\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043T\u005f\u0046\u006f\u006e\u0074\u0020\u0025\u0076", _ebb.Name)
				if _gd := d.Skip(); _gd != nil {
					return _gd
				}
			}
		case _b.EndElement:
			break _ade
		case _b.CharData:
		}
	}
	return nil
}

type CT_OcxPr struct {
	NameAttr  string
	ValueAttr *string
	Choice    *CT_OcxPrChoice
}

// ValidateWithPath validates the CT_Font and its children, prefixing error messages with path
func (_ae *CT_Font) ValidateWithPath(path string) error {
	if _fd := _ae.PersistenceAttr.ValidateWithPath(path + "\u002f\u0050e\u0072\u0073\u0069s\u0074\u0065\u006e\u0063\u0065\u0041\u0074\u0074\u0072"); _fd != nil {
		return _fd
	}
	for _de, _bd := range _ae.OcxPr {
		if _ada := _bd.ValidateWithPath(_e.Sprintf("\u0025\u0073\u002fO\u0063\u0078\u0050\u0072\u005b\u0025\u0064\u005d", path, _de)); _ada != nil {
			return _ada
		}
	}
	return nil
}
func (_dbd *CT_Picture) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _af := range start.Attr {
		if _af.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073" && _af.Name.Local == "\u0069\u0064" || _af.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f\u002fp\u0075\u0072\u006c.\u006f\u0063\u006cc\u002e\u006fr\u0067\u002f\u006f\u006f\u0078\u006dl\u002fof\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073" && _af.Name.Local == "\u0069\u0064" {
			_fac, _faa := _af.Value, error(nil)
			if _faa != nil {
				return _faa
			}
			_dbd.IdAttr = &_fac
			continue
		}
	}
	for {
		_dbe, _aac := d.Token()
		if _aac != nil {
			return _e.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0043\u0054\u005f\u0050\u0069\u0063\u0074\u0075\u0072\u0065\u003a\u0020%\u0073", _aac)
		}
		if _gfg, _egb := _dbe.(_b.EndElement); _egb && _gfg.Name == start.Name {
			break
		}
	}
	return nil
}
func (_ddb ST_Persistence) String() string {
	switch _ddb {
	case 0:
		return ""
	case 1:
		return "\u0070e\u0072s\u0069\u0073\u0074\u0050\u0072o\u0070\u0065r\u0074\u0079\u0042\u0061\u0067"
	case 2:
		return "\u0070\u0065\u0072\u0073\u0069\u0073\u0074\u0053\u0074\u0072\u0065\u0061\u006d"
	case 3:
		return "\u0070\u0065\u0072\u0073\u0069\u0073\u0074\u0053\u0074\u0072\u0065\u0061m\u0049\u006e\u0069\u0074"
	case 4:
		return "\u0070\u0065\u0072\u0073\u0069\u0073\u0074\u0053\u0074o\u0072\u0061\u0067\u0065"
	}
	return ""
}
func (_fgb ST_Persistence) ValidateWithPath(path string) error {
	switch _fgb {
	case 0, 1, 2, 3, 4:
	default:
		return _e.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_fgb))
	}
	return nil
}
func (_aeb *CT_Picture) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _aeb.IdAttr != nil {
		start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0072\u003a\u0069\u0064"}, Value: _e.Sprintf("\u0025\u0076", *_aeb.IdAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func NewCT_OcxPrChoice() *CT_OcxPrChoice { _gcf := &CT_OcxPrChoice{}; return _gcf }
func NewCT_Font() *CT_Font               { _ee := &CT_Font{}; return _ee }
func (_cgag *Ocx) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0078\u006d\u006cn\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073c\u0068\u0065\u006das\u002e\u006d\u0069\u0063\u0072\u006fs\u006f\u0066\u0074\u002e\u0063\u006f\u006d\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u002f2\u0030\u0030\u0036\u002f\u0061\u0063\u0074\u0069v\u0065\u0058"})
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0078\u006d\u006c\u006e\u0073\u003a\u0061\u0078"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073c\u0068\u0065\u006das\u002e\u006d\u0069\u0063\u0072\u006fs\u006f\u0066\u0074\u002e\u0063\u006f\u006d\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u002f2\u0030\u0030\u0036\u002f\u0061\u0063\u0074\u0069v\u0065\u0058"})
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0072"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073"})
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"}, Value: "\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"})
	start.Name.Local = "\u0061\u0078\u003a\u006f\u0063\u0078"
	return _cgag.CT_Ocx.MarshalXML(e, start)
}
func (_cee ST_Persistence) Validate() error { return _cee.ValidateWithPath("") }
func NewCT_OcxPr() *CT_OcxPr                { _cea := &CT_OcxPr{}; return _cea }

type CT_Ocx struct {
	ClassidAttr     string
	LicenseAttr     *string
	IdAttr          *string
	PersistenceAttr ST_Persistence
	OcxPr           []*CT_OcxPr
}

func (_dc *CT_OcxPrChoice) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _dc.Font != nil {
		_dgc := _b.StartElement{Name: _b.Name{Local: "\u0061x\u003a\u0066\u006f\u006e\u0074"}}
		e.EncodeElement(_dc.Font, _dgc)
	}
	if _dc.Picture != nil {
		_gcfg := _b.StartElement{Name: _b.Name{Local: "\u0061\u0078\u003a\u0070\u0069\u0063\u0074\u0075\u0072\u0065"}}
		e.EncodeElement(_dc.Picture, _gcfg)
	}
	return nil
}
func (_aff *ST_Persistence) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_cca, _dgg := d.Token()
	if _dgg != nil {
		return _dgg
	}
	if _ceae, _efb := _cca.(_b.EndElement); _efb && _ceae.Name == start.Name {
		*_aff = 1
		return nil
	}
	if _gdg, _bb := _cca.(_b.CharData); !_bb {
		return _e.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _cca)
	} else {
		switch string(_gdg) {
		case "":
			*_aff = 0
		case "\u0070e\u0072s\u0069\u0073\u0074\u0050\u0072o\u0070\u0065r\u0074\u0079\u0042\u0061\u0067":
			*_aff = 1
		case "\u0070\u0065\u0072\u0073\u0069\u0073\u0074\u0053\u0074\u0072\u0065\u0061\u006d":
			*_aff = 2
		case "\u0070\u0065\u0072\u0073\u0069\u0073\u0074\u0053\u0074\u0072\u0065\u0061m\u0049\u006e\u0069\u0074":
			*_aff = 3
		case "\u0070\u0065\u0072\u0073\u0069\u0073\u0074\u0053\u0074o\u0072\u0061\u0067\u0065":
			*_aff = 4
		}
	}
	_cca, _dgg = d.Token()
	if _dgg != nil {
		return _dgg
	}
	if _feg, _bac := _cca.(_b.EndElement); _bac && _feg.Name == start.Name {
		return nil
	}
	return _e.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _cca)
}
func (_ge *CT_Ocx) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_ge.PersistenceAttr = ST_Persistence(1)
	for _, _db := range start.Attr {
		if _db.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073" && _db.Name.Local == "\u0069\u0064" || _db.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f\u002fp\u0075\u0072\u006c.\u006f\u0063\u006cc\u002e\u006fr\u0067\u002f\u006f\u006f\u0078\u006dl\u002fof\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073" && _db.Name.Local == "\u0069\u0064" {
			_fcf, _ab := _db.Value, error(nil)
			if _ab != nil {
				return _ab
			}
			_ge.IdAttr = &_fcf
			continue
		}
		if _db.Name.Local == "\u0063l\u0061\u0073\u0073\u0069\u0064" {
			_bdb, _cgb := _db.Value, error(nil)
			if _cgb != nil {
				return _cgb
			}
			_ge.ClassidAttr = _bdb
			continue
		}
		if _db.Name.Local == "\u006ci\u0063\u0065\u006e\u0073\u0065" {
			_fde, _ca := _db.Value, error(nil)
			if _ca != nil {
				return _ca
			}
			_ge.LicenseAttr = &_fde
			continue
		}
		if _db.Name.Local == "p\u0065\u0072\u0073\u0069\u0073\u0074\u0065\u006e\u0063\u0065" {
			_ge.PersistenceAttr.UnmarshalXMLAttr(_db)
			continue
		}
	}
_cd:
	for {
		_fa, _ea := d.Token()
		if _ea != nil {
			return _ea
		}
		switch _cf := _fa.(type) {
		case _b.StartElement:
			switch _cf.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073c\u0068\u0065\u006das\u002e\u006d\u0069\u0063\u0072\u006fs\u006f\u0066\u0074\u002e\u0063\u006f\u006d\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u002f2\u0030\u0030\u0036\u002f\u0061\u0063\u0074\u0069v\u0065\u0058", Local: "\u006f\u0063\u0078P\u0072"}:
				_fb := NewCT_OcxPr()
				if _df := d.DecodeElement(_fb, &_cf); _df != nil {
					return _df
				}
				_ge.OcxPr = append(_ge.OcxPr, _fb)
			default:
				_a.Log.Debug("\u0073\u006b\u0069\u0070\u0070i\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u004f\u0063\u0078\u0020\u0025\u0076", _cf.Name)
				if _ce := d.Skip(); _ce != nil {
					return _ce
				}
			}
		case _b.EndElement:
			break _cd
		case _b.CharData:
		}
	}
	return nil
}

type ST_Persistence byte

// ValidateWithPath validates the CT_Ocx and its children, prefixing error messages with path
func (_dae *CT_Ocx) ValidateWithPath(path string) error {
	if _dae.PersistenceAttr == ST_PersistenceUnset {
		return _e.Errorf("\u0025\u0073\u002f\u0050\u0065\u0072\u0073\u0069\u0073\u0074\u0065\u006e\u0063e\u0041\u0074\u0074\u0072\u0020\u0069s\u0020\u0061\u0020\u006d\u0061\u006e\u0064\u0061\u0074\u006f\u0072\u0079\u0020f\u0069\u0065\u006c\u0064", path)
	}
	if _ba := _dae.PersistenceAttr.ValidateWithPath(path + "\u002f\u0050e\u0072\u0073\u0069s\u0074\u0065\u006e\u0063\u0065\u0041\u0074\u0074\u0072"); _ba != nil {
		return _ba
	}
	for _fcfa, _cga := range _dae.OcxPr {
		if _bgb := _cga.ValidateWithPath(_e.Sprintf("\u0025\u0073\u002fO\u0063\u0078\u0050\u0072\u005b\u0025\u0064\u005d", path, _fcfa)); _bgb != nil {
			return _bgb
		}
	}
	return nil
}

type CT_Picture struct{ IdAttr *string }
type CT_Font struct {
	PersistenceAttr ST_Persistence
	IdAttr          *string
	OcxPr           []*CT_OcxPr
}

func NewCT_Ocx() *CT_Ocx { _ec := &CT_Ocx{}; _ec.PersistenceAttr = ST_Persistence(1); return _ec }

type Ocx struct{ CT_Ocx }

// Validate validates the CT_OcxPr and its children
func (_gc *CT_OcxPr) Validate() error {
	return _gc.ValidateWithPath("\u0043\u0054\u005f\u004f\u0063\u0078\u0050\u0072")
}
func (_gfb *CT_OcxPr) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0061x\u003a\u006e\u0061\u006d\u0065"}, Value: _e.Sprintf("\u0025\u0076", _gfb.NameAttr)})
	if _gfb.ValueAttr != nil {
		start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0061\u0078\u003a\u0076\u0061\u006c\u0075\u0065"}, Value: _e.Sprintf("\u0025\u0076", *_gfb.ValueAttr)})
	}
	e.EncodeToken(start)
	if _gfb.Choice != nil {
		_gfb.Choice.MarshalXML(e, _b.StartElement{})
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

// Validate validates the Ocx and its children
func (_cbg *Ocx) Validate() error { return _cbg.ValidateWithPath("\u004f\u0063\u0078") }

// Validate validates the CT_OcxPrChoice and its children
func (_gag *CT_OcxPrChoice) Validate() error {
	return _gag.ValidateWithPath("\u0043\u0054\u005f\u004f\u0063\u0078\u0050\u0072\u0043h\u006f\u0069\u0063\u0065")
}

const (
	ST_PersistenceUnset              ST_Persistence = 0
	ST_PersistencePersistPropertyBag ST_Persistence = 1
	ST_PersistencePersistStream      ST_Persistence = 2
	ST_PersistencePersistStreamInit  ST_Persistence = 3
	ST_PersistencePersistStorage     ST_Persistence = 4
)

func init() {
	_fc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073c\u0068\u0065\u006das\u002e\u006d\u0069\u0063\u0072\u006fs\u006f\u0066\u0074\u002e\u0063\u006f\u006d\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u002f2\u0030\u0030\u0036\u002f\u0061\u0063\u0074\u0069v\u0065\u0058", "\u0043\u0054\u005f\u004f\u0063\u0078", NewCT_Ocx)
	_fc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073c\u0068\u0065\u006das\u002e\u006d\u0069\u0063\u0072\u006fs\u006f\u0066\u0074\u002e\u0063\u006f\u006d\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u002f2\u0030\u0030\u0036\u002f\u0061\u0063\u0074\u0069v\u0065\u0058", "\u0043\u0054\u005f\u004f\u0063\u0078\u0050\u0072", NewCT_OcxPr)
	_fc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073c\u0068\u0065\u006das\u002e\u006d\u0069\u0063\u0072\u006fs\u006f\u0066\u0074\u002e\u0063\u006f\u006d\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u002f2\u0030\u0030\u0036\u002f\u0061\u0063\u0074\u0069v\u0065\u0058", "\u0043T\u005f\u0046\u006f\u006e\u0074", NewCT_Font)
	_fc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073c\u0068\u0065\u006das\u002e\u006d\u0069\u0063\u0072\u006fs\u006f\u0066\u0074\u002e\u0063\u006f\u006d\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u002f2\u0030\u0030\u0036\u002f\u0061\u0063\u0074\u0069v\u0065\u0058", "\u0043\u0054\u005f\u0050\u0069\u0063\u0074\u0075\u0072\u0065", NewCT_Picture)
	_fc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073c\u0068\u0065\u006das\u002e\u006d\u0069\u0063\u0072\u006fs\u006f\u0066\u0074\u002e\u0063\u006f\u006d\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u002f2\u0030\u0030\u0036\u002f\u0061\u0063\u0074\u0069v\u0065\u0058", "\u006f\u0063\u0078", NewOcx)
}
