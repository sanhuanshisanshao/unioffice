//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package chart

import (
	_e "encoding/xml"
	_b "fmt"
	_gb "github.com/sanhuanshisanshao/unioffice"
	_a "github.com/sanhuanshisanshao/unioffice/common/logger"
	_f "github.com/sanhuanshisanshao/unioffice/schema/soo/dml"
	_ba "github.com/sanhuanshisanshao/unioffice/schema/soo/dml/chartDrawing"
	_ce "github.com/sanhuanshisanshao/unioffice/schema/soo/ofc/sharedTypes"
	_g "regexp"
	_c "strconv"
)

func (_bdd *CT_AxisUnit) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0076\u0061\u006c"}, Value: _b.Sprintf("\u0025\u0076", _bdd.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}
func (_agcef *CT_BubbleSer) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_fde := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0069d\u0078"}}
	e.EncodeElement(_agcef.Idx, _fde)
	_dfcd := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006f\u0072\u0064\u0065\u0072"}}
	e.EncodeElement(_agcef.Order, _dfcd)
	if _agcef.Tx != nil {
		_abdc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078"}}
		e.EncodeElement(_agcef.Tx, _abdc)
	}
	if _agcef.SpPr != nil {
		_ggaf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_agcef.SpPr, _ggaf)
	}
	if _agcef.InvertIfNegative != nil {
		_decd := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0069n\u0076\u0065\u0072\u0074\u0049f\u004e\u0065g\u0061\u0074\u0069\u0076\u0065"}}
		e.EncodeElement(_agcef.InvertIfNegative, _decd)
	}
	if _agcef.DPt != nil {
		_fab := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0064P\u0074"}}
		for _, _fgc := range _agcef.DPt {
			e.EncodeElement(_fgc, _fab)
		}
	}
	if _agcef.DLbls != nil {
		_abgb := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_agcef.DLbls, _abgb)
	}
	if _agcef.Trendline != nil {
		_dabc := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0074\u0072\u0065\u006e\u0064\u006c\u0069\u006e\u0065"}}
		for _, _fffa := range _agcef.Trendline {
			e.EncodeElement(_fffa, _dabc)
		}
	}
	if _agcef.ErrBars != nil {
		_cfbd := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0065\u0072\u0072\u0042\u0061\u0072s"}}
		for _, _dcb := range _agcef.ErrBars {
			e.EncodeElement(_dcb, _cfbd)
		}
	}
	if _agcef.XVal != nil {
		_cacb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0078\u0056\u0061\u006c"}}
		e.EncodeElement(_agcef.XVal, _cacb)
	}
	if _agcef.YVal != nil {
		_cdba := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0079\u0056\u0061\u006c"}}
		e.EncodeElement(_agcef.YVal, _cdba)
	}
	if _agcef.BubbleSize != nil {
		_dcdb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0062u\u0062\u0062\u006c\u0065\u0053\u0069\u007a\u0065"}}
		e.EncodeElement(_agcef.BubbleSize, _dcdb)
	}
	if _agcef.Bubble3D != nil {
		_gegc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0062\u0075\u0062\u0062\u006c\u0065\u0033\u0044"}}
		e.EncodeElement(_agcef.Bubble3D, _gegc)
	}
	if _agcef.ExtLst != nil {
		_dfbeb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_agcef.ExtLst, _dfbeb)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}
func _cfcbe(_fbdag bool) uint8 {
	if _fbdag {
		return 1
	}
	return 0
}
func (_agddg ST_Grouping) String() string {
	switch _agddg {
	case 0:
		return ""
	case 1:
		return "\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u0053\u0074a\u0063\u006b\u0065\u0064"
	case 2:
		return "\u0073\u0074\u0061\u006e\u0064\u0061\u0072\u0064"
	case 3:
		return "\u0073t\u0061\u0063\u006b\u0065\u0064"
	}
	return ""
}

type EG_AxShared struct {
	AxId           *CT_UnsignedInt
	Scaling        *CT_Scaling
	Delete         *CT_Boolean
	AxPos          *CT_AxPos
	MajorGridlines *CT_ChartLines
	MinorGridlines *CT_ChartLines
	Title          *CT_Title
	NumFmt         *CT_NumFmt
	MajorTickMark  *CT_TickMark
	MinorTickMark  *CT_TickMark
	TickLblPos     *CT_TickLblPos
	SpPr           *_f.CT_ShapeProperties
	TxPr           *_f.CT_TextBody
	CrossAx        *CT_UnsignedInt
	Choice         *EG_AxSharedChoice
}

// ValidateWithPath validates the CT_DLblsChoice and its children, prefixing error messages with path
func (_gaca *CT_DLblsChoice) ValidateWithPath(path string) error {
	if _gaca.Delete != nil {
		if _deed := _gaca.Delete.ValidateWithPath(path + "\u002fD\u0065\u006c\u0065\u0074\u0065"); _deed != nil {
			return _deed
		}
	}
	if _gaca.NumFmt != nil {
		if _cbbb := _gaca.NumFmt.ValidateWithPath(path + "\u002fN\u0075\u006d\u0046\u006d\u0074"); _cbbb != nil {
			return _cbbb
		}
	}
	if _gaca.SpPr != nil {
		if _cecf := _gaca.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _cecf != nil {
			return _cecf
		}
	}
	if _gaca.TxPr != nil {
		if _gbeg := _gaca.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _gbeg != nil {
			return _gbeg
		}
	}
	if _gaca.DLblPos != nil {
		if _abcd := _gaca.DLblPos.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0050\u006f\u0073"); _abcd != nil {
			return _abcd
		}
	}
	if _gaca.ShowLegendKey != nil {
		if _efgf := _gaca.ShowLegendKey.ValidateWithPath(path + "\u002f\u0053\u0068\u006f\u0077\u004c\u0065\u0067\u0065n\u0064\u004b\u0065\u0079"); _efgf != nil {
			return _efgf
		}
	}
	if _gaca.ShowVal != nil {
		if _efca := _gaca.ShowVal.ValidateWithPath(path + "\u002f\u0053\u0068\u006f\u0077\u0056\u0061\u006c"); _efca != nil {
			return _efca
		}
	}
	if _gaca.ShowCatName != nil {
		if _ebce := _gaca.ShowCatName.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"); _ebce != nil {
			return _ebce
		}
	}
	if _gaca.ShowSerName != nil {
		if _fdgf := _gaca.ShowSerName.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"); _fdgf != nil {
			return _fdgf
		}
	}
	if _gaca.ShowPercent != nil {
		if _fade := _gaca.ShowPercent.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"); _fade != nil {
			return _fade
		}
	}
	if _gaca.ShowBubbleSize != nil {
		if _ccdf := _gaca.ShowBubbleSize.ValidateWithPath(path + "\u002fS\u0068o\u0077\u0042\u0075\u0062\u0062\u006c\u0065\u0053\u0069\u007a\u0065"); _ccdf != nil {
			return _ccdf
		}
	}
	if _gaca.ShowLeaderLines != nil {
		if _dbed := _gaca.ShowLeaderLines.ValidateWithPath(path + "\u002f\u0053h\u006f\u0077\u004ce\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"); _dbed != nil {
			return _dbed
		}
	}
	if _gaca.LeaderLines != nil {
		if _abdd := _gaca.LeaderLines.ValidateWithPath(path + "\u002f\u004c\u0065a\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"); _abdd != nil {
			return _abdd
		}
	}
	return nil
}
func (_ggad *CT_NumData) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_cggga:
	for {
		_dead, _bggb := d.Token()
		if _bggb != nil {
			return _bggb
		}
		switch _fgdbe := _dead.(type) {
		case _e.StartElement:
			switch _fgdbe.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066\u006f\u0072\u006d\u0061\u0074\u0043\u006f\u0064\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066\u006f\u0072\u006d\u0061\u0074\u0043\u006f\u0064\u0065"}:
				_ggad.FormatCode = new(string)
				if _dbaf := d.DecodeElement(_ggad.FormatCode, &_fgdbe); _dbaf != nil {
					return _dbaf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070t\u0043\u006f\u0075\u006e\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070t\u0043\u006f\u0075\u006e\u0074"}:
				_ggad.PtCount = NewCT_UnsignedInt()
				if _feegb := d.DecodeElement(_ggad.PtCount, &_fgdbe); _feegb != nil {
					return _feegb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0074"}:
				_fbge := NewCT_NumVal()
				if _bfea := d.DecodeElement(_fbge, &_fgdbe); _bfea != nil {
					return _bfea
				}
				_ggad.Pt = append(_ggad.Pt, _fbge)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_ggad.ExtLst = NewCT_ExtensionList()
				if _acaba := d.DecodeElement(_ggad.ExtLst, &_fgdbe); _acaba != nil {
					return _acaba
				}
			default:
				_a.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006ce\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005fN\u0075\u006d\u0044\u0061\u0074\u0061\u0020\u0025\u0076", _fgdbe.Name)
				if _cfeb := d.Skip(); _cfeb != nil {
					return _cfeb
				}
			}
		case _e.EndElement:
			break _cggga
		case _e.CharData:
		}
	}
	return nil
}
func (_fbba *CT_Grouping) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _fbba.ValAttr != ST_GroupingUnset {
		_eefb, _acgff := _fbba.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
		if _acgff != nil {
			return _acgff
		}
		start.Attr = append(start.Attr, _eefb)
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_PageMargins and its children, prefixing error messages with path
func (_afcbd *CT_PageMargins) ValidateWithPath(path string) error { return nil }

// ValidateWithPath validates the CT_MarkerStyle and its children, prefixing error messages with path
func (_dbae *CT_MarkerStyle) ValidateWithPath(path string) error {
	if _dbae.ValAttr == ST_MarkerStyleUnset {
		return _b.Errorf("\u0025\u0073\u002fV\u0061\u006c\u0041\u0074t\u0072\u0020\u0069\u0073\u0020\u0061\u0020m\u0061\u006e\u0064\u0061\u0074\u006f\u0072\u0079\u0020\u0066\u0069\u0065\u006c\u0064", path)
	}
	if _ffab := _dbae.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _ffab != nil {
		return _ffab
	}
	return nil
}
func (_bcfdb *CT_UpDownBar) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _bcfdb.SpPr != nil {
		_gdba := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_bcfdb.SpPr, _gdba)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_BubbleScale and its children, prefixing error messages with path
func (_ecg *CT_BubbleScale) ValidateWithPath(path string) error {
	if _ecg.ValAttr != nil {
		if _ccec := _ecg.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _ccec != nil {
			return _ccec
		}
	}
	return nil
}

// Validate validates the CT_SecondPieSize and its children
func (_afgfca *CT_SecondPieSize) Validate() error {
	return _afgfca.ValidateWithPath("\u0043\u0054_\u0053\u0065\u0063o\u006e\u0064\u0050\u0069\u0065\u0053\u0069\u007a\u0065")
}

// ValidateWithPath validates the EG_DLblShared and its children, prefixing error messages with path
func (_defce *EG_DLblShared) ValidateWithPath(path string) error {
	if _defce.NumFmt != nil {
		if _dbcab := _defce.NumFmt.ValidateWithPath(path + "\u002fN\u0075\u006d\u0046\u006d\u0074"); _dbcab != nil {
			return _dbcab
		}
	}
	if _defce.SpPr != nil {
		if _afbec := _defce.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _afbec != nil {
			return _afbec
		}
	}
	if _defce.TxPr != nil {
		if _eddeb := _defce.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _eddeb != nil {
			return _eddeb
		}
	}
	if _defce.DLblPos != nil {
		if _aggcd := _defce.DLblPos.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0050\u006f\u0073"); _aggcd != nil {
			return _aggcd
		}
	}
	if _defce.ShowLegendKey != nil {
		if _eada := _defce.ShowLegendKey.ValidateWithPath(path + "\u002f\u0053\u0068\u006f\u0077\u004c\u0065\u0067\u0065n\u0064\u004b\u0065\u0079"); _eada != nil {
			return _eada
		}
	}
	if _defce.ShowVal != nil {
		if _bddbc := _defce.ShowVal.ValidateWithPath(path + "\u002f\u0053\u0068\u006f\u0077\u0056\u0061\u006c"); _bddbc != nil {
			return _bddbc
		}
	}
	if _defce.ShowCatName != nil {
		if _dcedaa := _defce.ShowCatName.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"); _dcedaa != nil {
			return _dcedaa
		}
	}
	if _defce.ShowSerName != nil {
		if _gddgf := _defce.ShowSerName.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"); _gddgf != nil {
			return _gddgf
		}
	}
	if _defce.ShowPercent != nil {
		if _ccdgb := _defce.ShowPercent.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"); _ccdgb != nil {
			return _ccdgb
		}
	}
	if _defce.ShowBubbleSize != nil {
		if _efag := _defce.ShowBubbleSize.ValidateWithPath(path + "\u002fS\u0068o\u0077\u0042\u0075\u0062\u0062\u006c\u0065\u0053\u0069\u007a\u0065"); _efag != nil {
			return _efag
		}
	}
	return nil
}

type ST_LayoutTarget byte

func (_fdfea ST_TickLblPos) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_fdfea.String(), start)
}
func (_bgeab *ST_BubbleScale) Validate() error { return _bgeab.ValidateWithPath("") }

// Validate validates the CT_Line3DChart and its children
func (_dddbe *CT_Line3DChart) Validate() error {
	return _dddbe.ValidateWithPath("\u0043\u0054\u005f\u004c\u0069\u006e\u0065\u0033\u0044C\u0068\u0061\u0072\u0074")
}

// ValidateWithPath validates the CT_BubbleSer and its children, prefixing error messages with path
func (_agab *CT_BubbleSer) ValidateWithPath(path string) error {
	if _agdg := _agab.Idx.ValidateWithPath(path + "\u002f\u0049\u0064\u0078"); _agdg != nil {
		return _agdg
	}
	if _aggg := _agab.Order.ValidateWithPath(path + "\u002f\u004f\u0072\u0064\u0065\u0072"); _aggg != nil {
		return _aggg
	}
	if _agab.Tx != nil {
		if _gbcc := _agab.Tx.ValidateWithPath(path + "\u002f\u0054\u0078"); _gbcc != nil {
			return _gbcc
		}
	}
	if _agab.SpPr != nil {
		if _eac := _agab.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _eac != nil {
			return _eac
		}
	}
	if _agab.InvertIfNegative != nil {
		if _adff := _agab.InvertIfNegative.ValidateWithPath(path + "\u002f\u0049\u006e\u0076\u0065\u0072\u0074\u0049\u0066\u004e\u0065\u0067a\u0074\u0069\u0076\u0065"); _adff != nil {
			return _adff
		}
	}
	for _fega, _bde := range _agab.DPt {
		if _aeea := _bde.ValidateWithPath(_b.Sprintf("\u0025\u0073\u002f\u0044\u0050\u0074\u005b\u0025\u0064\u005d", path, _fega)); _aeea != nil {
			return _aeea
		}
	}
	if _agab.DLbls != nil {
		if _afad := _agab.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _afad != nil {
			return _afad
		}
	}
	for _cafg, _ecb := range _agab.Trendline {
		if _afbd := _ecb.ValidateWithPath(_b.Sprintf("\u0025\u0073/\u0054\u0072\u0065n\u0064\u006c\u0069\u006e\u0065\u005b\u0025\u0064\u005d", path, _cafg)); _afbd != nil {
			return _afbd
		}
	}
	for _bfbd, _febc := range _agab.ErrBars {
		if _dgeb := _febc.ValidateWithPath(_b.Sprintf("\u0025\u0073\u002f\u0045\u0072\u0072\u0042\u0061\u0072s\u005b\u0025\u0064\u005d", path, _bfbd)); _dgeb != nil {
			return _dgeb
		}
	}
	if _agab.XVal != nil {
		if _fbb := _agab.XVal.ValidateWithPath(path + "\u002f\u0058\u0056a\u006c"); _fbb != nil {
			return _fbb
		}
	}
	if _agab.YVal != nil {
		if _gbdbc := _agab.YVal.ValidateWithPath(path + "\u002f\u0059\u0056a\u006c"); _gbdbc != nil {
			return _gbdbc
		}
	}
	if _agab.BubbleSize != nil {
		if _gcd := _agab.BubbleSize.ValidateWithPath(path + "/\u0042\u0075\u0062\u0062\u006c\u0065\u0053\u0069\u007a\u0065"); _gcd != nil {
			return _gcd
		}
	}
	if _agab.Bubble3D != nil {
		if _fad := _agab.Bubble3D.ValidateWithPath(path + "\u002fB\u0075\u0062\u0062\u006c\u0065\u0033D"); _fad != nil {
			return _fad
		}
	}
	if _agab.ExtLst != nil {
		if _fdfe := _agab.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _fdfe != nil {
			return _fdfe
		}
	}
	return nil
}

// Validate validates the CT_PageSetup and its children
func (_befed *CT_PageSetup) Validate() error {
	return _befed.ValidateWithPath("\u0043\u0054\u005fP\u0061\u0067\u0065\u0053\u0065\u0074\u0075\u0070")
}

// ValidateWithPath validates the CT_ChartLines and its children, prefixing error messages with path
func (_dccc *CT_ChartLines) ValidateWithPath(path string) error {
	if _dccc.SpPr != nil {
		if _edc := _dccc.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _edc != nil {
			return _edc
		}
	}
	return nil
}
func (_bfdbf *CT_Trendline) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _bfdbf.Name != nil {
		_dcagf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006e\u0061\u006d\u0065"}}
		_gb.AddPreserveSpaceAttr(&_dcagf, *_bfdbf.Name)
		e.EncodeElement(_bfdbf.Name, _dcagf)
	}
	if _bfdbf.SpPr != nil {
		_fcdcgc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_bfdbf.SpPr, _fcdcgc)
	}
	_dbgeba := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0074r\u0065\u006e\u0064\u006c\u0069\u006e\u0065\u0054\u0079\u0070\u0065"}}
	e.EncodeElement(_bfdbf.TrendlineType, _dbgeba)
	if _bfdbf.Order != nil {
		_fabd := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006f\u0072\u0064\u0065\u0072"}}
		e.EncodeElement(_bfdbf.Order, _fabd)
	}
	if _bfdbf.Period != nil {
		_egbad := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0070\u0065\u0072\u0069\u006f\u0064"}}
		e.EncodeElement(_bfdbf.Period, _egbad)
	}
	if _bfdbf.Forward != nil {
		_gaffd := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0066\u006f\u0072\u0077\u0061\u0072d"}}
		e.EncodeElement(_bfdbf.Forward, _gaffd)
	}
	if _bfdbf.Backward != nil {
		_bddg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0062\u0061\u0063\u006b\u0077\u0061\u0072\u0064"}}
		e.EncodeElement(_bfdbf.Backward, _bddg)
	}
	if _bfdbf.Intercept != nil {
		_cgbgf := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0069\u006e\u0074\u0065\u0072\u0063\u0065\u0070\u0074"}}
		e.EncodeElement(_bfdbf.Intercept, _cgbgf)
	}
	if _bfdbf.DispRSqr != nil {
		_acfg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0064\u0069\u0073\u0070\u0052\u0053\u0071\u0072"}}
		e.EncodeElement(_bfdbf.DispRSqr, _acfg)
	}
	if _bfdbf.DispEq != nil {
		_dfgfb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0064\u0069\u0073\u0070\u0045\u0071"}}
		e.EncodeElement(_bfdbf.DispEq, _dfgfb)
	}
	if _bfdbf.TrendlineLbl != nil {
		_fedcc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0072\u0065\u006e\u0064\u006c\u0069n\u0065\u004c\u0062\u006c"}}
		e.EncodeElement(_bfdbf.TrendlineLbl, _fedcc)
	}
	if _bfdbf.ExtLst != nil {
		_gdad := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_bfdbf.ExtLst, _gdad)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}
func (_aegf *CT_LineChart) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_aegf.Grouping = NewCT_Grouping()
_fbbcge:
	for {
		_gafc, _fgdc := d.Token()
		if _fgdc != nil {
			return _fgdc
		}
		switch _agcc := _gafc.(type) {
		case _e.StartElement:
			switch _agcc.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}:
				if _bdaa := d.DecodeElement(_aegf.Grouping, &_agcc); _bdaa != nil {
					return _bdaa
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_aegf.VaryColors = NewCT_Boolean()
				if _fcfegf := d.DecodeElement(_aegf.VaryColors, &_agcc); _fcfegf != nil {
					return _fcfegf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_bdgaf := NewCT_LineSer()
				if _cbde := d.DecodeElement(_bdgaf, &_agcc); _cbde != nil {
					return _cbde
				}
				_aegf.Ser = append(_aegf.Ser, _bdgaf)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_aegf.DLbls = NewCT_DLbls()
				if _bbeb := d.DecodeElement(_aegf.DLbls, &_agcc); _bbeb != nil {
					return _bbeb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064r\u006f\u0070\u004c\u0069\u006e\u0065s"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064r\u006f\u0070\u004c\u0069\u006e\u0065s"}:
				_aegf.DropLines = NewCT_ChartLines()
				if _gdce := d.DecodeElement(_aegf.DropLines, &_agcc); _gdce != nil {
					return _gdce
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0068\u0069\u004c\u006f\u0077\u004c\u0069\u006e\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0068\u0069\u004c\u006f\u0077\u004c\u0069\u006e\u0065\u0073"}:
				_aegf.HiLowLines = NewCT_ChartLines()
				if _dcad := d.DecodeElement(_aegf.HiLowLines, &_agcc); _dcad != nil {
					return _dcad
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0075\u0070\u0044\u006f\u0077\u006e\u0042\u0061\u0072\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0075\u0070\u0044\u006f\u0077\u006e\u0042\u0061\u0072\u0073"}:
				_aegf.UpDownBars = NewCT_UpDownBars()
				if _dbabf := d.DecodeElement(_aegf.UpDownBars, &_agcc); _dbabf != nil {
					return _dbabf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u0072\u006b\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u0072\u006b\u0065\u0072"}:
				_aegf.Marker = NewCT_Boolean()
				if _edfae := d.DecodeElement(_aegf.Marker, &_agcc); _edfae != nil {
					return _edfae
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u006d\u006f\u006f\u0074\u0068"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u006d\u006f\u006f\u0074\u0068"}:
				_aegf.Smooth = NewCT_Boolean()
				if _aacc := d.DecodeElement(_aegf.Smooth, &_agcc); _aacc != nil {
					return _aacc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				_abbd := NewCT_UnsignedInt()
				if _efeb := d.DecodeElement(_abbd, &_agcc); _efeb != nil {
					return _efeb
				}
				_aegf.AxId = append(_aegf.AxId, _abbd)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_aegf.ExtLst = NewCT_ExtensionList()
				if _dcg := d.DecodeElement(_aegf.ExtLst, &_agcc); _dcg != nil {
					return _dcg
				}
			default:
				_a.Log.Debug("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075n\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054_L\u0069\u006ee\u0043\u0068\u0061\u0072\u0074\u0020\u0025\u0076", _agcc.Name)
				if _gcdb := d.Skip(); _gcdb != nil {
					return _gcdb
				}
			}
		case _e.EndElement:
			break _fbbcge
		case _e.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_BarGrouping and its children, prefixing error messages with path
func (_ceeg *CT_BarGrouping) ValidateWithPath(path string) error {
	if _eccf := _ceeg.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _eccf != nil {
		return _eccf
	}
	return nil
}

// ValidateWithPath validates the CT_BarDir and its children, prefixing error messages with path
func (_aee *CT_BarDir) ValidateWithPath(path string) error {
	if _ceb := _aee.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _ceb != nil {
		return _ceb
	}
	return nil
}

type CT_BandFmts struct{ BandFmt []*CT_BandFmt }

func (_gcc *CT_BubbleChart) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _gcc.VaryColors != nil {
		_cce := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_gcc.VaryColors, _cce)
	}
	if _gcc.Ser != nil {
		_gaefg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _befg := range _gcc.Ser {
			e.EncodeElement(_befg, _gaefg)
		}
	}
	if _gcc.DLbls != nil {
		_egeg := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_gcc.DLbls, _egeg)
	}
	if _gcc.Bubble3D != nil {
		_feb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0062\u0075\u0062\u0062\u006c\u0065\u0033\u0044"}}
		e.EncodeElement(_gcc.Bubble3D, _feb)
	}
	if _gcc.BubbleScale != nil {
		_ddc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0062\u0075\u0062\u0062\u006c\u0065\u0053\u0063\u0061\u006c\u0065"}}
		e.EncodeElement(_gcc.BubbleScale, _ddc)
	}
	if _gcc.ShowNegBubbles != nil {
		_ecfe := _e.StartElement{Name: _e.Name{Local: "\u0063\u003as\u0068\u006f\u0077N\u0065\u0067\u0042\u0075\u0062\u0062\u006c\u0065\u0073"}}
		e.EncodeElement(_gcc.ShowNegBubbles, _ecfe)
	}
	if _gcc.SizeRepresents != nil {
		_bbfd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003as\u0069\u007a\u0065R\u0065\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0073"}}
		e.EncodeElement(_gcc.SizeRepresents, _bbfd)
	}
	_cead := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	for _, _faaf := range _gcc.AxId {
		e.EncodeElement(_faaf, _cead)
	}
	if _gcc.ExtLst != nil {
		_aeae := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_gcc.ExtLst, _aeae)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}
func (_bfbf *CT_MultiLvlStrRef) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_cbaf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0066"}}
	_gb.AddPreserveSpaceAttr(&_cbaf, _bfbf.F)
	e.EncodeElement(_bfbf.F, _cbaf)
	if _bfbf.MultiLvlStrCache != nil {
		_fbcge := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006du\u006c\u0074\u0069\u004c\u0076l\u0053\u0074r\u0043\u0061\u0063\u0068\u0065"}}
		e.EncodeElement(_bfbf.MultiLvlStrCache, _fbcge)
	}
	if _bfbf.ExtLst != nil {
		_bbgc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_bfbf.ExtLst, _bbgc)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}
func (_eaaa *CT_ErrValType) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _eaaa.ValAttr != ST_ErrValTypeUnset {
		_affbg, _dbebc := _eaaa.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
		if _dbebc != nil {
			return _dbebc
		}
		start.Attr = append(start.Attr, _affbg)
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}
func (_dbcag ST_BubbleScale) String() string {
	if _dbcag.ST_BubbleScalePercent != nil {
		return _b.Sprintf("\u0025\u0076", *_dbcag.ST_BubbleScalePercent)
	}
	if _dbcag.ST_BubbleScaleUInt != nil {
		return _b.Sprintf("\u0025\u0076", *_dbcag.ST_BubbleScaleUInt)
	}
	return ""
}

type CT_MultiLvlStrRef struct {
	F                string
	MultiLvlStrCache *CT_MultiLvlStrData
	ExtLst           *CT_ExtensionList
}

// Validate validates the CT_Grouping and its children
func (_facfg *CT_Grouping) Validate() error {
	return _facfg.ValidateWithPath("C\u0054\u005f\u0047\u0072\u006f\u0075\u0070\u0069\u006e\u0067")
}
func (_cbgge ST_CrossBetween) String() string {
	switch _cbgge {
	case 0:
		return ""
	case 1:
		return "\u0062e\u0074\u0077\u0065\u0065\u006e"
	case 2:
		return "\u006d\u0069\u0064\u0043\u0061\u0074"
	}
	return ""
}

// Validate validates the CT_StrRef and its children
func (_bdbec *CT_StrRef) Validate() error {
	return _bdbec.ValidateWithPath("\u0043T\u005f\u0053\u0074\u0072\u0052\u0065f")
}
func (_cdacc *CT_PlotAreaChoice1) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _cdacc.ValAx != nil {
		_ecabb := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0076\u0061\u006c\u0041\u0078"}}
		for _, _abaee := range _cdacc.ValAx {
			e.EncodeElement(_abaee, _ecabb)
		}
	}
	if _cdacc.CatAx != nil {
		_ggadc := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0063\u0061\u0074\u0041\u0078"}}
		for _, _baebc := range _cdacc.CatAx {
			e.EncodeElement(_baebc, _ggadc)
		}
	}
	if _cdacc.DateAx != nil {
		_gcbedf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0064\u0061\u0074\u0065\u0041\u0078"}}
		for _, _cbbcc := range _cdacc.DateAx {
			e.EncodeElement(_cbbcc, _gcbedf)
		}
	}
	if _cdacc.SerAx != nil {
		_cbgbc := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0073\u0065\u0072\u0041\u0078"}}
		for _, _aaadg := range _cdacc.SerAx {
			e.EncodeElement(_aaadg, _cbgbc)
		}
	}
	return nil
}

// ValidateWithPath validates the CT_BandFmt and its children, prefixing error messages with path
func (_cgb *CT_BandFmt) ValidateWithPath(path string) error {
	if _fgd := _cgb.Idx.ValidateWithPath(path + "\u002f\u0049\u0064\u0078"); _fgd != nil {
		return _fgd
	}
	if _cgb.SpPr != nil {
		if _cba := _cgb.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _cba != nil {
			return _cba
		}
	}
	return nil
}
func (_dfbae *ST_SecondPieSize) Validate() error { return _dfbae.ValidateWithPath("") }
func NewCT_Tx() *CT_Tx                           { _decfc := &CT_Tx{}; _decfc.Choice = NewCT_TxChoice(); return _decfc }

type CT_LogBase struct{ ValAttr float64 }

func (_gbaec *CT_PivotSource) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_dcfea := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006e\u0061\u006d\u0065"}}
	_gb.AddPreserveSpaceAttr(&_dcfea, _gbaec.Name)
	e.EncodeElement(_gbaec.Name, _dcfea)
	_aaebab := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0066\u006d\u0074\u0049\u0064"}}
	e.EncodeElement(_gbaec.FmtId, _aaebab)
	if _gbaec.ExtLst != nil {
		_beeac := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		for _, _cbbd := range _gbaec.ExtLst {
			e.EncodeElement(_cbbd, _beeac)
		}
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_RelId and its children
func (_abcdba *CT_RelId) Validate() error {
	return _abcdba.ValidateWithPath("\u0043\u0054\u005f\u0052\u0065\u006c\u0049\u0064")
}
func (_bgabd *CT_PieSer) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_ecfege := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0069d\u0078"}}
	e.EncodeElement(_bgabd.Idx, _ecfege)
	_gbgbb := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006f\u0072\u0064\u0065\u0072"}}
	e.EncodeElement(_bgabd.Order, _gbgbb)
	if _bgabd.Tx != nil {
		_edac := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078"}}
		e.EncodeElement(_bgabd.Tx, _edac)
	}
	if _bgabd.SpPr != nil {
		_febf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_bgabd.SpPr, _febf)
	}
	if _bgabd.Explosion != nil {
		_gdee := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0065\u0078\u0070\u006c\u006f\u0073\u0069\u006f\u006e"}}
		e.EncodeElement(_bgabd.Explosion, _gdee)
	}
	if _bgabd.DPt != nil {
		_cecbg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0064P\u0074"}}
		for _, _egdbe := range _bgabd.DPt {
			e.EncodeElement(_egdbe, _cecbg)
		}
	}
	if _bgabd.DLbls != nil {
		_ffdf := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_bgabd.DLbls, _ffdf)
	}
	if _bgabd.Cat != nil {
		_befeb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0063a\u0074"}}
		e.EncodeElement(_bgabd.Cat, _befeb)
	}
	if _bgabd.Val != nil {
		_aedeeg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0076a\u006c"}}
		e.EncodeElement(_bgabd.Val, _aedeeg)
	}
	if _bgabd.ExtLst != nil {
		_cced := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_bgabd.ExtLst, _cced)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_CrossBetween and its children
func (_beca *CT_CrossBetween) Validate() error {
	return _beca.ValidateWithPath("\u0043T\u005fC\u0072\u006f\u0073\u0073\u0042\u0065\u0074\u0077\u0065\u0065\u006e")
}

type CT_DispBlanksAs struct{ ValAttr ST_DispBlanksAs }

func (_bcgc *CT_BubbleSer) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_bcgc.Idx = NewCT_UnsignedInt()
	_bcgc.Order = NewCT_UnsignedInt()
_edfa:
	for {
		_eab, _ccgf := d.Token()
		if _ccgf != nil {
			return _ccgf
		}
		switch _bdf := _eab.(type) {
		case _e.StartElement:
			switch _bdf.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}:
				if _dfgg := d.DecodeElement(_bcgc.Idx, &_bdf); _dfgg != nil {
					return _dfgg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}:
				if _facg := d.DecodeElement(_bcgc.Order, &_bdf); _facg != nil {
					return _facg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				_bcgc.Tx = NewCT_SerTx()
				if _dabe := d.DecodeElement(_bcgc.Tx, &_bdf); _dabe != nil {
					return _dabe
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_bcgc.SpPr = _f.NewCT_ShapeProperties()
				if _ceag := d.DecodeElement(_bcgc.SpPr, &_bdf); _ceag != nil {
					return _ceag
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u006ev\u0065\u0072\u0074I\u0066\u004e\u0065\u0067\u0061\u0074\u0069\u0076\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u006ev\u0065\u0072\u0074I\u0066\u004e\u0065\u0067\u0061\u0074\u0069\u0076\u0065"}:
				_bcgc.InvertIfNegative = NewCT_Boolean()
				if _dega := d.DecodeElement(_bcgc.InvertIfNegative, &_bdf); _dega != nil {
					return _dega
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0050\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0050\u0074"}:
				_defa := NewCT_DPt()
				if _aabf := d.DecodeElement(_defa, &_bdf); _aabf != nil {
					return _aabf
				}
				_bcgc.DPt = append(_bcgc.DPt, _defa)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_bcgc.DLbls = NewCT_DLbls()
				if _adag := d.DecodeElement(_bcgc.DLbls, &_bdf); _adag != nil {
					return _adag
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074r\u0065\u006e\u0064\u006c\u0069\u006ee"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074r\u0065\u006e\u0064\u006c\u0069\u006ee"}:
				_bbg := NewCT_Trendline()
				if _fbcg := d.DecodeElement(_bbg, &_bdf); _fbcg != nil {
					return _fbcg
				}
				_bcgc.Trendline = append(_bcgc.Trendline, _bbg)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065r\u0072\u0042\u0061\u0072\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065r\u0072\u0042\u0061\u0072\u0073"}:
				_gad := NewCT_ErrBars()
				if _acca := d.DecodeElement(_gad, &_bdf); _acca != nil {
					return _acca
				}
				_bcgc.ErrBars = append(_bcgc.ErrBars, _gad)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0078\u0056\u0061\u006c"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0078\u0056\u0061\u006c"}:
				_bcgc.XVal = NewCT_AxDataSource()
				if _cdgf := d.DecodeElement(_bcgc.XVal, &_bdf); _cdgf != nil {
					return _cdgf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0079\u0056\u0061\u006c"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0079\u0056\u0061\u006c"}:
				_bcgc.YVal = NewCT_NumDataSource()
				if _bfgb := d.DecodeElement(_bcgc.YVal, &_bdf); _bfgb != nil {
					return _bfgb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0075\u0062\u0062\u006c\u0065\u0053\u0069\u007a\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0075\u0062\u0062\u006c\u0065\u0053\u0069\u007a\u0065"}:
				_bcgc.BubbleSize = NewCT_NumDataSource()
				if _ecgf := d.DecodeElement(_bcgc.BubbleSize, &_bdf); _ecgf != nil {
					return _ecgf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0075\u0062\u0062\u006c\u0065\u0033\u0044"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0075\u0062\u0062\u006c\u0065\u0033\u0044"}:
				_bcgc.Bubble3D = NewCT_Boolean()
				if _ebec := d.DecodeElement(_bcgc.Bubble3D, &_bdf); _ebec != nil {
					return _ebec
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_bcgc.ExtLst = NewCT_ExtensionList()
				if _fecd := d.DecodeElement(_bcgc.ExtLst, &_bdf); _fecd != nil {
					return _fecd
				}
			default:
				_a.Log.Debug("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075n\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054_B\u0075\u0062b\u006c\u0065\u0053\u0065\u0072\u0020\u0025\u0076", _bdf.Name)
				if _ccbg := d.Skip(); _ccbg != nil {
					return _ccbg
				}
			}
		case _e.EndElement:
			break _edfa
		case _e.CharData:
		}
	}
	return nil
}
func (_dgec *CT_PivotFmts) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _dgec.PivotFmt != nil {
		_ebgc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0070\u0069\u0076\u006f\u0074\u0046\u006d\u0074"}}
		for _, _ebebd := range _dgec.PivotFmt {
			e.EncodeElement(_ebebd, _ebgc)
		}
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_DepthPercent and its children, prefixing error messages with path
func (_defb *CT_DepthPercent) ValidateWithPath(path string) error {
	if _defb.ValAttr != nil {
		if _aadc := _defb.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _aadc != nil {
			return _aadc
		}
	}
	return nil
}

type CT_BubbleChart struct {
	VaryColors     *CT_Boolean
	Ser            []*CT_BubbleSer
	DLbls          *CT_DLbls
	Bubble3D       *CT_Boolean
	BubbleScale    *CT_BubbleScale
	ShowNegBubbles *CT_Boolean
	SizeRepresents *CT_SizeRepresents
	AxId           []*CT_UnsignedInt
	ExtLst         *CT_ExtensionList
}

func (_cdd *CT_CrossBetween) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	_agdb, _cddd := _cdd.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
	if _cddd != nil {
		return _cddd
	}
	start.Attr = append(start.Attr, _agdb)
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_StrVal and its children
func (_ddbag *CT_StrVal) Validate() error {
	return _ddbag.ValidateWithPath("\u0043T\u005f\u0053\u0074\u0072\u0056\u0061l")
}

// ST_GapAmount is a union type
type ST_GapAmount struct {
	ST_GapAmountPercent *string
	ST_GapAmountUShort  *uint16
}

// Validate validates the CT_Trendline and its children
func (_addag *CT_Trendline) Validate() error {
	return _addag.ValidateWithPath("\u0043\u0054\u005fT\u0072\u0065\u006e\u0064\u006c\u0069\u006e\u0065")
}
func (_dffed *CT_PrintSettings) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_dddg:
	for {
		_eggbd, _dffbc := d.Token()
		if _dffbc != nil {
			return _dffbc
		}
		switch _efdaa := _eggbd.(type) {
		case _e.StartElement:
			switch _efdaa.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0068\u0065\u0061d\u0065\u0072\u0046\u006f\u006f\u0074\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0068\u0065\u0061d\u0065\u0072\u0046\u006f\u006f\u0074\u0065\u0072"}:
				_dffed.HeaderFooter = NewCT_HeaderFooter()
				if _eegaf := d.DecodeElement(_dffed.HeaderFooter, &_efdaa); _eegaf != nil {
					return _eegaf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "p\u0061\u0067\u0065\u004d\u0061\u0072\u0067\u0069\u006e\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "p\u0061\u0067\u0065\u004d\u0061\u0072\u0067\u0069\u006e\u0073"}:
				_dffed.PageMargins = NewCT_PageMargins()
				if _fddga := d.DecodeElement(_dffed.PageMargins, &_efdaa); _fddga != nil {
					return _fddga
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070a\u0067\u0065\u0053\u0065\u0074\u0075p"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070a\u0067\u0065\u0053\u0065\u0074\u0075p"}:
				_dffed.PageSetup = NewCT_PageSetup()
				if _cdbeg := d.DecodeElement(_dffed.PageSetup, &_efdaa); _cdbeg != nil {
					return _cdbeg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006ce\u0067a\u0063\u0079\u0044\u0072\u0061\u0077\u0069\u006e\u0067\u0048\u0046"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006ce\u0067a\u0063\u0079\u0044\u0072\u0061\u0077\u0069\u006e\u0067\u0048\u0046"}:
				_dffed.LegacyDrawingHF = NewCT_RelId()
				if _gadea := d.DecodeElement(_dffed.LegacyDrawingHF, &_efdaa); _gadea != nil {
					return _gadea
				}
			default:
				_a.Log.Debug("\u0073\u006b\u0069\u0070\u0070i\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0050\u0072\u0069\u006e\u0074\u0053\u0065\u0074\u0074\u0069\u006e\u0067\u0073\u0020\u0025v", _efdaa.Name)
				if _aefbd := d.Skip(); _aefbd != nil {
					return _aefbd
				}
			}
		case _e.EndElement:
			break _dddg
		case _e.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_AxDataSourceChoice and its children, prefixing error messages with path
func (_aba *CT_AxDataSourceChoice) ValidateWithPath(path string) error {
	if _aba.MultiLvlStrRef != nil {
		if _aaf := _aba.MultiLvlStrRef.ValidateWithPath(path + "\u002fM\u0075l\u0074\u0069\u004c\u0076\u006c\u0053\u0074\u0072\u0052\u0065\u0066"); _aaf != nil {
			return _aaf
		}
	}
	if _aba.NumRef != nil {
		if _aff := _aba.NumRef.ValidateWithPath(path + "\u002fN\u0075\u006d\u0052\u0065\u0066"); _aff != nil {
			return _aff
		}
	}
	if _aba.NumLit != nil {
		if _geb := _aba.NumLit.ValidateWithPath(path + "\u002fN\u0075\u006d\u004c\u0069\u0074"); _geb != nil {
			return _geb
		}
	}
	if _aba.StrRef != nil {
		if _fceb := _aba.StrRef.ValidateWithPath(path + "\u002fS\u0074\u0072\u0052\u0065\u0066"); _fceb != nil {
			return _fceb
		}
	}
	if _aba.StrLit != nil {
		if _gfgf := _aba.StrLit.ValidateWithPath(path + "\u002fS\u0074\u0072\u004c\u0069\u0074"); _gfgf != nil {
			return _gfgf
		}
	}
	return nil
}

const (
	ST_LblAlgnUnset ST_LblAlgn = 0
	ST_LblAlgnCtr   ST_LblAlgn = 1
	ST_LblAlgnL     ST_LblAlgn = 2
	ST_LblAlgnR     ST_LblAlgn = 3
)

func (_fgggf *CT_AxPos) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_fgggf.ValAttr = ST_AxPos(1)
	for _, _fae := range start.Attr {
		if _fae.Name.Local == "\u0076\u0061\u006c" {
			_fgggf.ValAttr.UnmarshalXMLAttr(_fae)
			continue
		}
	}
	for {
		_adcb, _cfb := d.Token()
		if _cfb != nil {
			return _b.Errorf("p\u0061r\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fA\u0078\u0050\u006f\u0073: \u0025\u0073", _cfb)
		}
		if _bacb, _fff := _adcb.(_e.EndElement); _fff && _bacb.Name == start.Name {
			break
		}
	}
	return nil
}

type CT_TickMark struct{ ValAttr ST_TickMark }
type CT_FirstSliceAng struct{ ValAttr *uint16 }

func (_agee *CT_PictureFormat) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_agee.ValAttr = ST_PictureFormat(1)
	for _, _bccea := range start.Attr {
		if _bccea.Name.Local == "\u0076\u0061\u006c" {
			_agee.ValAttr.UnmarshalXMLAttr(_bccea)
			continue
		}
	}
	for {
		_bbgcf, _fbcc := d.Token()
		if _fbcc != nil {
			return _b.Errorf("\u0070\u0061\u0072\u0073i\u006e\u0067\u0020\u0043\u0054\u005f\u0050\u0069\u0063\u0074u\u0072e\u0046\u006f\u0072\u006d\u0061\u0074\u003a \u0025\u0073", _fbcc)
		}
		if _bfee, _bdfc := _bbgcf.(_e.EndElement); _bdfc && _bfee.Name == start.Name {
			break
		}
	}
	return nil
}

// ValidateWithPath validates the CT_RotX and its children, prefixing error messages with path
func (_bgbd *CT_RotX) ValidateWithPath(path string) error {
	if _bgbd.ValAttr != nil {
		if *_bgbd.ValAttr < -90 {
			return _b.Errorf("\u0025\u0073/\u006d\u002e\u0056\u0061l\u0041\u0074t\u0072\u0020\u006d\u0075\u0073\u0074\u0020\u0062e\u0020\u003e\u003d\u0020\u002d\u0039\u0030\u0020\u0028\u0068\u0061\u0076e\u0020\u0025\u0076\u0029", path, *_bgbd.ValAttr)
		}
		if *_bgbd.ValAttr > 90 {
			return _b.Errorf("\u0025\u0073/m\u002e\u0056\u0061l\u0041\u0074\u0074\u0072 mu\u0073t \u0062\u0065\u0020\u003c\u003d\u0020\u00390 \u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, *_bgbd.ValAttr)
		}
	}
	return nil
}
func (_gbefc *ST_GapAmount) ValidateWithPath(path string) error {
	_bfecff := []string{}
	if _gbefc.ST_GapAmountPercent != nil {
		_bfecff = append(_bfecff, "\u0053\u0054\u005f\u0047ap\u0041\u006d\u006f\u0075\u006e\u0074\u0050\u0065\u0072\u0063\u0065\u006e\u0074")
	}
	if _gbefc.ST_GapAmountUShort != nil {
		_bfecff = append(_bfecff, "\u0053T\u005fG\u0061\u0070\u0041\u006d\u006fu\u006e\u0074U\u0053\u0068\u006f\u0072\u0074")
	}
	if len(_bfecff) > 1 {
		return _b.Errorf("%\u0073\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u006d\u0065\u006d\u0062\u0065r\u0073\u0020\u0073e\u0074:\u0020\u0025\u0076", path, _bfecff)
	}
	return nil
}

type CT_NumFmt struct {
	FormatCodeAttr   string
	SourceLinkedAttr *bool
}

func (_beae *CT_BuiltInUnit) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _beae.ValAttr != ST_BuiltInUnitUnset {
		_ddfca, _baff := _beae.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
		if _baff != nil {
			return _baff
		}
		start.Attr = append(start.Attr, _ddfca)
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

type CT_PlotArea struct {
	Layout  *CT_Layout
	Choice  []*CT_PlotAreaChoice
	CChoice *CT_PlotAreaChoice1
	DTable  *CT_DTable
	SpPr    *_f.CT_ShapeProperties
	ExtLst  *CT_ExtensionList
}

// ValidateWithPath validates the CT_Period and its children, prefixing error messages with path
func (_adef *CT_Period) ValidateWithPath(path string) error {
	if _adef.ValAttr != nil {
		if *_adef.ValAttr < 2 {
			return _b.Errorf("%\u0073\u002f\u006d\u002e\u0056\u0061l\u0041\u0074\u0074\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u003e=\u0020\u0032\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, *_adef.ValAttr)
		}
	}
	return nil
}

// ValidateWithPath validates the CT_DLblChoice and its children, prefixing error messages with path
func (_ccfe *CT_DLblChoice) ValidateWithPath(path string) error {
	if _ccfe.Delete != nil {
		if _fdbf := _ccfe.Delete.ValidateWithPath(path + "\u002fD\u0065\u006c\u0065\u0074\u0065"); _fdbf != nil {
			return _fdbf
		}
	}
	if _ccfe.Layout != nil {
		if _eba := _ccfe.Layout.ValidateWithPath(path + "\u002fL\u0061\u0079\u006f\u0075\u0074"); _eba != nil {
			return _eba
		}
	}
	if _ccfe.Tx != nil {
		if _feff := _ccfe.Tx.ValidateWithPath(path + "\u002f\u0054\u0078"); _feff != nil {
			return _feff
		}
	}
	if _ccfe.NumFmt != nil {
		if _dagg := _ccfe.NumFmt.ValidateWithPath(path + "\u002fN\u0075\u006d\u0046\u006d\u0074"); _dagg != nil {
			return _dagg
		}
	}
	if _ccfe.SpPr != nil {
		if _fegf := _ccfe.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _fegf != nil {
			return _fegf
		}
	}
	if _ccfe.TxPr != nil {
		if _eebf := _ccfe.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _eebf != nil {
			return _eebf
		}
	}
	if _ccfe.DLblPos != nil {
		if _feba := _ccfe.DLblPos.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0050\u006f\u0073"); _feba != nil {
			return _feba
		}
	}
	if _ccfe.ShowLegendKey != nil {
		if _afca := _ccfe.ShowLegendKey.ValidateWithPath(path + "\u002f\u0053\u0068\u006f\u0077\u004c\u0065\u0067\u0065n\u0064\u004b\u0065\u0079"); _afca != nil {
			return _afca
		}
	}
	if _ccfe.ShowVal != nil {
		if _agaa := _ccfe.ShowVal.ValidateWithPath(path + "\u002f\u0053\u0068\u006f\u0077\u0056\u0061\u006c"); _agaa != nil {
			return _agaa
		}
	}
	if _ccfe.ShowCatName != nil {
		if _bbgg := _ccfe.ShowCatName.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"); _bbgg != nil {
			return _bbgg
		}
	}
	if _ccfe.ShowSerName != nil {
		if _begb := _ccfe.ShowSerName.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"); _begb != nil {
			return _begb
		}
	}
	if _ccfe.ShowPercent != nil {
		if _aefdf := _ccfe.ShowPercent.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"); _aefdf != nil {
			return _aefdf
		}
	}
	if _ccfe.ShowBubbleSize != nil {
		if _gcdc := _ccfe.ShowBubbleSize.ValidateWithPath(path + "\u002fS\u0068o\u0077\u0042\u0075\u0062\u0062\u006c\u0065\u0053\u0069\u007a\u0065"); _gcdc != nil {
			return _gcdc
		}
	}
	return nil
}

// ValidateWithPath validates the CT_BarSer and its children, prefixing error messages with path
func (_ebee *CT_BarSer) ValidateWithPath(path string) error {
	if _addd := _ebee.Idx.ValidateWithPath(path + "\u002f\u0049\u0064\u0078"); _addd != nil {
		return _addd
	}
	if _adaa := _ebee.Order.ValidateWithPath(path + "\u002f\u004f\u0072\u0064\u0065\u0072"); _adaa != nil {
		return _adaa
	}
	if _ebee.Tx != nil {
		if _afcc := _ebee.Tx.ValidateWithPath(path + "\u002f\u0054\u0078"); _afcc != nil {
			return _afcc
		}
	}
	if _ebee.SpPr != nil {
		if _ffae := _ebee.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _ffae != nil {
			return _ffae
		}
	}
	if _ebee.InvertIfNegative != nil {
		if _dbge := _ebee.InvertIfNegative.ValidateWithPath(path + "\u002f\u0049\u006e\u0076\u0065\u0072\u0074\u0049\u0066\u004e\u0065\u0067a\u0074\u0069\u0076\u0065"); _dbge != nil {
			return _dbge
		}
	}
	if _ebee.PictureOptions != nil {
		if _fefe := _ebee.PictureOptions.ValidateWithPath(path + "\u002fP\u0069c\u0074\u0075\u0072\u0065\u004f\u0070\u0074\u0069\u006f\u006e\u0073"); _fefe != nil {
			return _fefe
		}
	}
	for _fcec, _ebed := range _ebee.DPt {
		if _fdcc := _ebed.ValidateWithPath(_b.Sprintf("\u0025\u0073\u002f\u0044\u0050\u0074\u005b\u0025\u0064\u005d", path, _fcec)); _fdcc != nil {
			return _fdcc
		}
	}
	if _ebee.DLbls != nil {
		if _edgc := _ebee.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _edgc != nil {
			return _edgc
		}
	}
	for _aaee, _cgbg := range _ebee.Trendline {
		if _efd := _cgbg.ValidateWithPath(_b.Sprintf("\u0025\u0073/\u0054\u0072\u0065n\u0064\u006c\u0069\u006e\u0065\u005b\u0025\u0064\u005d", path, _aaee)); _efd != nil {
			return _efd
		}
	}
	if _ebee.ErrBars != nil {
		if _dbf := _ebee.ErrBars.ValidateWithPath(path + "\u002f\u0045\u0072\u0072\u0042\u0061\u0072\u0073"); _dbf != nil {
			return _dbf
		}
	}
	if _ebee.Cat != nil {
		if _fged := _ebee.Cat.ValidateWithPath(path + "\u002f\u0043\u0061\u0074"); _fged != nil {
			return _fged
		}
	}
	if _ebee.Val != nil {
		if _fbcb := _ebee.Val.ValidateWithPath(path + "\u002f\u0056\u0061\u006c"); _fbcb != nil {
			return _fbcb
		}
	}
	if _ebee.Shape != nil {
		if _gdf := _ebee.Shape.ValidateWithPath(path + "\u002f\u0053\u0068\u0061\u0070\u0065"); _gdf != nil {
			return _gdf
		}
	}
	if _ebee.ExtLst != nil {
		if _bed := _ebee.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _bed != nil {
			return _bed
		}
	}
	return nil
}
func NewCT_UpDownBar() *CT_UpDownBar { _fcgd := &CT_UpDownBar{}; return _fcgd }
func (_bdcdc *ST_DispBlanksAs) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_fgefd, _fedea := d.Token()
	if _fedea != nil {
		return _fedea
	}
	if _cagbc, _cedec := _fgefd.(_e.EndElement); _cedec && _cagbc.Name == start.Name {
		*_bdcdc = 1
		return nil
	}
	if _ecgcg, _daagdc := _fgefd.(_e.CharData); !_daagdc {
		return _b.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _fgefd)
	} else {
		switch string(_ecgcg) {
		case "":
			*_bdcdc = 0
		case "\u0073\u0070\u0061\u006e":
			*_bdcdc = 1
		case "\u0067\u0061\u0070":
			*_bdcdc = 2
		case "\u007a\u0065\u0072\u006f":
			*_bdcdc = 3
		}
	}
	_fgefd, _fedea = d.Token()
	if _fedea != nil {
		return _fedea
	}
	if _bagbe, _ddbfd := _fgefd.(_e.EndElement); _ddbfd && _bagbe.Name == start.Name {
		return nil
	}
	return _b.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _fgefd)
}

// Validate validates the CT_DateAx and its children
func (_dfbf *CT_DateAx) Validate() error {
	return _dfbf.ValidateWithPath("\u0043T\u005f\u0044\u0061\u0074\u0065\u0041x")
}

type CT_DLbls struct {
	DLbl   []*CT_DLbl
	Choice *CT_DLblsChoice
	ExtLst *CT_ExtensionList
}

func (_cedcb *CT_Line3DChart) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_cedcb.Grouping = NewCT_Grouping()
_bgcg:
	for {
		_fefb, _gaade := d.Token()
		if _gaade != nil {
			return _gaade
		}
		switch _geeb := _fefb.(type) {
		case _e.StartElement:
			switch _geeb.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}:
				if _edde := d.DecodeElement(_cedcb.Grouping, &_geeb); _edde != nil {
					return _edde
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_cedcb.VaryColors = NewCT_Boolean()
				if _gccfb := d.DecodeElement(_cedcb.VaryColors, &_geeb); _gccfb != nil {
					return _gccfb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_ccggg := NewCT_LineSer()
				if _eceda := d.DecodeElement(_ccggg, &_geeb); _eceda != nil {
					return _eceda
				}
				_cedcb.Ser = append(_cedcb.Ser, _ccggg)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_cedcb.DLbls = NewCT_DLbls()
				if _bfdc := d.DecodeElement(_cedcb.DLbls, &_geeb); _bfdc != nil {
					return _bfdc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064r\u006f\u0070\u004c\u0069\u006e\u0065s"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064r\u006f\u0070\u004c\u0069\u006e\u0065s"}:
				_cedcb.DropLines = NewCT_ChartLines()
				if _gebge := d.DecodeElement(_cedcb.DropLines, &_geeb); _gebge != nil {
					return _gebge
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0061\u0070\u0044\u0065\u0070\u0074\u0068"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0061\u0070\u0044\u0065\u0070\u0074\u0068"}:
				_cedcb.GapDepth = NewCT_GapAmount()
				if _cecgb := d.DecodeElement(_cedcb.GapDepth, &_geeb); _cecgb != nil {
					return _cecgb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				_dfggf := NewCT_UnsignedInt()
				if _fgeg := d.DecodeElement(_dfggf, &_geeb); _fgeg != nil {
					return _fgeg
				}
				_cedcb.AxId = append(_cedcb.AxId, _dfggf)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_cedcb.ExtLst = NewCT_ExtensionList()
				if _dcef := d.DecodeElement(_cedcb.ExtLst, &_geeb); _dcef != nil {
					return _dcef
				}
			default:
				_a.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069n\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006et\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u004c\u0069\u006e\u0065\u0033\u0044\u0043h\u0061r\u0074\u0020\u0025\u0076", _geeb.Name)
				if _gdaf := d.Skip(); _gdaf != nil {
					return _gdaf
				}
			}
		case _e.EndElement:
			break _bgcg
		case _e.CharData:
		}
	}
	return nil
}
func (_bcfba *CT_ExternalData) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _cbbf := range start.Attr {
		if _cbbf.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073" && _cbbf.Name.Local == "\u0069\u0064" || _cbbf.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f\u002fp\u0075\u0072\u006c.\u006f\u0063\u006cc\u002e\u006fr\u0067\u002f\u006f\u006f\u0078\u006dl\u002fof\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073" && _cbbf.Name.Local == "\u0069\u0064" {
			_egfb, _aeaefa := _cbbf.Value, error(nil)
			if _aeaefa != nil {
				return _aeaefa
			}
			_bcfba.IdAttr = _egfb
			continue
		}
	}
_dfcf:
	for {
		_bdbgb, _dfddfa := d.Token()
		if _dfddfa != nil {
			return _dfddfa
		}
		switch _edee := _bdbgb.(type) {
		case _e.StartElement:
			switch _edee.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0075\u0074\u006f\u0055\u0070\u0064\u0061\u0074\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0075\u0074\u006f\u0055\u0070\u0064\u0061\u0074\u0065"}:
				_bcfba.AutoUpdate = NewCT_Boolean()
				if _gfeb := d.DecodeElement(_bcfba.AutoUpdate, &_edee); _gfeb != nil {
					return _gfeb
				}
			default:
				_a.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074e\u0064\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0045\u0078\u0074e\u0072\u006e\u0061\u006c\u0044\u0061\u0074\u0061\u0020\u0025\u0076", _edee.Name)
				if _deab := d.Skip(); _deab != nil {
					return _deab
				}
			}
		case _e.EndElement:
			break _dfcf
		case _e.CharData:
		}
	}
	return nil
}
func (_befcbb *ST_LblOffset) ValidateWithPath(path string) error {
	_addeb := []string{}
	if _befcbb.ST_LblOffsetPercent != nil {
		_addeb = append(_addeb, "\u0053\u0054\u005f\u004cbl\u004f\u0066\u0066\u0073\u0065\u0074\u0050\u0065\u0072\u0063\u0065\u006e\u0074")
	}
	if _befcbb.ST_LblOffsetUShort != nil {
		_addeb = append(_addeb, "\u0053T\u005fL\u0062\u006c\u004f\u0066\u0066s\u0065\u0074U\u0053\u0068\u006f\u0072\u0074")
	}
	if len(_addeb) > 1 {
		return _b.Errorf("%\u0073\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u006d\u0065\u006d\u0062\u0065r\u0073\u0020\u0073e\u0074:\u0020\u0025\u0076", path, _addeb)
	}
	return nil
}
func NewCT_TxChoice() *CT_TxChoice { _gfbce := &CT_TxChoice{}; return _gfbce }
func (_fdbec *EG_LineChartShared) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	_dgbeg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}}
	e.EncodeElement(_fdbec.Grouping, _dgbeg)
	if _fdbec.VaryColors != nil {
		_abgfb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_fdbec.VaryColors, _abgfb)
	}
	if _fdbec.Ser != nil {
		_dgdbge := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _ecbe := range _fdbec.Ser {
			e.EncodeElement(_ecbe, _dgdbge)
		}
	}
	if _fdbec.DLbls != nil {
		_fdcbb := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_fdbec.DLbls, _fdcbb)
	}
	if _fdbec.DropLines != nil {
		_aadf := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0064\u0072\u006f\u0070\u004c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_fdbec.DropLines, _aadf)
	}
	return nil
}

// Validate validates the CT_ScatterStyle and its children
func (_caaadc *CT_ScatterStyle) Validate() error {
	return _caaadc.ValidateWithPath("\u0043T\u005fS\u0063\u0061\u0074\u0074\u0065\u0072\u0053\u0074\u0079\u006c\u0065")
}

type CT_AxDataSourceChoice struct {
	MultiLvlStrRef *CT_MultiLvlStrRef
	NumRef         *CT_NumRef
	NumLit         *CT_NumData
	StrRef         *CT_StrRef
	StrLit         *CT_StrData
}
type CT_ErrDir struct{ ValAttr ST_ErrDir }
type CT_BarChart struct {
	BarDir     *CT_BarDir
	Grouping   *CT_BarGrouping
	VaryColors *CT_Boolean
	Ser        []*CT_BarSer
	DLbls      *CT_DLbls
	GapWidth   *CT_GapAmount
	Overlap    *CT_Overlap
	SerLines   []*CT_ChartLines
	AxId       []*CT_UnsignedInt
	ExtLst     *CT_ExtensionList
}

// Validate validates the CT_DLblPos and its children
func (_bfbb *CT_DLblPos) Validate() error {
	return _bfbb.ValidateWithPath("\u0043\u0054\u005f\u0044\u004c\u0062\u006c\u0050\u006f\u0073")
}
func (_bffcg *CT_PictureOptions) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_fbecac:
	for {
		_adca, _acac := d.Token()
		if _acac != nil {
			return _acac
		}
		switch _ebdf := _adca.(type) {
		case _e.StartElement:
			switch _ebdf.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0070\u0070l\u0079\u0054\u006f\u0046\u0072\u006f\u006e\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0070\u0070l\u0079\u0054\u006f\u0046\u0072\u006f\u006e\u0074"}:
				_bffcg.ApplyToFront = NewCT_Boolean()
				if _afda := d.DecodeElement(_bffcg.ApplyToFront, &_ebdf); _afda != nil {
					return _afda
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0070\u0070l\u0079\u0054\u006f\u0053\u0069\u0064\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0070\u0070l\u0079\u0054\u006f\u0053\u0069\u0064\u0065\u0073"}:
				_bffcg.ApplyToSides = NewCT_Boolean()
				if _efdg := d.DecodeElement(_bffcg.ApplyToSides, &_ebdf); _efdg != nil {
					return _efdg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0070\u0070\u006c\u0079\u0054\u006f\u0045\u006e\u0064"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0070\u0070\u006c\u0079\u0054\u006f\u0045\u006e\u0064"}:
				_bffcg.ApplyToEnd = NewCT_Boolean()
				if _aedea := d.DecodeElement(_bffcg.ApplyToEnd, &_ebdf); _aedea != nil {
					return _aedea
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0063\u0074\u0075\u0072\u0065\u0046\u006f\u0072\u006d\u0061\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0063\u0074\u0075\u0072\u0065\u0046\u006f\u0072\u006d\u0061\u0074"}:
				_bffcg.PictureFormat = NewCT_PictureFormat()
				if _gcbed := d.DecodeElement(_bffcg.PictureFormat, &_ebdf); _gcbed != nil {
					return _gcbed
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069c\u0074\u0075\u0072e\u0053\u0074\u0061\u0063\u006b\u0055\u006e\u0069\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069c\u0074\u0075\u0072e\u0053\u0074\u0061\u0063\u006b\u0055\u006e\u0069\u0074"}:
				_bffcg.PictureStackUnit = NewCT_PictureStackUnit()
				if _fdgea := d.DecodeElement(_bffcg.PictureStackUnit, &_ebdf); _fdgea != nil {
					return _fdgea
				}
			default:
				_a.Log.Debug("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0050\u0069\u0063\u0074\u0075\u0072\u0065\u004f\u0070\u0074\u0069\u006f\u006e\u0073\u0020\u0025\u0076", _ebdf.Name)
				if _dffcg := d.Skip(); _dffcg != nil {
					return _dffcg
				}
			}
		case _e.EndElement:
			break _fbecac
		case _e.CharData:
		}
	}
	return nil
}
func (_feefa *CT_MarkerSize) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _ebbe := range start.Attr {
		if _ebbe.Name.Local == "\u0076\u0061\u006c" {
			_aecc, _cdgbe := _c.ParseUint(_ebbe.Value, 10, 8)
			if _cdgbe != nil {
				return _cdgbe
			}
			_aggb := uint8(_aecc)
			_feefa.ValAttr = &_aggb
			continue
		}
	}
	for {
		_cbba, _dacc := d.Token()
		if _dacc != nil {
			return _b.Errorf("\u0070a\u0072\u0073\u0069\u006eg\u0020\u0043\u0054\u005f\u004da\u0072k\u0065r\u0053\u0069\u007a\u0065\u003a\u0020\u0025s", _dacc)
		}
		if _ecaf, _fbfd := _cbba.(_e.EndElement); _fbfd && _ecaf.Name == start.Name {
			break
		}
	}
	return nil
}

// ValidateWithPath validates the EG_AxSharedChoice and its children, prefixing error messages with path
func (_aebgfd *EG_AxSharedChoice) ValidateWithPath(path string) error {
	if _aebgfd.Crosses != nil {
		if _gdage := _aebgfd.Crosses.ValidateWithPath(path + "\u002f\u0043\u0072\u006f\u0073\u0073\u0065\u0073"); _gdage != nil {
			return _gdage
		}
	}
	if _aebgfd.CrossesAt != nil {
		if _dgcbf := _aebgfd.CrossesAt.ValidateWithPath(path + "\u002f\u0043\u0072\u006f\u0073\u0073\u0065\u0073\u0041\u0074"); _dgcbf != nil {
			return _dgcbf
		}
	}
	return nil
}
func NewCT_CustSplit() *CT_CustSplit { _fgad := &CT_CustSplit{}; return _fgad }
func (_fbeed *CT_ErrBarType) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _afae := range start.Attr {
		if _afae.Name.Local == "\u0076\u0061\u006c" {
			_fbeed.ValAttr.UnmarshalXMLAttr(_afae)
			continue
		}
	}
	for {
		_gaea, _caea := d.Token()
		if _caea != nil {
			return _b.Errorf("\u0070a\u0072\u0073\u0069\u006eg\u0020\u0043\u0054\u005f\u0045r\u0072B\u0061r\u0054\u0079\u0070\u0065\u003a\u0020\u0025s", _caea)
		}
		if _acbf, _ccag := _gaea.(_e.EndElement); _ccag && _acbf.Name == start.Name {
			break
		}
	}
	return nil
}
func (_geeg *EG_PieChartShared) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _geeg.VaryColors != nil {
		_geafa := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_geeg.VaryColors, _geafa)
	}
	if _geeg.Ser != nil {
		_ffbgd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _dbecb := range _geeg.Ser {
			e.EncodeElement(_dbecb, _ffbgd)
		}
	}
	if _geeg.DLbls != nil {
		_beaf := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_geeg.DLbls, _beaf)
	}
	return nil
}
func NewCT_DispUnitsLbl() *CT_DispUnitsLbl     { _bfcf := &CT_DispUnitsLbl{}; return _bfcf }
func NewEG_PieChartShared() *EG_PieChartShared { _ebcac := &EG_PieChartShared{}; return _ebcac }
func (_cgfce *CT_Shape) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _cgfce.ValAttr != ST_ShapeUnset {
		_gcead, _ddefd := _cgfce.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
		if _ddefd != nil {
			return _ddefd
		}
		start.Attr = append(start.Attr, _gcead)
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}
func (_gfbbg *CT_ValAx) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_cccee := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	e.EncodeElement(_gfbbg.AxId, _cccee)
	_ggcda := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0073\u0063\u0061\u006c\u0069\u006eg"}}
	e.EncodeElement(_gfbbg.Scaling, _ggcda)
	if _gfbbg.Delete != nil {
		_dbcd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0064\u0065\u006c\u0065\u0074\u0065"}}
		e.EncodeElement(_gfbbg.Delete, _dbcd)
	}
	_accab := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0061\u0078\u0050\u006f\u0073"}}
	e.EncodeElement(_gfbbg.AxPos, _accab)
	if _gfbbg.MajorGridlines != nil {
		_dfcge := _e.StartElement{Name: _e.Name{Local: "\u0063\u003am\u0061\u006a\u006fr\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_gfbbg.MajorGridlines, _dfcge)
	}
	if _gfbbg.MinorGridlines != nil {
		_aegdc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003am\u0069\u006e\u006fr\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_gfbbg.MinorGridlines, _aegdc)
	}
	if _gfbbg.Title != nil {
		_dcfbe := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0074\u0069\u0074\u006c\u0065"}}
		e.EncodeElement(_gfbbg.Title, _dcfbe)
	}
	if _gfbbg.NumFmt != nil {
		_fege := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u0046\u006d\u0074"}}
		e.EncodeElement(_gfbbg.NumFmt, _fege)
	}
	if _gfbbg.MajorTickMark != nil {
		_dgfe := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006da\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}}
		e.EncodeElement(_gfbbg.MajorTickMark, _dgfe)
	}
	if _gfbbg.MinorTickMark != nil {
		_abfd := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006di\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}}
		e.EncodeElement(_gfbbg.MinorTickMark, _abfd)
	}
	if _gfbbg.TickLblPos != nil {
		_fbcgce := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074i\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}}
		e.EncodeElement(_gfbbg.TickLblPos, _fbcgce)
	}
	if _gfbbg.SpPr != nil {
		_ggacd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_gfbbg.SpPr, _ggacd)
	}
	if _gfbbg.TxPr != nil {
		_dacec := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_gfbbg.TxPr, _dacec)
	}
	_deefc := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0063\u0072\u006f\u0073\u0073\u0041x"}}
	e.EncodeElement(_gfbbg.CrossAx, _deefc)
	if _gfbbg.Choice != nil {
		_gfbbg.Choice.MarshalXML(e, _e.StartElement{})
	}
	if _gfbbg.CrossBetween != nil {
		_fddde := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0063\u0072\u006f\u0073\u0073\u0042\u0065t\u0077\u0065\u0065\u006e"}}
		e.EncodeElement(_gfbbg.CrossBetween, _fddde)
	}
	if _gfbbg.MajorUnit != nil {
		_cgfa := _e.StartElement{Name: _e.Name{Local: "c\u003a\u006d\u0061\u006a\u006f\u0072\u0055\u006e\u0069\u0074"}}
		e.EncodeElement(_gfbbg.MajorUnit, _cgfa)
	}
	if _gfbbg.MinorUnit != nil {
		_abacd := _e.StartElement{Name: _e.Name{Local: "c\u003a\u006d\u0069\u006e\u006f\u0072\u0055\u006e\u0069\u0074"}}
		e.EncodeElement(_gfbbg.MinorUnit, _abacd)
	}
	if _gfbbg.DispUnits != nil {
		_fcafg := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0064\u0069\u0073\u0070\u0055\u006e\u0069\u0074\u0073"}}
		e.EncodeElement(_gfbbg.DispUnits, _fcafg)
	}
	if _gfbbg.ExtLst != nil {
		_fdcdg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_gfbbg.ExtLst, _fdcdg)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}
func (_faag *CT_PictureFormat) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	_dcaca, _gaagf := _faag.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
	if _gaagf != nil {
		return _gaagf
	}
	start.Attr = append(start.Attr, _dcaca)
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}
func (_beacg *CT_DispUnits) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _beacg.Choice != nil {
		_beacg.Choice.MarshalXML(e, _e.StartElement{})
	}
	if _beacg.DispUnitsLbl != nil {
		_cfgdb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0064\u0069\u0073\u0070\u0055\u006e\u0069t\u0073\u004c\u0062\u006c"}}
		e.EncodeElement(_beacg.DispUnitsLbl, _cfgdb)
	}
	if _beacg.ExtLst != nil {
		_bafd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_beacg.ExtLst, _bafd)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_MultiLvlStrData and its children
func (_dcedd *CT_MultiLvlStrData) Validate() error {
	return _dcedd.ValidateWithPath("\u0043T\u005fM\u0075\u006c\u0074\u0069\u004cv\u006c\u0053t\u0072\u0044\u0061\u0074\u0061")
}
func (_bbec *CT_DLblsChoice) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _bbec.Delete != nil {
		_fgge := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0064\u0065\u006c\u0065\u0074\u0065"}}
		e.EncodeElement(_bbec.Delete, _fgge)
	}
	if _bbec.NumFmt != nil {
		_gfga := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u0046\u006d\u0074"}}
		e.EncodeElement(_bbec.NumFmt, _gfga)
	}
	if _bbec.SpPr != nil {
		_cdec := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_bbec.SpPr, _cdec)
	}
	if _bbec.TxPr != nil {
		_fafca := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_bbec.TxPr, _fafca)
	}
	if _bbec.DLblPos != nil {
		_cgcbc := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0050\u006fs"}}
		e.EncodeElement(_bbec.DLblPos, _cgcbc)
	}
	if _bbec.ShowLegendKey != nil {
		_gdca := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0073h\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}}
		e.EncodeElement(_bbec.ShowLegendKey, _gdca)
	}
	if _bbec.ShowVal != nil {
		_cgcba := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0073\u0068\u006f\u0077\u0056\u0061l"}}
		e.EncodeElement(_bbec.ShowVal, _cgcba)
	}
	if _bbec.ShowCatName != nil {
		_gfgd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}}
		e.EncodeElement(_bbec.ShowCatName, _gfgd)
	}
	if _bbec.ShowSerName != nil {
		_gage := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}}
		e.EncodeElement(_bbec.ShowSerName, _gage)
	}
	if _bbec.ShowPercent != nil {
		_bcab := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}}
		e.EncodeElement(_bbec.ShowPercent, _bcab)
	}
	if _bbec.ShowBubbleSize != nil {
		_gbcce := _e.StartElement{Name: _e.Name{Local: "\u0063\u003as\u0068\u006f\u0077B\u0075\u0062\u0062\u006c\u0065\u0053\u0069\u007a\u0065"}}
		e.EncodeElement(_bbec.ShowBubbleSize, _gbcce)
	}
	if _bbec.Separator != nil {
		_gdcg := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0073\u0065\u0070\u0061\u0072\u0061\u0074\u006f\u0072"}}
		_gb.AddPreserveSpaceAttr(&_gdcg, *_bbec.Separator)
		e.EncodeElement(_bbec.Separator, _gdcg)
	}
	if _bbec.ShowLeaderLines != nil {
		_ggag := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u004c\u0065\u0061\u0064\u0065\u0072L\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_bbec.ShowLeaderLines, _ggag)
	}
	if _bbec.LeaderLines != nil {
		_acdb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006c\u0065\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_bbec.LeaderLines, _acdb)
	}
	return nil
}

// Validate validates the CT_LogBase and its children
func (_bfbaa *CT_LogBase) Validate() error {
	return _bfbaa.ValidateWithPath("\u0043\u0054\u005f\u004c\u006f\u0067\u0042\u0061\u0073\u0065")
}

type CT_RelId struct{ IdAttr string }

func NewCT_DispBlanksAs() *CT_DispBlanksAs { _fdec := &CT_DispBlanksAs{}; return _fdec }

var ST_OverlapPercentPatternRe = _g.MustCompile(ST_OverlapPercentPattern)

func (_fbbe *CT_Extension) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _efdb := range start.Attr {
		if _efdb.Name.Local == "\u0075\u0072\u0069" {
			_afgcc, _aggc := _efdb.Value, error(nil)
			if _aggc != nil {
				return _aggc
			}
			_fbbe.UriAttr = &_afgcc
			continue
		}
	}
_fagcc:
	for {
		_eddg, _egdaf := d.Token()
		if _egdaf != nil {
			return _egdaf
		}
		switch _bebd := _eddg.(type) {
		case _e.StartElement:
			switch _bebd.Name {
			default:
				if _dfeg, _dfddf := _gb.CreateElement(_bebd); _dfddf != nil {
					return _dfddf
				} else {
					if _gfee := d.DecodeElement(_dfeg, &_bebd); _gfee != nil {
						return _gfee
					}
					_fbbe.Any = _dfeg
				}
			}
		case _e.EndElement:
			break _fagcc
		case _e.CharData:
		}
	}
	return nil
}
func (_eaaf *CT_ChartSpace) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _eaaf.Date1904 != nil {
		_cfefb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0064\u0061\u0074\u0065\u0031\u0039\u0030\u0034"}}
		e.EncodeElement(_eaaf.Date1904, _cfefb)
	}
	if _eaaf.Lang != nil {
		_ddaf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006c\u0061\u006e\u0067"}}
		e.EncodeElement(_eaaf.Lang, _ddaf)
	}
	if _eaaf.RoundedCorners != nil {
		_abf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003ar\u006f\u0075\u006ed\u0065\u0064\u0043\u006f\u0072\u006e\u0065\u0072\u0073"}}
		e.EncodeElement(_eaaf.RoundedCorners, _abf)
	}
	if _eaaf.Style != nil {
		_ffcb := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0073\u0074\u0079\u006c\u0065"}}
		e.EncodeElement(_eaaf.Style, _ffcb)
	}
	if _eaaf.ClrMapOvr != nil {
		_ccffb := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0063\u006c\u0072\u004d\u0061\u0070\u004f\u0076\u0072"}}
		e.EncodeElement(_eaaf.ClrMapOvr, _ccffb)
	}
	if _eaaf.PivotSource != nil {
		_bdcg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0070\u0069\u0076\u006f\u0074\u0053\u006f\u0075\u0072\u0063\u0065"}}
		e.EncodeElement(_eaaf.PivotSource, _bdcg)
	}
	if _eaaf.Protection != nil {
		_fcd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0070r\u006f\u0074\u0065\u0063\u0074\u0069\u006f\u006e"}}
		e.EncodeElement(_eaaf.Protection, _fcd)
	}
	_cgcb := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0063\u0068\u0061\u0072\u0074"}}
	e.EncodeElement(_eaaf.Chart, _cgcb)
	if _eaaf.SpPr != nil {
		_acdc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_eaaf.SpPr, _acdc)
	}
	if _eaaf.TxPr != nil {
		_feedb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_eaaf.TxPr, _feedb)
	}
	if _eaaf.ExternalData != nil {
		_fdcg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u0065\u0072\u006e\u0061l\u0044\u0061\u0074\u0061"}}
		e.EncodeElement(_eaaf.ExternalData, _fdcg)
	}
	if _eaaf.PrintSettings != nil {
		_bffg := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0070r\u0069\u006e\u0074\u0053\u0065\u0074\u0074\u0069\u006e\u0067\u0073"}}
		e.EncodeElement(_eaaf.PrintSettings, _bffg)
	}
	if _eaaf.UserShapes != nil {
		_bdag := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0075s\u0065\u0072\u0053\u0068\u0061\u0070\u0065\u0073"}}
		e.EncodeElement(_eaaf.UserShapes, _bdag)
	}
	if _eaaf.ExtLst != nil {
		_edca := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_eaaf.ExtLst, _edca)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_ExtensionList and its children
func (_gbege *CT_ExtensionList) Validate() error {
	return _gbege.ValidateWithPath("\u0043\u0054_\u0045\u0078\u0074e\u006e\u0073\u0069\u006f\u006e\u004c\u0069\u0073\u0074")
}
func (_agdee ST_LegendPos) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_agdee.String(), start)
}
func (_gbdb *CT_BarDir) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _gbdb.ValAttr != ST_BarDirUnset {
		_ebd, _fed := _gbdb.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
		if _fed != nil {
			return _fed
		}
		start.Attr = append(start.Attr, _ebd)
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

type ST_SplitType byte

func (_ffgeb *ST_TickLblPos) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_ffgeb = 0
	case "\u0068\u0069\u0067\u0068":
		*_ffgeb = 1
	case "\u006c\u006f\u0077":
		*_ffgeb = 2
	case "\u006e\u0065\u0078\u0074\u0054\u006f":
		*_ffgeb = 3
	case "\u006e\u006f\u006e\u0065":
		*_ffgeb = 4
	}
	return nil
}

// Validate validates the CT_PieChart and its children
func (_abea *CT_PieChart) Validate() error {
	return _abea.ValidateWithPath("C\u0054\u005f\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074")
}

type CT_PictureOptions struct {
	ApplyToFront     *CT_Boolean
	ApplyToSides     *CT_Boolean
	ApplyToEnd       *CT_Boolean
	PictureFormat    *CT_PictureFormat
	PictureStackUnit *CT_PictureStackUnit
}

func (_fggdg *ST_PictureFormat) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_befge, _ebadd := d.Token()
	if _ebadd != nil {
		return _ebadd
	}
	if _ecfcf, _gefdb := _befge.(_e.EndElement); _gefdb && _ecfcf.Name == start.Name {
		*_fggdg = 1
		return nil
	}
	if _efcae, _fgabb := _befge.(_e.CharData); !_fgabb {
		return _b.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _befge)
	} else {
		switch string(_efcae) {
		case "":
			*_fggdg = 0
		case "\u0073t\u0072\u0065\u0074\u0063\u0068":
			*_fggdg = 1
		case "\u0073\u0074\u0061c\u006b":
			*_fggdg = 2
		case "\u0073\u0074\u0061\u0063\u006b\u0053\u0063\u0061\u006c\u0065":
			*_fggdg = 3
		}
	}
	_befge, _ebadd = d.Token()
	if _ebadd != nil {
		return _ebadd
	}
	if _cbgbg, _gbcee := _befge.(_e.EndElement); _gbcee && _cbgbg.Name == start.Name {
		return nil
	}
	return _b.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _befge)
}
func (_gfbc *CT_LegendPos) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _gfbc.ValAttr != ST_LegendPosUnset {
		_gaga, _efcbb := _gfbc.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
		if _efcbb != nil {
			return _efcbb
		}
		start.Attr = append(start.Attr, _gaga)
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_ErrBarType and its children, prefixing error messages with path
func (_deee *CT_ErrBarType) ValidateWithPath(path string) error {
	if _fedf := _deee.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _fedf != nil {
		return _fedf
	}
	return nil
}

// Validate validates the CT_RotX and its children
func (_eeaec *CT_RotX) Validate() error {
	return _eeaec.ValidateWithPath("\u0043T\u005f\u0052\u006f\u0074\u0058")
}

// ValidateWithPath validates the CT_DispUnits and its children, prefixing error messages with path
func (_ddba *CT_DispUnits) ValidateWithPath(path string) error {
	if _ddba.Choice != nil {
		if _geca := _ddba.Choice.ValidateWithPath(path + "\u002fC\u0068\u006f\u0069\u0063\u0065"); _geca != nil {
			return _geca
		}
	}
	if _ddba.DispUnitsLbl != nil {
		if _gebe := _ddba.DispUnitsLbl.ValidateWithPath(path + "\u002f\u0044\u0069\u0073\u0070\u0055\u006e\u0069\u0074\u0073\u004c\u0062\u006c"); _gebe != nil {
			return _gebe
		}
	}
	if _ddba.ExtLst != nil {
		if _gfag := _ddba.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _gfag != nil {
			return _gfag
		}
	}
	return nil
}
func (_ffag ST_Grouping) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_gbee := _e.Attr{}
	_gbee.Name = name
	switch _ffag {
	case ST_GroupingUnset:
		_gbee.Value = ""
	case ST_GroupingPercentStacked:
		_gbee.Value = "\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u0053\u0074a\u0063\u006b\u0065\u0064"
	case ST_GroupingStandard:
		_gbee.Value = "\u0073\u0074\u0061\u006e\u0064\u0061\u0072\u0064"
	case ST_GroupingStacked:
		_gbee.Value = "\u0073t\u0061\u0063\u006b\u0065\u0064"
	}
	return _gbee, nil
}
func (_bbeeb ST_BuiltInUnit) String() string {
	switch _bbeeb {
	case 0:
		return ""
	case 1:
		return "\u0068\u0075\u006e\u0064\u0072\u0065\u0064\u0073"
	case 2:
		return "\u0074h\u006f\u0075\u0073\u0061\u006e\u0064s"
	case 3:
		return "\u0074\u0065\u006eT\u0068\u006f\u0075\u0073\u0061\u006e\u0064\u0073"
	case 4:
		return "\u0068\u0075n\u0064\u0072\u0065d\u0054\u0068\u006f\u0075\u0073\u0061\u006e\u0064\u0073"
	case 5:
		return "\u006d\u0069\u006c\u006c\u0069\u006f\u006e\u0073"
	case 6:
		return "t\u0065\u006e\u004d\u0069\u006c\u006c\u0069\u006f\u006e\u0073"
	case 7:
		return "\u0068u\u006ed\u0072\u0065\u0064\u004d\u0069\u006c\u006c\u0069\u006f\u006e\u0073"
	case 8:
		return "\u0062\u0069\u006c\u006c\u0069\u006f\u006e\u0073"
	case 9:
		return "\u0074r\u0069\u006c\u006c\u0069\u006f\u006es"
	}
	return ""
}

type CT_Order struct{ ValAttr *uint8 }

func (_gadfd *CT_NumDataSource) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_gadfd.Choice = NewCT_NumDataSourceChoice()
_bcdbc:
	for {
		_dafc, _affd := d.Token()
		if _affd != nil {
			return _affd
		}
		switch _egca := _dafc.(type) {
		case _e.StartElement:
			switch _egca.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0052\u0065\u0066"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0052\u0065\u0066"}:
				_gadfd.Choice = NewCT_NumDataSourceChoice()
				if _aedee := d.DecodeElement(&_gadfd.Choice.NumRef, &_egca); _aedee != nil {
					return _aedee
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u004c\u0069\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u004c\u0069\u0074"}:
				_gadfd.Choice = NewCT_NumDataSourceChoice()
				if _aaeba := d.DecodeElement(&_gadfd.Choice.NumLit, &_egca); _aaeba != nil {
					return _aaeba
				}
			default:
				_a.Log.Debug("\u0073\u006b\u0069\u0070\u0070i\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u004e\u0075\u006d\u0044\u0061\u0074\u0061\u0053\u006f\u0075\u0072\u0063\u0065\u0020\u0025v", _egca.Name)
				if _bffcf := d.Skip(); _bffcf != nil {
					return _bffcf
				}
			}
		case _e.EndElement:
			break _bcdbc
		case _e.CharData:
		}
	}
	return nil
}

const (
	ST_BuiltInUnitUnset            ST_BuiltInUnit = 0
	ST_BuiltInUnitHundreds         ST_BuiltInUnit = 1
	ST_BuiltInUnitThousands        ST_BuiltInUnit = 2
	ST_BuiltInUnitTenThousands     ST_BuiltInUnit = 3
	ST_BuiltInUnitHundredThousands ST_BuiltInUnit = 4
	ST_BuiltInUnitMillions         ST_BuiltInUnit = 5
	ST_BuiltInUnitTenMillions      ST_BuiltInUnit = 6
	ST_BuiltInUnitHundredMillions  ST_BuiltInUnit = 7
	ST_BuiltInUnitBillions         ST_BuiltInUnit = 8
	ST_BuiltInUnitTrillions        ST_BuiltInUnit = 9
)

func (_aeaa *CT_TickLblPos) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _fceaa := range start.Attr {
		if _fceaa.Name.Local == "\u0076\u0061\u006c" {
			_aeaa.ValAttr.UnmarshalXMLAttr(_fceaa)
			continue
		}
	}
	for {
		_cfbea, _fafgc := d.Token()
		if _fafgc != nil {
			return _b.Errorf("\u0070a\u0072\u0073\u0069\u006eg\u0020\u0043\u0054\u005f\u0054i\u0063k\u004cb\u006c\u0050\u006f\u0073\u003a\u0020\u0025s", _fafgc)
		}
		if _bcdcg, _dggfg := _cfbea.(_e.EndElement); _dggfg && _bcdcg.Name == start.Name {
			break
		}
	}
	return nil
}
func NewCT_DispUnitsChoice() *CT_DispUnitsChoice { _adec := &CT_DispUnitsChoice{}; return _adec }

// ValidateWithPath validates the CT_Boolean and its children, prefixing error messages with path
func (_edab *CT_Boolean) ValidateWithPath(path string) error { return nil }

type CT_StrRef struct {
	F        string
	StrCache *CT_StrData
	ExtLst   *CT_ExtensionList
}

// ValidateWithPath validates the CT_NumFmt and its children, prefixing error messages with path
func (_agdag *CT_NumFmt) ValidateWithPath(path string) error { return nil }

// Validate validates the CT_TxChoice and its children
func (_agbg *CT_TxChoice) Validate() error {
	return _agbg.ValidateWithPath("C\u0054\u005f\u0054\u0078\u0043\u0068\u006f\u0069\u0063\u0065")
}
func NewCT_NumDataSource() *CT_NumDataSource {
	_dcbeb := &CT_NumDataSource{}
	_dcbeb.Choice = NewCT_NumDataSourceChoice()
	return _dcbeb
}

const ST_DepthPercentWithSymbolPattern = "\u0030\u002a\u0028\u0028\u005b\u0032\u002d\u0039\u005d\u005b\u0030\u002d\u0039\u005d\u0029\u007c\u0028\u005b\u0031\u002d9\u005d\u005b\u0030\u002d\u0039\u005d\u005b\u0030\u002d\u0039\u005d\u0029\u007c\u0028\u0031\u005b\u0030\u002d\u0039\u005d\u005b\u0030\u002d\u0039\u005d\u005b\u0030\u002d\u0039\u005d)\u007c\u0032\u0030\u0030\u0030)\u0025"

func (_ffaff *ST_LblAlgn) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_gedg, _ggggf := d.Token()
	if _ggggf != nil {
		return _ggggf
	}
	if _ggfbg, _aegbd := _gedg.(_e.EndElement); _aegbd && _ggfbg.Name == start.Name {
		*_ffaff = 1
		return nil
	}
	if _ebcbc, _eeeff := _gedg.(_e.CharData); !_eeeff {
		return _b.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _gedg)
	} else {
		switch string(_ebcbc) {
		case "":
			*_ffaff = 0
		case "\u0063\u0074\u0072":
			*_ffaff = 1
		case "\u006c":
			*_ffaff = 2
		case "\u0072":
			*_ffaff = 3
		}
	}
	_gedg, _ggggf = d.Token()
	if _ggggf != nil {
		return _ggggf
	}
	if _febbd, _fbcgd := _gedg.(_e.EndElement); _fbcgd && _febbd.Name == start.Name {
		return nil
	}
	return _b.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _gedg)
}

// Validate validates the EG_BarChartShared and its children
func (_ffffd *EG_BarChartShared) Validate() error {
	return _ffffd.ValidateWithPath("\u0045\u0047\u005f\u0042\u0061\u0072\u0043\u0068\u0061\u0072\u0074\u0053h\u0061\u0072\u0065\u0064")
}

type CT_AxDataSource struct{ Choice *CT_AxDataSourceChoice }

func (_cgfdg *CT_PlotArea) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_dbcf:
	for {
		_agag, _gadb := d.Token()
		if _gadb != nil {
			return _gadb
		}
		switch _acgbf := _agag.(type) {
		case _e.StartElement:
			switch _acgbf.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}:
				_cgfdg.Layout = NewCT_Layout()
				if _babgf := d.DecodeElement(_cgfdg.Layout, &_acgbf); _babgf != nil {
					return _babgf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061r\u0065\u0061\u0043\u0068\u0061\u0072t"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061r\u0065\u0061\u0043\u0068\u0061\u0072t"}:
				_afdab := NewCT_PlotAreaChoice()
				if _bcggc := d.DecodeElement(&_afdab.AreaChart, &_acgbf); _bcggc != nil {
					return _bcggc
				}
				_cgfdg.Choice = append(_cgfdg.Choice, _afdab)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "a\u0072\u0065\u0061\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "a\u0072\u0065\u0061\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}:
				_gcbcb := NewCT_PlotAreaChoice()
				if _dcgd := d.DecodeElement(&_gcbcb.Area3DChart, &_acgbf); _dcgd != nil {
					return _dcgd
				}
				_cgfdg.Choice = append(_cgfdg.Choice, _gcbcb)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006ci\u006e\u0065\u0043\u0068\u0061\u0072t"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006ci\u006e\u0065\u0043\u0068\u0061\u0072t"}:
				_acdff := NewCT_PlotAreaChoice()
				if _ceeec := d.DecodeElement(&_acdff.LineChart, &_acgbf); _ceeec != nil {
					return _ceeec
				}
				_cgfdg.Choice = append(_cgfdg.Choice, _acdff)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "l\u0069\u006e\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "l\u0069\u006e\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}:
				_cadgc := NewCT_PlotAreaChoice()
				if _deeff := d.DecodeElement(&_cadgc.Line3DChart, &_acgbf); _deeff != nil {
					return _deeff
				}
				_cgfdg.Choice = append(_cgfdg.Choice, _cadgc)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u006f\u0063\u006b\u0043\u0068\u0061\u0072\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u006f\u0063\u006b\u0043\u0068\u0061\u0072\u0074"}:
				_cgebe := NewCT_PlotAreaChoice()
				if _fgfc := d.DecodeElement(&_cgebe.StockChart, &_acgbf); _fgfc != nil {
					return _fgfc
				}
				_cgfdg.Choice = append(_cgfdg.Choice, _cgebe)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u0061\u0064\u0061\u0072\u0043\u0068\u0061\u0072\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u0061\u0064\u0061\u0072\u0043\u0068\u0061\u0072\u0074"}:
				_ecdbf := NewCT_PlotAreaChoice()
				if _adgcg := d.DecodeElement(&_ecdbf.RadarChart, &_acgbf); _adgcg != nil {
					return _adgcg
				}
				_cgfdg.Choice = append(_cgfdg.Choice, _ecdbf)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0063\u0061t\u0074\u0065\u0072\u0043\u0068\u0061\u0072\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0063\u0061t\u0074\u0065\u0072\u0043\u0068\u0061\u0072\u0074"}:
				_ebfd := NewCT_PlotAreaChoice()
				if _cfcb := d.DecodeElement(&_ebfd.ScatterChart, &_acgbf); _cfcb != nil {
					return _cfcb
				}
				_cgfdg.Choice = append(_cgfdg.Choice, _ebfd)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0065\u0043\u0068\u0061\u0072\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0065\u0043\u0068\u0061\u0072\u0074"}:
				_ggfc := NewCT_PlotAreaChoice()
				if _aegfg := d.DecodeElement(&_ggfc.PieChart, &_acgbf); _aegfg != nil {
					return _aegfg
				}
				_cgfdg.Choice = append(_cgfdg.Choice, _ggfc)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}:
				_baed := NewCT_PlotAreaChoice()
				if _cacd := d.DecodeElement(&_baed.Pie3DChart, &_acgbf); _cacd != nil {
					return _cacd
				}
				_cgfdg.Choice = append(_cgfdg.Choice, _baed)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u006f\u0075\u0067\u0068\u006e\u0075\u0074\u0043\u0068\u0061\u0072\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u006f\u0075\u0067\u0068\u006e\u0075\u0074\u0043\u0068\u0061\u0072\u0074"}:
				_gdcad := NewCT_PlotAreaChoice()
				if _ddfcb := d.DecodeElement(&_gdcad.DoughnutChart, &_acgbf); _ddfcb != nil {
					return _ddfcb
				}
				_cgfdg.Choice = append(_cgfdg.Choice, _gdcad)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0072\u0043\u0068\u0061\u0072\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0072\u0043\u0068\u0061\u0072\u0074"}:
				_edaba := NewCT_PlotAreaChoice()
				if _gcbec := d.DecodeElement(&_edaba.BarChart, &_acgbf); _gcbec != nil {
					return _gcbec
				}
				_cgfdg.Choice = append(_cgfdg.Choice, _edaba)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0072\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0072\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}:
				_bcddd := NewCT_PlotAreaChoice()
				if _eage := d.DecodeElement(&_bcddd.Bar3DChart, &_acgbf); _eage != nil {
					return _eage
				}
				_cgfdg.Choice = append(_cgfdg.Choice, _bcddd)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0066\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0066\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074"}:
				_dgafc := NewCT_PlotAreaChoice()
				if _dcadeg := d.DecodeElement(&_dgafc.OfPieChart, &_acgbf); _dcadeg != nil {
					return _dcadeg
				}
				_cgfdg.Choice = append(_cgfdg.Choice, _dgafc)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0075\u0072f\u0061\u0063\u0065\u0043\u0068\u0061\u0072\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0075\u0072f\u0061\u0063\u0065\u0043\u0068\u0061\u0072\u0074"}:
				_gaabf := NewCT_PlotAreaChoice()
				if _cgbcf := d.DecodeElement(&_gaabf.SurfaceChart, &_acgbf); _cgbcf != nil {
					return _cgbcf
				}
				_cgfdg.Choice = append(_cgfdg.Choice, _gaabf)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0075\u0072\u0066\u0061\u0063\u0065\u0033\u0044C\u0068\u0061\u0072\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0075\u0072\u0066\u0061\u0063\u0065\u0033\u0044C\u0068\u0061\u0072\u0074"}:
				_efff := NewCT_PlotAreaChoice()
				if _agdce := d.DecodeElement(&_efff.Surface3DChart, &_acgbf); _agdce != nil {
					return _agdce
				}
				_cgfdg.Choice = append(_cgfdg.Choice, _efff)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "b\u0075\u0062\u0062\u006c\u0065\u0043\u0068\u0061\u0072\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "b\u0075\u0062\u0062\u006c\u0065\u0043\u0068\u0061\u0072\u0074"}:
				_eccef := NewCT_PlotAreaChoice()
				if _gffaf := d.DecodeElement(&_eccef.BubbleChart, &_acgbf); _gffaf != nil {
					return _gffaf
				}
				_cgfdg.Choice = append(_cgfdg.Choice, _eccef)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006cA\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006cA\u0078"}:
				if _cgfdg.CChoice == nil {
					_cgfdg.CChoice = NewCT_PlotAreaChoice1()
				}
				if _eadd := d.DecodeElement(&_cgfdg.CChoice.ValAx, &_acgbf); _eadd != nil {
					return _eadd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074A\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074A\u0078"}:
				if _cgfdg.CChoice == nil {
					_cgfdg.CChoice = NewCT_PlotAreaChoice1()
				}
				if _eadgf := d.DecodeElement(&_cgfdg.CChoice.CatAx, &_acgbf); _eadgf != nil {
					return _eadgf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0061\u0074\u0065\u0041\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0061\u0074\u0065\u0041\u0078"}:
				if _cgfdg.CChoice == nil {
					_cgfdg.CChoice = NewCT_PlotAreaChoice1()
				}
				if _defc := d.DecodeElement(&_cgfdg.CChoice.DateAx, &_acgbf); _defc != nil {
					return _defc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072A\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072A\u0078"}:
				if _cgfdg.CChoice == nil {
					_cgfdg.CChoice = NewCT_PlotAreaChoice1()
				}
				if _bfbab := d.DecodeElement(&_cgfdg.CChoice.SerAx, &_acgbf); _bfbab != nil {
					return _bfbab
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0054\u0061\u0062\u006c\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0054\u0061\u0062\u006c\u0065"}:
				_cgfdg.DTable = NewCT_DTable()
				if _cgedc := d.DecodeElement(_cgfdg.DTable, &_acgbf); _cgedc != nil {
					return _cgedc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_cgfdg.SpPr = _f.NewCT_ShapeProperties()
				if _abgd := d.DecodeElement(_cgfdg.SpPr, &_acgbf); _abgd != nil {
					return _abgd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_cgfdg.ExtLst = NewCT_ExtensionList()
				if _fdaed := d.DecodeElement(_cgfdg.ExtLst, &_acgbf); _fdaed != nil {
					return _fdaed
				}
			default:
				_a.Log.Debug("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0050\u006c\u006f\u0074\u0041\u0072\u0065\u0061\u0020\u0025\u0076", _acgbf.Name)
				if _eedab := d.Skip(); _eedab != nil {
					return _eedab
				}
			}
		case _e.EndElement:
			break _dbcf
		case _e.CharData:
		}
	}
	return nil
}
func NewCT_ManualLayout() *CT_ManualLayout { _daef := &CT_ManualLayout{}; return _daef }
func NewCT_AreaSer() *CT_AreaSer {
	_efc := &CT_AreaSer{}
	_efc.Idx = NewCT_UnsignedInt()
	_efc.Order = NewCT_UnsignedInt()
	return _efc
}

// Validate validates the CT_BuiltInUnit and its children
func (_begf *CT_BuiltInUnit) Validate() error {
	return _begf.ValidateWithPath("\u0043\u0054\u005f\u0042\u0075\u0069\u006c\u0074\u0049n\u0055\u006e\u0069\u0074")
}

// ValidateWithPath validates the CT_FirstSliceAng and its children, prefixing error messages with path
func (_face *CT_FirstSliceAng) ValidateWithPath(path string) error {
	if _face.ValAttr != nil {
		if *_face.ValAttr < 0 {
			return _b.Errorf("%\u0073\u002f\u006d\u002e\u0056\u0061l\u0041\u0074\u0074\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u003e=\u0020\u0030\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, *_face.ValAttr)
		}
		if *_face.ValAttr > 360 {
			return _b.Errorf("\u0025\u0073/\u006d\u002e\u0056\u0061l\u0041\u0074t\u0072\u0020\u006d\u0075\u0073\u0074\u0020\u0062e\u0020\u003c\u003d\u0020\u0033\u0036\u0030\u0020\u0028\u0068\u0061\u0076e\u0020\u0025\u0076\u0029", path, *_face.ValAttr)
		}
	}
	return nil
}

// Validate validates the CT_LegendEntry and its children
func (_bebf *CT_LegendEntry) Validate() error {
	return _bebf.ValidateWithPath("\u0043\u0054\u005f\u004c\u0065\u0067\u0065\u006e\u0064E\u006e\u0074\u0072\u0079")
}
func (_fabgb ST_BarGrouping) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_fabgb.String(), start)
}
func (_acfa *CT_ScatterSer) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_acfa.Idx = NewCT_UnsignedInt()
	_acfa.Order = NewCT_UnsignedInt()
_fdfcb:
	for {
		_eefcc, _ffaf := d.Token()
		if _ffaf != nil {
			return _ffaf
		}
		switch _dcde := _eefcc.(type) {
		case _e.StartElement:
			switch _dcde.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}:
				if _agcg := d.DecodeElement(_acfa.Idx, &_dcde); _agcg != nil {
					return _agcg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}:
				if _fcfea := d.DecodeElement(_acfa.Order, &_dcde); _fcfea != nil {
					return _fcfea
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				_acfa.Tx = NewCT_SerTx()
				if _cggbg := d.DecodeElement(_acfa.Tx, &_dcde); _cggbg != nil {
					return _cggbg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_acfa.SpPr = _f.NewCT_ShapeProperties()
				if _bbbc := d.DecodeElement(_acfa.SpPr, &_dcde); _bbbc != nil {
					return _bbbc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u0072\u006b\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u0072\u006b\u0065\u0072"}:
				_acfa.Marker = NewCT_Marker()
				if _aagf := d.DecodeElement(_acfa.Marker, &_dcde); _aagf != nil {
					return _aagf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0050\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0050\u0074"}:
				_dbcfc := NewCT_DPt()
				if _adbe := d.DecodeElement(_dbcfc, &_dcde); _adbe != nil {
					return _adbe
				}
				_acfa.DPt = append(_acfa.DPt, _dbcfc)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_acfa.DLbls = NewCT_DLbls()
				if _affbcf := d.DecodeElement(_acfa.DLbls, &_dcde); _affbcf != nil {
					return _affbcf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074r\u0065\u006e\u0064\u006c\u0069\u006ee"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074r\u0065\u006e\u0064\u006c\u0069\u006ee"}:
				_bdafb := NewCT_Trendline()
				if _ffga := d.DecodeElement(_bdafb, &_dcde); _ffga != nil {
					return _ffga
				}
				_acfa.Trendline = append(_acfa.Trendline, _bdafb)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065r\u0072\u0042\u0061\u0072\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065r\u0072\u0042\u0061\u0072\u0073"}:
				_abcc := NewCT_ErrBars()
				if _faec := d.DecodeElement(_abcc, &_dcde); _faec != nil {
					return _faec
				}
				_acfa.ErrBars = append(_acfa.ErrBars, _abcc)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0078\u0056\u0061\u006c"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0078\u0056\u0061\u006c"}:
				_acfa.XVal = NewCT_AxDataSource()
				if _gebbd := d.DecodeElement(_acfa.XVal, &_dcde); _gebbd != nil {
					return _gebbd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0079\u0056\u0061\u006c"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0079\u0056\u0061\u006c"}:
				_acfa.YVal = NewCT_NumDataSource()
				if _eceeg := d.DecodeElement(_acfa.YVal, &_dcde); _eceeg != nil {
					return _eceeg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u006d\u006f\u006f\u0074\u0068"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u006d\u006f\u006f\u0074\u0068"}:
				_acfa.Smooth = NewCT_Boolean()
				if _bbaffg := d.DecodeElement(_acfa.Smooth, &_dcde); _bbaffg != nil {
					return _bbaffg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_acfa.ExtLst = NewCT_ExtensionList()
				if _eefbg := d.DecodeElement(_acfa.ExtLst, &_dcde); _eefbg != nil {
					return _eefbg
				}
			default:
				_a.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0053c\u0061\u0074\u0074\u0065\u0072\u0053\u0065\u0072 \u0025\u0076", _dcde.Name)
				if _cfca := d.Skip(); _cfca != nil {
					return _cfca
				}
			}
		case _e.EndElement:
			break _fdfcb
		case _e.CharData:
		}
	}
	return nil
}
func (_gggf *CT_RotX) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _gggf.ValAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0076\u0061\u006c"}, Value: _b.Sprintf("\u0025\u0076", *_gggf.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

type EG_PieChartShared struct {
	VaryColors *CT_Boolean
	Ser        []*CT_PieSer
	DLbls      *CT_DLbls
}

func NewEG_AxShared() *EG_AxShared {
	_ecfeda := &EG_AxShared{}
	_ecfeda.AxId = NewCT_UnsignedInt()
	_ecfeda.Scaling = NewCT_Scaling()
	_ecfeda.AxPos = NewCT_AxPos()
	_ecfeda.CrossAx = NewCT_UnsignedInt()
	return _ecfeda
}
func (_fgae *CT_ErrDir) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	_dagd, _bcgff := _fgae.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
	if _bcgff != nil {
		return _bcgff
	}
	start.Attr = append(start.Attr, _dagd)
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}
func (_ggda *CT_BarChart) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_ggda.BarDir = NewCT_BarDir()
_gebg:
	for {
		_ecf, _aeca := d.Token()
		if _aeca != nil {
			return _aeca
		}
		switch _aggd := _ecf.(type) {
		case _e.StartElement:
			switch _aggd.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0072\u0044\u0069\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0072\u0044\u0069\u0072"}:
				if _fecf := d.DecodeElement(_ggda.BarDir, &_aggd); _fecf != nil {
					return _fecf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}:
				_ggda.Grouping = NewCT_BarGrouping()
				if _abb := d.DecodeElement(_ggda.Grouping, &_aggd); _abb != nil {
					return _abb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_ggda.VaryColors = NewCT_Boolean()
				if _gefc := d.DecodeElement(_ggda.VaryColors, &_aggd); _gefc != nil {
					return _gefc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_gbdaa := NewCT_BarSer()
				if _cgbc := d.DecodeElement(_gbdaa, &_aggd); _cgbc != nil {
					return _cgbc
				}
				_ggda.Ser = append(_ggda.Ser, _gbdaa)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_ggda.DLbls = NewCT_DLbls()
				if _aaa := d.DecodeElement(_ggda.DLbls, &_aggd); _aaa != nil {
					return _aaa
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0061\u0070\u0057\u0069\u0064\u0074\u0068"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0061\u0070\u0057\u0069\u0064\u0074\u0068"}:
				_ggda.GapWidth = NewCT_GapAmount()
				if _eed := d.DecodeElement(_ggda.GapWidth, &_aggd); _eed != nil {
					return _eed
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006fv\u0065\u0072\u006c\u0061\u0070"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006fv\u0065\u0072\u006c\u0061\u0070"}:
				_ggda.Overlap = NewCT_Overlap()
				if _acf := d.DecodeElement(_ggda.Overlap, &_aggd); _acf != nil {
					return _acf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}:
				_bee := NewCT_ChartLines()
				if _afc := d.DecodeElement(_bee, &_aggd); _afc != nil {
					return _afc
				}
				_ggda.SerLines = append(_ggda.SerLines, _bee)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				_cbc := NewCT_UnsignedInt()
				if _ggdd := d.DecodeElement(_cbc, &_aggd); _ggdd != nil {
					return _ggdd
				}
				_ggda.AxId = append(_ggda.AxId, _cbc)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_ggda.ExtLst = NewCT_ExtensionList()
				if _cde := d.DecodeElement(_ggda.ExtLst, &_aggd); _cde != nil {
					return _cde
				}
			default:
				_a.Log.Debug("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0042\u0061\u0072\u0043\u0068\u0061\u0072\u0074\u0020\u0025\u0076", _aggd.Name)
				if _gede := d.Skip(); _gede != nil {
					return _gede
				}
			}
		case _e.EndElement:
			break _gebg
		case _e.CharData:
		}
	}
	return nil
}
func (_dagb ST_HoleSize) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _dagb.ST_HoleSizePercent != nil {
		e.EncodeToken(_e.CharData(*_dagb.ST_HoleSizePercent))
	}
	if _dagb.ST_HoleSizeUByte != nil {
		e.EncodeToken(_e.CharData(_b.Sprintf("\u0025\u0064", *_dagb.ST_HoleSizeUByte)))
	}
	return e.EncodeToken(_e.EndElement{Name: start.Name})
}
func (_eegaa *CT_DLblChoice) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _eegaa.Delete != nil {
		_cfd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0064\u0065\u006c\u0065\u0074\u0065"}}
		e.EncodeElement(_eegaa.Delete, _cfd)
	}
	if _eegaa.Layout != nil {
		_baba := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006c\u0061\u0079\u006f\u0075\u0074"}}
		e.EncodeElement(_eegaa.Layout, _baba)
	}
	if _eegaa.Tx != nil {
		_ggbg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078"}}
		e.EncodeElement(_eegaa.Tx, _ggbg)
	}
	if _eegaa.NumFmt != nil {
		_fbgbb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u0046\u006d\u0074"}}
		e.EncodeElement(_eegaa.NumFmt, _fbgbb)
	}
	if _eegaa.SpPr != nil {
		_gbce := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_eegaa.SpPr, _gbce)
	}
	if _eegaa.TxPr != nil {
		_ageg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_eegaa.TxPr, _ageg)
	}
	if _eegaa.DLblPos != nil {
		_beaa := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0050\u006fs"}}
		e.EncodeElement(_eegaa.DLblPos, _beaa)
	}
	if _eegaa.ShowLegendKey != nil {
		_aade := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0073h\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}}
		e.EncodeElement(_eegaa.ShowLegendKey, _aade)
	}
	if _eegaa.ShowVal != nil {
		_dee := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0073\u0068\u006f\u0077\u0056\u0061l"}}
		e.EncodeElement(_eegaa.ShowVal, _dee)
	}
	if _eegaa.ShowCatName != nil {
		_ggeb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}}
		e.EncodeElement(_eegaa.ShowCatName, _ggeb)
	}
	if _eegaa.ShowSerName != nil {
		_bcaf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}}
		e.EncodeElement(_eegaa.ShowSerName, _bcaf)
	}
	if _eegaa.ShowPercent != nil {
		_egfe := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}}
		e.EncodeElement(_eegaa.ShowPercent, _egfe)
	}
	if _eegaa.ShowBubbleSize != nil {
		_bffc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003as\u0068\u006f\u0077B\u0075\u0062\u0062\u006c\u0065\u0053\u0069\u007a\u0065"}}
		e.EncodeElement(_eegaa.ShowBubbleSize, _bffc)
	}
	if _eegaa.Separator != nil {
		_dcdbb := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0073\u0065\u0070\u0061\u0072\u0061\u0074\u006f\u0072"}}
		_gb.AddPreserveSpaceAttr(&_dcdbb, *_eegaa.Separator)
		e.EncodeElement(_eegaa.Separator, _dcdbb)
	}
	return nil
}

type CT_Double struct{ ValAttr float64 }

// ValidateWithPath validates the CT_UpDownBar and its children, prefixing error messages with path
func (_gbgefc *CT_UpDownBar) ValidateWithPath(path string) error {
	if _gbgefc.SpPr != nil {
		if _gecgge := _gbgefc.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _gecgge != nil {
			return _gecgge
		}
	}
	return nil
}

// ValidateWithPath validates the CT_Layout and its children, prefixing error messages with path
func (_ceec *CT_Layout) ValidateWithPath(path string) error {
	if _ceec.ManualLayout != nil {
		if _dedcc := _ceec.ManualLayout.ValidateWithPath(path + "\u002f\u004d\u0061\u006e\u0075\u0061\u006c\u004c\u0061\u0079\u006f\u0075\u0074"); _dedcc != nil {
			return _dedcc
		}
	}
	if _ceec.ExtLst != nil {
		if _cdae := _ceec.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _cdae != nil {
			return _cdae
		}
	}
	return nil
}
func (_dfgcb *CT_NumDataSourceChoice) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _dfgcb.NumRef != nil {
		_gacbc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u0052\u0065\u0066"}}
		e.EncodeElement(_dfgcb.NumRef, _gacbc)
	}
	if _dfgcb.NumLit != nil {
		_eaee := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u004c\u0069\u0074"}}
		e.EncodeElement(_dfgcb.NumLit, _eaee)
	}
	return nil
}
func (_aeaef *CT_Crosses) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	_adeb, _geag := _aeaef.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
	if _geag != nil {
		return _geag
	}
	start.Attr = append(start.Attr, _adeb)
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

type CT_PivotFmt struct {
	Idx    *CT_UnsignedInt
	SpPr   *_f.CT_ShapeProperties
	TxPr   *_f.CT_TextBody
	Marker *CT_Marker
	DLbl   *CT_DLbl
	ExtLst *CT_ExtensionList
}

func (_ggbd *CT_LineSer) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_ggbd.Idx = NewCT_UnsignedInt()
	_ggbd.Order = NewCT_UnsignedInt()
_bbde:
	for {
		_bgdd, _afgfc := d.Token()
		if _afgfc != nil {
			return _afgfc
		}
		switch _aefg := _bgdd.(type) {
		case _e.StartElement:
			switch _aefg.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}:
				if _ddgb := d.DecodeElement(_ggbd.Idx, &_aefg); _ddgb != nil {
					return _ddgb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}:
				if _fcace := d.DecodeElement(_ggbd.Order, &_aefg); _fcace != nil {
					return _fcace
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				_ggbd.Tx = NewCT_SerTx()
				if _bcfad := d.DecodeElement(_ggbd.Tx, &_aefg); _bcfad != nil {
					return _bcfad
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_ggbd.SpPr = _f.NewCT_ShapeProperties()
				if _effc := d.DecodeElement(_ggbd.SpPr, &_aefg); _effc != nil {
					return _effc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u0072\u006b\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u0072\u006b\u0065\u0072"}:
				_ggbd.Marker = NewCT_Marker()
				if _cebgf := d.DecodeElement(_ggbd.Marker, &_aefg); _cebgf != nil {
					return _cebgf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0050\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0050\u0074"}:
				_agegd := NewCT_DPt()
				if _bgab := d.DecodeElement(_agegd, &_aefg); _bgab != nil {
					return _bgab
				}
				_ggbd.DPt = append(_ggbd.DPt, _agegd)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_ggbd.DLbls = NewCT_DLbls()
				if _acda := d.DecodeElement(_ggbd.DLbls, &_aefg); _acda != nil {
					return _acda
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074r\u0065\u006e\u0064\u006c\u0069\u006ee"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074r\u0065\u006e\u0064\u006c\u0069\u006ee"}:
				_ggcfd := NewCT_Trendline()
				if _ccegc := d.DecodeElement(_ggcfd, &_aefg); _ccegc != nil {
					return _ccegc
				}
				_ggbd.Trendline = append(_ggbd.Trendline, _ggcfd)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065r\u0072\u0042\u0061\u0072\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065r\u0072\u0042\u0061\u0072\u0073"}:
				_ggbd.ErrBars = NewCT_ErrBars()
				if _dagcb := d.DecodeElement(_ggbd.ErrBars, &_aefg); _dagcb != nil {
					return _dagcb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074"}:
				_ggbd.Cat = NewCT_AxDataSource()
				if _ddace := d.DecodeElement(_ggbd.Cat, &_aefg); _ddace != nil {
					return _ddace
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006c"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006c"}:
				_ggbd.Val = NewCT_NumDataSource()
				if _bcebf := d.DecodeElement(_ggbd.Val, &_aefg); _bcebf != nil {
					return _bcebf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u006d\u006f\u006f\u0074\u0068"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u006d\u006f\u006f\u0074\u0068"}:
				_ggbd.Smooth = NewCT_Boolean()
				if _gfadd := d.DecodeElement(_ggbd.Smooth, &_aefg); _gfadd != nil {
					return _gfadd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_ggbd.ExtLst = NewCT_ExtensionList()
				if _ggae := d.DecodeElement(_ggbd.ExtLst, &_aefg); _ggae != nil {
					return _ggae
				}
			default:
				_a.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006ce\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005fL\u0069\u006e\u0065\u0053\u0065\u0072\u0020\u0025\u0076", _aefg.Name)
				if _cebe := d.Skip(); _cebe != nil {
					return _cebe
				}
			}
		case _e.EndElement:
			break _bbde
		case _e.CharData:
		}
	}
	return nil
}
func (_gcegg *CT_Surface3DChart) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_febab:
	for {
		_bbdcb, _ddbd := d.Token()
		if _ddbd != nil {
			return _ddbd
		}
		switch _bbafb := _bbdcb.(type) {
		case _e.StartElement:
			switch _bbafb.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0077i\u0072\u0065\u0066\u0072\u0061\u006de"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0077i\u0072\u0065\u0066\u0072\u0061\u006de"}:
				_gcegg.Wireframe = NewCT_Boolean()
				if _ffbe := d.DecodeElement(_gcegg.Wireframe, &_bbafb); _ffbe != nil {
					return _ffbe
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_aeaf := NewCT_SurfaceSer()
				if _ddgd := d.DecodeElement(_aeaf, &_bbafb); _ddgd != nil {
					return _ddgd
				}
				_gcegg.Ser = append(_gcegg.Ser, _aeaf)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u006e\u0064\u0046\u006d\u0074\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u006e\u0064\u0046\u006d\u0074\u0073"}:
				_gcegg.BandFmts = NewCT_BandFmts()
				if _efaa := d.DecodeElement(_gcegg.BandFmts, &_bbafb); _efaa != nil {
					return _efaa
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				_bgbge := NewCT_UnsignedInt()
				if _fcfb := d.DecodeElement(_bgbge, &_bbafb); _fcfb != nil {
					return _fcfb
				}
				_gcegg.AxId = append(_gcegg.AxId, _bgbge)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_gcegg.ExtLst = NewCT_ExtensionList()
				if _acbd := d.DecodeElement(_gcegg.ExtLst, &_bbafb); _acbd != nil {
					return _acbd
				}
			default:
				_a.Log.Debug("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0053\u0075\u0072\u0066\u0061\u0063\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074\u0020\u0025\u0076", _bbafb.Name)
				if _fedc := d.Skip(); _fedc != nil {
					return _fedc
				}
			}
		case _e.EndElement:
			break _febab
		case _e.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the EG_LineChartShared and its children, prefixing error messages with path
func (_acbfc *EG_LineChartShared) ValidateWithPath(path string) error {
	if _eged := _acbfc.Grouping.ValidateWithPath(path + "\u002fG\u0072\u006f\u0075\u0070\u0069\u006eg"); _eged != nil {
		return _eged
	}
	if _acbfc.VaryColors != nil {
		if _beegd := _acbfc.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _beegd != nil {
			return _beegd
		}
	}
	for _gacc, _cdbda := range _acbfc.Ser {
		if _bbea := _cdbda.ValidateWithPath(_b.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _gacc)); _bbea != nil {
			return _bbea
		}
	}
	if _acbfc.DLbls != nil {
		if _fcbe := _acbfc.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _fcbe != nil {
			return _fcbe
		}
	}
	if _acbfc.DropLines != nil {
		if _gdbge := _acbfc.DropLines.ValidateWithPath(path + "\u002f\u0044\u0072\u006f\u0070\u004c\u0069\u006e\u0065\u0073"); _gdbge != nil {
			return _gdbge
		}
	}
	return nil
}
func (_efbga ST_DispBlanksAs) ValidateWithPath(path string) error {
	switch _efbga {
	case 0, 1, 2, 3:
	default:
		return _b.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_efbga))
	}
	return nil
}
func (_aceag ST_DispBlanksAs) Validate() error { return _aceag.ValidateWithPath("") }
func (_eaaff *CT_Scaling) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_afbe:
	for {
		_deeegd, _fcbba := d.Token()
		if _fcbba != nil {
			return _fcbba
		}
		switch _gaeffg := _deeegd.(type) {
		case _e.StartElement:
			switch _gaeffg.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006co\u0067\u0042\u0061\u0073\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006co\u0067\u0042\u0061\u0073\u0065"}:
				_eaaff.LogBase = NewCT_LogBase()
				if _afgac := d.DecodeElement(_eaaff.LogBase, &_gaeffg); _afgac != nil {
					return _afgac
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "o\u0072\u0069\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "o\u0072\u0069\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e"}:
				_eaaff.Orientation = NewCT_Orientation()
				if _cdcg := d.DecodeElement(_eaaff.Orientation, &_gaeffg); _cdcg != nil {
					return _cdcg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u0078"}:
				_eaaff.Max = NewCT_Double()
				if _edccg := d.DecodeElement(_eaaff.Max, &_gaeffg); _edccg != nil {
					return _edccg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e"}:
				_eaaff.Min = NewCT_Double()
				if _cdfbd := d.DecodeElement(_eaaff.Min, &_gaeffg); _cdfbd != nil {
					return _cdfbd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_eaaff.ExtLst = NewCT_ExtensionList()
				if _cgcd := d.DecodeElement(_eaaff.ExtLst, &_gaeffg); _cgcd != nil {
					return _cgcd
				}
			default:
				_a.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006ce\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005fS\u0063\u0061\u006c\u0069\u006e\u0067\u0020\u0025\u0076", _gaeffg.Name)
				if _gadfg := d.Skip(); _gadfg != nil {
					return _gadfg
				}
			}
		case _e.EndElement:
			break _afbe
		case _e.CharData:
		}
	}
	return nil
}

// Validate validates the CT_PictureFormat and its children
func (_dceda *CT_PictureFormat) Validate() error {
	return _dceda.ValidateWithPath("\u0043\u0054_\u0050\u0069\u0063t\u0075\u0072\u0065\u0046\u006f\u0072\u006d\u0061\u0074")
}
func NewCT_NumVal() *CT_NumVal { _fbdce := &CT_NumVal{}; return _fbdce }
func NewCT_CatAx() *CT_CatAx {
	_begg := &CT_CatAx{}
	_begg.AxId = NewCT_UnsignedInt()
	_begg.Scaling = NewCT_Scaling()
	_begg.AxPos = NewCT_AxPos()
	_begg.CrossAx = NewCT_UnsignedInt()
	return _begg
}
func (_decca *EG_BarChartShared) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	_fgdff := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0062\u0061\u0072\u0044\u0069\u0072"}}
	e.EncodeElement(_decca.BarDir, _fgdff)
	if _decca.Grouping != nil {
		_ebecf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}}
		e.EncodeElement(_decca.Grouping, _ebecf)
	}
	if _decca.VaryColors != nil {
		_efdc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_decca.VaryColors, _efdc)
	}
	if _decca.Ser != nil {
		_gbccd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _gfgda := range _decca.Ser {
			e.EncodeElement(_gfgda, _gbccd)
		}
	}
	if _decca.DLbls != nil {
		_fgcfe := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_decca.DLbls, _fgcfe)
	}
	return nil
}
func (_abbdg *CT_Title) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_dfedfa:
	for {
		_ccgd, _cbcgd := d.Token()
		if _cbcgd != nil {
			return _cbcgd
		}
		switch _edga := _ccgd.(type) {
		case _e.StartElement:
			switch _edga.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				_abbdg.Tx = NewCT_Tx()
				if _eefcd := d.DecodeElement(_abbdg.Tx, &_edga); _eefcd != nil {
					return _eefcd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}:
				_abbdg.Layout = NewCT_Layout()
				if _ecaeb := d.DecodeElement(_abbdg.Layout, &_edga); _ecaeb != nil {
					return _ecaeb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006fv\u0065\u0072\u006c\u0061\u0079"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006fv\u0065\u0072\u006c\u0061\u0079"}:
				_abbdg.Overlay = NewCT_Boolean()
				if _gaaef := d.DecodeElement(_abbdg.Overlay, &_edga); _gaaef != nil {
					return _gaaef
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_abbdg.SpPr = _f.NewCT_ShapeProperties()
				if _efcaa := d.DecodeElement(_abbdg.SpPr, &_edga); _efcaa != nil {
					return _efcaa
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_abbdg.TxPr = _f.NewCT_TextBody()
				if _fbfab := d.DecodeElement(_abbdg.TxPr, &_edga); _fbfab != nil {
					return _fbfab
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_abbdg.ExtLst = NewCT_ExtensionList()
				if _ebdca := d.DecodeElement(_abbdg.ExtLst, &_edga); _ebdca != nil {
					return _ebdca
				}
			default:
				_a.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006eg\u0020\u0075\u006es\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0054\u0069\u0074\u006c\u0065\u0020\u0025\u0076", _edga.Name)
				if _cadd := d.Skip(); _cadd != nil {
					return _cadd
				}
			}
		case _e.EndElement:
			break _dfedfa
		case _e.CharData:
		}
	}
	return nil
}

// Validate validates the CT_SerTx and its children
func (_cefge *CT_SerTx) Validate() error {
	return _cefge.ValidateWithPath("\u0043\u0054\u005f\u0053\u0065\u0072\u0054\u0078")
}
func (_gc *CT_Area3DChart) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _gc.Grouping != nil {
		_cd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}}
		e.EncodeElement(_gc.Grouping, _cd)
	}
	if _gc.VaryColors != nil {
		_fe := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_gc.VaryColors, _fe)
	}
	if _gc.Ser != nil {
		_fb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _gbc := range _gc.Ser {
			e.EncodeElement(_gbc, _fb)
		}
	}
	if _gc.DLbls != nil {
		_ed := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_gc.DLbls, _ed)
	}
	if _gc.DropLines != nil {
		_dg := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0064\u0072\u006f\u0070\u004c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_gc.DropLines, _dg)
	}
	if _gc.GapDepth != nil {
		_bc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0067\u0061\u0070\u0044\u0065\u0070\u0074\u0068"}}
		e.EncodeElement(_gc.GapDepth, _bc)
	}
	_cdf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	for _, _df := range _gc.AxId {
		e.EncodeElement(_df, _cdf)
	}
	if _gc.ExtLst != nil {
		_aa := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_gc.ExtLst, _aa)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}
func (_gdfb *CT_HeaderFooter) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _gdfb.AlignWithMarginsAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0061\u006ci\u0067\u006e\u0057i\u0074\u0068\u004d\u0061\u0072\u0067\u0069\u006e\u0073"}, Value: _b.Sprintf("\u0025\u0064", _cfcbe(*_gdfb.AlignWithMarginsAttr))})
	}
	if _gdfb.DifferentOddEvenAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0064\u0069f\u0066\u0065\u0072e\u006e\u0074\u004f\u0064\u0064\u0045\u0076\u0065\u006e"}, Value: _b.Sprintf("\u0025\u0064", _cfcbe(*_gdfb.DifferentOddEvenAttr))})
	}
	if _gdfb.DifferentFirstAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0064\u0069\u0066\u0066\u0065\u0072\u0065\u006e\u0074F\u0069\u0072\u0073\u0074"}, Value: _b.Sprintf("\u0025\u0064", _cfcbe(*_gdfb.DifferentFirstAttr))})
	}
	e.EncodeToken(start)
	if _gdfb.OddHeader != nil {
		_dafgd := _e.StartElement{Name: _e.Name{Local: "c\u003a\u006f\u0064\u0064\u0048\u0065\u0061\u0064\u0065\u0072"}}
		_gb.AddPreserveSpaceAttr(&_dafgd, *_gdfb.OddHeader)
		e.EncodeElement(_gdfb.OddHeader, _dafgd)
	}
	if _gdfb.OddFooter != nil {
		_dgf := _e.StartElement{Name: _e.Name{Local: "c\u003a\u006f\u0064\u0064\u0046\u006f\u006f\u0074\u0065\u0072"}}
		_gb.AddPreserveSpaceAttr(&_dgf, *_gdfb.OddFooter)
		e.EncodeElement(_gdfb.OddFooter, _dgf)
	}
	if _gdfb.EvenHeader != nil {
		_baebg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065v\u0065\u006e\u0048\u0065\u0061\u0064\u0065\u0072"}}
		_gb.AddPreserveSpaceAttr(&_baebg, *_gdfb.EvenHeader)
		e.EncodeElement(_gdfb.EvenHeader, _baebg)
	}
	if _gdfb.EvenFooter != nil {
		_ggbe := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065v\u0065\u006e\u0046\u006f\u006f\u0074\u0065\u0072"}}
		_gb.AddPreserveSpaceAttr(&_ggbe, *_gdfb.EvenFooter)
		e.EncodeElement(_gdfb.EvenFooter, _ggbe)
	}
	if _gdfb.FirstHeader != nil {
		_dggc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0066\u0069\u0072\u0073\u0074\u0048\u0065\u0061\u0064\u0065\u0072"}}
		_gb.AddPreserveSpaceAttr(&_dggc, *_gdfb.FirstHeader)
		e.EncodeElement(_gdfb.FirstHeader, _dggc)
	}
	if _gdfb.FirstFooter != nil {
		_bdeg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0066\u0069\u0072\u0073\u0074\u0046\u006f\u006f\u0074\u0065\u0072"}}
		_gb.AddPreserveSpaceAttr(&_bdeg, *_gdfb.FirstFooter)
		e.EncodeElement(_gdfb.FirstFooter, _bdeg)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// Validate validates the EG_DLblShared and its children
func (_bafdg *EG_DLblShared) Validate() error {
	return _bafdg.ValidateWithPath("\u0045\u0047\u005f\u0044\u004c\u0062\u006c\u0053\u0068\u0061\u0072\u0065\u0064")
}

type CT_PageSetup struct {
	PaperSizeAttr          *uint32
	PaperHeightAttr        *string
	PaperWidthAttr         *string
	FirstPageNumberAttr    *uint32
	OrientationAttr        ST_PageSetupOrientation
	BlackAndWhiteAttr      *bool
	DraftAttr              *bool
	UseFirstPageNumberAttr *bool
	HorizontalDpiAttr      *int32
	VerticalDpiAttr        *int32
	CopiesAttr             *uint32
}
type CT_NumDataSourceChoice struct {
	NumRef *CT_NumRef
	NumLit *CT_NumData
}

// Validate validates the ChartSpace and its children
func (_dcfcg *ChartSpace) Validate() error {
	return _dcfcg.ValidateWithPath("\u0043\u0068\u0061\u0072\u0074\u0053\u0070\u0061\u0063\u0065")
}

type CT_ErrValType struct{ ValAttr ST_ErrValType }
type CT_Period struct{ ValAttr *uint32 }

func (_ceebb *CT_PivotSource) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_ceebb.FmtId = NewCT_UnsignedInt()
_ggdaf:
	for {
		_cfaf, _aefc := d.Token()
		if _aefc != nil {
			return _aefc
		}
		switch _fcecd := _cfaf.(type) {
		case _e.StartElement:
			switch _fcecd.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0061\u006d\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0061\u006d\u0065"}:
				if _fcdc := d.DecodeElement(&_ceebb.Name, &_fcecd); _fcdc != nil {
					return _fcdc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066\u006d\u0074I\u0064"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066\u006d\u0074I\u0064"}:
				if _fdcbf := d.DecodeElement(_ceebb.FmtId, &_fcecd); _fdcbf != nil {
					return _fdcbf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_fcgc := NewCT_ExtensionList()
				if _aaaac := d.DecodeElement(_fcgc, &_fcecd); _aaaac != nil {
					return _aaaac
				}
				_ceebb.ExtLst = append(_ceebb.ExtLst, _fcgc)
			default:
				_a.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069n\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006et\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0050\u0069\u0076\u006f\u0074\u0053\u006fu\u0072c\u0065\u0020\u0025\u0076", _fcecd.Name)
				if _edce := d.Skip(); _edce != nil {
					return _edce
				}
			}
		case _e.EndElement:
			break _ggdaf
		case _e.CharData:
		}
	}
	return nil
}
func NewCT_SurfaceSer() *CT_SurfaceSer {
	_eabdb := &CT_SurfaceSer{}
	_eabdb.Idx = NewCT_UnsignedInt()
	_eabdb.Order = NewCT_UnsignedInt()
	return _eabdb
}

// ValidateWithPath validates the CT_ErrDir and its children, prefixing error messages with path
func (_afed *CT_ErrDir) ValidateWithPath(path string) error {
	if _afed.ValAttr == ST_ErrDirUnset {
		return _b.Errorf("\u0025\u0073\u002fV\u0061\u006c\u0041\u0074t\u0072\u0020\u0069\u0073\u0020\u0061\u0020m\u0061\u006e\u0064\u0061\u0074\u006f\u0072\u0079\u0020\u0066\u0069\u0065\u006c\u0064", path)
	}
	if _gdfa := _afed.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _gdfa != nil {
		return _gdfa
	}
	return nil
}
func (_geaef ST_ScatterStyle) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_feebe := _e.Attr{}
	_feebe.Name = name
	switch _geaef {
	case ST_ScatterStyleUnset:
		_feebe.Value = ""
	case ST_ScatterStyleNone:
		_feebe.Value = "\u006e\u006f\u006e\u0065"
	case ST_ScatterStyleLine:
		_feebe.Value = "\u006c\u0069\u006e\u0065"
	case ST_ScatterStyleLineMarker:
		_feebe.Value = "\u006c\u0069\u006e\u0065\u004d\u0061\u0072\u006b\u0065\u0072"
	case ST_ScatterStyleMarker:
		_feebe.Value = "\u006d\u0061\u0072\u006b\u0065\u0072"
	case ST_ScatterStyleSmooth:
		_feebe.Value = "\u0073\u006d\u006f\u006f\u0074\u0068"
	case ST_ScatterStyleSmoothMarker:
		_feebe.Value = "\u0073\u006d\u006fo\u0074\u0068\u004d\u0061\u0072\u006b\u0065\u0072"
	}
	return _feebe, nil
}
func (_bgeb *CT_DispBlanksAs) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _gfda := range start.Attr {
		if _gfda.Name.Local == "\u0076\u0061\u006c" {
			_bgeb.ValAttr.UnmarshalXMLAttr(_gfda)
			continue
		}
	}
	for {
		_fgggd, _aaaa := d.Token()
		if _aaaa != nil {
			return _b.Errorf("p\u0061\u0072\u0073\u0069\u006e\u0067 \u0043\u0054\u005f\u0044\u0069\u0073\u0070\u0042\u006ca\u006e\u006b\u0073A\u0073:\u0020\u0025\u0073", _aaaa)
		}
		if _gbcef, _ggbf := _fgggd.(_e.EndElement); _ggbf && _gbcef.Name == start.Name {
			break
		}
	}
	return nil
}
func NewCT_Lvl() *CT_Lvl { _eddb := &CT_Lvl{}; return _eddb }
func (_ccbc ST_AxPos) ValidateWithPath(path string) error {
	switch _ccbc {
	case 0, 1, 2, 3, 4:
	default:
		return _b.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_ccbc))
	}
	return nil
}
func NewCT_CrossBetween() *CT_CrossBetween {
	_dcee := &CT_CrossBetween{}
	_dcee.ValAttr = ST_CrossBetween(1)
	return _dcee
}
func (_gdfae *ST_TrendlineType) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_gdfae = 0
	case "\u0065\u0078\u0070":
		*_gdfae = 1
	case "\u006c\u0069\u006e\u0065\u0061\u0072":
		*_gdfae = 2
	case "\u006c\u006f\u0067":
		*_gdfae = 3
	case "\u006do\u0076\u0069\u006e\u0067\u0041\u0076g":
		*_gdfae = 4
	case "\u0070\u006f\u006c\u0079":
		*_gdfae = 5
	case "\u0070\u006f\u0077e\u0072":
		*_gdfae = 6
	}
	return nil
}
func NewCT_PivotFmts() *CT_PivotFmts { _egega := &CT_PivotFmts{}; return _egega }

// ValidateWithPath validates the CT_OfPieType and its children, prefixing error messages with path
func (_dfcbb *CT_OfPieType) ValidateWithPath(path string) error {
	if _fbggg := _dfcbb.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _fbggg != nil {
		return _fbggg
	}
	return nil
}
func (_bfcdg ST_DepthPercent) String() string {
	if _bfcdg.ST_DepthPercentWithSymbol != nil {
		return _b.Sprintf("\u0025\u0076", *_bfcdg.ST_DepthPercentWithSymbol)
	}
	if _bfcdg.ST_DepthPercentUShort != nil {
		return _b.Sprintf("\u0025\u0076", *_bfcdg.ST_DepthPercentUShort)
	}
	return ""
}
func (_efefd *CT_LblAlgn) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_efefd.ValAttr = ST_LblAlgn(1)
	for _, _cfbg := range start.Attr {
		if _cfbg.Name.Local == "\u0076\u0061\u006c" {
			_efefd.ValAttr.UnmarshalXMLAttr(_cfbg)
			continue
		}
	}
	for {
		_ddbg, _baga := d.Token()
		if _baga != nil {
			return _b.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0043\u0054\u005f\u004c\u0062\u006c\u0041\u006c\u0067\u006e\u003a\u0020%\u0073", _baga)
		}
		if _febaef, _ecba := _ddbg.(_e.EndElement); _ecba && _febaef.Name == start.Name {
			break
		}
	}
	return nil
}

type CT_Marker struct {
	Symbol *CT_MarkerStyle
	Size   *CT_MarkerSize
	SpPr   *_f.CT_ShapeProperties
	ExtLst *CT_ExtensionList
}

func (_fdfdc ST_LayoutTarget) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_fdfdc.String(), start)
}
func NewCT_Marker() *CT_Marker { _bgefd := &CT_Marker{}; return _bgefd }
func (_abbe *CT_RadarSer) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_abbe.Idx = NewCT_UnsignedInt()
	_abbe.Order = NewCT_UnsignedInt()
_dbad:
	for {
		_fdbef, _caab := d.Token()
		if _caab != nil {
			return _caab
		}
		switch _ccegaa := _fdbef.(type) {
		case _e.StartElement:
			switch _ccegaa.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}:
				if _cagbe := d.DecodeElement(_abbe.Idx, &_ccegaa); _cagbe != nil {
					return _cagbe
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}:
				if _aacgd := d.DecodeElement(_abbe.Order, &_ccegaa); _aacgd != nil {
					return _aacgd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				_abbe.Tx = NewCT_SerTx()
				if _efdbf := d.DecodeElement(_abbe.Tx, &_ccegaa); _efdbf != nil {
					return _efdbf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_abbe.SpPr = _f.NewCT_ShapeProperties()
				if _beec := d.DecodeElement(_abbe.SpPr, &_ccegaa); _beec != nil {
					return _beec
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u0072\u006b\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u0072\u006b\u0065\u0072"}:
				_abbe.Marker = NewCT_Marker()
				if _adabf := d.DecodeElement(_abbe.Marker, &_ccegaa); _adabf != nil {
					return _adabf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0050\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0050\u0074"}:
				_ebdaa := NewCT_DPt()
				if _bfdac := d.DecodeElement(_ebdaa, &_ccegaa); _bfdac != nil {
					return _bfdac
				}
				_abbe.DPt = append(_abbe.DPt, _ebdaa)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_abbe.DLbls = NewCT_DLbls()
				if _bdead := d.DecodeElement(_abbe.DLbls, &_ccegaa); _bdead != nil {
					return _bdead
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074"}:
				_abbe.Cat = NewCT_AxDataSource()
				if _ccac := d.DecodeElement(_abbe.Cat, &_ccegaa); _ccac != nil {
					return _ccac
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006c"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006c"}:
				_abbe.Val = NewCT_NumDataSource()
				if _aefce := d.DecodeElement(_abbe.Val, &_ccegaa); _aefce != nil {
					return _aefce
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_abbe.ExtLst = NewCT_ExtensionList()
				if _efdge := d.DecodeElement(_abbe.ExtLst, &_ccegaa); _efdge != nil {
					return _efdge
				}
			default:
				_a.Log.Debug("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0052\u0061\u0064\u0061\u0072\u0053\u0065\u0072\u0020\u0025\u0076", _ccegaa.Name)
				if _daaa := d.Skip(); _daaa != nil {
					return _daaa
				}
			}
		case _e.EndElement:
			break _dbad
		case _e.CharData:
		}
	}
	return nil
}
func (_dgeeg ST_LayoutTarget) String() string {
	switch _dgeeg {
	case 0:
		return ""
	case 1:
		return "\u0069\u006e\u006ee\u0072"
	case 2:
		return "\u006f\u0075\u0074e\u0072"
	}
	return ""
}
func (_adcbc *CT_DispUnitsLbl) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_dbef:
	for {
		_bged, _ggcd := d.Token()
		if _ggcd != nil {
			return _ggcd
		}
		switch _abef := _bged.(type) {
		case _e.StartElement:
			switch _abef.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}:
				_adcbc.Layout = NewCT_Layout()
				if _eedd := d.DecodeElement(_adcbc.Layout, &_abef); _eedd != nil {
					return _eedd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				_adcbc.Tx = NewCT_Tx()
				if _adgc := d.DecodeElement(_adcbc.Tx, &_abef); _adgc != nil {
					return _adgc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_adcbc.SpPr = _f.NewCT_ShapeProperties()
				if _facb := d.DecodeElement(_adcbc.SpPr, &_abef); _facb != nil {
					return _facb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_adcbc.TxPr = _f.NewCT_TextBody()
				if _gfge := d.DecodeElement(_adcbc.TxPr, &_abef); _gfge != nil {
					return _gfge
				}
			default:
				_a.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074e\u0064\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0044\u0069\u0073p\u0055\u006e\u0069\u0074\u0073\u004c\u0062\u006c\u0020\u0025\u0076", _abef.Name)
				if _gfbe := d.Skip(); _gfbe != nil {
					return _gfbe
				}
			}
		case _e.EndElement:
			break _dbef
		case _e.CharData:
		}
	}
	return nil
}
func (_geaag *CT_RadarSer) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_ebdfe := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0069d\u0078"}}
	e.EncodeElement(_geaag.Idx, _ebdfe)
	_abcdb := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006f\u0072\u0064\u0065\u0072"}}
	e.EncodeElement(_geaag.Order, _abcdb)
	if _geaag.Tx != nil {
		_agegdb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078"}}
		e.EncodeElement(_geaag.Tx, _agegdb)
	}
	if _geaag.SpPr != nil {
		_fbfce := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_geaag.SpPr, _fbfce)
	}
	if _geaag.Marker != nil {
		_eddbc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006d\u0061\u0072\u006b\u0065\u0072"}}
		e.EncodeElement(_geaag.Marker, _eddbc)
	}
	if _geaag.DPt != nil {
		_badca := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0064P\u0074"}}
		for _, _efce := range _geaag.DPt {
			e.EncodeElement(_efce, _badca)
		}
	}
	if _geaag.DLbls != nil {
		_fgfdd := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_geaag.DLbls, _fgfdd)
	}
	if _geaag.Cat != nil {
		_ggdfd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0063a\u0074"}}
		e.EncodeElement(_geaag.Cat, _ggdfd)
	}
	if _geaag.Val != nil {
		_cdbccd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0076a\u006c"}}
		e.EncodeElement(_geaag.Val, _cdbccd)
	}
	if _geaag.ExtLst != nil {
		_agbfe := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_geaag.ExtLst, _agbfe)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

type CT_DispUnitsLbl struct {
	Layout *CT_Layout
	Tx     *CT_Tx
	SpPr   *_f.CT_ShapeProperties
	TxPr   *_f.CT_TextBody
}

func (_fbdgga ST_DLblPos) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_bgfea := _e.Attr{}
	_bgfea.Name = name
	switch _fbdgga {
	case ST_DLblPosUnset:
		_bgfea.Value = ""
	case ST_DLblPosBestFit:
		_bgfea.Value = "\u0062e\u0073\u0074\u0046\u0069\u0074"
	case ST_DLblPosB:
		_bgfea.Value = "\u0062"
	case ST_DLblPosCtr:
		_bgfea.Value = "\u0063\u0074\u0072"
	case ST_DLblPosInBase:
		_bgfea.Value = "\u0069\u006e\u0042\u0061\u0073\u0065"
	case ST_DLblPosInEnd:
		_bgfea.Value = "\u0069\u006e\u0045n\u0064"
	case ST_DLblPosL:
		_bgfea.Value = "\u006c"
	case ST_DLblPosOutEnd:
		_bgfea.Value = "\u006f\u0075\u0074\u0045\u006e\u0064"
	case ST_DLblPosR:
		_bgfea.Value = "\u0072"
	case ST_DLblPosT:
		_bgfea.Value = "\u0074"
	}
	return _bgfea, nil
}
func (_cegcf ST_TrendlineType) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_ddfef := _e.Attr{}
	_ddfef.Name = name
	switch _cegcf {
	case ST_TrendlineTypeUnset:
		_ddfef.Value = ""
	case ST_TrendlineTypeExp:
		_ddfef.Value = "\u0065\u0078\u0070"
	case ST_TrendlineTypeLinear:
		_ddfef.Value = "\u006c\u0069\u006e\u0065\u0061\u0072"
	case ST_TrendlineTypeLog:
		_ddfef.Value = "\u006c\u006f\u0067"
	case ST_TrendlineTypeMovingAvg:
		_ddfef.Value = "\u006do\u0076\u0069\u006e\u0067\u0041\u0076g"
	case ST_TrendlineTypePoly:
		_ddfef.Value = "\u0070\u006f\u006c\u0079"
	case ST_TrendlineTypePower:
		_ddfef.Value = "\u0070\u006f\u0077e\u0072"
	}
	return _ddfef, nil
}

type CT_DispUnitsChoice struct {
	CustUnit    *CT_Double
	BuiltInUnit *CT_BuiltInUnit
}

func (_aebaa ST_BubbleScale) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _aebaa.ST_BubbleScalePercent != nil {
		e.EncodeToken(_e.CharData(*_aebaa.ST_BubbleScalePercent))
	}
	if _aebaa.ST_BubbleScaleUInt != nil {
		e.EncodeToken(_e.CharData(_b.Sprintf("\u0025\u0064", *_aebaa.ST_BubbleScaleUInt)))
	}
	return e.EncodeToken(_e.EndElement{Name: start.Name})
}

const (
	ST_SizeRepresentsUnset ST_SizeRepresents = 0
	ST_SizeRepresentsArea  ST_SizeRepresents = 1
	ST_SizeRepresentsW     ST_SizeRepresents = 2
)

func (_fggdd *ST_ScatterStyle) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_fggdd = 0
	case "\u006e\u006f\u006e\u0065":
		*_fggdd = 1
	case "\u006c\u0069\u006e\u0065":
		*_fggdd = 2
	case "\u006c\u0069\u006e\u0065\u004d\u0061\u0072\u006b\u0065\u0072":
		*_fggdd = 3
	case "\u006d\u0061\u0072\u006b\u0065\u0072":
		*_fggdd = 4
	case "\u0073\u006d\u006f\u006f\u0074\u0068":
		*_fggdd = 5
	case "\u0073\u006d\u006fo\u0074\u0068\u004d\u0061\u0072\u006b\u0065\u0072":
		*_fggdd = 6
	}
	return nil
}
func (_bddda ST_TickLblPos) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_acfeg := _e.Attr{}
	_acfeg.Name = name
	switch _bddda {
	case ST_TickLblPosUnset:
		_acfeg.Value = ""
	case ST_TickLblPosHigh:
		_acfeg.Value = "\u0068\u0069\u0067\u0068"
	case ST_TickLblPosLow:
		_acfeg.Value = "\u006c\u006f\u0077"
	case ST_TickLblPosNextTo:
		_acfeg.Value = "\u006e\u0065\u0078\u0074\u0054\u006f"
	case ST_TickLblPosNone:
		_acfeg.Value = "\u006e\u006f\u006e\u0065"
	}
	return _acfeg, nil
}
func NewChart() *Chart { _deabe := &Chart{}; _deabe.CT_RelId = *NewCT_RelId(); return _deabe }
func (_afacae ST_DLblPos) String() string {
	switch _afacae {
	case 0:
		return ""
	case 1:
		return "\u0062e\u0073\u0074\u0046\u0069\u0074"
	case 2:
		return "\u0062"
	case 3:
		return "\u0063\u0074\u0072"
	case 4:
		return "\u0069\u006e\u0042\u0061\u0073\u0065"
	case 5:
		return "\u0069\u006e\u0045n\u0064"
	case 6:
		return "\u006c"
	case 7:
		return "\u006f\u0075\u0074\u0045\u006e\u0064"
	case 8:
		return "\u0072"
	case 9:
		return "\u0074"
	}
	return ""
}
func (_fgba *ST_Grouping) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_dagga, _fccfe := d.Token()
	if _fccfe != nil {
		return _fccfe
	}
	if _ggcaa, _gcfcf := _dagga.(_e.EndElement); _gcfcf && _ggcaa.Name == start.Name {
		*_fgba = 1
		return nil
	}
	if _gcfcbb, _eebee := _dagga.(_e.CharData); !_eebee {
		return _b.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _dagga)
	} else {
		switch string(_gcfcbb) {
		case "":
			*_fgba = 0
		case "\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u0053\u0074a\u0063\u006b\u0065\u0064":
			*_fgba = 1
		case "\u0073\u0074\u0061\u006e\u0064\u0061\u0072\u0064":
			*_fgba = 2
		case "\u0073t\u0061\u0063\u006b\u0065\u0064":
			*_fgba = 3
		}
	}
	_dagga, _fccfe = d.Token()
	if _fccfe != nil {
		return _fccfe
	}
	if _ecga, _aaeg := _dagga.(_e.EndElement); _aaeg && _ecga.Name == start.Name {
		return nil
	}
	return _b.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _dagga)
}

type CT_Lvl struct{ Pt []*CT_StrVal }

func (_efbgg ST_CrossBetween) ValidateWithPath(path string) error {
	switch _efbgg {
	case 0, 1, 2:
	default:
		return _b.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_efbgg))
	}
	return nil
}

// ValidateWithPath validates the CT_DispUnitsChoice and its children, prefixing error messages with path
func (_abaga *CT_DispUnitsChoice) ValidateWithPath(path string) error {
	if _abaga.CustUnit != nil {
		if _fcaf := _abaga.CustUnit.ValidateWithPath(path + "\u002fC\u0075\u0073\u0074\u0055\u006e\u0069t"); _fcaf != nil {
			return _fcaf
		}
	}
	if _abaga.BuiltInUnit != nil {
		if _feeg := _abaga.BuiltInUnit.ValidateWithPath(path + "\u002f\u0042\u0075i\u006c\u0074\u0049\u006e\u0055\u006e\u0069\u0074"); _feeg != nil {
			return _feeg
		}
	}
	return nil
}
func (_cbddc *CT_TextLanguageID) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0076\u0061\u006c"}, Value: _b.Sprintf("\u0025\u0076", _cbddc.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

type CT_PictureStackUnit struct{ ValAttr float64 }

func (_fdbff ST_AxPos) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_fdbff.String(), start)
}

// Validate validates the EG_AxShared and its children
func (_acfcb *EG_AxShared) Validate() error {
	return _acfcb.ValidateWithPath("E\u0047\u005f\u0041\u0078\u0053\u0068\u0061\u0072\u0065\u0064")
}

// ValidateWithPath validates the CT_UpDownBars and its children, prefixing error messages with path
func (_ggegaa *CT_UpDownBars) ValidateWithPath(path string) error {
	if _ggegaa.GapWidth != nil {
		if _aeefa := _ggegaa.GapWidth.ValidateWithPath(path + "\u002fG\u0061\u0070\u0057\u0069\u0064\u0074h"); _aeefa != nil {
			return _aeefa
		}
	}
	if _ggegaa.UpBars != nil {
		if _acbccc := _ggegaa.UpBars.ValidateWithPath(path + "\u002fU\u0070\u0042\u0061\u0072\u0073"); _acbccc != nil {
			return _acbccc
		}
	}
	if _ggegaa.DownBars != nil {
		if _egfbd := _ggegaa.DownBars.ValidateWithPath(path + "\u002fD\u006f\u0077\u006e\u0042\u0061\u0072s"); _egfbd != nil {
			return _egfbd
		}
	}
	if _ggegaa.ExtLst != nil {
		if _degfg := _ggegaa.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _degfg != nil {
			return _degfg
		}
	}
	return nil
}

type CT_Pie3DChart struct {
	VaryColors *CT_Boolean
	Ser        []*CT_PieSer
	DLbls      *CT_DLbls
	ExtLst     *CT_ExtensionList
}
type ST_CrossBetween byte

func (_fdcec *CT_Orientation) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _fdcec.ValAttr != ST_OrientationUnset {
		_cgbb, _cgfeg := _fdcec.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
		if _cgfeg != nil {
			return _cgfeg
		}
		start.Attr = append(start.Attr, _cgbb)
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}
func (_gabde ST_PageSetupOrientation) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_gabde.String(), start)
}
func NewCT_RotY() *CT_RotY { _egdbec := &CT_RotY{}; return _egdbec }

// Validate validates the EG_LegendEntryData and its children
func (_ebbf *EG_LegendEntryData) Validate() error {
	return _ebbf.ValidateWithPath("\u0045G\u005fL\u0065\u0067\u0065\u006e\u0064E\u006e\u0074r\u0079\u0044\u0061\u0074\u0061")
}
func (_cbad ST_LayoutMode) ValidateWithPath(path string) error {
	switch _cbad {
	case 0, 1, 2:
	default:
		return _b.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_cbad))
	}
	return nil
}
func (_fffcf ST_LblAlgn) ValidateWithPath(path string) error {
	switch _fffcf {
	case 0, 1, 2, 3:
	default:
		return _b.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_fffcf))
	}
	return nil
}

// Validate validates the CT_Skip and its children
func (_dggabb *CT_Skip) Validate() error {
	return _dggabb.ValidateWithPath("\u0043T\u005f\u0053\u006b\u0069\u0070")
}

// Validate validates the CT_PieSer and its children
func (_cccb *CT_PieSer) Validate() error {
	return _cccb.ValidateWithPath("\u0043T\u005f\u0050\u0069\u0065\u0053\u0065r")
}

// Validate validates the CT_Legend and its children
func (_bfce *CT_Legend) Validate() error {
	return _bfce.ValidateWithPath("\u0043T\u005f\u004c\u0065\u0067\u0065\u006ed")
}

type Any interface {
	MarshalXML(_gcgdd *_e.Encoder, _ddabf _e.StartElement) error
	UnmarshalXML(_dbffc *_e.Decoder, _fbgeb _e.StartElement) error
}

func NewCT_TimeUnit() *CT_TimeUnit { _beaed := &CT_TimeUnit{}; return _beaed }

type CT_TimeUnit struct{ ValAttr ST_TimeUnit }

func (_ecabef *ChartSpace) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0078\u006d\u006cn\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074"})
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0061"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e"})
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0063"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074"})
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0072"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073"})
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a/\u002f\u0073\u0063\u0068\u0065m\u0061s\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067/\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002f\u0073\u0068\u0061\u0072e\u0064\u0054\u0079\u0070\u0065\u0073"})
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"}, Value: "\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"})
	start.Name.Local = "\u0063\u003a\u0063h\u0061\u0072\u0074\u0053\u0070\u0061\u0063\u0065"
	return _ecabef.CT_ChartSpace.MarshalXML(e, start)
}

// ValidateWithPath validates the CT_TickMark and its children, prefixing error messages with path
func (_faddc *CT_TickMark) ValidateWithPath(path string) error {
	if _fadee := _faddc.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _fadee != nil {
		return _fadee
	}
	return nil
}

// Validate validates the CT_NumData and its children
func (_fcfc *CT_NumData) Validate() error {
	return _fcfc.ValidateWithPath("\u0043\u0054\u005f\u004e\u0075\u006d\u0044\u0061\u0074\u0061")
}
func (_eedc *CT_Period) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _fbdb := range start.Attr {
		if _fbdb.Name.Local == "\u0076\u0061\u006c" {
			_dcgc, _fabg := _c.ParseUint(_fbdb.Value, 10, 32)
			if _fabg != nil {
				return _fabg
			}
			_cecfb := uint32(_dcgc)
			_eedc.ValAttr = &_cecfb
			continue
		}
	}
	for {
		_dcea, _fdfg := d.Token()
		if _fdfg != nil {
			return _b.Errorf("p\u0061\u0072\u0073\u0069ng\u0020C\u0054\u005f\u0050\u0065\u0072i\u006f\u0064\u003a\u0020\u0025\u0073", _fdfg)
		}
		if _fbcee, _adgd := _dcea.(_e.EndElement); _adgd && _fbcee.Name == start.Name {
			break
		}
	}
	return nil
}
func NewCT_HoleSize() *CT_HoleSize { _begef := &CT_HoleSize{}; return _begef }
func (_agdcf *EG_SurfaceChartShared) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _agdcf.Wireframe != nil {
		_dfdeg := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0077\u0069\u0072\u0065\u0066\u0072\u0061\u006d\u0065"}}
		e.EncodeElement(_agdcf.Wireframe, _dfdeg)
	}
	if _agdcf.Ser != nil {
		_gcbge := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _baedd := range _agdcf.Ser {
			e.EncodeElement(_baedd, _gcbge)
		}
	}
	if _agdcf.BandFmts != nil {
		_ffgbb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0062\u0061\u006e\u0064\u0046\u006d\u0074\u0073"}}
		e.EncodeElement(_agdcf.BandFmts, _ffgbb)
	}
	return nil
}
func (_cefee *CT_SurfaceSer) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_cefee.Idx = NewCT_UnsignedInt()
	_cefee.Order = NewCT_UnsignedInt()
_dceca:
	for {
		_cdcfg, _ecaae := d.Token()
		if _ecaae != nil {
			return _ecaae
		}
		switch _fdabc := _cdcfg.(type) {
		case _e.StartElement:
			switch _fdabc.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}:
				if _fdfcf := d.DecodeElement(_cefee.Idx, &_fdabc); _fdfcf != nil {
					return _fdfcf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}:
				if _cgebc := d.DecodeElement(_cefee.Order, &_fdabc); _cgebc != nil {
					return _cgebc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				_cefee.Tx = NewCT_SerTx()
				if _fcgbe := d.DecodeElement(_cefee.Tx, &_fdabc); _fcgbe != nil {
					return _fcgbe
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_cefee.SpPr = _f.NewCT_ShapeProperties()
				if _ddfaf := d.DecodeElement(_cefee.SpPr, &_fdabc); _ddfaf != nil {
					return _ddfaf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074"}:
				_cefee.Cat = NewCT_AxDataSource()
				if _aadgf := d.DecodeElement(_cefee.Cat, &_fdabc); _aadgf != nil {
					return _aadgf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006c"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006c"}:
				_cefee.Val = NewCT_NumDataSource()
				if _agea := d.DecodeElement(_cefee.Val, &_fdabc); _agea != nil {
					return _agea
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_cefee.ExtLst = NewCT_ExtensionList()
				if _bgccd := d.DecodeElement(_cefee.ExtLst, &_fdabc); _bgccd != nil {
					return _bgccd
				}
			default:
				_a.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0053u\u0072\u0066\u0061\u0063\u0065\u0053\u0065\u0072 \u0025\u0076", _fdabc.Name)
				if _fgdbf := d.Skip(); _fgdbf != nil {
					return _fgdbf
				}
			}
		case _e.EndElement:
			break _dceca
		case _e.CharData:
		}
	}
	return nil
}

// Validate validates the CT_DLblChoice and its children
func (_dabb *CT_DLblChoice) Validate() error {
	return _dabb.ValidateWithPath("\u0043\u0054\u005f\u0044\u004c\u0062\u006c\u0043\u0068\u006f\u0069\u0063\u0065")
}

// ValidateWithPath validates the CT_HeaderFooter and its children, prefixing error messages with path
func (_begc *CT_HeaderFooter) ValidateWithPath(path string) error { return nil }
func (_cggd ST_TimeUnit) Validate() error                         { return _cggd.ValidateWithPath("") }
func (_eegg ST_MarkerStyle) String() string {
	switch _eegg {
	case 0:
		return ""
	case 1:
		return "\u0063\u0069\u0072\u0063\u006c\u0065"
	case 2:
		return "\u0064\u0061\u0073\u0068"
	case 3:
		return "\u0064i\u0061\u006d\u006f\u006e\u0064"
	case 4:
		return "\u0064\u006f\u0074"
	case 5:
		return "\u006e\u006f\u006e\u0065"
	case 6:
		return "\u0070i\u0063\u0074\u0075\u0072\u0065"
	case 7:
		return "\u0070\u006c\u0075\u0073"
	case 8:
		return "\u0073\u0071\u0075\u0061\u0072\u0065"
	case 9:
		return "\u0073\u0074\u0061\u0072"
	case 10:
		return "\u0074\u0072\u0069\u0061\u006e\u0067\u006c\u0065"
	case 11:
		return "\u0078"
	case 12:
		return "\u0061\u0075\u0074\u006f"
	}
	return ""
}

const (
	ST_LegendPosUnset ST_LegendPos = 0
	ST_LegendPosB     ST_LegendPos = 1
	ST_LegendPosTr    ST_LegendPos = 2
	ST_LegendPosL     ST_LegendPos = 3
	ST_LegendPosR     ST_LegendPos = 4
	ST_LegendPosT     ST_LegendPos = 5
)

func (_gbfgd *CT_PivotFmts) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_dfea:
	for {
		_ececc, _gfcg := d.Token()
		if _gfcg != nil {
			return _gfcg
		}
		switch _bface := _ececc.(type) {
		case _e.StartElement:
			switch _bface.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0076\u006f\u0074\u0046\u006d\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0076\u006f\u0074\u0046\u006d\u0074"}:
				_aebc := NewCT_PivotFmt()
				if _geec := d.DecodeElement(_aebc, &_bface); _geec != nil {
					return _geec
				}
				_gbfgd.PivotFmt = append(_gbfgd.PivotFmt, _aebc)
			default:
				_a.Log.Debug("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075n\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054_P\u0069\u0076o\u0074\u0046\u006d\u0074\u0073\u0020\u0025\u0076", _bface.Name)
				if _cdcf := d.Skip(); _cdcf != nil {
					return _cdcf
				}
			}
		case _e.EndElement:
			break _dfea
		case _e.CharData:
		}
	}
	return nil
}

const (
	ST_LayoutModeUnset  ST_LayoutMode = 0
	ST_LayoutModeEdge   ST_LayoutMode = 1
	ST_LayoutModeFactor ST_LayoutMode = 2
)

func (_fadfd ST_BarDir) String() string {
	switch _fadfd {
	case 0:
		return ""
	case 1:
		return "\u0062\u0061\u0072"
	case 2:
		return "\u0063\u006f\u006c"
	}
	return ""
}
func (_fbeea ST_SecondPieSize) String() string {
	if _fbeea.ST_SecondPieSizePercent != nil {
		return _b.Sprintf("\u0025\u0076", *_fbeea.ST_SecondPieSizePercent)
	}
	if _fbeea.ST_SecondPieSizeUShort != nil {
		return _b.Sprintf("\u0025\u0076", *_fbeea.ST_SecondPieSizeUShort)
	}
	return ""
}
func NewCT_ErrValType() *CT_ErrValType { _cefba := &CT_ErrValType{}; return _cefba }
func (_cegb *CT_ChartSpace) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_cegb.Chart = NewCT_Chart()
_fddc:
	for {
		_bcgbb, _cfagc := d.Token()
		if _cfagc != nil {
			return _cfagc
		}
		switch _bggc := _bcgbb.(type) {
		case _e.StartElement:
			switch _bggc.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0061\u0074\u0065\u0031\u0039\u0030\u0034"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0061\u0074\u0065\u0031\u0039\u0030\u0034"}:
				_cegb.Date1904 = NewCT_Boolean()
				if _aefe := d.DecodeElement(_cegb.Date1904, &_bggc); _aefe != nil {
					return _aefe
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u006e\u0067"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u006e\u0067"}:
				_cegb.Lang = NewCT_TextLanguageID()
				if _eegd := d.DecodeElement(_cegb.Lang, &_bggc); _eegd != nil {
					return _eegd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u006f\u0075\u006e\u0064\u0065\u0064\u0043\u006fr\u006e\u0065\u0072\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u006f\u0075\u006e\u0064\u0065\u0064\u0043\u006fr\u006e\u0065\u0072\u0073"}:
				_cegb.RoundedCorners = NewCT_Boolean()
				if _eadfc := d.DecodeElement(_cegb.RoundedCorners, &_bggc); _eadfc != nil {
					return _eadfc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0079l\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0079l\u0065"}:
				_cegb.Style = NewCT_Style()
				if _bdb := d.DecodeElement(_cegb.Style, &_bggc); _bdb != nil {
					return _bdb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063l\u0072\u004d\u0061\u0070\u004f\u0076r"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063l\u0072\u004d\u0061\u0070\u004f\u0076r"}:
				_cegb.ClrMapOvr = _f.NewCT_ColorMapping()
				if _fga := d.DecodeElement(_cegb.ClrMapOvr, &_bggc); _fga != nil {
					return _fga
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "p\u0069\u0076\u006f\u0074\u0053\u006f\u0075\u0072\u0063\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "p\u0069\u0076\u006f\u0074\u0053\u006f\u0075\u0072\u0063\u0065"}:
				_cegb.PivotSource = NewCT_PivotSource()
				if _dabee := d.DecodeElement(_cegb.PivotSource, &_bggc); _dabee != nil {
					return _dabee
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0072\u006f\u0074\u0065\u0063\u0074\u0069\u006f\u006e"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0072\u006f\u0074\u0065\u0063\u0074\u0069\u006f\u006e"}:
				_cegb.Protection = NewCT_Protection()
				if _ebc := d.DecodeElement(_cegb.Protection, &_bggc); _ebc != nil {
					return _ebc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0068\u0061r\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0068\u0061r\u0074"}:
				if _ffcf := d.DecodeElement(_cegb.Chart, &_bggc); _ffcf != nil {
					return _ffcf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_cegb.SpPr = _f.NewCT_ShapeProperties()
				if _fafb := d.DecodeElement(_cegb.SpPr, &_bggc); _fafb != nil {
					return _fafb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_cegb.TxPr = _f.NewCT_TextBody()
				if _gbef := d.DecodeElement(_cegb.TxPr, &_bggc); _gbef != nil {
					return _gbef
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074e\u0072\u006e\u0061\u006c\u0044\u0061\u0074\u0061"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074e\u0072\u006e\u0061\u006c\u0044\u0061\u0074\u0061"}:
				_cegb.ExternalData = NewCT_ExternalData()
				if _gggd := d.DecodeElement(_cegb.ExternalData, &_bggc); _gggd != nil {
					return _gggd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0072\u0069\u006e\u0074\u0053\u0065\u0074\u0074\u0069\u006e\u0067\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0072\u0069\u006e\u0074\u0053\u0065\u0074\u0074\u0069\u006e\u0067\u0073"}:
				_cegb.PrintSettings = NewCT_PrintSettings()
				if _bcgdg := d.DecodeElement(_cegb.PrintSettings, &_bggc); _bcgdg != nil {
					return _bcgdg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0075\u0073\u0065\u0072\u0053\u0068\u0061\u0070\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0075\u0073\u0065\u0072\u0053\u0068\u0061\u0070\u0065\u0073"}:
				_cegb.UserShapes = NewCT_RelId()
				if _fgbg := d.DecodeElement(_cegb.UserShapes, &_bggc); _fgbg != nil {
					return _fgbg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_cegb.ExtLst = NewCT_ExtensionList()
				if _bfgd := d.DecodeElement(_cegb.ExtLst, &_bggc); _bfgd != nil {
					return _bfgd
				}
			default:
				_a.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0043h\u0061\u0072\u0074\u0053\u0070\u0061\u0063\u0065 \u0025\u0076", _bggc.Name)
				if _afef := d.Skip(); _afef != nil {
					return _afef
				}
			}
		case _e.EndElement:
			break _fddc
		case _e.CharData:
		}
	}
	return nil
}
func (_bfdb *CT_LayoutMode) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _bfdb.ValAttr != ST_LayoutModeUnset {
		_gfdbd, _eceg := _bfdb.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
		if _eceg != nil {
			return _eceg
		}
		start.Attr = append(start.Attr, _gfdbd)
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}
func (_bdad *CT_Crosses) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_bdad.ValAttr = ST_Crosses(1)
	for _, _fdce := range start.Attr {
		if _fdce.Name.Local == "\u0076\u0061\u006c" {
			_bdad.ValAttr.UnmarshalXMLAttr(_fdce)
			continue
		}
	}
	for {
		_edff, _bceb := d.Token()
		if _bceb != nil {
			return _b.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0043\u0054\u005f\u0043\u0072\u006f\u0073\u0073\u0065\u0073\u003a\u0020%\u0073", _bceb)
		}
		if _fdccg, _fgab := _edff.(_e.EndElement); _fgab && _fdccg.Name == start.Name {
			break
		}
	}
	return nil
}
func (_bgeeg *CT_MultiLvlStrData) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_edeec:
	for {
		_abbdc, _ededc := d.Token()
		if _ededc != nil {
			return _ededc
		}
		switch _gccd := _abbdc.(type) {
		case _e.StartElement:
			switch _gccd.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070t\u0043\u006f\u0075\u006e\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070t\u0043\u006f\u0075\u006e\u0074"}:
				_bgeeg.PtCount = NewCT_UnsignedInt()
				if _ceac := d.DecodeElement(_bgeeg.PtCount, &_gccd); _ceac != nil {
					return _ceac
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0076\u006c"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0076\u006c"}:
				_gfbgb := NewCT_Lvl()
				if _bfcb := d.DecodeElement(_gfbgb, &_gccd); _bfcb != nil {
					return _bfcb
				}
				_bgeeg.Lvl = append(_bgeeg.Lvl, _gfbgb)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_bgeeg.ExtLst = NewCT_ExtensionList()
				if _bfgbd := d.DecodeElement(_bgeeg.ExtLst, &_gccd); _bfgbd != nil {
					return _bfgbd
				}
			default:
				_a.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0065l\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u004d\u0075\u006c\u0074\u0069\u004cv\u006c\u0053\u0074\u0072\u0044\u0061\u0074\u0061\u0020\u0025\u0076", _gccd.Name)
				if _fcbff := d.Skip(); _fcbff != nil {
					return _fcbff
				}
			}
		case _e.EndElement:
			break _edeec
		case _e.CharData:
		}
	}
	return nil
}
func NewCT_Surface3DChart() *CT_Surface3DChart { _befbd := &CT_Surface3DChart{}; return _befbd }
func NewCT_Order() *CT_Order                   { _aeed := &CT_Order{}; return _aeed }
func NewCT_PlotAreaChoice() *CT_PlotAreaChoice { _gdbbc := &CT_PlotAreaChoice{}; return _gdbbc }
func NewCT_LblAlgn() *CT_LblAlgn               { _daba := &CT_LblAlgn{}; _daba.ValAttr = ST_LblAlgn(1); return _daba }

const (
	ST_MarkerStyleUnset    ST_MarkerStyle = 0
	ST_MarkerStyleCircle   ST_MarkerStyle = 1
	ST_MarkerStyleDash     ST_MarkerStyle = 2
	ST_MarkerStyleDiamond  ST_MarkerStyle = 3
	ST_MarkerStyleDot      ST_MarkerStyle = 4
	ST_MarkerStyleNone     ST_MarkerStyle = 5
	ST_MarkerStylePicture  ST_MarkerStyle = 6
	ST_MarkerStylePlus     ST_MarkerStyle = 7
	ST_MarkerStyleSquare   ST_MarkerStyle = 8
	ST_MarkerStyleStar     ST_MarkerStyle = 9
	ST_MarkerStyleTriangle ST_MarkerStyle = 10
	ST_MarkerStyleX        ST_MarkerStyle = 11
	ST_MarkerStyleAuto     ST_MarkerStyle = 12
)

// ST_HPercent is a union type
type ST_HPercent struct {
	ST_HPercentWithSymbol *string
	ST_HPercentUShort     *uint16
}

func (_bbdebg ST_ErrValType) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_cedf := _e.Attr{}
	_cedf.Name = name
	switch _bbdebg {
	case ST_ErrValTypeUnset:
		_cedf.Value = ""
	case ST_ErrValTypeCust:
		_cedf.Value = "\u0063\u0075\u0073\u0074"
	case ST_ErrValTypeFixedVal:
		_cedf.Value = "\u0066\u0069\u0078\u0065\u0064\u0056\u0061\u006c"
	case ST_ErrValTypePercentage:
		_cedf.Value = "\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u0061\u0067\u0065"
	case ST_ErrValTypeStdDev:
		_cedf.Value = "\u0073\u0074\u0064\u0044\u0065\u0076"
	case ST_ErrValTypeStdErr:
		_cedf.Value = "\u0073\u0074\u0064\u0045\u0072\u0072"
	}
	return _cedf, nil
}
func (_egeb *Group_DLbls) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _egeb.NumFmt != nil {
		_geff := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u0046\u006d\u0074"}}
		e.EncodeElement(_egeb.NumFmt, _geff)
	}
	if _egeb.SpPr != nil {
		_aadaa := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_egeb.SpPr, _aadaa)
	}
	if _egeb.TxPr != nil {
		_beeebg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_egeb.TxPr, _beeebg)
	}
	if _egeb.DLblPos != nil {
		_eedac := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0050\u006fs"}}
		e.EncodeElement(_egeb.DLblPos, _eedac)
	}
	if _egeb.ShowLegendKey != nil {
		_ebccg := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0073h\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}}
		e.EncodeElement(_egeb.ShowLegendKey, _ebccg)
	}
	if _egeb.ShowVal != nil {
		_fcbge := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0073\u0068\u006f\u0077\u0056\u0061l"}}
		e.EncodeElement(_egeb.ShowVal, _fcbge)
	}
	if _egeb.ShowCatName != nil {
		_baad := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}}
		e.EncodeElement(_egeb.ShowCatName, _baad)
	}
	if _egeb.ShowSerName != nil {
		_aeccb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}}
		e.EncodeElement(_egeb.ShowSerName, _aeccb)
	}
	if _egeb.ShowPercent != nil {
		_dfcc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}}
		e.EncodeElement(_egeb.ShowPercent, _dfcc)
	}
	if _egeb.ShowBubbleSize != nil {
		_eedcg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003as\u0068\u006f\u0077B\u0075\u0062\u0062\u006c\u0065\u0053\u0069\u007a\u0065"}}
		e.EncodeElement(_egeb.ShowBubbleSize, _eedcg)
	}
	if _egeb.Separator != nil {
		_gaeef := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0073\u0065\u0070\u0061\u0072\u0061\u0074\u006f\u0072"}}
		_gb.AddPreserveSpaceAttr(&_gaeef, *_egeb.Separator)
		e.EncodeElement(_egeb.Separator, _gaeef)
	}
	if _egeb.ShowLeaderLines != nil {
		_egfag := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u004c\u0065\u0061\u0064\u0065\u0072L\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_egeb.ShowLeaderLines, _egfag)
	}
	if _egeb.LeaderLines != nil {
		_bgbb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006c\u0065\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_egeb.LeaderLines, _bgbb)
	}
	return nil
}

type CT_PageMargins struct {
	LAttr      float64
	RAttr      float64
	TAttr      float64
	BAttr      float64
	HeaderAttr float64
	FooterAttr float64
}

// ValidateWithPath validates the CT_DLblPos and its children, prefixing error messages with path
func (_fadd *CT_DLblPos) ValidateWithPath(path string) error {
	if _fadd.ValAttr == ST_DLblPosUnset {
		return _b.Errorf("\u0025\u0073\u002fV\u0061\u006c\u0041\u0074t\u0072\u0020\u0069\u0073\u0020\u0061\u0020m\u0061\u006e\u0064\u0061\u0074\u006f\u0072\u0079\u0020\u0066\u0069\u0065\u006c\u0064", path)
	}
	if _dagae := _fadd.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _dagae != nil {
		return _dagae
	}
	return nil
}
func (_cadff *EG_SerShared) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	_edfabg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0069d\u0078"}}
	e.EncodeElement(_cadff.Idx, _edfabg)
	_aagb := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006f\u0072\u0064\u0065\u0072"}}
	e.EncodeElement(_cadff.Order, _aagb)
	if _cadff.Tx != nil {
		_dbcdg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078"}}
		e.EncodeElement(_cadff.Tx, _dbcdg)
	}
	if _cadff.SpPr != nil {
		_acgfb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_cadff.SpPr, _acgfb)
	}
	return nil
}
func (_aefef *CT_Surface) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _aefef.Thickness != nil {
		_cfdaec := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0074\u0068\u0069\u0063\u006b\u006e\u0065\u0073\u0073"}}
		e.EncodeElement(_aefef.Thickness, _cfdaec)
	}
	if _aefef.SpPr != nil {
		_fdceb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_aefef.SpPr, _fdceb)
	}
	if _aefef.PictureOptions != nil {
		_acdcc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003ap\u0069\u0063\u0074u\u0072\u0065\u004f\u0070\u0074\u0069\u006f\u006e\u0073"}}
		e.EncodeElement(_aefef.PictureOptions, _acdcc)
	}
	if _aefef.ExtLst != nil {
		_bbdfd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_aefef.ExtLst, _bbdfd)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the UserShapes and its children, prefixing error messages with path
func (_bgga *UserShapes) ValidateWithPath(path string) error {
	if _bcga := _bgga.CT_Drawing.ValidateWithPath(path); _bcga != nil {
		return _bcga
	}
	return nil
}

// ValidateWithPath validates the CT_DateAx and its children, prefixing error messages with path
func (_cgfe *CT_DateAx) ValidateWithPath(path string) error {
	if _fdeaf := _cgfe.AxId.ValidateWithPath(path + "\u002f\u0041\u0078I\u0064"); _fdeaf != nil {
		return _fdeaf
	}
	if _feef := _cgfe.Scaling.ValidateWithPath(path + "\u002f\u0053\u0063\u0061\u006c\u0069\u006e\u0067"); _feef != nil {
		return _feef
	}
	if _cgfe.Delete != nil {
		if _bgee := _cgfe.Delete.ValidateWithPath(path + "\u002fD\u0065\u006c\u0065\u0074\u0065"); _bgee != nil {
			return _bgee
		}
	}
	if _dadfa := _cgfe.AxPos.ValidateWithPath(path + "\u002f\u0041\u0078\u0050\u006f\u0073"); _dadfa != nil {
		return _dadfa
	}
	if _cgfe.MajorGridlines != nil {
		if _fgde := _cgfe.MajorGridlines.ValidateWithPath(path + "\u002fM\u0061j\u006f\u0072\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"); _fgde != nil {
			return _fgde
		}
	}
	if _cgfe.MinorGridlines != nil {
		if _ccdd := _cgfe.MinorGridlines.ValidateWithPath(path + "\u002fM\u0069n\u006f\u0072\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"); _ccdd != nil {
			return _ccdd
		}
	}
	if _cgfe.Title != nil {
		if _gfec := _cgfe.Title.ValidateWithPath(path + "\u002f\u0054\u0069\u0074\u006c\u0065"); _gfec != nil {
			return _gfec
		}
	}
	if _cgfe.NumFmt != nil {
		if _dgbe := _cgfe.NumFmt.ValidateWithPath(path + "\u002fN\u0075\u006d\u0046\u006d\u0074"); _dgbe != nil {
			return _dgbe
		}
	}
	if _cgfe.MajorTickMark != nil {
		if _dadfc := _cgfe.MajorTickMark.ValidateWithPath(path + "\u002f\u004d\u0061\u006a\u006f\u0072\u0054\u0069\u0063k\u004d\u0061\u0072\u006b"); _dadfc != nil {
			return _dadfc
		}
	}
	if _cgfe.MinorTickMark != nil {
		if _ffbg := _cgfe.MinorTickMark.ValidateWithPath(path + "\u002f\u004d\u0069\u006e\u006f\u0072\u0054\u0069\u0063k\u004d\u0061\u0072\u006b"); _ffbg != nil {
			return _ffbg
		}
	}
	if _cgfe.TickLblPos != nil {
		if _abggf := _cgfe.TickLblPos.ValidateWithPath(path + "/\u0054\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"); _abggf != nil {
			return _abggf
		}
	}
	if _cgfe.SpPr != nil {
		if _dgdee := _cgfe.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _dgdee != nil {
			return _dgdee
		}
	}
	if _cgfe.TxPr != nil {
		if _dedf := _cgfe.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _dedf != nil {
			return _dedf
		}
	}
	if _dbec := _cgfe.CrossAx.ValidateWithPath(path + "\u002f\u0043\u0072\u006f\u0073\u0073\u0041\u0078"); _dbec != nil {
		return _dbec
	}
	if _cgfe.Choice != nil {
		if _bfba := _cgfe.Choice.ValidateWithPath(path + "\u002fC\u0068\u006f\u0069\u0063\u0065"); _bfba != nil {
			return _bfba
		}
	}
	if _cgfe.Auto != nil {
		if _ccca := _cgfe.Auto.ValidateWithPath(path + "\u002f\u0041\u0075t\u006f"); _ccca != nil {
			return _ccca
		}
	}
	if _cgfe.LblOffset != nil {
		if _cdfe := _cgfe.LblOffset.ValidateWithPath(path + "\u002f\u004c\u0062\u006c\u004f\u0066\u0066\u0073\u0065\u0074"); _cdfe != nil {
			return _cdfe
		}
	}
	if _cgfe.BaseTimeUnit != nil {
		if _cbe := _cgfe.BaseTimeUnit.ValidateWithPath(path + "\u002f\u0042\u0061\u0073\u0065\u0054\u0069\u006d\u0065\u0055\u006e\u0069\u0074"); _cbe != nil {
			return _cbe
		}
	}
	if _cgfe.MajorUnit != nil {
		if _efbg := _cgfe.MajorUnit.ValidateWithPath(path + "\u002f\u004d\u0061\u006a\u006f\u0072\u0055\u006e\u0069\u0074"); _efbg != nil {
			return _efbg
		}
	}
	if _cgfe.MajorTimeUnit != nil {
		if _ecfb := _cgfe.MajorTimeUnit.ValidateWithPath(path + "\u002f\u004d\u0061\u006a\u006f\u0072\u0054\u0069\u006de\u0055\u006e\u0069\u0074"); _ecfb != nil {
			return _ecfb
		}
	}
	if _cgfe.MinorUnit != nil {
		if _cafb := _cgfe.MinorUnit.ValidateWithPath(path + "\u002f\u004d\u0069\u006e\u006f\u0072\u0055\u006e\u0069\u0074"); _cafb != nil {
			return _cafb
		}
	}
	if _cgfe.MinorTimeUnit != nil {
		if _beac := _cgfe.MinorTimeUnit.ValidateWithPath(path + "\u002f\u004d\u0069\u006e\u006f\u0072\u0054\u0069\u006de\u0055\u006e\u0069\u0074"); _beac != nil {
			return _beac
		}
	}
	if _cgfe.ExtLst != nil {
		if _geae := _cgfe.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _geae != nil {
			return _geae
		}
	}
	return nil
}
func (_dbcfe *UserShapes) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0078\u006d\u006cn\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074"})
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0061"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e"})
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0063"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074"})
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0072"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073"})
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a/\u002f\u0073\u0063\u0068\u0065m\u0061s\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067/\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002f\u0073\u0068\u0061\u0072e\u0064\u0054\u0079\u0070\u0065\u0073"})
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"}, Value: "\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"})
	start.Name.Local = "\u0063\u003a\u0075s\u0065\u0072\u0053\u0068\u0061\u0070\u0065\u0073"
	return _dbcfe.CT_Drawing.MarshalXML(e, start)
}

// ValidateWithPath validates the CT_PlotArea and its children, prefixing error messages with path
func (_gbbd *CT_PlotArea) ValidateWithPath(path string) error {
	if _gbbd.Layout != nil {
		if _bagae := _gbbd.Layout.ValidateWithPath(path + "\u002fL\u0061\u0079\u006f\u0075\u0074"); _bagae != nil {
			return _bagae
		}
	}
	for _becf, _fgcad := range _gbbd.Choice {
		if _afbg := _fgcad.ValidateWithPath(_b.Sprintf("\u0025\u0073\u002f\u0043\u0068\u006f\u0069\u0063\u0065\u005b\u0025\u0064\u005d", path, _becf)); _afbg != nil {
			return _afbg
		}
	}
	if _gbbd.CChoice != nil {
		if _fcefe := _gbbd.CChoice.ValidateWithPath(path + "\u002f\u0043\u0043\u0068\u006f\u0069\u0063\u0065"); _fcefe != nil {
			return _fcefe
		}
	}
	if _gbbd.DTable != nil {
		if _gbaf := _gbbd.DTable.ValidateWithPath(path + "\u002fD\u0054\u0061\u0062\u006c\u0065"); _gbaf != nil {
			return _gbaf
		}
	}
	if _gbbd.SpPr != nil {
		if _aafac := _gbbd.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _aafac != nil {
			return _aafac
		}
	}
	if _gbbd.ExtLst != nil {
		if _gcfc := _gbbd.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _gcfc != nil {
			return _gcfc
		}
	}
	return nil
}
func (_ddgg *CT_PageMargins) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u006c"}, Value: _b.Sprintf("\u0025\u0076", _ddgg.LAttr)})
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0072"}, Value: _b.Sprintf("\u0025\u0076", _ddgg.RAttr)})
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0074"}, Value: _b.Sprintf("\u0025\u0076", _ddgg.TAttr)})
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0062"}, Value: _b.Sprintf("\u0025\u0076", _ddgg.BAttr)})
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0068\u0065\u0061\u0064\u0065\u0072"}, Value: _b.Sprintf("\u0025\u0076", _ddgg.HeaderAttr)})
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0066\u006f\u006f\u0074\u0065\u0072"}, Value: _b.Sprintf("\u0025\u0076", _ddgg.FooterAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

type CT_Chart struct {
	Title            *CT_Title
	AutoTitleDeleted *CT_Boolean
	PivotFmts        *CT_PivotFmts
	View3D           *CT_View3D
	Floor            *CT_Surface
	SideWall         *CT_Surface
	BackWall         *CT_Surface
	PlotArea         *CT_PlotArea
	Legend           *CT_Legend
	PlotVisOnly      *CT_Boolean
	DispBlanksAs     *CT_DispBlanksAs
	ShowDLblsOverMax *CT_Boolean
	ExtLst           *CT_ExtensionList
}

// Validate validates the CT_RadarSer and its children
func (_fafg *CT_RadarSer) Validate() error {
	return _fafg.ValidateWithPath("C\u0054\u005f\u0052\u0061\u0064\u0061\u0072\u0053\u0065\u0072")
}

// ValidateWithPath validates the CT_Overlap and its children, prefixing error messages with path
func (_cgbgd *CT_Overlap) ValidateWithPath(path string) error {
	if _cgbgd.ValAttr != nil {
		if _bdaea := _cgbgd.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _bdaea != nil {
			return _bdaea
		}
	}
	return nil
}

type CT_BubbleScale struct{ ValAttr *ST_BubbleScale }

// Validate validates the EG_LineChartShared and its children
func (_adeac *EG_LineChartShared) Validate() error {
	return _adeac.ValidateWithPath("\u0045G\u005fL\u0069\u006e\u0065\u0043\u0068a\u0072\u0074S\u0068\u0061\u0072\u0065\u0064")
}

type CT_ChartLines struct{ SpPr *_f.CT_ShapeProperties }

// Validate validates the CT_Thickness and its children
func (_ggbdd *CT_Thickness) Validate() error {
	return _ggbdd.ValidateWithPath("\u0043\u0054\u005fT\u0068\u0069\u0063\u006b\u006e\u0065\u0073\u0073")
}
func (_abgae *ST_HPercent) Validate() error { return _abgae.ValidateWithPath("") }
func (_ddfgd *CT_Perspective) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _afaae := range start.Attr {
		if _afaae.Name.Local == "\u0076\u0061\u006c" {
			_fegfg, _aaebg := _c.ParseUint(_afaae.Value, 10, 8)
			if _aaebg != nil {
				return _aaebg
			}
			_abca := uint8(_fegfg)
			_ddfgd.ValAttr = &_abca
			continue
		}
	}
	for {
		_cdbaa, _adecd := d.Token()
		if _adecd != nil {
			return _b.Errorf("\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fP\u0065\u0072\u0073\u0070\u0065\u0063\u0074\u0069\u0076\u0065:\u0020\u0025\u0073", _adecd)
		}
		if _efdae, _gcee := _cdbaa.(_e.EndElement); _gcee && _efdae.Name == start.Name {
			break
		}
	}
	return nil
}
func (_edbecd *CT_NumVal) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _cgad := range start.Attr {
		if _cgad.Name.Local == "\u0069\u0064\u0078" {
			_ddada, _aecb := _c.ParseUint(_cgad.Value, 10, 32)
			if _aecb != nil {
				return _aecb
			}
			_edbecd.IdxAttr = uint32(_ddada)
			continue
		}
		if _cgad.Name.Local == "\u0066\u006f\u0072\u006d\u0061\u0074\u0043\u006f\u0064\u0065" {
			_cdbc, _cfcef := _cgad.Value, error(nil)
			if _cfcef != nil {
				return _cfcef
			}
			_edbecd.FormatCodeAttr = &_cdbc
			continue
		}
	}
_bfcef:
	for {
		_babae, _abbae := d.Token()
		if _abbae != nil {
			return _abbae
		}
		switch _gdgbf := _babae.(type) {
		case _e.StartElement:
			switch _gdgbf.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076"}:
				if _gafcd := d.DecodeElement(&_edbecd.V, &_gdgbf); _gafcd != nil {
					return _gafcd
				}
			default:
				_a.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u004e\u0075\u006dV\u0061\u006c \u0025\u0076", _gdgbf.Name)
				if _afaca := d.Skip(); _afaca != nil {
					return _afaca
				}
			}
		case _e.EndElement:
			break _bfcef
		case _e.CharData:
		}
	}
	return nil
}
func (_abagf *ST_Shape) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_abagf = 0
	case "\u0063\u006f\u006e\u0065":
		*_abagf = 1
	case "\u0063o\u006e\u0065\u0054\u006f\u004d\u0061x":
		*_abagf = 2
	case "\u0062\u006f\u0078":
		*_abagf = 3
	case "\u0063\u0079\u006c\u0069\u006e\u0064\u0065\u0072":
		*_abagf = 4
	case "\u0070y\u0072\u0061\u006d\u0069\u0064":
		*_abagf = 5
	case "\u0070\u0079\u0072a\u006d\u0069\u0064\u0054\u006f\u004d\u0061\u0078":
		*_abagf = 6
	}
	return nil
}

type CT_Style struct{ ValAttr uint8 }
type Group_DLbls struct {
	NumFmt          *CT_NumFmt
	SpPr            *_f.CT_ShapeProperties
	TxPr            *_f.CT_TextBody
	DLblPos         *CT_DLblPos
	ShowLegendKey   *CT_Boolean
	ShowVal         *CT_Boolean
	ShowCatName     *CT_Boolean
	ShowSerName     *CT_Boolean
	ShowPercent     *CT_Boolean
	ShowBubbleSize  *CT_Boolean
	Separator       *string
	ShowLeaderLines *CT_Boolean
	LeaderLines     *CT_ChartLines
}

func (_cafcf ST_TrendlineType) Validate() error { return _cafcf.ValidateWithPath("") }

// Validate validates the CT_SerTxChoice and its children
func (_eebgf *CT_SerTxChoice) Validate() error {
	return _eebgf.ValidateWithPath("\u0043\u0054\u005f\u0053\u0065\u0072\u0054\u0078\u0043h\u006f\u0069\u0063\u0065")
}
func (_dcdag ST_ErrDir) ValidateWithPath(path string) error {
	switch _dcdag {
	case 0, 1, 2:
	default:
		return _b.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_dcdag))
	}
	return nil
}

type CT_CatAx struct {
	AxId           *CT_UnsignedInt
	Scaling        *CT_Scaling
	Delete         *CT_Boolean
	AxPos          *CT_AxPos
	MajorGridlines *CT_ChartLines
	MinorGridlines *CT_ChartLines
	Title          *CT_Title
	NumFmt         *CT_NumFmt
	MajorTickMark  *CT_TickMark
	MinorTickMark  *CT_TickMark
	TickLblPos     *CT_TickLblPos
	SpPr           *_f.CT_ShapeProperties
	TxPr           *_f.CT_TextBody
	CrossAx        *CT_UnsignedInt
	Choice         *EG_AxSharedChoice
	Auto           *CT_Boolean
	LblAlgn        *CT_LblAlgn
	LblOffset      *CT_LblOffset
	TickLblSkip    *CT_Skip
	TickMarkSkip   *CT_Skip
	NoMultiLvlLbl  *CT_Boolean
	ExtLst         *CT_ExtensionList
}
type CT_DPt struct {
	Idx              *CT_UnsignedInt
	InvertIfNegative *CT_Boolean
	Marker           *CT_Marker
	Bubble3D         *CT_Boolean
	Explosion        *CT_UnsignedInt
	SpPr             *_f.CT_ShapeProperties
	PictureOptions   *CT_PictureOptions
	ExtLst           *CT_ExtensionList
}

// ValidateWithPath validates the CT_Grouping and its children, prefixing error messages with path
func (_afcb *CT_Grouping) ValidateWithPath(path string) error {
	if _gbeb := _afcb.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _gbeb != nil {
		return _gbeb
	}
	return nil
}

type CT_RotY struct{ ValAttr *uint16 }
type CT_AxisUnit struct{ ValAttr float64 }

// ValidateWithPath validates the CT_ExternalData and its children, prefixing error messages with path
func (_ccgbg *CT_ExternalData) ValidateWithPath(path string) error {
	if _ccgbg.AutoUpdate != nil {
		if _bege := _ccgbg.AutoUpdate.ValidateWithPath(path + "/\u0041\u0075\u0074\u006f\u0055\u0070\u0064\u0061\u0074\u0065"); _bege != nil {
			return _bege
		}
	}
	return nil
}

type CT_GapAmount struct{ ValAttr *ST_GapAmount }

// ValidateWithPath validates the CT_PieChart and its children, prefixing error messages with path
func (_dfgbf *CT_PieChart) ValidateWithPath(path string) error {
	if _dfgbf.VaryColors != nil {
		if _dcfc := _dfgbf.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _dcfc != nil {
			return _dcfc
		}
	}
	for _fabb, _acbeb := range _dfgbf.Ser {
		if _aege := _acbeb.ValidateWithPath(_b.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _fabb)); _aege != nil {
			return _aege
		}
	}
	if _dfgbf.DLbls != nil {
		if _geda := _dfgbf.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _geda != nil {
			return _geda
		}
	}
	if _dfgbf.FirstSliceAng != nil {
		if _efgc := _dfgbf.FirstSliceAng.ValidateWithPath(path + "\u002f\u0046\u0069\u0072\u0073\u0074\u0053\u006c\u0069c\u0065\u0041\u006e\u0067"); _efgc != nil {
			return _efgc
		}
	}
	if _dfgbf.ExtLst != nil {
		if _dgbad := _dfgbf.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _dgbad != nil {
			return _dgbad
		}
	}
	return nil
}

// Validate validates the EG_AxSharedChoice and its children
func (_eaggc *EG_AxSharedChoice) Validate() error {
	return _eaggc.ValidateWithPath("\u0045\u0047\u005f\u0041\u0078\u0053\u0068\u0061\u0072\u0065\u0064\u0043h\u006f\u0069\u0063\u0065")
}
func (_ffbga *EG_AxShared) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	_badb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	e.EncodeElement(_ffbga.AxId, _badb)
	_agaga := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0073\u0063\u0061\u006c\u0069\u006eg"}}
	e.EncodeElement(_ffbga.Scaling, _agaga)
	if _ffbga.Delete != nil {
		_egcae := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0064\u0065\u006c\u0065\u0074\u0065"}}
		e.EncodeElement(_ffbga.Delete, _egcae)
	}
	_fdgb := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0061\u0078\u0050\u006f\u0073"}}
	e.EncodeElement(_ffbga.AxPos, _fdgb)
	if _ffbga.MajorGridlines != nil {
		_ddbgd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003am\u0061\u006a\u006fr\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_ffbga.MajorGridlines, _ddbgd)
	}
	if _ffbga.MinorGridlines != nil {
		_dfefd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003am\u0069\u006e\u006fr\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_ffbga.MinorGridlines, _dfefd)
	}
	if _ffbga.Title != nil {
		_ceedg := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0074\u0069\u0074\u006c\u0065"}}
		e.EncodeElement(_ffbga.Title, _ceedg)
	}
	if _ffbga.NumFmt != nil {
		_gddfc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u0046\u006d\u0074"}}
		e.EncodeElement(_ffbga.NumFmt, _gddfc)
	}
	if _ffbga.MajorTickMark != nil {
		_eafed := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006da\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}}
		e.EncodeElement(_ffbga.MajorTickMark, _eafed)
	}
	if _ffbga.MinorTickMark != nil {
		_ageeg := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006di\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}}
		e.EncodeElement(_ffbga.MinorTickMark, _ageeg)
	}
	if _ffbga.TickLblPos != nil {
		_egacc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074i\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}}
		e.EncodeElement(_ffbga.TickLblPos, _egacc)
	}
	if _ffbga.SpPr != nil {
		_dbedbb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_ffbga.SpPr, _dbedbb)
	}
	if _ffbga.TxPr != nil {
		_ffcgb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_ffbga.TxPr, _ffcgb)
	}
	_fddec := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0063\u0072\u006f\u0073\u0073\u0041x"}}
	e.EncodeElement(_ffbga.CrossAx, _fddec)
	if _ffbga.Choice != nil {
		_ffbga.Choice.MarshalXML(e, _e.StartElement{})
	}
	return nil
}
func (_eeed *CT_LayoutTarget) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _eeed.ValAttr != ST_LayoutTargetUnset {
		_fffba, _dedfa := _eeed.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
		if _dedfa != nil {
			return _dedfa
		}
		start.Attr = append(start.Attr, _fffba)
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

type CT_LineChart struct {
	Grouping   *CT_Grouping
	VaryColors *CT_Boolean
	Ser        []*CT_LineSer
	DLbls      *CT_DLbls
	DropLines  *CT_ChartLines
	HiLowLines *CT_ChartLines
	UpDownBars *CT_UpDownBars
	Marker     *CT_Boolean
	Smooth     *CT_Boolean
	AxId       []*CT_UnsignedInt
	ExtLst     *CT_ExtensionList
}

func NewCT_StrVal() *CT_StrVal { _gbdd := &CT_StrVal{}; return _gbdd }
func (_fbfcd *CT_RadarStyle) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _gccde := range start.Attr {
		if _gccde.Name.Local == "\u0076\u0061\u006c" {
			_fbfcd.ValAttr.UnmarshalXMLAttr(_gccde)
			continue
		}
	}
	for {
		_ecbag, _fdfaa := d.Token()
		if _fdfaa != nil {
			return _b.Errorf("\u0070a\u0072\u0073\u0069\u006eg\u0020\u0043\u0054\u005f\u0052a\u0064a\u0072S\u0074\u0079\u006c\u0065\u003a\u0020\u0025s", _fdfaa)
		}
		if _dfag, _cafgg := _ecbag.(_e.EndElement); _cafgg && _dfag.Name == start.Name {
			break
		}
	}
	return nil
}

// ValidateWithPath validates the CT_BarChart and its children, prefixing error messages with path
func (_aga *CT_BarChart) ValidateWithPath(path string) error {
	if _cag := _aga.BarDir.ValidateWithPath(path + "\u002fB\u0061\u0072\u0044\u0069\u0072"); _cag != nil {
		return _cag
	}
	if _aga.Grouping != nil {
		if _ceaf := _aga.Grouping.ValidateWithPath(path + "\u002fG\u0072\u006f\u0075\u0070\u0069\u006eg"); _ceaf != nil {
			return _ceaf
		}
	}
	if _aga.VaryColors != nil {
		if _fece := _aga.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _fece != nil {
			return _fece
		}
	}
	for _eede, _dbdg := range _aga.Ser {
		if _fdb := _dbdg.ValidateWithPath(_b.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _eede)); _fdb != nil {
			return _fdb
		}
	}
	if _aga.DLbls != nil {
		if _eeee := _aga.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _eeee != nil {
			return _eeee
		}
	}
	if _aga.GapWidth != nil {
		if _ceaa := _aga.GapWidth.ValidateWithPath(path + "\u002fG\u0061\u0070\u0057\u0069\u0064\u0074h"); _ceaa != nil {
			return _ceaa
		}
	}
	if _aga.Overlap != nil {
		if _fef := _aga.Overlap.ValidateWithPath(path + "\u002f\u004f\u0076\u0065\u0072\u006c\u0061\u0070"); _fef != nil {
			return _fef
		}
	}
	for _bfec, _adcbb := range _aga.SerLines {
		if _fgf := _adcbb.ValidateWithPath(_b.Sprintf("\u0025s\u002fS\u0065\u0072\u004c\u0069\u006e\u0065\u0073\u005b\u0025\u0064\u005d", path, _bfec)); _fgf != nil {
			return _fgf
		}
	}
	for _dgef, _ccf := range _aga.AxId {
		if _ddeg := _ccf.ValidateWithPath(_b.Sprintf("%\u0073\u002f\u0041\u0078\u0049\u0064\u005b\u0025\u0064\u005d", path, _dgef)); _ddeg != nil {
			return _ddeg
		}
	}
	if _aga.ExtLst != nil {
		if _fbgb := _aga.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _fbgb != nil {
			return _fbgb
		}
	}
	return nil
}
func (_egdd *CT_DLblsChoice) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_ddac:
	for {
		_egbb, _afbc := d.Token()
		if _afbc != nil {
			return _afbc
		}
		switch _aeaec := _egbb.(type) {
		case _e.StartElement:
			switch _aeaec.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}:
				_egdd.Delete = NewCT_Boolean()
				if _gdge := d.DecodeElement(_egdd.Delete, &_aeaec); _gdge != nil {
					return _gdge
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}:
				_egdd.NumFmt = NewCT_NumFmt()
				if _abdb := d.DecodeElement(_egdd.NumFmt, &_aeaec); _abdb != nil {
					return _abdb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_egdd.SpPr = _f.NewCT_ShapeProperties()
				if _ecgb := d.DecodeElement(_egdd.SpPr, &_aeaec); _ecgb != nil {
					return _ecgb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_egdd.TxPr = _f.NewCT_TextBody()
				if _bcfb := d.DecodeElement(_egdd.TxPr, &_aeaec); _bcfb != nil {
					return _bcfb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064L\u0062\u006c\u0050\u006f\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064L\u0062\u006c\u0050\u006f\u0073"}:
				_egdd.DLblPos = NewCT_DLblPos()
				if _ddcc := d.DecodeElement(_egdd.DLblPos, &_aeaec); _ddcc != nil {
					return _ddcc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}:
				_egdd.ShowLegendKey = NewCT_Boolean()
				if _gccbf := d.DecodeElement(_egdd.ShowLegendKey, &_aeaec); _gccbf != nil {
					return _gccbf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006f\u0077\u0056\u0061\u006c"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006f\u0077\u0056\u0061\u006c"}:
				_egdd.ShowVal = NewCT_Boolean()
				if _gcde := d.DecodeElement(_egdd.ShowVal, &_aeaec); _gcde != nil {
					return _gcde
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}:
				_egdd.ShowCatName = NewCT_Boolean()
				if _cadc := d.DecodeElement(_egdd.ShowCatName, &_aeaec); _cadc != nil {
					return _cadc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}:
				_egdd.ShowSerName = NewCT_Boolean()
				if _bdeb := d.DecodeElement(_egdd.ShowSerName, &_aeaec); _bdeb != nil {
					return _bdeb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}:
				_egdd.ShowPercent = NewCT_Boolean()
				if _cbcd := d.DecodeElement(_egdd.ShowPercent, &_aeaec); _cbcd != nil {
					return _cbcd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0042\u0075\u0062\u0062\u006ce\u0053\u0069\u007a\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0042\u0075\u0062\u0062\u006ce\u0053\u0069\u007a\u0065"}:
				_egdd.ShowBubbleSize = NewCT_Boolean()
				if _abda := d.DecodeElement(_egdd.ShowBubbleSize, &_aeaec); _abda != nil {
					return _abda
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u0070\u0061\u0072\u0061\u0074\u006fr"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u0070\u0061\u0072\u0061\u0074\u006fr"}:
				_egdd.Separator = new(string)
				if _aeff := d.DecodeElement(_egdd.Separator, &_aeaec); _aeff != nil {
					return _aeff
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006fw\u004c\u0065\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006fw\u004c\u0065\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}:
				_egdd.ShowLeaderLines = NewCT_Boolean()
				if _adeeg := d.DecodeElement(_egdd.ShowLeaderLines, &_aeaec); _adeeg != nil {
					return _adeeg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "l\u0065\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "l\u0065\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}:
				_egdd.LeaderLines = NewCT_ChartLines()
				if _dceg := d.DecodeElement(_egdd.LeaderLines, &_aeaec); _dceg != nil {
					return _dceg
				}
			default:
				_a.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069n\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006et\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0044\u004c\u0062\u006c\u0073\u0043\u0068o\u0069c\u0065\u0020\u0025\u0076", _aeaec.Name)
				if _afgc := d.Skip(); _afgc != nil {
					return _afgc
				}
			}
		case _e.EndElement:
			break _ddac
		case _e.CharData:
		}
	}
	return nil
}
func (_cebag *ST_ErrDir) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_fead, _ceaadg := d.Token()
	if _ceaadg != nil {
		return _ceaadg
	}
	if _cffed, _bfccg := _fead.(_e.EndElement); _bfccg && _cffed.Name == start.Name {
		*_cebag = 1
		return nil
	}
	if _bfcbb, _bcbd := _fead.(_e.CharData); !_bcbd {
		return _b.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _fead)
	} else {
		switch string(_bfcbb) {
		case "":
			*_cebag = 0
		case "\u0078":
			*_cebag = 1
		case "\u0079":
			*_cebag = 2
		}
	}
	_fead, _ceaadg = d.Token()
	if _ceaadg != nil {
		return _ceaadg
	}
	if _egbab, _acead := _fead.(_e.EndElement); _acead && _egbab.Name == start.Name {
		return nil
	}
	return _b.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _fead)
}

// Validate validates the CT_HPercent and its children
func (_geac *CT_HPercent) Validate() error {
	return _geac.ValidateWithPath("C\u0054\u005f\u0048\u0050\u0065\u0072\u0063\u0065\u006e\u0074")
}
func (_ccfbc *CT_DoughnutChart) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_bgffb:
	for {
		_bdge, _cdff := d.Token()
		if _cdff != nil {
			return _cdff
		}
		switch _ddce := _bdge.(type) {
		case _e.StartElement:
			switch _ddce.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_ccfbc.VaryColors = NewCT_Boolean()
				if _gecb := d.DecodeElement(_ccfbc.VaryColors, &_ddce); _gecb != nil {
					return _gecb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_ccee := NewCT_PieSer()
				if _cbca := d.DecodeElement(_ccee, &_ddce); _cbca != nil {
					return _cbca
				}
				_ccfbc.Ser = append(_ccfbc.Ser, _ccee)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_ccfbc.DLbls = NewCT_DLbls()
				if _caad := d.DecodeElement(_ccfbc.DLbls, &_ddce); _caad != nil {
					return _caad
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066\u0069\u0072\u0073\u0074\u0053\u006c\u0069\u0063\u0065\u0041\u006e\u0067"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066\u0069\u0072\u0073\u0074\u0053\u006c\u0069\u0063\u0065\u0041\u006e\u0067"}:
				_ccfbc.FirstSliceAng = NewCT_FirstSliceAng()
				if _dfaf := d.DecodeElement(_ccfbc.FirstSliceAng, &_ddce); _dfaf != nil {
					return _dfaf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0068\u006f\u006c\u0065\u0053\u0069\u007a\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0068\u006f\u006c\u0065\u0053\u0069\u007a\u0065"}:
				_ccfbc.HoleSize = NewCT_HoleSize()
				if _bfed := d.DecodeElement(_ccfbc.HoleSize, &_ddce); _bfed != nil {
					return _bfed
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_ccfbc.ExtLst = NewCT_ExtensionList()
				if _gdbb := d.DecodeElement(_ccfbc.ExtLst, &_ddce); _gdbb != nil {
					return _gdbb
				}
			default:
				_a.Log.Debug("\u0073\u006b\u0069\u0070\u0070i\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0044\u006f\u0075\u0067\u0068\u006e\u0075\u0074\u0043\u0068\u0061\u0072\u0074\u0020\u0025v", _ddce.Name)
				if _faade := d.Skip(); _faade != nil {
					return _faade
				}
			}
		case _e.EndElement:
			break _bgffb
		case _e.CharData:
		}
	}
	return nil
}
func NewCT_SizeRepresents() *CT_SizeRepresents { _befga := &CT_SizeRepresents{}; return _befga }

// ValidateWithPath validates the CT_SurfaceChart and its children, prefixing error messages with path
func (_dccdf *CT_SurfaceChart) ValidateWithPath(path string) error {
	if _dccdf.Wireframe != nil {
		if _dgfa := _dccdf.Wireframe.ValidateWithPath(path + "\u002f\u0057\u0069\u0072\u0065\u0066\u0072\u0061\u006d\u0065"); _dgfa != nil {
			return _dgfa
		}
	}
	for _ddbc, _bcace := range _dccdf.Ser {
		if _dddd := _bcace.ValidateWithPath(_b.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _ddbc)); _dddd != nil {
			return _dddd
		}
	}
	if _dccdf.BandFmts != nil {
		if _ebdfb := _dccdf.BandFmts.ValidateWithPath(path + "\u002fB\u0061\u006e\u0064\u0046\u006d\u0074s"); _ebdfb != nil {
			return _ebdfb
		}
	}
	for _bcfdg, _bbdb := range _dccdf.AxId {
		if _gcdcg := _bbdb.ValidateWithPath(_b.Sprintf("%\u0073\u002f\u0041\u0078\u0049\u0064\u005b\u0025\u0064\u005d", path, _bcfdg)); _gcdcg != nil {
			return _gcdcg
		}
	}
	if _dccdf.ExtLst != nil {
		if _gfbbe := _dccdf.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _gfbbe != nil {
			return _gfbbe
		}
	}
	return nil
}

// ValidateWithPath validates the CT_ErrValType and its children, prefixing error messages with path
func (_dgee *CT_ErrValType) ValidateWithPath(path string) error {
	if _cefd := _dgee.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _cefd != nil {
		return _cefd
	}
	return nil
}
func (_dffce ST_LayoutMode) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_ggdb := _e.Attr{}
	_ggdb.Name = name
	switch _dffce {
	case ST_LayoutModeUnset:
		_ggdb.Value = ""
	case ST_LayoutModeEdge:
		_ggdb.Value = "\u0065\u0064\u0067\u0065"
	case ST_LayoutModeFactor:
		_ggdb.Value = "\u0066\u0061\u0063\u0074\u006f\u0072"
	}
	return _ggdb, nil
}
func (_bbebb *ST_LayoutTarget) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_gfdg, _fgcfd := d.Token()
	if _fgcfd != nil {
		return _fgcfd
	}
	if _eacgd, _fefcf := _gfdg.(_e.EndElement); _fefcf && _eacgd.Name == start.Name {
		*_bbebb = 1
		return nil
	}
	if _cebfb, _bbaac := _gfdg.(_e.CharData); !_bbaac {
		return _b.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _gfdg)
	} else {
		switch string(_cebfb) {
		case "":
			*_bbebb = 0
		case "\u0069\u006e\u006ee\u0072":
			*_bbebb = 1
		case "\u006f\u0075\u0074e\u0072":
			*_bbebb = 2
		}
	}
	_gfdg, _fgcfd = d.Token()
	if _fgcfd != nil {
		return _fgcfd
	}
	if _aabgb, _gbccdd := _gfdg.(_e.EndElement); _gbccdd && _aabgb.Name == start.Name {
		return nil
	}
	return _b.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _gfdg)
}

// Validate validates the CT_MarkerSize and its children
func (_gbeab *CT_MarkerSize) Validate() error {
	return _gbeab.ValidateWithPath("\u0043\u0054\u005f\u004d\u0061\u0072\u006b\u0065\u0072\u0053\u0069\u007a\u0065")
}

// Validate validates the CT_LegendEntryChoice and its children
func (_cadf *CT_LegendEntryChoice) Validate() error {
	return _cadf.ValidateWithPath("C\u0054_\u004c\u0065\u0067\u0065\u006e\u0064\u0045\u006et\u0072\u0079\u0043\u0068oi\u0063\u0065")
}
func NewCT_UpDownBars() *CT_UpDownBars { _cadcc := &CT_UpDownBars{}; return _cadcc }
func (_bedab *ST_SizeRepresents) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_bedab = 0
	case "\u0061\u0072\u0065\u0061":
		*_bedab = 1
	case "\u0077":
		*_bedab = 2
	}
	return nil
}
func (_cgdeb *CT_Chart) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_cgdeb.PlotArea = NewCT_PlotArea()
_gaeff:
	for {
		_gfgfg, _dfgbb := d.Token()
		if _dfgbb != nil {
			return _dfgbb
		}
		switch _ceaada := _gfgfg.(type) {
		case _e.StartElement:
			switch _ceaada.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0074l\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0074l\u0065"}:
				_cgdeb.Title = NewCT_Title()
				if _ccdb := d.DecodeElement(_cgdeb.Title, &_ceaada); _ccdb != nil {
					return _ccdb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0075t\u006f\u0054\u0069t\u006c\u0065\u0044\u0065\u006c\u0065\u0074\u0065\u0064"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0075t\u006f\u0054\u0069t\u006c\u0065\u0044\u0065\u006c\u0065\u0074\u0065\u0064"}:
				_cgdeb.AutoTitleDeleted = NewCT_Boolean()
				if _dced := d.DecodeElement(_cgdeb.AutoTitleDeleted, &_ceaada); _dced != nil {
					return _dced
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070i\u0076\u006f\u0074\u0046\u006d\u0074s"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070i\u0076\u006f\u0074\u0046\u006d\u0074s"}:
				_cgdeb.PivotFmts = NewCT_PivotFmts()
				if _aaad := d.DecodeElement(_cgdeb.PivotFmts, &_ceaada); _aaad != nil {
					return _aaad
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0069\u0065\u0077\u0033\u0044"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0069\u0065\u0077\u0033\u0044"}:
				_cgdeb.View3D = NewCT_View3D()
				if _bcdb := d.DecodeElement(_cgdeb.View3D, &_ceaada); _bcdb != nil {
					return _bcdb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066\u006c\u006fo\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066\u006c\u006fo\u0072"}:
				_cgdeb.Floor = NewCT_Surface()
				if _dcbb := d.DecodeElement(_cgdeb.Floor, &_ceaada); _dcbb != nil {
					return _dcbb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0069\u0064\u0065\u0057\u0061\u006c\u006c"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0069\u0064\u0065\u0057\u0061\u006c\u006c"}:
				_cgdeb.SideWall = NewCT_Surface()
				if _abc := d.DecodeElement(_cgdeb.SideWall, &_ceaada); _abc != nil {
					return _abc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0063\u006b\u0057\u0061\u006c\u006c"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0063\u006b\u0057\u0061\u006c\u006c"}:
				_cgdeb.BackWall = NewCT_Surface()
				if _bfaca := d.DecodeElement(_cgdeb.BackWall, &_ceaada); _bfaca != nil {
					return _bfaca
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u006c\u006f\u0074\u0041\u0072\u0065\u0061"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u006c\u006f\u0074\u0041\u0072\u0065\u0061"}:
				if _feed := d.DecodeElement(_cgdeb.PlotArea, &_ceaada); _feed != nil {
					return _feed
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0065\u0067\u0065\u006e\u0064"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0065\u0067\u0065\u006e\u0064"}:
				_cgdeb.Legend = NewCT_Legend()
				if _fedb := d.DecodeElement(_cgdeb.Legend, &_ceaada); _fedb != nil {
					return _fedb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "p\u006c\u006f\u0074\u0056\u0069\u0073\u004f\u006e\u006c\u0079"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "p\u006c\u006f\u0074\u0056\u0069\u0073\u004f\u006e\u006c\u0079"}:
				_cgdeb.PlotVisOnly = NewCT_Boolean()
				if _cgcc := d.DecodeElement(_cgdeb.PlotVisOnly, &_ceaada); _cgcc != nil {
					return _cgcc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0069\u0073p\u0042\u006c\u0061\u006e\u006b\u0073\u0041\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0069\u0073p\u0042\u006c\u0061\u006e\u006b\u0073\u0041\u0073"}:
				_cgdeb.DispBlanksAs = NewCT_DispBlanksAs()
				if _afaa := d.DecodeElement(_cgdeb.DispBlanksAs, &_ceaada); _afaa != nil {
					return _afaa
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068o\u0077\u0044\u004cb\u006c\u0073\u004f\u0076\u0065\u0072\u004d\u0061\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068o\u0077\u0044\u004cb\u006c\u0073\u004f\u0076\u0065\u0072\u004d\u0061\u0078"}:
				_cgdeb.ShowDLblsOverMax = NewCT_Boolean()
				if _gcgb := d.DecodeElement(_cgdeb.ShowDLblsOverMax, &_ceaada); _gcgb != nil {
					return _gcgb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_cgdeb.ExtLst = NewCT_ExtensionList()
				if _ggf := d.DecodeElement(_cgdeb.ExtLst, &_ceaada); _ggf != nil {
					return _ggf
				}
			default:
				_a.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006eg\u0020\u0075\u006es\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0043\u0068\u0061\u0072\u0074\u0020\u0025\u0076", _ceaada.Name)
				if _dgbb := d.Skip(); _dgbb != nil {
					return _dgbb
				}
			}
		case _e.EndElement:
			break _gaeff
		case _e.CharData:
		}
	}
	return nil
}
func NewCT_NumDataSourceChoice() *CT_NumDataSourceChoice {
	_dgeba := &CT_NumDataSourceChoice{}
	return _dgeba
}
func (_dggbde ST_Overlap) String() string {
	if _dggbde.ST_OverlapPercent != nil {
		return _b.Sprintf("\u0025\u0076", *_dggbde.ST_OverlapPercent)
	}
	if _dggbde.ST_OverlapByte != nil {
		return _b.Sprintf("\u0025\u0076", *_dggbde.ST_OverlapByte)
	}
	return ""
}
func (_ffgad *ST_BarGrouping) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_eaca, _abfe := d.Token()
	if _abfe != nil {
		return _abfe
	}
	if _fcgca, _ggba := _eaca.(_e.EndElement); _ggba && _fcgca.Name == start.Name {
		*_ffgad = 1
		return nil
	}
	if _ebcgg, _cegac := _eaca.(_e.CharData); !_cegac {
		return _b.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _eaca)
	} else {
		switch string(_ebcgg) {
		case "":
			*_ffgad = 0
		case "\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u0053\u0074a\u0063\u006b\u0065\u0064":
			*_ffgad = 1
		case "\u0063l\u0075\u0073\u0074\u0065\u0072\u0065d":
			*_ffgad = 2
		case "\u0073\u0074\u0061\u006e\u0064\u0061\u0072\u0064":
			*_ffgad = 3
		case "\u0073t\u0061\u0063\u006b\u0065\u0064":
			*_ffgad = 4
		}
	}
	_eaca, _abfe = d.Token()
	if _abfe != nil {
		return _abfe
	}
	if _edbgg, _cfga := _eaca.(_e.EndElement); _cfga && _edbgg.Name == start.Name {
		return nil
	}
	return _b.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _eaca)
}

type CT_TrendlineLbl struct {
	Layout *CT_Layout
	Tx     *CT_Tx
	NumFmt *CT_NumFmt
	SpPr   *_f.CT_ShapeProperties
	TxPr   *_f.CT_TextBody
	ExtLst *CT_ExtensionList
}

// ValidateWithPath validates the CT_Scaling and its children, prefixing error messages with path
func (_cbcgf *CT_Scaling) ValidateWithPath(path string) error {
	if _cbcgf.LogBase != nil {
		if _fcdf := _cbcgf.LogBase.ValidateWithPath(path + "\u002f\u004c\u006f\u0067\u0042\u0061\u0073\u0065"); _fcdf != nil {
			return _fcdf
		}
	}
	if _cbcgf.Orientation != nil {
		if _agbb := _cbcgf.Orientation.ValidateWithPath(path + "\u002f\u004f\u0072i\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e"); _agbb != nil {
			return _agbb
		}
	}
	if _cbcgf.Max != nil {
		if _eabdad := _cbcgf.Max.ValidateWithPath(path + "\u002f\u004d\u0061\u0078"); _eabdad != nil {
			return _eabdad
		}
	}
	if _cbcgf.Min != nil {
		if _faaea := _cbcgf.Min.ValidateWithPath(path + "\u002f\u004d\u0069\u006e"); _faaea != nil {
			return _faaea
		}
	}
	if _cbcgf.ExtLst != nil {
		if _aadd := _cbcgf.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _aadd != nil {
			return _aadd
		}
	}
	return nil
}

type Group_DLbl struct {
	Layout         *CT_Layout
	Tx             *CT_Tx
	NumFmt         *CT_NumFmt
	SpPr           *_f.CT_ShapeProperties
	TxPr           *_f.CT_TextBody
	DLblPos        *CT_DLblPos
	ShowLegendKey  *CT_Boolean
	ShowVal        *CT_Boolean
	ShowCatName    *CT_Boolean
	ShowSerName    *CT_Boolean
	ShowPercent    *CT_Boolean
	ShowBubbleSize *CT_Boolean
	Separator      *string
}

// ValidateWithPath validates the CT_BubbleChart and its children, prefixing error messages with path
func (_ece *CT_BubbleChart) ValidateWithPath(path string) error {
	if _ece.VaryColors != nil {
		if _gagd := _ece.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _gagd != nil {
			return _gagd
		}
	}
	for _dcd, _agf := range _ece.Ser {
		if _deb := _agf.ValidateWithPath(_b.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _dcd)); _deb != nil {
			return _deb
		}
	}
	if _ece.DLbls != nil {
		if _fbgd := _ece.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _fbgd != nil {
			return _fbgd
		}
	}
	if _ece.Bubble3D != nil {
		if _befe := _ece.Bubble3D.ValidateWithPath(path + "\u002fB\u0075\u0062\u0062\u006c\u0065\u0033D"); _befe != nil {
			return _befe
		}
	}
	if _ece.BubbleScale != nil {
		if _decf := _ece.BubbleScale.ValidateWithPath(path + "\u002f\u0042\u0075b\u0062\u006c\u0065\u0053\u0063\u0061\u006c\u0065"); _decf != nil {
			return _decf
		}
	}
	if _ece.ShowNegBubbles != nil {
		if _bgdbf := _ece.ShowNegBubbles.ValidateWithPath(path + "\u002fS\u0068o\u0077\u004e\u0065\u0067\u0042\u0075\u0062\u0062\u006c\u0065\u0073"); _bgdbf != nil {
			return _bgdbf
		}
	}
	if _ece.SizeRepresents != nil {
		if _dce := _ece.SizeRepresents.ValidateWithPath(path + "\u002fS\u0069z\u0065\u0052\u0065\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0073"); _dce != nil {
			return _dce
		}
	}
	for _gaad, _cfc := range _ece.AxId {
		if _eeag := _cfc.ValidateWithPath(_b.Sprintf("%\u0073\u002f\u0041\u0078\u0049\u0064\u005b\u0025\u0064\u005d", path, _gaad)); _eeag != nil {
			return _eeag
		}
	}
	if _ece.ExtLst != nil {
		if _cdb := _ece.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _cdb != nil {
			return _cdb
		}
	}
	return nil
}

// Validate validates the CT_LayoutTarget and its children
func (_affbc *CT_LayoutTarget) Validate() error {
	return _affbc.ValidateWithPath("\u0043T\u005fL\u0061\u0079\u006f\u0075\u0074\u0054\u0061\u0072\u0067\u0065\u0074")
}

type CT_DLblPos struct{ ValAttr ST_DLblPos }

func (_afcg ST_MarkerStyle) Validate() error { return _afcg.ValidateWithPath("") }
func (_aeb *CT_BandFmt) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_aeb.Idx = NewCT_UnsignedInt()
_ffdd:
	for {
		_beb, _dag := d.Token()
		if _dag != nil {
			return _dag
		}
		switch _fbcf := _beb.(type) {
		case _e.StartElement:
			switch _fbcf.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}:
				if _ccd := d.DecodeElement(_aeb.Idx, &_fbcf); _ccd != nil {
					return _ccd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_aeb.SpPr = _f.NewCT_ShapeProperties()
				if _ggc := d.DecodeElement(_aeb.SpPr, &_fbcf); _ggc != nil {
					return _ggc
				}
			default:
				_a.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006ce\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005fB\u0061\u006e\u0064\u0046\u006d\u0074\u0020\u0025\u0076", _fbcf.Name)
				if _bccd := d.Skip(); _bccd != nil {
					return _bccd
				}
			}
		case _e.EndElement:
			break _ffdd
		case _e.CharData:
		}
	}
	return nil
}
func (_edffg *CT_SizeRepresents) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _cgdf := range start.Attr {
		if _cgdf.Name.Local == "\u0076\u0061\u006c" {
			_edffg.ValAttr.UnmarshalXMLAttr(_cgdf)
			continue
		}
	}
	for {
		_gaddb, _fefd := d.Token()
		if _fefd != nil {
			return _b.Errorf("\u0070\u0061r\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005f\u0053\u0069\u007a\u0065\u0052\u0065\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0073: \u0025\u0073", _fefd)
		}
		if _aeecf, _babfg := _gaddb.(_e.EndElement); _babfg && _aeecf.Name == start.Name {
			break
		}
	}
	return nil
}
func NewCT_Protection() *CT_Protection { _bdab := &CT_Protection{}; return _bdab }
func (_agdc *CT_NumData) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _agdc.FormatCode != nil {
		_affgg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0066o\u0072\u006d\u0061\u0074\u0043\u006f\u0064\u0065"}}
		_gb.AddPreserveSpaceAttr(&_affgg, *_agdc.FormatCode)
		e.EncodeElement(_agdc.FormatCode, _affgg)
	}
	if _agdc.PtCount != nil {
		_dece := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0070\u0074\u0043\u006f\u0075\u006et"}}
		e.EncodeElement(_agdc.PtCount, _dece)
	}
	if _agdc.Pt != nil {
		_fdca := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0070\u0074"}}
		for _, _bcea := range _agdc.Pt {
			e.EncodeElement(_bcea, _fdca)
		}
	}
	if _agdc.ExtLst != nil {
		_gfefe := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_agdc.ExtLst, _gfefe)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}
func (_efaea *CT_Legend) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_dbac:
	for {
		_ccfd, _cfda := d.Token()
		if _cfda != nil {
			return _cfda
		}
		switch _fcedc := _ccfd.(type) {
		case _e.StartElement:
			switch _fcedc.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006ce\u0067\u0065\u006e\u0064\u0050\u006fs"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006ce\u0067\u0065\u006e\u0064\u0050\u006fs"}:
				_efaea.LegendPos = NewCT_LegendPos()
				if _bccee := d.DecodeElement(_efaea.LegendPos, &_fcedc); _bccee != nil {
					return _bccee
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "l\u0065\u0067\u0065\u006e\u0064\u0045\u006e\u0074\u0072\u0079"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "l\u0065\u0067\u0065\u006e\u0064\u0045\u006e\u0074\u0072\u0079"}:
				_bbdd := NewCT_LegendEntry()
				if _cdge := d.DecodeElement(_bbdd, &_fcedc); _cdge != nil {
					return _cdge
				}
				_efaea.LegendEntry = append(_efaea.LegendEntry, _bbdd)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}:
				_efaea.Layout = NewCT_Layout()
				if _babb := d.DecodeElement(_efaea.Layout, &_fcedc); _babb != nil {
					return _babb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006fv\u0065\u0072\u006c\u0061\u0079"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006fv\u0065\u0072\u006c\u0061\u0079"}:
				_efaea.Overlay = NewCT_Boolean()
				if _caac := d.DecodeElement(_efaea.Overlay, &_fcedc); _caac != nil {
					return _caac
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_efaea.SpPr = _f.NewCT_ShapeProperties()
				if _fgbdc := d.DecodeElement(_efaea.SpPr, &_fcedc); _fgbdc != nil {
					return _fgbdc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_efaea.TxPr = _f.NewCT_TextBody()
				if _bdgee := d.DecodeElement(_efaea.TxPr, &_fcedc); _bdgee != nil {
					return _bdgee
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_efaea.ExtLst = NewCT_ExtensionList()
				if _fcfeg := d.DecodeElement(_efaea.ExtLst, &_fcedc); _fcfeg != nil {
					return _fcfeg
				}
			default:
				_a.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u004c\u0065\u0067e\u006e\u0064 \u0025\u0076", _fcedc.Name)
				if _egec := d.Skip(); _egec != nil {
					return _egec
				}
			}
		case _e.EndElement:
			break _dbac
		case _e.CharData:
		}
	}
	return nil
}

// Validate validates the CT_DTable and its children
func (_fafcb *CT_DTable) Validate() error {
	return _fafcb.ValidateWithPath("\u0043T\u005f\u0044\u0054\u0061\u0062\u006ce")
}
func NewCT_Double() *CT_Double { _efcg := &CT_Double{}; return _efcg }

type CT_LayoutTarget struct{ ValAttr ST_LayoutTarget }

func (_fbacf *ST_HPercent) ValidateWithPath(path string) error {
	_dfcef := []string{}
	if _fbacf.ST_HPercentWithSymbol != nil {
		_dfcef = append(_dfcef, "S\u0054\u005f\u0048\u0050er\u0063e\u006e\u0074\u0057\u0069\u0074h\u0053\u0079\u006d\u0062\u006f\u006c")
	}
	if _fbacf.ST_HPercentUShort != nil {
		_dfcef = append(_dfcef, "\u0053\u0054\u005f\u0048\u0050\u0065\u0072\u0063\u0065\u006e\u0074\u0055S\u0068\u006f\u0072\u0074")
	}
	if len(_dfcef) > 1 {
		return _b.Errorf("%\u0073\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u006d\u0065\u006d\u0062\u0065r\u0073\u0020\u0073e\u0074:\u0020\u0025\u0076", path, _dfcef)
	}
	return nil
}

const ST_ThicknessPercentPattern = "\u0028[\u0030\u002d\u0039\u005d\u002b\u0029%"

// ValidateWithPath validates the CT_ScatterChart and its children, prefixing error messages with path
func (_eacd *CT_ScatterChart) ValidateWithPath(path string) error {
	if _agde := _eacd.ScatterStyle.ValidateWithPath(path + "\u002f\u0053\u0063\u0061\u0074\u0074\u0065\u0072\u0053\u0074\u0079\u006c\u0065"); _agde != nil {
		return _agde
	}
	if _eacd.VaryColors != nil {
		if _abbaeb := _eacd.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _abbaeb != nil {
			return _abbaeb
		}
	}
	for _fbcba, _gffd := range _eacd.Ser {
		if _bebdec := _gffd.ValidateWithPath(_b.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _fbcba)); _bebdec != nil {
			return _bebdec
		}
	}
	if _eacd.DLbls != nil {
		if _gadd := _eacd.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _gadd != nil {
			return _gadd
		}
	}
	for _abaef, _efgfa := range _eacd.AxId {
		if _cgdag := _efgfa.ValidateWithPath(_b.Sprintf("%\u0073\u002f\u0041\u0078\u0049\u0064\u005b\u0025\u0064\u005d", path, _abaef)); _cgdag != nil {
			return _cgdag
		}
	}
	if _eacd.ExtLst != nil {
		if _cebf := _eacd.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _cebf != nil {
			return _cebf
		}
	}
	return nil
}
func (_bagf *CT_OfPieChart) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_bagf.OfPieType = NewCT_OfPieType()
_bdac:
	for {
		_abgab, _adfc := d.Token()
		if _adfc != nil {
			return _adfc
		}
		switch _edgd := _abgab.(type) {
		case _e.StartElement:
			switch _edgd.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006ff\u0050\u0069\u0065\u0054\u0079\u0070e"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006ff\u0050\u0069\u0065\u0054\u0079\u0070e"}:
				if _cbee := d.DecodeElement(_bagf.OfPieType, &_edgd); _cbee != nil {
					return _cbee
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_bagf.VaryColors = NewCT_Boolean()
				if _dcdbc := d.DecodeElement(_bagf.VaryColors, &_edgd); _dcdbc != nil {
					return _dcdbc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_bacf := NewCT_PieSer()
				if _cfedb := d.DecodeElement(_bacf, &_edgd); _cfedb != nil {
					return _cfedb
				}
				_bagf.Ser = append(_bagf.Ser, _bacf)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_bagf.DLbls = NewCT_DLbls()
				if _bfdgf := d.DecodeElement(_bagf.DLbls, &_edgd); _bfdgf != nil {
					return _bfdgf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0061\u0070\u0057\u0069\u0064\u0074\u0068"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0061\u0070\u0057\u0069\u0064\u0074\u0068"}:
				_bagf.GapWidth = NewCT_GapAmount()
				if _dbfda := d.DecodeElement(_bagf.GapWidth, &_edgd); _dbfda != nil {
					return _dbfda
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073p\u006c\u0069\u0074\u0054\u0079\u0070e"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073p\u006c\u0069\u0074\u0054\u0079\u0070e"}:
				_bagf.SplitType = NewCT_SplitType()
				if _fbef := d.DecodeElement(_bagf.SplitType, &_edgd); _fbef != nil {
					return _fbef
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u006c\u0069\u0074\u0050\u006f\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u006c\u0069\u0074\u0050\u006f\u0073"}:
				_bagf.SplitPos = NewCT_Double()
				if _babg := d.DecodeElement(_bagf.SplitPos, &_edgd); _babg != nil {
					return _babg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063u\u0073\u0074\u0053\u0070\u006c\u0069t"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063u\u0073\u0074\u0053\u0070\u006c\u0069t"}:
				_bagf.CustSplit = NewCT_CustSplit()
				if _gbgf := d.DecodeElement(_bagf.CustSplit, &_edgd); _gbgf != nil {
					return _gbgf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0063\u006f\u006e\u0064\u0050\u0069\u0065\u0053\u0069\u007a\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0063\u006f\u006e\u0064\u0050\u0069\u0065\u0053\u0069\u007a\u0065"}:
				_bagf.SecondPieSize = NewCT_SecondPieSize()
				if _bbdeb := d.DecodeElement(_bagf.SecondPieSize, &_edgd); _bbdeb != nil {
					return _bbdeb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}:
				_ggcfde := NewCT_ChartLines()
				if _cbbe := d.DecodeElement(_ggcfde, &_edgd); _cbbe != nil {
					return _cbbe
				}
				_bagf.SerLines = append(_bagf.SerLines, _ggcfde)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_bagf.ExtLst = NewCT_ExtensionList()
				if _ebfab := d.DecodeElement(_bagf.ExtLst, &_edgd); _ebfab != nil {
					return _ebfab
				}
			default:
				_a.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u004ff\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074 \u0025\u0076", _edgd.Name)
				if _cbaca := d.Skip(); _cbaca != nil {
					return _cbaca
				}
			}
		case _e.EndElement:
			break _bdac
		case _e.CharData:
		}
	}
	return nil
}

var ST_DepthPercentWithSymbolPatternRe = _g.MustCompile(ST_DepthPercentWithSymbolPattern)

// ValidateWithPath validates the CT_Surface3DChart and its children, prefixing error messages with path
func (_faddg *CT_Surface3DChart) ValidateWithPath(path string) error {
	if _faddg.Wireframe != nil {
		if _adaea := _faddg.Wireframe.ValidateWithPath(path + "\u002f\u0057\u0069\u0072\u0065\u0066\u0072\u0061\u006d\u0065"); _adaea != nil {
			return _adaea
		}
	}
	for _bcgcc, _bgfce := range _faddg.Ser {
		if _cdcgc := _bgfce.ValidateWithPath(_b.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _bcgcc)); _cdcgc != nil {
			return _cdcgc
		}
	}
	if _faddg.BandFmts != nil {
		if _eecf := _faddg.BandFmts.ValidateWithPath(path + "\u002fB\u0061\u006e\u0064\u0046\u006d\u0074s"); _eecf != nil {
			return _eecf
		}
	}
	for _adcee, _fgec := range _faddg.AxId {
		if _cafeg := _fgec.ValidateWithPath(_b.Sprintf("%\u0073\u002f\u0041\u0078\u0049\u0064\u005b\u0025\u0064\u005d", path, _adcee)); _cafeg != nil {
			return _cafeg
		}
	}
	if _faddg.ExtLst != nil {
		if _ccegad := _faddg.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _ccegad != nil {
			return _ccegad
		}
	}
	return nil
}
func (_bbc *CT_AreaChart) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _bbc.Grouping != nil {
		_bfb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}}
		e.EncodeElement(_bbc.Grouping, _bfb)
	}
	if _bbc.VaryColors != nil {
		_gcf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_bbc.VaryColors, _gcf)
	}
	if _bbc.Ser != nil {
		_dga := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _dde := range _bbc.Ser {
			e.EncodeElement(_dde, _dga)
		}
	}
	if _bbc.DLbls != nil {
		_dfe := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_bbc.DLbls, _dfe)
	}
	if _bbc.DropLines != nil {
		_cff := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0064\u0072\u006f\u0070\u004c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_bbc.DropLines, _cff)
	}
	_cca := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	for _, _eea := range _bbc.AxId {
		e.EncodeElement(_eea, _cca)
	}
	if _bbc.ExtLst != nil {
		_db := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_bbc.ExtLst, _db)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_DLbl and its children, prefixing error messages with path
func (_bbed *CT_DLbl) ValidateWithPath(path string) error {
	if _gdbdb := _bbed.Idx.ValidateWithPath(path + "\u002f\u0049\u0064\u0078"); _gdbdb != nil {
		return _gdbdb
	}
	if _bbed.Choice != nil {
		if _aeec := _bbed.Choice.ValidateWithPath(path + "\u002fC\u0068\u006f\u0069\u0063\u0065"); _aeec != nil {
			return _aeec
		}
	}
	if _bbed.ExtLst != nil {
		if _cefg := _bbed.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _cefg != nil {
			return _cefg
		}
	}
	return nil
}

type EG_DLblShared struct {
	NumFmt         *CT_NumFmt
	SpPr           *_f.CT_ShapeProperties
	TxPr           *_f.CT_TextBody
	DLblPos        *CT_DLblPos
	ShowLegendKey  *CT_Boolean
	ShowVal        *CT_Boolean
	ShowCatName    *CT_Boolean
	ShowSerName    *CT_Boolean
	ShowPercent    *CT_Boolean
	ShowBubbleSize *CT_Boolean
	Separator      *string
}

func NewCT_MarkerSize() *CT_MarkerSize { _bdae := &CT_MarkerSize{}; return _bdae }
func (_dffe *CT_PieChart) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _dffe.VaryColors != nil {
		_ffcfb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_dffe.VaryColors, _ffcfb)
	}
	if _dffe.Ser != nil {
		_cadg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _bdff := range _dffe.Ser {
			e.EncodeElement(_bdff, _cadg)
		}
	}
	if _dffe.DLbls != nil {
		_beab := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_dffe.DLbls, _beab)
	}
	if _dffe.FirstSliceAng != nil {
		_aebfd := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0066i\u0072\u0073\u0074\u0053\u006c\u0069\u0063\u0065\u0041\u006e\u0067"}}
		e.EncodeElement(_dffe.FirstSliceAng, _aebfd)
	}
	if _dffe.ExtLst != nil {
		_cfeeb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_dffe.ExtLst, _cfeeb)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}
func NewCT_AxDataSourceChoice() *CT_AxDataSourceChoice { _gfd := &CT_AxDataSourceChoice{}; return _gfd }
func (_ddda *CT_Marker) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _ddda.Symbol != nil {
		_geaac := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0079\u006d\u0062\u006f\u006c"}}
		e.EncodeElement(_ddda.Symbol, _geaac)
	}
	if _ddda.Size != nil {
		_efaeb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0069\u007a\u0065"}}
		e.EncodeElement(_ddda.Size, _efaeb)
	}
	if _ddda.SpPr != nil {
		_eaggd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_ddda.SpPr, _eaggd)
	}
	if _ddda.ExtLst != nil {
		_ddfdc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_ddda.ExtLst, _ddfdc)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}
func (_cegdc ST_SizeRepresents) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_aceca := _e.Attr{}
	_aceca.Name = name
	switch _cegdc {
	case ST_SizeRepresentsUnset:
		_aceca.Value = ""
	case ST_SizeRepresentsArea:
		_aceca.Value = "\u0061\u0072\u0065\u0061"
	case ST_SizeRepresentsW:
		_aceca.Value = "\u0077"
	}
	return _aceca, nil
}

const ST_OverlapPercentPattern = "\u0028\u002d\u003f\u0030\u002a\u0028(\u005b\u0030\u002d\u0039\u005d\u0029\u007c\u0028\u005b\u0031\u002d\u0039\u005d[\u0030\u002d\u0039\u005d\u0029\u007c\u00310\u0030\u0029\u0029\u0025"

func (_baade ST_SizeRepresents) String() string {
	switch _baade {
	case 0:
		return ""
	case 1:
		return "\u0061\u0072\u0065\u0061"
	case 2:
		return "\u0077"
	}
	return ""
}
func NewCT_Bar3DChart() *CT_Bar3DChart {
	_affg := &CT_Bar3DChart{}
	_affg.BarDir = NewCT_BarDir()
	return _affg
}
func (_gfada ST_BuiltInUnit) ValidateWithPath(path string) error {
	switch _gfada {
	case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9:
	default:
		return _b.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_gfada))
	}
	return nil
}

// Validate validates the CT_NumFmt and its children
func (_dgfb *CT_NumFmt) Validate() error {
	return _dgfb.ValidateWithPath("\u0043T\u005f\u004e\u0075\u006d\u0046\u006dt")
}
func NewCT_TickLblPos() *CT_TickLblPos { _dafce := &CT_TickLblPos{}; return _dafce }
func (_ggcab *Group_DLbl) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _ggcab.Layout != nil {
		_cdadb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006c\u0061\u0079\u006f\u0075\u0074"}}
		e.EncodeElement(_ggcab.Layout, _cdadb)
	}
	if _ggcab.Tx != nil {
		_egfed := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078"}}
		e.EncodeElement(_ggcab.Tx, _egfed)
	}
	if _ggcab.NumFmt != nil {
		_abecc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u0046\u006d\u0074"}}
		e.EncodeElement(_ggcab.NumFmt, _abecc)
	}
	if _ggcab.SpPr != nil {
		_ggbef := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_ggcab.SpPr, _ggbef)
	}
	if _ggcab.TxPr != nil {
		_dabeee := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_ggcab.TxPr, _dabeee)
	}
	if _ggcab.DLblPos != nil {
		_cdbdae := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0050\u006fs"}}
		e.EncodeElement(_ggcab.DLblPos, _cdbdae)
	}
	if _ggcab.ShowLegendKey != nil {
		_ddde := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0073h\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}}
		e.EncodeElement(_ggcab.ShowLegendKey, _ddde)
	}
	if _ggcab.ShowVal != nil {
		_dgfbag := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0073\u0068\u006f\u0077\u0056\u0061l"}}
		e.EncodeElement(_ggcab.ShowVal, _dgfbag)
	}
	if _ggcab.ShowCatName != nil {
		_becbc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}}
		e.EncodeElement(_ggcab.ShowCatName, _becbc)
	}
	if _ggcab.ShowSerName != nil {
		_fcbbag := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}}
		e.EncodeElement(_ggcab.ShowSerName, _fcbbag)
	}
	if _ggcab.ShowPercent != nil {
		_baeba := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}}
		e.EncodeElement(_ggcab.ShowPercent, _baeba)
	}
	if _ggcab.ShowBubbleSize != nil {
		_eaae := _e.StartElement{Name: _e.Name{Local: "\u0063\u003as\u0068\u006f\u0077B\u0075\u0062\u0062\u006c\u0065\u0053\u0069\u007a\u0065"}}
		e.EncodeElement(_ggcab.ShowBubbleSize, _eaae)
	}
	if _ggcab.Separator != nil {
		_fccg := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0073\u0065\u0070\u0061\u0072\u0061\u0074\u006f\u0072"}}
		_gb.AddPreserveSpaceAttr(&_fccg, *_ggcab.Separator)
		e.EncodeElement(_ggcab.Separator, _fccg)
	}
	return nil
}
func (_ddga *ST_CrossBetween) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_gbccg, _ccea := d.Token()
	if _ccea != nil {
		return _ccea
	}
	if _gaccb, _gfbgfg := _gbccg.(_e.EndElement); _gfbgfg && _gaccb.Name == start.Name {
		*_ddga = 1
		return nil
	}
	if _cdegg, _badd := _gbccg.(_e.CharData); !_badd {
		return _b.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _gbccg)
	} else {
		switch string(_cdegg) {
		case "":
			*_ddga = 0
		case "\u0062e\u0074\u0077\u0065\u0065\u006e":
			*_ddga = 1
		case "\u006d\u0069\u0064\u0043\u0061\u0074":
			*_ddga = 2
		}
	}
	_gbccg, _ccea = d.Token()
	if _ccea != nil {
		return _ccea
	}
	if _dbgce, _cebff := _gbccg.(_e.EndElement); _cebff && _dbgce.Name == start.Name {
		return nil
	}
	return _b.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _gbccg)
}

// ValidateWithPath validates the CT_StrVal and its children, prefixing error messages with path
func (_aabcde *CT_StrVal) ValidateWithPath(path string) error { return nil }
func NewCT_Line3DChart() *CT_Line3DChart {
	_dfcfa := &CT_Line3DChart{}
	_dfcfa.Grouping = NewCT_Grouping()
	return _dfcfa
}
func NewCT_DLblChoice() *CT_DLblChoice { _afaf := &CT_DLblChoice{}; return _afaf }
func (_gbfe *CT_UpDownBars) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_eggcf:
	for {
		_aada, _ggdfda := d.Token()
		if _ggdfda != nil {
			return _ggdfda
		}
		switch _fdfdg := _aada.(type) {
		case _e.StartElement:
			switch _fdfdg.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0061\u0070\u0057\u0069\u0064\u0074\u0068"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0061\u0070\u0057\u0069\u0064\u0074\u0068"}:
				_gbfe.GapWidth = NewCT_GapAmount()
				if _feca := d.DecodeElement(_gbfe.GapWidth, &_fdfdg); _feca != nil {
					return _feca
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0075\u0070\u0042\u0061\u0072\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0075\u0070\u0042\u0061\u0072\u0073"}:
				_gbfe.UpBars = NewCT_UpDownBar()
				if _egggd := d.DecodeElement(_gbfe.UpBars, &_fdfdg); _egggd != nil {
					return _egggd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u006f\u0077\u006e\u0042\u0061\u0072\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u006f\u0077\u006e\u0042\u0061\u0072\u0073"}:
				_gbfe.DownBars = NewCT_UpDownBar()
				if _acdgg := d.DecodeElement(_gbfe.DownBars, &_fdfdg); _acdgg != nil {
					return _acdgg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_gbfe.ExtLst = NewCT_ExtensionList()
				if _cadbgc := d.DecodeElement(_gbfe.ExtLst, &_fdfdg); _cadbgc != nil {
					return _cadbgc
				}
			default:
				_a.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0055p\u0044\u006f\u0077\u006e\u0042\u0061\u0072\u0073 \u0025\u0076", _fdfdg.Name)
				if _afebg := d.Skip(); _afebg != nil {
					return _afebg
				}
			}
		case _e.EndElement:
			break _eggcf
		case _e.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_StrRef and its children, prefixing error messages with path
func (_gebcf *CT_StrRef) ValidateWithPath(path string) error {
	if _gebcf.StrCache != nil {
		if _adgba := _gebcf.StrCache.ValidateWithPath(path + "\u002fS\u0074\u0072\u0043\u0061\u0063\u0068e"); _adgba != nil {
			return _adgba
		}
	}
	if _gebcf.ExtLst != nil {
		if _gaec := _gebcf.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _gaec != nil {
			return _gaec
		}
	}
	return nil
}
func NewCT_LineSer() *CT_LineSer {
	_gfcfe := &CT_LineSer{}
	_gfcfe.Idx = NewCT_UnsignedInt()
	_gfcfe.Order = NewCT_UnsignedInt()
	return _gfcfe
}
func (_cbfdc *CT_MarkerStyle) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_cbfdc.ValAttr = ST_MarkerStyle(1)
	for _, _ffgga := range start.Attr {
		if _ffgga.Name.Local == "\u0076\u0061\u006c" {
			_cbfdc.ValAttr.UnmarshalXMLAttr(_ffgga)
			continue
		}
	}
	for {
		_cefbe, _cfce := d.Token()
		if _cfce != nil {
			return _b.Errorf("\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fM\u0061\u0072\u006b\u0065\u0072\u0053\u0074\u0079\u006c\u0065:\u0020\u0025\u0073", _cfce)
		}
		if _cdddb, _accca := _cefbe.(_e.EndElement); _accca && _cdddb.Name == start.Name {
			break
		}
	}
	return nil
}
func (_fedfe *CT_StrVal) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0069\u0064\u0078"}, Value: _b.Sprintf("\u0025\u0076", _fedfe.IdxAttr)})
	e.EncodeToken(start)
	_cgdgg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0076"}}
	_gb.AddPreserveSpaceAttr(&_cgdgg, _fedfe.V)
	e.EncodeElement(_fedfe.V, _cgdgg)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}
func NewCT_AxisUnit() *CT_AxisUnit { _babe := &CT_AxisUnit{}; _babe.ValAttr = 0 + 1; return _babe }

type CT_DLblsChoice struct {
	Delete          *CT_Boolean
	NumFmt          *CT_NumFmt
	SpPr            *_f.CT_ShapeProperties
	TxPr            *_f.CT_TextBody
	DLblPos         *CT_DLblPos
	ShowLegendKey   *CT_Boolean
	ShowVal         *CT_Boolean
	ShowCatName     *CT_Boolean
	ShowSerName     *CT_Boolean
	ShowPercent     *CT_Boolean
	ShowBubbleSize  *CT_Boolean
	Separator       *string
	ShowLeaderLines *CT_Boolean
	LeaderLines     *CT_ChartLines
}

func (_feffd *ST_TickMark) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_feffd = 0
	case "\u0063\u0072\u006fs\u0073":
		*_feffd = 1
	case "\u0069\u006e":
		*_feffd = 2
	case "\u006e\u006f\u006e\u0065":
		*_feffd = 3
	case "\u006f\u0075\u0074":
		*_feffd = 4
	}
	return nil
}
func NewCT_BarDir() *CT_BarDir { _bec := &CT_BarDir{}; return _bec }

// ValidateWithPath validates the CT_SerTxChoice and its children, prefixing error messages with path
func (_begd *CT_SerTxChoice) ValidateWithPath(path string) error {
	if _begd.StrRef != nil {
		if _ecgfe := _begd.StrRef.ValidateWithPath(path + "\u002fS\u0074\u0072\u0052\u0065\u0066"); _ecgfe != nil {
			return _ecgfe
		}
	}
	return nil
}
func (_beed *CT_LayoutTarget) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _gaac := range start.Attr {
		if _gaac.Name.Local == "\u0076\u0061\u006c" {
			_beed.ValAttr.UnmarshalXMLAttr(_gaac)
			continue
		}
	}
	for {
		_acaa, _aadef := d.Token()
		if _aadef != nil {
			return _b.Errorf("p\u0061\u0072\u0073\u0069\u006e\u0067 \u0043\u0054\u005f\u004c\u0061\u0079\u006f\u0075\u0074T\u0061\u0072\u0067e\u0074:\u0020\u0025\u0073", _aadef)
		}
		if _aeeaf, _fdad := _acaa.(_e.EndElement); _fdad && _aeeaf.Name == start.Name {
			break
		}
	}
	return nil
}

// Validate validates the CT_Tx and its children
func (_acfad *CT_Tx) Validate() error { return _acfad.ValidateWithPath("\u0043\u0054\u005fT\u0078") }

// ValidateWithPath validates the CT_RadarChart and its children, prefixing error messages with path
func (_eccg *CT_RadarChart) ValidateWithPath(path string) error {
	if _feebb := _eccg.RadarStyle.ValidateWithPath(path + "/\u0052\u0061\u0064\u0061\u0072\u0053\u0074\u0079\u006c\u0065"); _feebb != nil {
		return _feebb
	}
	if _eccg.VaryColors != nil {
		if _cdfeb := _eccg.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _cdfeb != nil {
			return _cdfeb
		}
	}
	for _ggabg, _abeg := range _eccg.Ser {
		if _aaaae := _abeg.ValidateWithPath(_b.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _ggabg)); _aaaae != nil {
			return _aaaae
		}
	}
	if _eccg.DLbls != nil {
		if _gfbad := _eccg.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _gfbad != nil {
			return _gfbad
		}
	}
	for _effaa, _dadc := range _eccg.AxId {
		if _ebebb := _dadc.ValidateWithPath(_b.Sprintf("%\u0073\u002f\u0041\u0078\u0049\u0064\u005b\u0025\u0064\u005d", path, _effaa)); _ebebb != nil {
			return _ebebb
		}
	}
	if _eccg.ExtLst != nil {
		if _eegb := _eccg.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _eegb != nil {
			return _eegb
		}
	}
	return nil
}

type CT_DLbl struct {
	Idx    *CT_UnsignedInt
	Choice *CT_DLblChoice
	ExtLst *CT_ExtensionList
}

func (_eebe *CT_NumDataSourceChoice) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_gbeag:
	for {
		_gbcac, _cggcf := d.Token()
		if _cggcf != nil {
			return _cggcf
		}
		switch _beede := _gbcac.(type) {
		case _e.StartElement:
			switch _beede.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0052\u0065\u0066"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0052\u0065\u0066"}:
				_eebe.NumRef = NewCT_NumRef()
				if _aegg := d.DecodeElement(_eebe.NumRef, &_beede); _aegg != nil {
					return _aegg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u004c\u0069\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u004c\u0069\u0074"}:
				_eebe.NumLit = NewCT_NumData()
				if _bcbbc := d.DecodeElement(_eebe.NumLit, &_beede); _bcbbc != nil {
					return _bcbbc
				}
			default:
				_a.Log.Debug("\u0073\u006b\u0069\u0070p\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043T\u005f\u004e\u0075\u006d\u0044a\u0074\u0061\u0053\u006f\u0075\u0072\u0063\u0065\u0043\u0068\u006f\u0069\u0063\u0065\u0020\u0025\u0076", _beede.Name)
				if _acdec := d.Skip(); _acdec != nil {
					return _acdec
				}
			}
		case _e.EndElement:
			break _gbeag
		case _e.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_Order and its children, prefixing error messages with path
func (_dcfgg *CT_Order) ValidateWithPath(path string) error {
	if _dcfgg.ValAttr != nil {
		if *_dcfgg.ValAttr < 2 {
			return _b.Errorf("%\u0073\u002f\u006d\u002e\u0056\u0061l\u0041\u0074\u0074\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u003e=\u0020\u0032\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, *_dcfgg.ValAttr)
		}
		if *_dcfgg.ValAttr > 6 {
			return _b.Errorf("%\u0073\u002f\u006d\u002e\u0056\u0061l\u0041\u0074\u0074\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u003c=\u0020\u0036\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, *_dcfgg.ValAttr)
		}
	}
	return nil
}

type CT_AreaChart struct {
	Grouping   *CT_Grouping
	VaryColors *CT_Boolean
	Ser        []*CT_AreaSer
	DLbls      *CT_DLbls
	DropLines  *CT_ChartLines
	AxId       []*CT_UnsignedInt
	ExtLst     *CT_ExtensionList
}

func (_cfaa *CT_NumRef) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_deag := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0066"}}
	_gb.AddPreserveSpaceAttr(&_deag, _cfaa.F)
	e.EncodeElement(_cfaa.F, _deag)
	if _cfaa.NumCache != nil {
		_bgeed := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u0043\u0061\u0063\u0068\u0065"}}
		e.EncodeElement(_cfaa.NumCache, _bgeed)
	}
	if _cfaa.ExtLst != nil {
		_geafe := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_cfaa.ExtLst, _geafe)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

type CT_Orientation struct{ ValAttr ST_Orientation }

func NewCT_TrendlineLbl() *CT_TrendlineLbl { _cgbcaf := &CT_TrendlineLbl{}; return _cgbcaf }

// ValidateWithPath validates the CT_LegendEntry and its children, prefixing error messages with path
func (_fbff *CT_LegendEntry) ValidateWithPath(path string) error {
	if _beaaa := _fbff.Idx.ValidateWithPath(path + "\u002f\u0049\u0064\u0078"); _beaaa != nil {
		return _beaaa
	}
	if _fbff.Choice != nil {
		if _gccbd := _fbff.Choice.ValidateWithPath(path + "\u002fC\u0068\u006f\u0069\u0063\u0065"); _gccbd != nil {
			return _gccbd
		}
	}
	if _fbff.ExtLst != nil {
		if _becad := _fbff.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _becad != nil {
			return _becad
		}
	}
	return nil
}
func (_eaeb *CT_PictureOptions) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _eaeb.ApplyToFront != nil {
		_cecb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0061\u0070\u0070\u006c\u0079\u0054\u006fF\u0072\u006f\u006e\u0074"}}
		e.EncodeElement(_eaeb.ApplyToFront, _cecb)
	}
	if _eaeb.ApplyToSides != nil {
		_fcdeb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0061\u0070\u0070\u006c\u0079\u0054\u006fS\u0069\u0064\u0065\u0073"}}
		e.EncodeElement(_eaeb.ApplyToSides, _fcdeb)
	}
	if _eaeb.ApplyToEnd != nil {
		_dcaag := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0061p\u0070\u006c\u0079\u0054\u006f\u0045\u006e\u0064"}}
		e.EncodeElement(_eaeb.ApplyToEnd, _dcaag)
	}
	if _eaeb.PictureFormat != nil {
		_cegbb := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0070i\u0063\u0074\u0075\u0072\u0065\u0046\u006f\u0072\u006d\u0061\u0074"}}
		e.EncodeElement(_eaeb.PictureFormat, _cegbb)
	}
	if _eaeb.PictureStackUnit != nil {
		_feab := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0070i\u0063\u0074\u0075\u0072\u0065S\u0074\u0061c\u006b\u0055\u006e\u0069\u0074"}}
		e.EncodeElement(_eaeb.PictureStackUnit, _feab)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}
func (_bbgda ST_DepthPercent) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _bbgda.ST_DepthPercentWithSymbol != nil {
		e.EncodeToken(_e.CharData(*_bbgda.ST_DepthPercentWithSymbol))
	}
	if _bbgda.ST_DepthPercentUShort != nil {
		e.EncodeToken(_e.CharData(_b.Sprintf("\u0025\u0064", *_bbgda.ST_DepthPercentUShort)))
	}
	return e.EncodeToken(_e.EndElement{Name: start.Name})
}

type CT_LblAlgn struct{ ValAttr ST_LblAlgn }

// Validate validates the CT_ErrBarType and its children
func (_eefa *CT_ErrBarType) Validate() error {
	return _eefa.ValidateWithPath("\u0043\u0054\u005f\u0045\u0072\u0072\u0042\u0061\u0072\u0054\u0079\u0070\u0065")
}

// ValidateWithPath validates the CT_Line3DChart and its children, prefixing error messages with path
func (_dbdc *CT_Line3DChart) ValidateWithPath(path string) error {
	if _bgfa := _dbdc.Grouping.ValidateWithPath(path + "\u002fG\u0072\u006f\u0075\u0070\u0069\u006eg"); _bgfa != nil {
		return _bgfa
	}
	if _dbdc.VaryColors != nil {
		if _cede := _dbdc.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _cede != nil {
			return _cede
		}
	}
	for _gdaa, _abce := range _dbdc.Ser {
		if _bfae := _abce.ValidateWithPath(_b.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _gdaa)); _bfae != nil {
			return _bfae
		}
	}
	if _dbdc.DLbls != nil {
		if _feffeb := _dbdc.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _feffeb != nil {
			return _feffeb
		}
	}
	if _dbdc.DropLines != nil {
		if _gffe := _dbdc.DropLines.ValidateWithPath(path + "\u002f\u0044\u0072\u006f\u0070\u004c\u0069\u006e\u0065\u0073"); _gffe != nil {
			return _gffe
		}
	}
	if _dbdc.GapDepth != nil {
		if _bcafg := _dbdc.GapDepth.ValidateWithPath(path + "\u002fG\u0061\u0070\u0044\u0065\u0070\u0074h"); _bcafg != nil {
			return _bcafg
		}
	}
	for _egdf, _aecae := range _dbdc.AxId {
		if _edeb := _aecae.ValidateWithPath(_b.Sprintf("%\u0073\u002f\u0041\u0078\u0049\u0064\u005b\u0025\u0064\u005d", path, _egdf)); _edeb != nil {
			return _edeb
		}
	}
	if _dbdc.ExtLst != nil {
		if _bcbc := _dbdc.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _bcbc != nil {
			return _bcbc
		}
	}
	return nil
}

// ValidateWithPath validates the CT_TimeUnit and its children, prefixing error messages with path
func (_dafdga *CT_TimeUnit) ValidateWithPath(path string) error {
	if _gecf := _dafdga.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _gecf != nil {
		return _gecf
	}
	return nil
}

// ST_BubbleScale is a union type
type ST_BubbleScale struct {
	ST_BubbleScalePercent *string
	ST_BubbleScaleUInt    *uint32
}

// Validate validates the Group_DLbl and its children
func (_dabg *Group_DLbl) Validate() error {
	return _dabg.ValidateWithPath("\u0047\u0072\u006f\u0075\u0070\u005f\u0044\u004c\u0062\u006c")
}

// Validate validates the CT_ValAx and its children
func (_afdg *CT_ValAx) Validate() error {
	return _afdg.ValidateWithPath("\u0043\u0054\u005f\u0056\u0061\u006c\u0041\u0078")
}
func NewEG_SerShared() *EG_SerShared {
	_aaabc := &EG_SerShared{}
	_aaabc.Idx = NewCT_UnsignedInt()
	_aaabc.Order = NewCT_UnsignedInt()
	return _aaabc
}

const (
	ST_BarDirUnset ST_BarDir = 0
	ST_BarDirBar   ST_BarDir = 1
	ST_BarDirCol   ST_BarDir = 2
)

// ValidateWithPath validates the CT_Marker and its children, prefixing error messages with path
func (_dabeab *CT_Marker) ValidateWithPath(path string) error {
	if _dabeab.Symbol != nil {
		if _ddad := _dabeab.Symbol.ValidateWithPath(path + "\u002fS\u0079\u006d\u0062\u006f\u006c"); _ddad != nil {
			return _ddad
		}
	}
	if _dabeab.Size != nil {
		if _gbea := _dabeab.Size.ValidateWithPath(path + "\u002f\u0053\u0069z\u0065"); _gbea != nil {
			return _gbea
		}
	}
	if _dabeab.SpPr != nil {
		if _dddf := _dabeab.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _dddf != nil {
			return _dddf
		}
	}
	if _dabeab.ExtLst != nil {
		if _cabb := _dabeab.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _cabb != nil {
			return _cabb
		}
	}
	return nil
}

// Validate validates the CT_LineChart and its children
func (_cgccg *CT_LineChart) Validate() error {
	return _cgccg.ValidateWithPath("\u0043\u0054\u005fL\u0069\u006e\u0065\u0043\u0068\u0061\u0072\u0074")
}
func (_bcfbg *CT_StockChart) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_dddcd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073e\u0072"}}
	for _, _ccecf := range _bcfbg.Ser {
		e.EncodeElement(_ccecf, _dddcd)
	}
	if _bcfbg.DLbls != nil {
		_edged := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_bcfbg.DLbls, _edged)
	}
	if _bcfbg.DropLines != nil {
		_gddga := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0064\u0072\u006f\u0070\u004c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_bcfbg.DropLines, _gddga)
	}
	if _bcfbg.HiLowLines != nil {
		_abec := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0068i\u004c\u006f\u0077\u004c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_bcfbg.HiLowLines, _abec)
	}
	if _bcfbg.UpDownBars != nil {
		_dfde := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0075p\u0044\u006f\u0077\u006e\u0042\u0061\u0072\u0073"}}
		e.EncodeElement(_bcfbg.UpDownBars, _dfde)
	}
	_ccfbce := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	for _, _dbdb := range _bcfbg.AxId {
		e.EncodeElement(_dbdb, _ccfbce)
	}
	if _bcfbg.ExtLst != nil {
		_gaddbg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_bcfbg.ExtLst, _gaddbg)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}
func (_fegce *CT_Order) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _aaabb := range start.Attr {
		if _aaabb.Name.Local == "\u0076\u0061\u006c" {
			_geaad, _gecgg := _c.ParseUint(_aaabb.Value, 10, 8)
			if _gecgg != nil {
				return _gecgg
			}
			_fddd := uint8(_geaad)
			_fegce.ValAttr = &_fddd
			continue
		}
	}
	for {
		_cbdd, _fbbgf := d.Token()
		if _fbbgf != nil {
			return _b.Errorf("p\u0061r\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fO\u0072\u0064\u0065\u0072: \u0025\u0073", _fbbgf)
		}
		if _dbddg, _feggg := _cbdd.(_e.EndElement); _feggg && _dbddg.Name == start.Name {
			break
		}
	}
	return nil
}
func (_adbc ST_Orientation) Validate() error { return _adbc.ValidateWithPath("") }
func (_ggbag ST_Crosses) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_ggbag.String(), start)
}
func (_bfcefa *CT_SplitType) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _cdeb := range start.Attr {
		if _cdeb.Name.Local == "\u0076\u0061\u006c" {
			_bfcefa.ValAttr.UnmarshalXMLAttr(_cdeb)
			continue
		}
	}
	for {
		_cfaad, _faafb := d.Token()
		if _faafb != nil {
			return _b.Errorf("\u0070a\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005f\u0053\u0070l\u0069\u0074\u0054\u0079\u0070\u0065\u003a\u0020\u0025\u0073", _faafb)
		}
		if _faafe, _agabf := _cfaad.(_e.EndElement); _agabf && _faafe.Name == start.Name {
			break
		}
	}
	return nil
}

// Validate validates the CT_Title and its children
func (_bdcdb *CT_Title) Validate() error {
	return _bdcdb.ValidateWithPath("\u0043\u0054\u005f\u0054\u0069\u0074\u006c\u0065")
}
func (_bfece ST_SecondPieSize) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _bfece.ST_SecondPieSizePercent != nil {
		e.EncodeToken(_e.CharData(*_bfece.ST_SecondPieSizePercent))
	}
	if _bfece.ST_SecondPieSizeUShort != nil {
		e.EncodeToken(_e.CharData(_b.Sprintf("\u0025\u0064", *_bfece.ST_SecondPieSizeUShort)))
	}
	return e.EncodeToken(_e.EndElement{Name: start.Name})
}
func NewCT_Area3DChart() *CT_Area3DChart { _ad := &CT_Area3DChart{}; return _ad }

type ST_OfPieType byte

func NewCT_HPercent() *CT_HPercent { _cccd := &CT_HPercent{}; return _cccd }
func (_dage *CT_NumFmt) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0066\u006f\u0072\u006d\u0061\u0074\u0043\u006f\u0064\u0065"}, Value: _b.Sprintf("\u0025\u0076", _dage.FormatCodeAttr)})
	if _dage.SourceLinkedAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0073\u006f\u0075r\u0063\u0065\u004c\u0069\u006e\u006b\u0065\u0064"}, Value: _b.Sprintf("\u0025\u0064", _cfcbe(*_dage.SourceLinkedAttr))})
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

type CT_PictureFormat struct{ ValAttr ST_PictureFormat }

func (_edec *ST_TimeUnit) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_edec = 0
	case "\u0064\u0061\u0079\u0073":
		*_edec = 1
	case "\u006d\u006f\u006e\u0074\u0068\u0073":
		*_edec = 2
	case "\u0079\u0065\u0061r\u0073":
		*_edec = 3
	}
	return nil
}
func (_bcg *CT_AxDataSource) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_bcg.Choice = NewCT_AxDataSourceChoice()
_bfe:
	for {
		_fcb, _deg := d.Token()
		if _deg != nil {
			return _deg
		}
		switch _abg := _fcb.(type) {
		case _e.StartElement:
			switch _abg.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0075\u006c\u0074\u0069\u004c\u0076\u006c\u0053t\u0072\u0052\u0065\u0066"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0075\u006c\u0074\u0069\u004c\u0076\u006c\u0053t\u0072\u0052\u0065\u0066"}:
				_bcg.Choice = NewCT_AxDataSourceChoice()
				if _eag := d.DecodeElement(&_bcg.Choice.MultiLvlStrRef, &_abg); _eag != nil {
					return _eag
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0052\u0065\u0066"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0052\u0065\u0066"}:
				_bcg.Choice = NewCT_AxDataSourceChoice()
				if _gag := d.DecodeElement(&_bcg.Choice.NumRef, &_abg); _gag != nil {
					return _gag
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u004c\u0069\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u004c\u0069\u0074"}:
				_bcg.Choice = NewCT_AxDataSourceChoice()
				if _gf := d.DecodeElement(&_bcg.Choice.NumLit, &_abg); _gf != nil {
					return _gf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u0052\u0065\u0066"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u0052\u0065\u0066"}:
				_bcg.Choice = NewCT_AxDataSourceChoice()
				if _ca := d.DecodeElement(&_bcg.Choice.StrRef, &_abg); _ca != nil {
					return _ca
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u004c\u0069\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u004c\u0069\u0074"}:
				_bcg.Choice = NewCT_AxDataSourceChoice()
				if _ged := d.DecodeElement(&_bcg.Choice.StrLit, &_abg); _ged != nil {
					return _ged
				}
			default:
				_a.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074e\u0064\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0041\u0078\u0044a\u0074\u0061\u0053\u006f\u0075\u0072\u0063\u0065\u0020\u0025\u0076", _abg.Name)
				if _feg := d.Skip(); _feg != nil {
					return _feg
				}
			}
		case _e.EndElement:
			break _bfe
		case _e.CharData:
		}
	}
	return nil
}
func (_fbbcg *CT_Layout) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_geceb:
	for {
		_beaea, _egfeb := d.Token()
		if _egfeb != nil {
			return _egfeb
		}
		switch _cgab := _beaea.(type) {
		case _e.StartElement:
			switch _cgab.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006eu\u0061\u006c\u004c\u0061\u0079\u006f\u0075\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006eu\u0061\u006c\u004c\u0061\u0079\u006f\u0075\u0074"}:
				_fbbcg.ManualLayout = NewCT_ManualLayout()
				if _eaff := d.DecodeElement(_fbbcg.ManualLayout, &_cgab); _eaff != nil {
					return _eaff
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_fbbcg.ExtLst = NewCT_ExtensionList()
				if _gcgd := d.DecodeElement(_fbbcg.ExtLst, &_cgab); _gcgd != nil {
					return _gcgd
				}
			default:
				_a.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u004c\u0061\u0079o\u0075\u0074 \u0025\u0076", _cgab.Name)
				if _bcedg := d.Skip(); _bcedg != nil {
					return _bcedg
				}
			}
		case _e.EndElement:
			break _geceb
		case _e.CharData:
		}
	}
	return nil
}

// Validate validates the CT_Protection and its children
func (_adge *CT_Protection) Validate() error {
	return _adge.ValidateWithPath("\u0043\u0054\u005f\u0050\u0072\u006f\u0074\u0065\u0063\u0074\u0069\u006f\u006e")
}
func NewCT_OfPieType() *CT_OfPieType { _ccgfg := &CT_OfPieType{}; return _ccgfg }
func NewCT_MarkerStyle() *CT_MarkerStyle {
	_gdefc := &CT_MarkerStyle{}
	_gdefc.ValAttr = ST_MarkerStyle(1)
	return _gdefc
}

// Validate validates the CT_Pie3DChart and its children
func (_cdcb *CT_Pie3DChart) Validate() error {
	return _cdcb.ValidateWithPath("\u0043\u0054\u005f\u0050\u0069\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074")
}

// Validate validates the CT_Perspective and its children
func (_eacg *CT_Perspective) Validate() error {
	return _eacg.ValidateWithPath("\u0043\u0054\u005f\u0050\u0065\u0072\u0073\u0070\u0065c\u0074\u0069\u0076\u0065")
}
func (_cegbbd ST_TimeUnit) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_cegbbd.String(), start)
}

// Validate validates the CT_RadarStyle and its children
func (_ggfcf *CT_RadarStyle) Validate() error {
	return _ggfcf.ValidateWithPath("\u0043\u0054\u005f\u0052\u0061\u0064\u0061\u0072\u0053\u0074\u0079\u006c\u0065")
}

// ValidateWithPath validates the CT_PieSer and its children, prefixing error messages with path
func (_cedgb *CT_PieSer) ValidateWithPath(path string) error {
	if _dgda := _cedgb.Idx.ValidateWithPath(path + "\u002f\u0049\u0064\u0078"); _dgda != nil {
		return _dgda
	}
	if _edbb := _cedgb.Order.ValidateWithPath(path + "\u002f\u004f\u0072\u0064\u0065\u0072"); _edbb != nil {
		return _edbb
	}
	if _cedgb.Tx != nil {
		if _gcea := _cedgb.Tx.ValidateWithPath(path + "\u002f\u0054\u0078"); _gcea != nil {
			return _gcea
		}
	}
	if _cedgb.SpPr != nil {
		if _fdae := _cedgb.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _fdae != nil {
			return _fdae
		}
	}
	if _cedgb.Explosion != nil {
		if _dadgg := _cedgb.Explosion.ValidateWithPath(path + "\u002f\u0045\u0078\u0070\u006c\u006f\u0073\u0069\u006f\u006e"); _dadgg != nil {
			return _dadgg
		}
	}
	for _cbcf, _fbead := range _cedgb.DPt {
		if _gdgd := _fbead.ValidateWithPath(_b.Sprintf("\u0025\u0073\u002f\u0044\u0050\u0074\u005b\u0025\u0064\u005d", path, _cbcf)); _gdgd != nil {
			return _gdgd
		}
	}
	if _cedgb.DLbls != nil {
		if _edcc := _cedgb.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _edcc != nil {
			return _edcc
		}
	}
	if _cedgb.Cat != nil {
		if _dgfc := _cedgb.Cat.ValidateWithPath(path + "\u002f\u0043\u0061\u0074"); _dgfc != nil {
			return _dgfc
		}
	}
	if _cedgb.Val != nil {
		if _fcadc := _cedgb.Val.ValidateWithPath(path + "\u002f\u0056\u0061\u006c"); _fcadc != nil {
			return _fcadc
		}
	}
	if _cedgb.ExtLst != nil {
		if _fcggd := _cedgb.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _fcggd != nil {
			return _fcggd
		}
	}
	return nil
}
func (_bbaga *CT_RotY) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _aagd := range start.Attr {
		if _aagd.Name.Local == "\u0076\u0061\u006c" {
			_cadb, _daad := _c.ParseUint(_aagd.Value, 10, 16)
			if _daad != nil {
				return _daad
			}
			_deeeg := uint16(_cadb)
			_bbaga.ValAttr = &_deeeg
			continue
		}
	}
	for {
		_cfdae, _dfdcd := d.Token()
		if _dfdcd != nil {
			return _b.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0043\u0054\u005f\u0052\u006f\u0074\u0059\u003a\u0020\u0025\u0073", _dfdcd)
		}
		if _ecfegd, _bfaa := _cfdae.(_e.EndElement); _bfaa && _ecfegd.Name == start.Name {
			break
		}
	}
	return nil
}
func (_abad *CT_View3D) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_eefdbd:
	for {
		_ecdea, _gfgbf := d.Token()
		if _gfgbf != nil {
			return _gfgbf
		}
		switch _adaag := _ecdea.(type) {
		case _e.StartElement:
			switch _adaag.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u006f\u0074\u0058"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u006f\u0074\u0058"}:
				_abad.RotX = NewCT_RotX()
				if _gbdfb := d.DecodeElement(_abad.RotX, &_adaag); _gbdfb != nil {
					return _gbdfb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0068\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0068\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}:
				_abad.HPercent = NewCT_HPercent()
				if _cegag := d.DecodeElement(_abad.HPercent, &_adaag); _cegag != nil {
					return _cegag
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u006f\u0074\u0059"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u006f\u0074\u0059"}:
				_abad.RotY = NewCT_RotY()
				if _bcded := d.DecodeElement(_abad.RotY, &_adaag); _bcded != nil {
					return _bcded
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u0070t\u0068\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u0070t\u0068\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}:
				_abad.DepthPercent = NewCT_DepthPercent()
				if _ffdfb := d.DecodeElement(_abad.DepthPercent, &_adaag); _ffdfb != nil {
					return _ffdfb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u0041\u006e\u0067\u0041\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u0041\u006e\u0067\u0041\u0078"}:
				_abad.RAngAx = NewCT_Boolean()
				if _dggae := d.DecodeElement(_abad.RAngAx, &_adaag); _dggae != nil {
					return _dggae
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "p\u0065\u0072\u0073\u0070\u0065\u0063\u0074\u0069\u0076\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "p\u0065\u0072\u0073\u0070\u0065\u0063\u0074\u0069\u0076\u0065"}:
				_abad.Perspective = NewCT_Perspective()
				if _egdc := d.DecodeElement(_abad.Perspective, &_adaag); _egdc != nil {
					return _egdc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_abad.ExtLst = NewCT_ExtensionList()
				if _fbggb := d.DecodeElement(_abad.ExtLst, &_adaag); _fbggb != nil {
					return _fbggb
				}
			default:
				_a.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u0056\u0069\u0065w\u0033\u0044 \u0025\u0076", _adaag.Name)
				if _ccgeef := d.Skip(); _ccgeef != nil {
					return _ccgeef
				}
			}
		case _e.EndElement:
			break _eefdbd
		case _e.CharData:
		}
	}
	return nil
}
func (_facea ST_ErrDir) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_aeefd := _e.Attr{}
	_aeefd.Name = name
	switch _facea {
	case ST_ErrDirUnset:
		_aeefd.Value = ""
	case ST_ErrDirX:
		_aeefd.Value = "\u0078"
	case ST_ErrDirY:
		_aeefd.Value = "\u0079"
	}
	return _aeefd, nil
}

// ValidateWithPath validates the CT_ErrBars and its children, prefixing error messages with path
func (_aadbf *CT_ErrBars) ValidateWithPath(path string) error {
	if _aadbf.ErrDir != nil {
		if _fdcef := _aadbf.ErrDir.ValidateWithPath(path + "\u002fE\u0072\u0072\u0044\u0069\u0072"); _fdcef != nil {
			return _fdcef
		}
	}
	if _bbce := _aadbf.ErrBarType.ValidateWithPath(path + "/\u0045\u0072\u0072\u0042\u0061\u0072\u0054\u0079\u0070\u0065"); _bbce != nil {
		return _bbce
	}
	if _bfff := _aadbf.ErrValType.ValidateWithPath(path + "/\u0045\u0072\u0072\u0056\u0061\u006c\u0054\u0079\u0070\u0065"); _bfff != nil {
		return _bfff
	}
	if _aadbf.NoEndCap != nil {
		if _fedbf := _aadbf.NoEndCap.ValidateWithPath(path + "\u002fN\u006f\u0045\u006e\u0064\u0043\u0061p"); _fedbf != nil {
			return _fedbf
		}
	}
	if _aadbf.Plus != nil {
		if _geded := _aadbf.Plus.ValidateWithPath(path + "\u002f\u0050\u006cu\u0073"); _geded != nil {
			return _geded
		}
	}
	if _aadbf.Minus != nil {
		if _faff := _aadbf.Minus.ValidateWithPath(path + "\u002f\u004d\u0069\u006e\u0075\u0073"); _faff != nil {
			return _faff
		}
	}
	if _aadbf.Val != nil {
		if _dbdac := _aadbf.Val.ValidateWithPath(path + "\u002f\u0056\u0061\u006c"); _dbdac != nil {
			return _dbdac
		}
	}
	if _aadbf.SpPr != nil {
		if _cddg := _aadbf.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _cddg != nil {
			return _cddg
		}
	}
	if _aadbf.ExtLst != nil {
		if _ecce := _aadbf.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _ecce != nil {
			return _ecce
		}
	}
	return nil
}
func (_eadcd ST_ErrBarType) ValidateWithPath(path string) error {
	switch _eadcd {
	case 0, 1, 2, 3:
	default:
		return _b.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_eadcd))
	}
	return nil
}
func (_geef ST_PageSetupOrientation) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_efafb := _e.Attr{}
	_efafb.Name = name
	switch _geef {
	case ST_PageSetupOrientationUnset:
		_efafb.Value = ""
	case ST_PageSetupOrientationDefault:
		_efafb.Value = "\u0064e\u0066\u0061\u0075\u006c\u0074"
	case ST_PageSetupOrientationPortrait:
		_efafb.Value = "\u0070\u006f\u0072\u0074\u0072\u0061\u0069\u0074"
	case ST_PageSetupOrientationLandscape:
		_efafb.Value = "\u006ca\u006e\u0064\u0073\u0063\u0061\u0070e"
	}
	return _efafb, nil
}
func (_bcbf *CT_Double) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _caeb := range start.Attr {
		if _caeb.Name.Local == "\u0076\u0061\u006c" {
			_bgfee, _fcebg := _c.ParseFloat(_caeb.Value, 64)
			if _fcebg != nil {
				return _fcebg
			}
			_bcbf.ValAttr = _bgfee
			continue
		}
	}
	for {
		_cegc, _bcac := d.Token()
		if _bcac != nil {
			return _b.Errorf("p\u0061\u0072\u0073\u0069ng\u0020C\u0054\u005f\u0044\u006f\u0075b\u006c\u0065\u003a\u0020\u0025\u0073", _bcac)
		}
		if _cgda, _daee := _cegc.(_e.EndElement); _daee && _cgda.Name == start.Name {
			break
		}
	}
	return nil
}
func (_ggage *UserShapes) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_ggage.CT_Drawing = *_ba.NewCT_Drawing()
	for {
		_cadda, _cfea := d.Token()
		if _cfea != nil {
			return _b.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0055\u0073\u0065\u0072\u0053\u0068\u0061\u0070\u0065\u0073\u003a\u0020%\u0073", _cfea)
		}
		if _egbae, _bddee := _cadda.(_e.EndElement); _bddee && _egbae.Name == start.Name {
			break
		}
	}
	return nil
}

// ValidateWithPath validates the CT_ScatterSer and its children, prefixing error messages with path
func (_cdeef *CT_ScatterSer) ValidateWithPath(path string) error {
	if _accg := _cdeef.Idx.ValidateWithPath(path + "\u002f\u0049\u0064\u0078"); _accg != nil {
		return _accg
	}
	if _deeb := _cdeef.Order.ValidateWithPath(path + "\u002f\u004f\u0072\u0064\u0065\u0072"); _deeb != nil {
		return _deeb
	}
	if _cdeef.Tx != nil {
		if _ecbg := _cdeef.Tx.ValidateWithPath(path + "\u002f\u0054\u0078"); _ecbg != nil {
			return _ecbg
		}
	}
	if _cdeef.SpPr != nil {
		if _cgbce := _cdeef.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _cgbce != nil {
			return _cgbce
		}
	}
	if _cdeef.Marker != nil {
		if _edef := _cdeef.Marker.ValidateWithPath(path + "\u002fM\u0061\u0072\u006b\u0065\u0072"); _edef != nil {
			return _edef
		}
	}
	for _gbffe, _eaffg := range _cdeef.DPt {
		if _cbddf := _eaffg.ValidateWithPath(_b.Sprintf("\u0025\u0073\u002f\u0044\u0050\u0074\u005b\u0025\u0064\u005d", path, _gbffe)); _cbddf != nil {
			return _cbddf
		}
	}
	if _cdeef.DLbls != nil {
		if _dbcb := _cdeef.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _dbcb != nil {
			return _dbcb
		}
	}
	for _bbgba, _fbdgg := range _cdeef.Trendline {
		if _cacce := _fbdgg.ValidateWithPath(_b.Sprintf("\u0025\u0073/\u0054\u0072\u0065n\u0064\u006c\u0069\u006e\u0065\u005b\u0025\u0064\u005d", path, _bbgba)); _cacce != nil {
			return _cacce
		}
	}
	for _deccfb, _cdged := range _cdeef.ErrBars {
		if _aecd := _cdged.ValidateWithPath(_b.Sprintf("\u0025\u0073\u002f\u0045\u0072\u0072\u0042\u0061\u0072s\u005b\u0025\u0064\u005d", path, _deccfb)); _aecd != nil {
			return _aecd
		}
	}
	if _cdeef.XVal != nil {
		if _dfbac := _cdeef.XVal.ValidateWithPath(path + "\u002f\u0058\u0056a\u006c"); _dfbac != nil {
			return _dfbac
		}
	}
	if _cdeef.YVal != nil {
		if _cgffa := _cdeef.YVal.ValidateWithPath(path + "\u002f\u0059\u0056a\u006c"); _cgffa != nil {
			return _cgffa
		}
	}
	if _cdeef.Smooth != nil {
		if _dgbdf := _cdeef.Smooth.ValidateWithPath(path + "\u002fS\u006d\u006f\u006f\u0074\u0068"); _dgbdf != nil {
			return _dgbdf
		}
	}
	if _cdeef.ExtLst != nil {
		if _gagea := _cdeef.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _gagea != nil {
			return _gagea
		}
	}
	return nil
}

// ValidateWithPath validates the CT_MultiLvlStrData and its children, prefixing error messages with path
func (_deccg *CT_MultiLvlStrData) ValidateWithPath(path string) error {
	if _deccg.PtCount != nil {
		if _fdgg := _deccg.PtCount.ValidateWithPath(path + "\u002f\u0050\u0074\u0043\u006f\u0075\u006e\u0074"); _fdgg != nil {
			return _fdgg
		}
	}
	for _cdgc, _bdbb := range _deccg.Lvl {
		if _cbfb := _bdbb.ValidateWithPath(_b.Sprintf("\u0025\u0073\u002f\u004c\u0076\u006c\u005b\u0025\u0064\u005d", path, _cdgc)); _cbfb != nil {
			return _cbfb
		}
	}
	if _deccg.ExtLst != nil {
		if _fadge := _deccg.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _fadge != nil {
			return _fadge
		}
	}
	return nil
}
func NewCT_ExtensionList() *CT_ExtensionList { _fcegd := &CT_ExtensionList{}; return _fcegd }
func (_gbdbf *CT_NumDataSource) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_gbdbf.Choice.MarshalXML(e, _e.StartElement{})
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}
func (_bcca *CT_LegendEntryChoice) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _bcca.Delete != nil {
		_caff := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0064\u0065\u006c\u0065\u0074\u0065"}}
		e.EncodeElement(_bcca.Delete, _caff)
	}
	if _bcca.TxPr != nil {
		_bdaf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_bcca.TxPr, _bdaf)
	}
	return nil
}
func (_ggafe *CT_StrRef) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_gggdf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0066"}}
	_gb.AddPreserveSpaceAttr(&_gggdf, _ggafe.F)
	e.EncodeElement(_ggafe.F, _gggdf)
	if _ggafe.StrCache != nil {
		_dabce := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0074\u0072\u0043\u0061\u0063\u0068\u0065"}}
		e.EncodeElement(_ggafe.StrCache, _dabce)
	}
	if _ggafe.ExtLst != nil {
		_gcbfg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_ggafe.ExtLst, _gcbfg)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_NumVal and its children
func (_ggacg *CT_NumVal) Validate() error {
	return _ggacg.ValidateWithPath("\u0043T\u005f\u004e\u0075\u006d\u0056\u0061l")
}

type ST_TickMark byte

func (_aecf *CT_Bar3DChart) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_dge := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0062\u0061\u0072\u0044\u0069\u0072"}}
	e.EncodeElement(_aecf.BarDir, _dge)
	if _aecf.Grouping != nil {
		_cae := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}}
		e.EncodeElement(_aecf.Grouping, _cae)
	}
	if _aecf.VaryColors != nil {
		_acbc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_aecf.VaryColors, _acbc)
	}
	if _aecf.Ser != nil {
		_gfe := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _fec := range _aecf.Ser {
			e.EncodeElement(_fec, _gfe)
		}
	}
	if _aecf.DLbls != nil {
		_aab := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_aecf.DLbls, _aab)
	}
	if _aecf.GapWidth != nil {
		_dbee := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0067\u0061\u0070\u0057\u0069\u0064\u0074\u0068"}}
		e.EncodeElement(_aecf.GapWidth, _dbee)
	}
	if _aecf.GapDepth != nil {
		_aea := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0067\u0061\u0070\u0044\u0065\u0070\u0074\u0068"}}
		e.EncodeElement(_aecf.GapDepth, _aea)
	}
	if _aecf.Shape != nil {
		_bcce := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0073\u0068\u0061\u0070\u0065"}}
		e.EncodeElement(_aecf.Shape, _bcce)
	}
	_dded := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	for _, _cee := range _aecf.AxId {
		e.EncodeElement(_cee, _dded)
	}
	if _aecf.ExtLst != nil {
		_ffdg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_aecf.ExtLst, _ffdg)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

const ST_GapAmountPercentPattern = "0\u002a\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029|\u0028\u005b\u0031\u002d\u0039\u005d\u005b0-\u0039\u005d\u0029\u007c(\u005b\u0031\u002d\u0034\u005d\u005b\u0030\u002d\u0039][\u0030\u002d9\u005d\u0029\u007c\u0035\u0030\u0030\u0029\u0025"

// ValidateWithPath validates the CT_AxisUnit and its children, prefixing error messages with path
func (_gece *CT_AxisUnit) ValidateWithPath(path string) error {
	if _gece.ValAttr <= 0 {
		return _b.Errorf("\u0025\u0073\u002fm.\u0056\u0061\u006c\u0041\u0074\u0074\u0072\u0020\u006du\u0073t\u0020b\u0065 \u003e\u0020\u0030\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025\u0076\u0029", path, _gece.ValAttr)
	}
	return nil
}
func (_ffbab *ST_LayoutTarget) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_ffbab = 0
	case "\u0069\u006e\u006ee\u0072":
		*_ffbab = 1
	case "\u006f\u0075\u0074e\u0072":
		*_ffbab = 2
	}
	return nil
}
func NewCT_StockChart() *CT_StockChart { _ccgee := &CT_StockChart{}; return _ccgee }

type ST_Orientation byte
type CT_NumRef struct {
	F        string
	NumCache *CT_NumData
	ExtLst   *CT_ExtensionList
}

func NewCT_NumRef() *CT_NumRef { _deccf := &CT_NumRef{}; return _deccf }
func NewCT_RotX() *CT_RotX     { _bedg := &CT_RotX{}; return _bedg }

// Validate validates the CT_Overlap and its children
func (_feffc *CT_Overlap) Validate() error {
	return _feffc.ValidateWithPath("\u0043\u0054\u005f\u004f\u0076\u0065\u0072\u006c\u0061\u0070")
}

// ValidateWithPath validates the CT_Chart and its children, prefixing error messages with path
func (_ebgg *CT_Chart) ValidateWithPath(path string) error {
	if _ebgg.Title != nil {
		if _agdde := _ebgg.Title.ValidateWithPath(path + "\u002f\u0054\u0069\u0074\u006c\u0065"); _agdde != nil {
			return _agdde
		}
	}
	if _ebgg.AutoTitleDeleted != nil {
		if _cad := _ebgg.AutoTitleDeleted.ValidateWithPath(path + "\u002f\u0041\u0075\u0074\u006f\u0054\u0069\u0074\u006c\u0065\u0044\u0065l\u0065\u0074\u0065\u0064"); _cad != nil {
			return _cad
		}
	}
	if _ebgg.PivotFmts != nil {
		if _efb := _ebgg.PivotFmts.ValidateWithPath(path + "\u002f\u0050\u0069\u0076\u006f\u0074\u0046\u006d\u0074\u0073"); _efb != nil {
			return _efb
		}
	}
	if _ebgg.View3D != nil {
		if _feeb := _ebgg.View3D.ValidateWithPath(path + "\u002fV\u0069\u0065\u0077\u0033\u0044"); _feeb != nil {
			return _feeb
		}
	}
	if _ebgg.Floor != nil {
		if _cdbe := _ebgg.Floor.ValidateWithPath(path + "\u002f\u0046\u006c\u006f\u006f\u0072"); _cdbe != nil {
			return _cdbe
		}
	}
	if _ebgg.SideWall != nil {
		if _facf := _ebgg.SideWall.ValidateWithPath(path + "\u002fS\u0069\u0064\u0065\u0057\u0061\u006cl"); _facf != nil {
			return _facf
		}
	}
	if _ebgg.BackWall != nil {
		if _cbfa := _ebgg.BackWall.ValidateWithPath(path + "\u002fB\u0061\u0063\u006b\u0057\u0061\u006cl"); _cbfa != nil {
			return _cbfa
		}
	}
	if _bfga := _ebgg.PlotArea.ValidateWithPath(path + "\u002fP\u006c\u006f\u0074\u0041\u0072\u0065a"); _bfga != nil {
		return _bfga
	}
	if _ebgg.Legend != nil {
		if _gdgb := _ebgg.Legend.ValidateWithPath(path + "\u002fL\u0065\u0067\u0065\u006e\u0064"); _gdgb != nil {
			return _gdgb
		}
	}
	if _ebgg.PlotVisOnly != nil {
		if _fabf := _ebgg.PlotVisOnly.ValidateWithPath(path + "\u002f\u0050\u006co\u0074\u0056\u0069\u0073\u004f\u006e\u006c\u0079"); _fabf != nil {
			return _fabf
		}
	}
	if _ebgg.DispBlanksAs != nil {
		if _ecbb := _ebgg.DispBlanksAs.ValidateWithPath(path + "\u002f\u0044\u0069\u0073\u0070\u0042\u006c\u0061\u006e\u006b\u0073\u0041\u0073"); _ecbb != nil {
			return _ecbb
		}
	}
	if _ebgg.ShowDLblsOverMax != nil {
		if _gdc := _ebgg.ShowDLblsOverMax.ValidateWithPath(path + "\u002f\u0053\u0068\u006f\u0077\u0044\u004c\u0062\u006c\u0073\u004f\u0076e\u0072\u004d\u0061\u0078"); _gdc != nil {
			return _gdc
		}
	}
	if _ebgg.ExtLst != nil {
		if _agb := _ebgg.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _agb != nil {
			return _agb
		}
	}
	return nil
}
func NewCT_PictureOptions() *CT_PictureOptions { _eccc := &CT_PictureOptions{}; return _eccc }
func (_fggc *CT_Extension) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _fggc.UriAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0075\u0072\u0069"}, Value: _b.Sprintf("\u0025\u0076", *_fggc.UriAttr)})
	}
	e.EncodeToken(start)
	if _fggc.Any != nil {
		_fggc.Any.MarshalXML(e, _e.StartElement{})
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}
func (_cgaf *CT_View3D) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _cgaf.RotX != nil {
		_ggddg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0072\u006f\u0074\u0058"}}
		e.EncodeElement(_cgaf.RotX, _ggddg)
	}
	if _cgaf.HPercent != nil {
		_dcgbd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0068\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}}
		e.EncodeElement(_cgaf.HPercent, _dcgbd)
	}
	if _cgaf.RotY != nil {
		_bgca := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0072\u006f\u0074\u0059"}}
		e.EncodeElement(_cgaf.RotY, _bgca)
	}
	if _cgaf.DepthPercent != nil {
		_cdccg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0064\u0065\u0070\u0074\u0068\u0050\u0065r\u0063\u0065\u006e\u0074"}}
		e.EncodeElement(_cgaf.DepthPercent, _cdccg)
	}
	if _cgaf.RAngAx != nil {
		_gfbed := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0072\u0041\u006e\u0067\u0041\u0078"}}
		e.EncodeElement(_cgaf.RAngAx, _gfbed)
	}
	if _cgaf.Perspective != nil {
		_dgdbd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0070\u0065\u0072\u0073\u0070\u0065\u0063\u0074\u0069\u0076\u0065"}}
		e.EncodeElement(_cgaf.Perspective, _dgdbd)
	}
	if _cgaf.ExtLst != nil {
		_cccad := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_cgaf.ExtLst, _cccad)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

const (
	ST_DispBlanksAsUnset ST_DispBlanksAs = 0
	ST_DispBlanksAsSpan  ST_DispBlanksAs = 1
	ST_DispBlanksAsGap   ST_DispBlanksAs = 2
	ST_DispBlanksAsZero  ST_DispBlanksAs = 3
)

type CT_TxChoice struct {
	StrRef *CT_StrRef
	Rich   *_f.CT_TextBody
}

func (_bfgba *CT_Surface3DChart) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _bfgba.Wireframe != nil {
		_agfgf := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0077\u0069\u0072\u0065\u0066\u0072\u0061\u006d\u0065"}}
		e.EncodeElement(_bfgba.Wireframe, _agfgf)
	}
	if _bfgba.Ser != nil {
		_ggade := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _ccfbe := range _bfgba.Ser {
			e.EncodeElement(_ccfbe, _ggade)
		}
	}
	if _bfgba.BandFmts != nil {
		_ebcf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0062\u0061\u006e\u0064\u0046\u006d\u0074\u0073"}}
		e.EncodeElement(_bfgba.BandFmts, _ebcf)
	}
	_fcbfd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	for _, _eedfb := range _bfgba.AxId {
		e.EncodeElement(_eedfb, _fcbfd)
	}
	if _bfgba.ExtLst != nil {
		_cegfe := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_bfgba.ExtLst, _cegfe)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_BarChart and its children
func (_eebb *CT_BarChart) Validate() error {
	return _eebb.ValidateWithPath("C\u0054\u005f\u0042\u0061\u0072\u0043\u0068\u0061\u0072\u0074")
}
func (_gebb *CT_DTable) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_feddd:
	for {
		_aeeb, _dffc := d.Token()
		if _dffc != nil {
			return _dffc
		}
		switch _dfed := _aeeb.(type) {
		case _e.StartElement:
			switch _dfed.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0048\u006f\u0072\u007a\u0042o\u0072\u0064\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0048\u006f\u0072\u007a\u0042o\u0072\u0064\u0065\u0072"}:
				_gebb.ShowHorzBorder = NewCT_Boolean()
				if _afggb := d.DecodeElement(_gebb.ShowHorzBorder, &_dfed); _afggb != nil {
					return _afggb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0056\u0065\u0072\u0074\u0042o\u0072\u0064\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0056\u0065\u0072\u0074\u0042o\u0072\u0064\u0065\u0072"}:
				_gebb.ShowVertBorder = NewCT_Boolean()
				if _ebad := d.DecodeElement(_gebb.ShowVertBorder, &_dfed); _ebad != nil {
					return _ebad
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u004f\u0075\u0074\u006c\u0069\u006e\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u004f\u0075\u0074\u006c\u0069\u006e\u0065"}:
				_gebb.ShowOutline = NewCT_Boolean()
				if _eebbg := d.DecodeElement(_gebb.ShowOutline, &_dfed); _eebbg != nil {
					return _eebbg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004b\u0065\u0079\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004b\u0065\u0079\u0073"}:
				_gebb.ShowKeys = NewCT_Boolean()
				if _cddb := d.DecodeElement(_gebb.ShowKeys, &_dfed); _cddb != nil {
					return _cddb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_gebb.SpPr = _f.NewCT_ShapeProperties()
				if _bdcee := d.DecodeElement(_gebb.SpPr, &_dfed); _bdcee != nil {
					return _bdcee
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_gebb.TxPr = _f.NewCT_TextBody()
				if _fdcee := d.DecodeElement(_gebb.TxPr, &_dfed); _fdcee != nil {
					return _fdcee
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_gebb.ExtLst = NewCT_ExtensionList()
				if _acgd := d.DecodeElement(_gebb.ExtLst, &_dfed); _acgd != nil {
					return _acgd
				}
			default:
				_a.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u0044\u0054\u0061b\u006c\u0065 \u0025\u0076", _dfed.Name)
				if _beeg := d.Skip(); _beeg != nil {
					return _beeg
				}
			}
		case _e.EndElement:
			break _feddd
		case _e.CharData:
		}
	}
	return nil
}

type CT_HoleSize struct{ ValAttr *ST_HoleSize }

// ValidateWithPath validates the CT_AreaSer and its children, prefixing error messages with path
func (_abd *CT_AreaSer) ValidateWithPath(path string) error {
	if _bab := _abd.Idx.ValidateWithPath(path + "\u002f\u0049\u0064\u0078"); _bab != nil {
		return _bab
	}
	if _fdf := _abd.Order.ValidateWithPath(path + "\u002f\u004f\u0072\u0064\u0065\u0072"); _fdf != nil {
		return _fdf
	}
	if _abd.Tx != nil {
		if _ecd := _abd.Tx.ValidateWithPath(path + "\u002f\u0054\u0078"); _ecd != nil {
			return _ecd
		}
	}
	if _abd.SpPr != nil {
		if _ead := _abd.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _ead != nil {
			return _ead
		}
	}
	if _abd.PictureOptions != nil {
		if _fdd := _abd.PictureOptions.ValidateWithPath(path + "\u002fP\u0069c\u0074\u0075\u0072\u0065\u004f\u0070\u0074\u0069\u006f\u006e\u0073"); _fdd != nil {
			return _fdd
		}
	}
	for _fggg, _afg := range _abd.DPt {
		if _fcc := _afg.ValidateWithPath(_b.Sprintf("\u0025\u0073\u002f\u0044\u0050\u0074\u005b\u0025\u0064\u005d", path, _fggg)); _fcc != nil {
			return _fcc
		}
	}
	if _abd.DLbls != nil {
		if _ggb := _abd.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _ggb != nil {
			return _ggb
		}
	}
	for _fcf, _dc := range _abd.Trendline {
		if _gac := _dc.ValidateWithPath(_b.Sprintf("\u0025\u0073/\u0054\u0072\u0065n\u0064\u006c\u0069\u006e\u0065\u005b\u0025\u0064\u005d", path, _fcf)); _gac != nil {
			return _gac
		}
	}
	for _bff, _gcg := range _abd.ErrBars {
		if _daf := _gcg.ValidateWithPath(_b.Sprintf("\u0025\u0073\u002f\u0045\u0072\u0072\u0042\u0061\u0072s\u005b\u0025\u0064\u005d", path, _bff)); _daf != nil {
			return _daf
		}
	}
	if _abd.Cat != nil {
		if _bgf := _abd.Cat.ValidateWithPath(path + "\u002f\u0043\u0061\u0074"); _bgf != nil {
			return _bgf
		}
	}
	if _abd.Val != nil {
		if _cdg := _abd.Val.ValidateWithPath(path + "\u002f\u0056\u0061\u006c"); _cdg != nil {
			return _cdg
		}
	}
	if _abd.ExtLst != nil {
		if _ada := _abd.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _ada != nil {
			return _ada
		}
	}
	return nil
}

// Validate validates the CT_TickLblPos and its children
func (_bdbca *CT_TickLblPos) Validate() error {
	return _bdbca.ValidateWithPath("\u0043\u0054\u005f\u0054\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073")
}
func (_ec *CT_Area3DChart) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_fbc:
	for {
		_ac, _ea := d.Token()
		if _ea != nil {
			return _ea
		}
		switch _fa := _ac.(type) {
		case _e.StartElement:
			switch _fa.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}:
				_ec.Grouping = NewCT_Grouping()
				if _cf := d.DecodeElement(_ec.Grouping, &_fa); _cf != nil {
					return _cf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_ec.VaryColors = NewCT_Boolean()
				if _ff := d.DecodeElement(_ec.VaryColors, &_fa); _ff != nil {
					return _ff
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_gbb := NewCT_AreaSer()
				if _acb := d.DecodeElement(_gbb, &_fa); _acb != nil {
					return _acb
				}
				_ec.Ser = append(_ec.Ser, _gbb)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_ec.DLbls = NewCT_DLbls()
				if _eg := d.DecodeElement(_ec.DLbls, &_fa); _eg != nil {
					return _eg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064r\u006f\u0070\u004c\u0069\u006e\u0065s"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064r\u006f\u0070\u004c\u0069\u006e\u0065s"}:
				_ec.DropLines = NewCT_ChartLines()
				if _eb := d.DecodeElement(_ec.DropLines, &_fa); _eb != nil {
					return _eb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0061\u0070\u0044\u0065\u0070\u0074\u0068"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0061\u0070\u0044\u0065\u0070\u0074\u0068"}:
				_ec.GapDepth = NewCT_GapAmount()
				if _eda := d.DecodeElement(_ec.GapDepth, &_fa); _eda != nil {
					return _eda
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				_gce := NewCT_UnsignedInt()
				if _ede := d.DecodeElement(_gce, &_fa); _ede != nil {
					return _ede
				}
				_ec.AxId = append(_ec.AxId, _gce)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_ec.ExtLst = NewCT_ExtensionList()
				if _ge := d.DecodeElement(_ec.ExtLst, &_fa); _ge != nil {
					return _ge
				}
			default:
				_a.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069n\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006et\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0041\u0072\u0065\u0061\u0033\u0044\u0043h\u0061r\u0074\u0020\u0025\u0076", _fa.Name)
				if _bf := d.Skip(); _bf != nil {
					return _bf
				}
			}
		case _e.EndElement:
			break _fbc
		case _e.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_StrData and its children, prefixing error messages with path
func (_acecf *CT_StrData) ValidateWithPath(path string) error {
	if _acecf.PtCount != nil {
		if _aadbg := _acecf.PtCount.ValidateWithPath(path + "\u002f\u0050\u0074\u0043\u006f\u0075\u006e\u0074"); _aadbg != nil {
			return _aadbg
		}
	}
	for _cddbf, _dffca := range _acecf.Pt {
		if _ebgfg := _dffca.ValidateWithPath(_b.Sprintf("\u0025s\u002f\u0050\u0074\u005b\u0025\u0064]", path, _cddbf)); _ebgfg != nil {
			return _ebgfg
		}
	}
	if _acecf.ExtLst != nil {
		if _dcbed := _acecf.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _dcbed != nil {
			return _dcbed
		}
	}
	return nil
}
func NewCT_DLbl() *CT_DLbl { _feebd := &CT_DLbl{}; _feebd.Idx = NewCT_UnsignedInt(); return _feebd }
func (_dcdg ST_LblAlgn) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_dcdg.String(), start)
}

// ValidateWithPath validates the CT_PivotFmt and its children, prefixing error messages with path
func (_adcf *CT_PivotFmt) ValidateWithPath(path string) error {
	if _egfa := _adcf.Idx.ValidateWithPath(path + "\u002f\u0049\u0064\u0078"); _egfa != nil {
		return _egfa
	}
	if _adcf.SpPr != nil {
		if _gdag := _adcf.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _gdag != nil {
			return _gdag
		}
	}
	if _adcf.TxPr != nil {
		if _bcdba := _adcf.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _bcdba != nil {
			return _bcdba
		}
	}
	if _adcf.Marker != nil {
		if _ageed := _adcf.Marker.ValidateWithPath(path + "\u002fM\u0061\u0072\u006b\u0065\u0072"); _ageed != nil {
			return _ageed
		}
	}
	if _adcf.DLbl != nil {
		if _fcgab := _adcf.DLbl.ValidateWithPath(path + "\u002f\u0044\u004cb\u006c"); _fcgab != nil {
			return _fcgab
		}
	}
	if _adcf.ExtLst != nil {
		if _cccg := _adcf.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _cccg != nil {
			return _cccg
		}
	}
	return nil
}

// ValidateWithPath validates the CT_Style and its children, prefixing error messages with path
func (_fbcdb *CT_Style) ValidateWithPath(path string) error {
	if _fbcdb.ValAttr < 1 {
		return _b.Errorf("%\u0073\u002f\u006d\u002e\u0056\u0061l\u0041\u0074\u0074\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u003e=\u0020\u0031\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, _fbcdb.ValAttr)
	}
	if _fbcdb.ValAttr > 48 {
		return _b.Errorf("\u0025\u0073/m\u002e\u0056\u0061l\u0041\u0074\u0074\u0072 mu\u0073t \u0062\u0065\u0020\u003c\u003d\u0020\u00348 \u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, _fbcdb.ValAttr)
	}
	return nil
}

type CT_PlotAreaChoice1 struct {
	ValAx  []*CT_ValAx
	CatAx  []*CT_CatAx
	DateAx []*CT_DateAx
	SerAx  []*CT_SerAx
}
type CT_OfPieChart struct {
	OfPieType     *CT_OfPieType
	VaryColors    *CT_Boolean
	Ser           []*CT_PieSer
	DLbls         *CT_DLbls
	GapWidth      *CT_GapAmount
	SplitType     *CT_SplitType
	SplitPos      *CT_Double
	CustSplit     *CT_CustSplit
	SecondPieSize *CT_SecondPieSize
	SerLines      []*CT_ChartLines
	ExtLst        *CT_ExtensionList
}

func (_dffb *CT_ExtensionList) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _dffb.Ext != nil {
		_cgdeg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065x\u0074"}}
		for _, _eabg := range _dffb.Ext {
			e.EncodeElement(_eabg, _cgdeg)
		}
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}
func (_cbbfb ST_Crosses) ValidateWithPath(path string) error {
	switch _cbbfb {
	case 0, 1, 2, 3:
	default:
		return _b.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_cbbfb))
	}
	return nil
}
func NewCT_Legend() *CT_Legend { _afabe := &CT_Legend{}; return _afabe }

const (
	ST_DLblPosUnset   ST_DLblPos = 0
	ST_DLblPosBestFit ST_DLblPos = 1
	ST_DLblPosB       ST_DLblPos = 2
	ST_DLblPosCtr     ST_DLblPos = 3
	ST_DLblPosInBase  ST_DLblPos = 4
	ST_DLblPosInEnd   ST_DLblPos = 5
	ST_DLblPosL       ST_DLblPos = 6
	ST_DLblPosOutEnd  ST_DLblPos = 7
	ST_DLblPosR       ST_DLblPos = 8
	ST_DLblPosT       ST_DLblPos = 9
)

// Validate validates the CT_NumDataSourceChoice and its children
func (_deec *CT_NumDataSourceChoice) Validate() error {
	return _deec.ValidateWithPath("\u0043\u0054\u005f\u004eum\u0044\u0061\u0074\u0061\u0053\u006f\u0075\u0072\u0063\u0065\u0043\u0068\u006f\u0069c\u0065")
}
func NewCT_LogBase() *CT_LogBase { _bggd := &CT_LogBase{}; _bggd.ValAttr = 2; return _bggd }

// Validate validates the CT_Surface and its children
func (_dcgbf *CT_Surface) Validate() error {
	return _dcgbf.ValidateWithPath("\u0043\u0054\u005f\u0053\u0075\u0072\u0066\u0061\u0063\u0065")
}

// ValidateWithPath validates the CT_LayoutTarget and its children, prefixing error messages with path
func (_dfdc *CT_LayoutTarget) ValidateWithPath(path string) error {
	if _baec := _dfdc.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _baec != nil {
		return _baec
	}
	return nil
}
func (_fggfg *ST_LayoutMode) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_fggfg = 0
	case "\u0065\u0064\u0067\u0065":
		*_fggfg = 1
	case "\u0066\u0061\u0063\u0074\u006f\u0072":
		*_fggfg = 2
	}
	return nil
}

type CT_Protection struct {
	ChartObject   *CT_Boolean
	Data          *CT_Boolean
	Formatting    *CT_Boolean
	Selection     *CT_Boolean
	UserInterface *CT_Boolean
}

func (_dcec *CT_RadarStyle) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _dcec.ValAttr != ST_RadarStyleUnset {
		_agcfe, _gagfb := _dcec.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
		if _gagfb != nil {
			return _gagfb
		}
		start.Attr = append(start.Attr, _agcfe)
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_HeaderFooter and its children
func (_eaed *CT_HeaderFooter) Validate() error {
	return _eaed.ValidateWithPath("\u0043T\u005fH\u0065\u0061\u0064\u0065\u0072\u0046\u006f\u006f\u0074\u0065\u0072")
}

type CT_SerAx struct {
	AxId           *CT_UnsignedInt
	Scaling        *CT_Scaling
	Delete         *CT_Boolean
	AxPos          *CT_AxPos
	MajorGridlines *CT_ChartLines
	MinorGridlines *CT_ChartLines
	Title          *CT_Title
	NumFmt         *CT_NumFmt
	MajorTickMark  *CT_TickMark
	MinorTickMark  *CT_TickMark
	TickLblPos     *CT_TickLblPos
	SpPr           *_f.CT_ShapeProperties
	TxPr           *_f.CT_TextBody
	CrossAx        *CT_UnsignedInt
	Choice         *EG_AxSharedChoice
	TickLblSkip    *CT_Skip
	TickMarkSkip   *CT_Skip
	ExtLst         *CT_ExtensionList
}

// Validate validates the CT_NumDataSource and its children
func (_cfgcg *CT_NumDataSource) Validate() error {
	return _cfgcg.ValidateWithPath("\u0043\u0054_\u004e\u0075\u006dD\u0061\u0074\u0061\u0053\u006f\u0075\u0072\u0063\u0065")
}
func NewCT_ScatterStyle() *CT_ScatterStyle { _gcgg := &CT_ScatterStyle{}; return _gcgg }
func (_cfacb *CT_MarkerSize) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _cfacb.ValAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0076\u0061\u006c"}, Value: _b.Sprintf("\u0025\u0076", *_cfacb.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}
func NewCT_RelId() *CT_RelId { _egef := &CT_RelId{}; return _egef }

// Validate validates the Chart and its children
func (_dgdag *Chart) Validate() error { return _dgdag.ValidateWithPath("\u0043\u0068\u0061r\u0074") }
func (_edgf ST_TrendlineType) String() string {
	switch _edgf {
	case 0:
		return ""
	case 1:
		return "\u0065\u0078\u0070"
	case 2:
		return "\u006c\u0069\u006e\u0065\u0061\u0072"
	case 3:
		return "\u006c\u006f\u0067"
	case 4:
		return "\u006do\u0076\u0069\u006e\u0067\u0041\u0076g"
	case 5:
		return "\u0070\u006f\u006c\u0079"
	case 6:
		return "\u0070\u006f\u0077e\u0072"
	}
	return ""
}
func (_cgbfc *ST_DispBlanksAs) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_cgbfc = 0
	case "\u0073\u0070\u0061\u006e":
		*_cgbfc = 1
	case "\u0067\u0061\u0070":
		*_cgbfc = 2
	case "\u007a\u0065\u0072\u006f":
		*_cgbfc = 3
	}
	return nil
}
func (_bfebc *EG_SerShared) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_bfebc.Idx = NewCT_UnsignedInt()
	_bfebc.Order = NewCT_UnsignedInt()
_bfafc:
	for {
		_fcgaba, _fbbce := d.Token()
		if _fbbce != nil {
			return _fbbce
		}
		switch _fccd := _fcgaba.(type) {
		case _e.StartElement:
			switch _fccd.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}:
				if _gcadc := d.DecodeElement(_bfebc.Idx, &_fccd); _gcadc != nil {
					return _gcadc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}:
				if _faea := d.DecodeElement(_bfebc.Order, &_fccd); _faea != nil {
					return _faea
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				_bfebc.Tx = NewCT_SerTx()
				if _bbbce := d.DecodeElement(_bfebc.Tx, &_fccd); _bbbce != nil {
					return _bbbce
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_bfebc.SpPr = _f.NewCT_ShapeProperties()
				if _daebd := d.DecodeElement(_bfebc.SpPr, &_fccd); _daebd != nil {
					return _daebd
				}
			default:
				_a.Log.Debug("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075n\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0045\u0047_S\u0065\u0072S\u0068\u0061\u0072\u0065\u0064\u0020\u0025\u0076", _fccd.Name)
				if _aacd := d.Skip(); _aacd != nil {
					return _aacd
				}
			}
		case _e.EndElement:
			break _bfafc
		case _e.CharData:
		}
	}
	return nil
}

// Validate validates the CT_Bar3DChart and its children
func (_fbe *CT_Bar3DChart) Validate() error {
	return _fbe.ValidateWithPath("\u0043\u0054\u005f\u0042\u0061\u0072\u0033\u0044\u0043\u0068\u0061\u0072\u0074")
}

type CT_ScatterSer struct {
	Idx       *CT_UnsignedInt
	Order     *CT_UnsignedInt
	Tx        *CT_SerTx
	SpPr      *_f.CT_ShapeProperties
	Marker    *CT_Marker
	DPt       []*CT_DPt
	DLbls     *CT_DLbls
	Trendline []*CT_Trendline
	ErrBars   []*CT_ErrBars
	XVal      *CT_AxDataSource
	YVal      *CT_NumDataSource
	Smooth    *CT_Boolean
	ExtLst    *CT_ExtensionList
}

func (_ebade *CT_Scaling) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _ebade.LogBase != nil {
		_gadbd := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006c\u006f\u0067\u0042\u0061\u0073e"}}
		e.EncodeElement(_ebade.LogBase, _gadbd)
	}
	if _ebade.Orientation != nil {
		_fdab := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006f\u0072\u0069\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e"}}
		e.EncodeElement(_ebade.Orientation, _fdab)
	}
	if _ebade.Max != nil {
		_fgfcg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006da\u0078"}}
		e.EncodeElement(_ebade.Max, _fgfcg)
	}
	if _ebade.Min != nil {
		_fbebf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006di\u006e"}}
		e.EncodeElement(_ebade.Min, _fbebf)
	}
	if _ebade.ExtLst != nil {
		_bcegd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_ebade.ExtLst, _bcegd)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}
func (_beegg ST_GapAmount) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _beegg.ST_GapAmountPercent != nil {
		e.EncodeToken(_e.CharData(*_beegg.ST_GapAmountPercent))
	}
	if _beegg.ST_GapAmountUShort != nil {
		e.EncodeToken(_e.CharData(_b.Sprintf("\u0025\u0064", *_beegg.ST_GapAmountUShort)))
	}
	return e.EncodeToken(_e.EndElement{Name: start.Name})
}
func (_ggega *CT_LogBase) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_ggega.ValAttr = 2
	for _, _fgdfa := range start.Attr {
		if _fgdfa.Name.Local == "\u0076\u0061\u006c" {
			_eabd, _fdfaf := _c.ParseFloat(_fgdfa.Value, 64)
			if _fdfaf != nil {
				return _fdfaf
			}
			_ggega.ValAttr = _eabd
			continue
		}
	}
	for {
		_eaccc, _befcg := d.Token()
		if _befcg != nil {
			return _b.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0043\u0054\u005f\u004c\u006f\u0067\u0042\u0061\u0073\u0065\u003a\u0020%\u0073", _befcg)
		}
		if _dcba, _agec := _eaccc.(_e.EndElement); _agec && _dcba.Name == start.Name {
			break
		}
	}
	return nil
}

// ValidateWithPath validates the CT_ManualLayout and its children, prefixing error messages with path
func (_gbaca *CT_ManualLayout) ValidateWithPath(path string) error {
	if _gbaca.LayoutTarget != nil {
		if _affe := _gbaca.LayoutTarget.ValidateWithPath(path + "\u002f\u004c\u0061\u0079\u006f\u0075\u0074\u0054\u0061\u0072\u0067\u0065\u0074"); _affe != nil {
			return _affe
		}
	}
	if _gbaca.XMode != nil {
		if _dfgbe := _gbaca.XMode.ValidateWithPath(path + "\u002f\u0058\u004d\u006f\u0064\u0065"); _dfgbe != nil {
			return _dfgbe
		}
	}
	if _gbaca.YMode != nil {
		if _adde := _gbaca.YMode.ValidateWithPath(path + "\u002f\u0059\u004d\u006f\u0064\u0065"); _adde != nil {
			return _adde
		}
	}
	if _gbaca.WMode != nil {
		if _geaa := _gbaca.WMode.ValidateWithPath(path + "\u002f\u0057\u004d\u006f\u0064\u0065"); _geaa != nil {
			return _geaa
		}
	}
	if _gbaca.HMode != nil {
		if _ecfeg := _gbaca.HMode.ValidateWithPath(path + "\u002f\u0048\u004d\u006f\u0064\u0065"); _ecfeg != nil {
			return _ecfeg
		}
	}
	if _gbaca.X != nil {
		if _ecgc := _gbaca.X.ValidateWithPath(path + "\u002f\u0058"); _ecgc != nil {
			return _ecgc
		}
	}
	if _gbaca.Y != nil {
		if _bdged := _gbaca.Y.ValidateWithPath(path + "\u002f\u0059"); _bdged != nil {
			return _bdged
		}
	}
	if _gbaca.W != nil {
		if _degcb := _gbaca.W.ValidateWithPath(path + "\u002f\u0057"); _degcb != nil {
			return _degcb
		}
	}
	if _gbaca.H != nil {
		if _adgfe := _gbaca.H.ValidateWithPath(path + "\u002f\u0048"); _adgfe != nil {
			return _adgfe
		}
	}
	if _gbaca.ExtLst != nil {
		if _accd := _gbaca.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _accd != nil {
			return _accd
		}
	}
	return nil
}

type ST_ErrBarType byte

func NewCT_PlotAreaChoice1() *CT_PlotAreaChoice1 { _dfecc := &CT_PlotAreaChoice1{}; return _dfecc }
func (_aecg *CT_Style) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0076\u0061\u006c"}, Value: _b.Sprintf("\u0025\u0076", _aecg.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

type CT_HeaderFooter struct {
	AlignWithMarginsAttr *bool
	DifferentOddEvenAttr *bool
	DifferentFirstAttr   *bool
	OddHeader            *string
	OddFooter            *string
	EvenHeader           *string
	EvenFooter           *string
	FirstHeader          *string
	FirstFooter          *string
}

func NewCT_TickMark() *CT_TickMark { _caaeg := &CT_TickMark{}; return _caaeg }

// ValidateWithPath validates the Group_DLbls and its children, prefixing error messages with path
func (_gfbdf *Group_DLbls) ValidateWithPath(path string) error {
	if _gfbdf.NumFmt != nil {
		if _ffcdg := _gfbdf.NumFmt.ValidateWithPath(path + "\u002fN\u0075\u006d\u0046\u006d\u0074"); _ffcdg != nil {
			return _ffcdg
		}
	}
	if _gfbdf.SpPr != nil {
		if _edbc := _gfbdf.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _edbc != nil {
			return _edbc
		}
	}
	if _gfbdf.TxPr != nil {
		if _becbf := _gfbdf.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _becbf != nil {
			return _becbf
		}
	}
	if _gfbdf.DLblPos != nil {
		if _fgdbcb := _gfbdf.DLblPos.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0050\u006f\u0073"); _fgdbcb != nil {
			return _fgdbcb
		}
	}
	if _gfbdf.ShowLegendKey != nil {
		if _facffb := _gfbdf.ShowLegendKey.ValidateWithPath(path + "\u002f\u0053\u0068\u006f\u0077\u004c\u0065\u0067\u0065n\u0064\u004b\u0065\u0079"); _facffb != nil {
			return _facffb
		}
	}
	if _gfbdf.ShowVal != nil {
		if _bedff := _gfbdf.ShowVal.ValidateWithPath(path + "\u002f\u0053\u0068\u006f\u0077\u0056\u0061\u006c"); _bedff != nil {
			return _bedff
		}
	}
	if _gfbdf.ShowCatName != nil {
		if _becbe := _gfbdf.ShowCatName.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"); _becbe != nil {
			return _becbe
		}
	}
	if _gfbdf.ShowSerName != nil {
		if _bbgf := _gfbdf.ShowSerName.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"); _bbgf != nil {
			return _bbgf
		}
	}
	if _gfbdf.ShowPercent != nil {
		if _bgaa := _gfbdf.ShowPercent.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"); _bgaa != nil {
			return _bgaa
		}
	}
	if _gfbdf.ShowBubbleSize != nil {
		if _feffb := _gfbdf.ShowBubbleSize.ValidateWithPath(path + "\u002fS\u0068o\u0077\u0042\u0075\u0062\u0062\u006c\u0065\u0053\u0069\u007a\u0065"); _feffb != nil {
			return _feffb
		}
	}
	if _gfbdf.ShowLeaderLines != nil {
		if _fdcbd := _gfbdf.ShowLeaderLines.ValidateWithPath(path + "\u002f\u0053h\u006f\u0077\u004ce\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"); _fdcbd != nil {
			return _fdcbd
		}
	}
	if _gfbdf.LeaderLines != nil {
		if _fdfae := _gfbdf.LeaderLines.ValidateWithPath(path + "\u002f\u004c\u0065a\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"); _fdfae != nil {
			return _fdfae
		}
	}
	return nil
}

const (
	ST_RadarStyleUnset    ST_RadarStyle = 0
	ST_RadarStyleStandard ST_RadarStyle = 1
	ST_RadarStyleMarker   ST_RadarStyle = 2
	ST_RadarStyleFilled   ST_RadarStyle = 3
)

func (_cgfdgg ST_SplitType) Validate() error { return _cgfdgg.ValidateWithPath("") }
func (_bcgcf ST_DLblPos) ValidateWithPath(path string) error {
	switch _bcgcf {
	case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9:
	default:
		return _b.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_bcgcf))
	}
	return nil
}

// Validate validates the CT_PictureStackUnit and its children
func (_dcfe *CT_PictureStackUnit) Validate() error {
	return _dcfe.ValidateWithPath("\u0043\u0054\u005f\u0050ic\u0074\u0075\u0072\u0065\u0053\u0074\u0061\u0063\u006b\u0055\u006e\u0069\u0074")
}

type CT_TickLblPos struct{ ValAttr ST_TickLblPos }

func (_ffddg *CT_ErrValType) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _bcag := range start.Attr {
		if _bcag.Name.Local == "\u0076\u0061\u006c" {
			_ffddg.ValAttr.UnmarshalXMLAttr(_bcag)
			continue
		}
	}
	for {
		_fbgg, _fdbe := d.Token()
		if _fdbe != nil {
			return _b.Errorf("\u0070a\u0072\u0073\u0069\u006eg\u0020\u0043\u0054\u005f\u0045r\u0072V\u0061l\u0054\u0079\u0070\u0065\u003a\u0020\u0025s", _fdbe)
		}
		if _ecab, _cfcc := _fbgg.(_e.EndElement); _cfcc && _ecab.Name == start.Name {
			break
		}
	}
	return nil
}
func NewCT_LayoutMode() *CT_LayoutMode { _aadg := &CT_LayoutMode{}; return _aadg }
func (_acfdf *CT_SerAx) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_cbafe := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	e.EncodeElement(_acfdf.AxId, _cbafe)
	_addc := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0073\u0063\u0061\u006c\u0069\u006eg"}}
	e.EncodeElement(_acfdf.Scaling, _addc)
	if _acfdf.Delete != nil {
		_aabd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0064\u0065\u006c\u0065\u0074\u0065"}}
		e.EncodeElement(_acfdf.Delete, _aabd)
	}
	_cbacf := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0061\u0078\u0050\u006f\u0073"}}
	e.EncodeElement(_acfdf.AxPos, _cbacf)
	if _acfdf.MajorGridlines != nil {
		_bfef := _e.StartElement{Name: _e.Name{Local: "\u0063\u003am\u0061\u006a\u006fr\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_acfdf.MajorGridlines, _bfef)
	}
	if _acfdf.MinorGridlines != nil {
		_gfbb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003am\u0069\u006e\u006fr\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_acfdf.MinorGridlines, _gfbb)
	}
	if _acfdf.Title != nil {
		_bage := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0074\u0069\u0074\u006c\u0065"}}
		e.EncodeElement(_acfdf.Title, _bage)
	}
	if _acfdf.NumFmt != nil {
		_cgecf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u0046\u006d\u0074"}}
		e.EncodeElement(_acfdf.NumFmt, _cgecf)
	}
	if _acfdf.MajorTickMark != nil {
		_bdgg := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006da\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}}
		e.EncodeElement(_acfdf.MajorTickMark, _bdgg)
	}
	if _acfdf.MinorTickMark != nil {
		_cffg := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006di\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}}
		e.EncodeElement(_acfdf.MinorTickMark, _cffg)
	}
	if _acfdf.TickLblPos != nil {
		_aeecb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074i\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}}
		e.EncodeElement(_acfdf.TickLblPos, _aeecb)
	}
	if _acfdf.SpPr != nil {
		_ebcgd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_acfdf.SpPr, _ebcgd)
	}
	if _acfdf.TxPr != nil {
		_eeeca := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_acfdf.TxPr, _eeeca)
	}
	_dccdb := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0063\u0072\u006f\u0073\u0073\u0041x"}}
	e.EncodeElement(_acfdf.CrossAx, _dccdb)
	if _acfdf.Choice != nil {
		_acfdf.Choice.MarshalXML(e, _e.StartElement{})
	}
	if _acfdf.TickLblSkip != nil {
		_ddcee := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0069\u0063\u006b\u004c\u0062\u006c\u0053\u006b\u0069\u0070"}}
		e.EncodeElement(_acfdf.TickLblSkip, _ddcee)
	}
	if _acfdf.TickMarkSkip != nil {
		_bdef := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0069\u0063\u006b\u004d\u0061\u0072k\u0053\u006b\u0069\u0070"}}
		e.EncodeElement(_acfdf.TickMarkSkip, _bdef)
	}
	if _acfdf.ExtLst != nil {
		_gfbef := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_acfdf.ExtLst, _gfbef)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

type ST_ErrValType byte

func NewCT_SerTxChoice() *CT_SerTxChoice { _dbgef := &CT_SerTxChoice{}; return _dbgef }
func (_dcgca ST_Shape) String() string {
	switch _dcgca {
	case 0:
		return ""
	case 1:
		return "\u0063\u006f\u006e\u0065"
	case 2:
		return "\u0063o\u006e\u0065\u0054\u006f\u004d\u0061x"
	case 3:
		return "\u0062\u006f\u0078"
	case 4:
		return "\u0063\u0079\u006c\u0069\u006e\u0064\u0065\u0072"
	case 5:
		return "\u0070y\u0072\u0061\u006d\u0069\u0064"
	case 6:
		return "\u0070\u0079\u0072a\u006d\u0069\u0064\u0054\u006f\u004d\u0061\u0078"
	}
	return ""
}
func (_beeff *CT_LblOffset) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _dgcg := range start.Attr {
		if _dgcg.Name.Local == "\u0076\u0061\u006c" {
			_bbccb, _ggca := ParseUnionST_LblOffset(_dgcg.Value)
			if _ggca != nil {
				return _ggca
			}
			_beeff.ValAttr = &_bbccb
			continue
		}
	}
	for {
		_edbec, _aggab := d.Token()
		if _aggab != nil {
			return _b.Errorf("\u0070a\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005f\u004c\u0062l\u004f\u0066\u0066\u0073\u0065\u0074\u003a\u0020\u0025\u0073", _aggab)
		}
		if _gege, _bgef := _edbec.(_e.EndElement); _bgef && _gege.Name == start.Name {
			break
		}
	}
	return nil
}
func NewCT_PictureFormat() *CT_PictureFormat {
	_cbbca := &CT_PictureFormat{}
	_cbbca.ValAttr = ST_PictureFormat(1)
	return _cbbca
}
func NewCT_PieSer() *CT_PieSer {
	_geebg := &CT_PieSer{}
	_geebg.Idx = NewCT_UnsignedInt()
	_geebg.Order = NewCT_UnsignedInt()
	return _geebg
}
func (_cbag *CT_Tx) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_cbag.Choice.MarshalXML(e, _e.StartElement{})
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}
func (_bafc ST_RadarStyle) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_bafc.String(), start)
}

// Validate validates the CT_FirstSliceAng and its children
func (_eebc *CT_FirstSliceAng) Validate() error {
	return _eebc.ValidateWithPath("\u0043\u0054_\u0046\u0069\u0072s\u0074\u0053\u006c\u0069\u0063\u0065\u0041\u006e\u0067")
}
func (_egagcd *ST_DepthPercent) Validate() error { return _egagcd.ValidateWithPath("") }

// Validate validates the CT_DispUnitsLbl and its children
func (_beea *CT_DispUnitsLbl) Validate() error {
	return _beea.ValidateWithPath("\u0043T\u005fD\u0069\u0073\u0070\u0055\u006e\u0069\u0074\u0073\u004c\u0062\u006c")
}

// Validate validates the CT_Period and its children
func (_gaab *CT_Period) Validate() error {
	return _gaab.ValidateWithPath("\u0043T\u005f\u0050\u0065\u0072\u0069\u006fd")
}

// ValidateWithPath validates the CT_DispUnitsLbl and its children, prefixing error messages with path
func (_ecdg *CT_DispUnitsLbl) ValidateWithPath(path string) error {
	if _ecdg.Layout != nil {
		if _dbdgf := _ecdg.Layout.ValidateWithPath(path + "\u002fL\u0061\u0079\u006f\u0075\u0074"); _dbdgf != nil {
			return _dbdgf
		}
	}
	if _ecdg.Tx != nil {
		if _cefaf := _ecdg.Tx.ValidateWithPath(path + "\u002f\u0054\u0078"); _cefaf != nil {
			return _cefaf
		}
	}
	if _ecdg.SpPr != nil {
		if _fadf := _ecdg.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _fadf != nil {
			return _fadf
		}
	}
	if _ecdg.TxPr != nil {
		if _fage := _ecdg.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _fage != nil {
			return _fage
		}
	}
	return nil
}

type CT_Skip struct{ ValAttr uint32 }

func (_efegg *CT_PlotArea) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _efegg.Layout != nil {
		_bccge := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006c\u0061\u0079\u006f\u0075\u0074"}}
		e.EncodeElement(_efegg.Layout, _bccge)
	}
	for _, _egbe := range _efegg.Choice {
		_egbe.MarshalXML(e, _e.StartElement{})
	}
	if _efegg.CChoice != nil {
		_efegg.CChoice.MarshalXML(e, _e.StartElement{})
	}
	if _efegg.DTable != nil {
		_ebadf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0064\u0054\u0061\u0062\u006c\u0065"}}
		e.EncodeElement(_efegg.DTable, _ebadf)
	}
	if _efegg.SpPr != nil {
		_acbb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_efegg.SpPr, _acbb)
	}
	if _efegg.ExtLst != nil {
		_ddedd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_efegg.ExtLst, _ddedd)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_Perspective and its children, prefixing error messages with path
func (_aedd *CT_Perspective) ValidateWithPath(path string) error {
	if _aedd.ValAttr != nil {
		if *_aedd.ValAttr < 0 {
			return _b.Errorf("%\u0073\u002f\u006d\u002e\u0056\u0061l\u0041\u0074\u0074\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u003e=\u0020\u0030\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, *_aedd.ValAttr)
		}
		if *_aedd.ValAttr > 240 {
			return _b.Errorf("\u0025\u0073/\u006d\u002e\u0056\u0061l\u0041\u0074t\u0072\u0020\u006d\u0075\u0073\u0074\u0020\u0062e\u0020\u003c\u003d\u0020\u0032\u0034\u0030\u0020\u0028\u0068\u0061\u0076e\u0020\u0025\u0076\u0029", path, *_aedd.ValAttr)
		}
	}
	return nil
}
func (_gfgg *CT_BarChart) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_eaga := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0062\u0061\u0072\u0044\u0069\u0072"}}
	e.EncodeElement(_gfgg.BarDir, _eaga)
	if _gfgg.Grouping != nil {
		_acbe := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}}
		e.EncodeElement(_gfgg.Grouping, _acbe)
	}
	if _gfgg.VaryColors != nil {
		_fee := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_gfgg.VaryColors, _fee)
	}
	if _gfgg.Ser != nil {
		_ffa := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _bebg := range _gfgg.Ser {
			e.EncodeElement(_bebg, _ffa)
		}
	}
	if _gfgg.DLbls != nil {
		_fcbb := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_gfgg.DLbls, _fcbb)
	}
	if _gfgg.GapWidth != nil {
		_bbf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0067\u0061\u0070\u0057\u0069\u0064\u0074\u0068"}}
		e.EncodeElement(_gfgg.GapWidth, _bbf)
	}
	if _gfgg.Overlap != nil {
		_dcf := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006f\u0076\u0065\u0072\u006c\u0061p"}}
		e.EncodeElement(_gfgg.Overlap, _dcf)
	}
	if _gfgg.SerLines != nil {
		_fccf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}}
		for _, _faab := range _gfgg.SerLines {
			e.EncodeElement(_faab, _fccf)
		}
	}
	_bdc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	for _, _cdc := range _gfgg.AxId {
		e.EncodeElement(_cdc, _bdc)
	}
	if _gfgg.ExtLst != nil {
		_cgde := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_gfgg.ExtLst, _cgde)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_BandFmt and its children
func (_ade *CT_BandFmt) Validate() error {
	return _ade.ValidateWithPath("\u0043\u0054\u005f\u0042\u0061\u006e\u0064\u0046\u006d\u0074")
}
func NewCT_AxDataSource() *CT_AxDataSource {
	_fda := &CT_AxDataSource{}
	_fda.Choice = NewCT_AxDataSourceChoice()
	return _fda
}

// ValidateWithPath validates the CT_SurfaceSer and its children, prefixing error messages with path
func (_adceee *CT_SurfaceSer) ValidateWithPath(path string) error {
	if _ebdag := _adceee.Idx.ValidateWithPath(path + "\u002f\u0049\u0064\u0078"); _ebdag != nil {
		return _ebdag
	}
	if _ddffe := _adceee.Order.ValidateWithPath(path + "\u002f\u004f\u0072\u0064\u0065\u0072"); _ddffe != nil {
		return _ddffe
	}
	if _adceee.Tx != nil {
		if _cdbcb := _adceee.Tx.ValidateWithPath(path + "\u002f\u0054\u0078"); _cdbcb != nil {
			return _cdbcb
		}
	}
	if _adceee.SpPr != nil {
		if _cfba := _adceee.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _cfba != nil {
			return _cfba
		}
	}
	if _adceee.Cat != nil {
		if _gbdcf := _adceee.Cat.ValidateWithPath(path + "\u002f\u0043\u0061\u0074"); _gbdcf != nil {
			return _gbdcf
		}
	}
	if _adceee.Val != nil {
		if _cfcbd := _adceee.Val.ValidateWithPath(path + "\u002f\u0056\u0061\u006c"); _cfcbd != nil {
			return _cfcbd
		}
	}
	if _adceee.ExtLst != nil {
		if _beaab := _adceee.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _beaab != nil {
			return _beaab
		}
	}
	return nil
}

// ValidateWithPath validates the CT_AxPos and its children, prefixing error messages with path
func (_ggg *CT_AxPos) ValidateWithPath(path string) error {
	if _ggg.ValAttr == ST_AxPosUnset {
		return _b.Errorf("\u0025\u0073\u002fV\u0061\u006c\u0041\u0074t\u0072\u0020\u0069\u0073\u0020\u0061\u0020m\u0061\u006e\u0064\u0061\u0074\u006f\u0072\u0079\u0020\u0066\u0069\u0065\u006c\u0064", path)
	}
	if _eeec := _ggg.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _eeec != nil {
		return _eeec
	}
	return nil
}
func NewCT_PageSetup() *CT_PageSetup { _ddbaa := &CT_PageSetup{}; return _ddbaa }
func (_cdcd *CT_ScatterStyle) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _daec := range start.Attr {
		if _daec.Name.Local == "\u0076\u0061\u006c" {
			_cdcd.ValAttr.UnmarshalXMLAttr(_daec)
			continue
		}
	}
	for {
		_bdaca, _faegg := d.Token()
		if _faegg != nil {
			return _b.Errorf("p\u0061\u0072\u0073\u0069\u006e\u0067 \u0043\u0054\u005f\u0053\u0063\u0061\u0074\u0074\u0065r\u0053\u0074\u0079l\u0065:\u0020\u0025\u0073", _faegg)
		}
		if _fgbb, _cfeed := _bdaca.(_e.EndElement); _cfeed && _fgbb.Name == start.Name {
			break
		}
	}
	return nil
}
func (_eeda *CT_ManualLayout) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _eeda.LayoutTarget != nil {
		_gffae := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006c\u0061\u0079\u006f\u0075\u0074\u0054a\u0072\u0067\u0065\u0074"}}
		e.EncodeElement(_eeda.LayoutTarget, _gffae)
	}
	if _eeda.XMode != nil {
		_gafe := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0078\u004d\u006f\u0064\u0065"}}
		e.EncodeElement(_eeda.XMode, _gafe)
	}
	if _eeda.YMode != nil {
		_ebaee := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0079\u004d\u006f\u0064\u0065"}}
		e.EncodeElement(_eeda.YMode, _ebaee)
	}
	if _eeda.WMode != nil {
		_gaeda := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0077\u004d\u006f\u0064\u0065"}}
		e.EncodeElement(_eeda.WMode, _gaeda)
	}
	if _eeda.HMode != nil {
		_dgdb := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0068\u004d\u006f\u0064\u0065"}}
		e.EncodeElement(_eeda.HMode, _dgdb)
	}
	if _eeda.X != nil {
		_acga := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0078"}}
		e.EncodeElement(_eeda.X, _acga)
	}
	if _eeda.Y != nil {
		_bebbg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0079"}}
		e.EncodeElement(_eeda.Y, _bebbg)
	}
	if _eeda.W != nil {
		_afefd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0077"}}
		e.EncodeElement(_eeda.W, _afefd)
	}
	if _eeda.H != nil {
		_bdeba := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0068"}}
		e.EncodeElement(_eeda.H, _bdeba)
	}
	if _eeda.ExtLst != nil {
		_bgdc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_eeda.ExtLst, _bgdc)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_BuiltInUnit and its children, prefixing error messages with path
func (_fagf *CT_BuiltInUnit) ValidateWithPath(path string) error {
	if _bcdf := _fagf.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _bcdf != nil {
		return _bcdf
	}
	return nil
}
func (_acbgf *EG_AreaChartShared) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _acbgf.Grouping != nil {
		_gbfd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}}
		e.EncodeElement(_acbgf.Grouping, _gbfd)
	}
	if _acbgf.VaryColors != nil {
		_ddggc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_acbgf.VaryColors, _ddggc)
	}
	if _acbgf.Ser != nil {
		_gfede := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _gced := range _acbgf.Ser {
			e.EncodeElement(_gced, _gfede)
		}
	}
	if _acbgf.DLbls != nil {
		_acdcg := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_acbgf.DLbls, _acdcg)
	}
	if _acbgf.DropLines != nil {
		_degb := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0064\u0072\u006f\u0070\u004c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_acbgf.DropLines, _degb)
	}
	return nil
}
func (_ccbe *CT_DLblPos) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	_bcdc, _dcca := _ccbe.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
	if _dcca != nil {
		return _dcca
	}
	start.Attr = append(start.Attr, _bcdc)
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}
func (_febb *CT_Pie3DChart) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _febb.VaryColors != nil {
		_fbgba := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_febb.VaryColors, _fbgba)
	}
	if _febb.Ser != nil {
		_ddfga := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _dada := range _febb.Ser {
			e.EncodeElement(_dada, _ddfga)
		}
	}
	if _febb.DLbls != nil {
		_caacc := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_febb.DLbls, _caacc)
	}
	if _febb.ExtLst != nil {
		_cdda := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_febb.ExtLst, _cdda)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

type CT_SurfaceSer struct {
	Idx    *CT_UnsignedInt
	Order  *CT_UnsignedInt
	Tx     *CT_SerTx
	SpPr   *_f.CT_ShapeProperties
	Cat    *CT_AxDataSource
	Val    *CT_NumDataSource
	ExtLst *CT_ExtensionList
}

func (_dceb *CT_Skip) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0076\u0061\u006c"}, Value: _b.Sprintf("\u0025\u0076", _dceb.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

const ST_HoleSizePercentPattern = "\u0030\u002a\u0028\u005b\u0031\u002d\u0039\u005d\u007c\u0028\u005b1\u002d\u0038\u005d\u005b\u0030\u002d\u0039\u005d\u0029\u007c9\u0030\u0029\u0025"

func (_bbba *CT_SurfaceChart) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _bbba.Wireframe != nil {
		_gddafg := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0077\u0069\u0072\u0065\u0066\u0072\u0061\u006d\u0065"}}
		e.EncodeElement(_bbba.Wireframe, _gddafg)
	}
	if _bbba.Ser != nil {
		_degfec := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _efcf := range _bbba.Ser {
			e.EncodeElement(_efcf, _degfec)
		}
	}
	if _bbba.BandFmts != nil {
		_bcdbg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0062\u0061\u006e\u0064\u0046\u006d\u0074\u0073"}}
		e.EncodeElement(_bbba.BandFmts, _bcdbg)
	}
	_fdbd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	for _, _eefbe := range _bbba.AxId {
		e.EncodeElement(_eefbe, _fdbd)
	}
	if _bbba.ExtLst != nil {
		_bcacf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_bbba.ExtLst, _bcacf)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}
func (_gegb *ST_Crosses) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_bfafcf, _fddaa := d.Token()
	if _fddaa != nil {
		return _fddaa
	}
	if _dgece, _cffec := _bfafcf.(_e.EndElement); _cffec && _dgece.Name == start.Name {
		*_gegb = 1
		return nil
	}
	if _cdfec, _bedfd := _bfafcf.(_e.CharData); !_bedfd {
		return _b.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _bfafcf)
	} else {
		switch string(_cdfec) {
		case "":
			*_gegb = 0
		case "\u0061\u0075\u0074\u006f\u005a\u0065\u0072\u006f":
			*_gegb = 1
		case "\u006d\u0061\u0078":
			*_gegb = 2
		case "\u006d\u0069\u006e":
			*_gegb = 3
		}
	}
	_bfafcf, _fddaa = d.Token()
	if _fddaa != nil {
		return _fddaa
	}
	if _eedde, _bfffc := _bfafcf.(_e.EndElement); _bfffc && _eedde.Name == start.Name {
		return nil
	}
	return _b.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _bfafcf)
}
func (_bddd *CT_OfPieType) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _dggcb := range start.Attr {
		if _dggcb.Name.Local == "\u0076\u0061\u006c" {
			_bddd.ValAttr.UnmarshalXMLAttr(_dggcb)
			continue
		}
	}
	for {
		_acbgg, _cegda := d.Token()
		if _cegda != nil {
			return _b.Errorf("\u0070a\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005f\u004f\u0066P\u0069\u0065\u0054\u0079\u0070\u0065\u003a\u0020\u0025\u0073", _cegda)
		}
		if _bbgb, _aaeeg := _acbgg.(_e.EndElement); _aaeeg && _bbgb.Name == start.Name {
			break
		}
	}
	return nil
}

// ValidateWithPath validates the EG_AreaChartShared and its children, prefixing error messages with path
func (_fgafa *EG_AreaChartShared) ValidateWithPath(path string) error {
	if _fgafa.Grouping != nil {
		if _adcdf := _fgafa.Grouping.ValidateWithPath(path + "\u002fG\u0072\u006f\u0075\u0070\u0069\u006eg"); _adcdf != nil {
			return _adcdf
		}
	}
	if _fgafa.VaryColors != nil {
		if _aggga := _fgafa.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _aggga != nil {
			return _aggga
		}
	}
	for _eeecg, _ceaac := range _fgafa.Ser {
		if _fcgdd := _ceaac.ValidateWithPath(_b.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _eeecg)); _fcgdd != nil {
			return _fcgdd
		}
	}
	if _fgafa.DLbls != nil {
		if _fbbaf := _fgafa.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _fbbaf != nil {
			return _fbbaf
		}
	}
	if _fgafa.DropLines != nil {
		if _deeg := _fgafa.DropLines.ValidateWithPath(path + "\u002f\u0044\u0072\u006f\u0070\u004c\u0069\u006e\u0065\u0073"); _deeg != nil {
			return _deeg
		}
	}
	return nil
}
func (_ccbde ST_Crosses) Validate() error { return _ccbde.ValidateWithPath("") }

type CT_MarkerSize struct{ ValAttr *uint8 }

func (_aaff *CT_Marker) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_bffa:
	for {
		_fdfd, _eded := d.Token()
		if _eded != nil {
			return _eded
		}
		switch _ceecc := _fdfd.(type) {
		case _e.StartElement:
			switch _ceecc.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0079\u006d\u0062\u006f\u006c"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0079\u006d\u0062\u006f\u006c"}:
				_aaff.Symbol = NewCT_MarkerStyle()
				if _gcbg := d.DecodeElement(_aaff.Symbol, &_ceecc); _gcbg != nil {
					return _gcbg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0069\u007a\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0069\u007a\u0065"}:
				_aaff.Size = NewCT_MarkerSize()
				if _gccbc := d.DecodeElement(_aaff.Size, &_ceecc); _gccbc != nil {
					return _gccbc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_aaff.SpPr = _f.NewCT_ShapeProperties()
				if _gbff := d.DecodeElement(_aaff.SpPr, &_ceecc); _gbff != nil {
					return _gbff
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_aaff.ExtLst = NewCT_ExtensionList()
				if _cdag := d.DecodeElement(_aaff.ExtLst, &_ceecc); _cdag != nil {
					return _cdag
				}
			default:
				_a.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u004d\u0061\u0072k\u0065\u0072 \u0025\u0076", _ceecc.Name)
				if _fede := d.Skip(); _fede != nil {
					return _fede
				}
			}
		case _e.EndElement:
			break _bffa
		case _e.CharData:
		}
	}
	return nil
}

// Validate validates the CT_Double and its children
func (_dgaf *CT_Double) Validate() error {
	return _dgaf.ValidateWithPath("\u0043T\u005f\u0044\u006f\u0075\u0062\u006ce")
}
func (_dbb *CT_DoughnutChart) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _dbb.VaryColors != nil {
		_bbbe := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_dbb.VaryColors, _bbbe)
	}
	if _dbb.Ser != nil {
		_aebgf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _edbe := range _dbb.Ser {
			e.EncodeElement(_edbe, _aebgf)
		}
	}
	if _dbb.DLbls != nil {
		_egc := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_dbb.DLbls, _egc)
	}
	if _dbb.FirstSliceAng != nil {
		_bcfg := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0066i\u0072\u0073\u0074\u0053\u006c\u0069\u0063\u0065\u0041\u006e\u0067"}}
		e.EncodeElement(_dbb.FirstSliceAng, _bcfg)
	}
	if _dbb.HoleSize != nil {
		_fadgb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0068\u006f\u006c\u0065\u0053\u0069\u007a\u0065"}}
		e.EncodeElement(_dbb.HoleSize, _fadgb)
	}
	if _dbb.ExtLst != nil {
		_agcfd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_dbb.ExtLst, _agcfd)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

const (
	ST_OrientationUnset  ST_Orientation = 0
	ST_OrientationMaxMin ST_Orientation = 1
	ST_OrientationMinMax ST_Orientation = 2
)

func NewCT_DLblPos() *CT_DLblPos { _gcda := &CT_DLblPos{}; _gcda.ValAttr = ST_DLblPos(1); return _gcda }
func (_gg *CT_AreaChart) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_cgc:
	for {
		_eeg, _fbd := d.Token()
		if _fbd != nil {
			return _fbd
		}
		switch _acc := _eeg.(type) {
		case _e.StartElement:
			switch _acc.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}:
				_gg.Grouping = NewCT_Grouping()
				if _gd := d.DecodeElement(_gg.Grouping, &_acc); _gd != nil {
					return _gd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_gg.VaryColors = NewCT_Boolean()
				if _age := d.DecodeElement(_gg.VaryColors, &_acc); _age != nil {
					return _age
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_efa := NewCT_AreaSer()
				if _dec := d.DecodeElement(_efa, &_acc); _dec != nil {
					return _dec
				}
				_gg.Ser = append(_gg.Ser, _efa)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_gg.DLbls = NewCT_DLbls()
				if _ga := d.DecodeElement(_gg.DLbls, &_acc); _ga != nil {
					return _ga
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064r\u006f\u0070\u004c\u0069\u006e\u0065s"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064r\u006f\u0070\u004c\u0069\u006e\u0065s"}:
				_gg.DropLines = NewCT_ChartLines()
				if _ege := d.DecodeElement(_gg.DropLines, &_acc); _ege != nil {
					return _ege
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				_bg := NewCT_UnsignedInt()
				if _afb := d.DecodeElement(_bg, &_acc); _afb != nil {
					return _afb
				}
				_gg.AxId = append(_gg.AxId, _bg)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_gg.ExtLst = NewCT_ExtensionList()
				if _egd := d.DecodeElement(_gg.ExtLst, &_acc); _egd != nil {
					return _egd
				}
			default:
				_a.Log.Debug("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075n\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054_A\u0072\u0065a\u0043\u0068\u0061\u0072\u0074\u0020\u0025\u0076", _acc.Name)
				if _fg := d.Skip(); _fg != nil {
					return _fg
				}
			}
		case _e.EndElement:
			break _cgc
		case _e.CharData:
		}
	}
	return nil
}
func (_gbab *CT_Pie3DChart) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_dadb:
	for {
		_bbeff, _acge := d.Token()
		if _acge != nil {
			return _acge
		}
		switch _acccc := _bbeff.(type) {
		case _e.StartElement:
			switch _acccc.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_gbab.VaryColors = NewCT_Boolean()
				if _bfdfg := d.DecodeElement(_gbab.VaryColors, &_acccc); _bfdfg != nil {
					return _bfdfg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_bcdad := NewCT_PieSer()
				if _dbffe := d.DecodeElement(_bcdad, &_acccc); _dbffe != nil {
					return _dbffe
				}
				_gbab.Ser = append(_gbab.Ser, _bcdad)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_gbab.DLbls = NewCT_DLbls()
				if _gaefa := d.DecodeElement(_gbab.DLbls, &_acccc); _gaefa != nil {
					return _gaefa
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_gbab.ExtLst = NewCT_ExtensionList()
				if _feabf := d.DecodeElement(_gbab.ExtLst, &_acccc); _feabf != nil {
					return _feabf
				}
			default:
				_a.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0050i\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074 \u0025\u0076", _acccc.Name)
				if _gbfg := d.Skip(); _gbfg != nil {
					return _gbfg
				}
			}
		case _e.EndElement:
			break _dadb
		case _e.CharData:
		}
	}
	return nil
}
func (_bedc *EG_BarChartShared) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_bedc.BarDir = NewCT_BarDir()
_gdde:
	for {
		_gcca, _cdcgd := d.Token()
		if _cdcgd != nil {
			return _cdcgd
		}
		switch _degfeca := _gcca.(type) {
		case _e.StartElement:
			switch _degfeca.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0072\u0044\u0069\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0072\u0044\u0069\u0072"}:
				if _aedffa := d.DecodeElement(_bedc.BarDir, &_degfeca); _aedffa != nil {
					return _aedffa
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}:
				_bedc.Grouping = NewCT_BarGrouping()
				if _cabd := d.DecodeElement(_bedc.Grouping, &_degfeca); _cabd != nil {
					return _cabd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_bedc.VaryColors = NewCT_Boolean()
				if _aaaeb := d.DecodeElement(_bedc.VaryColors, &_degfeca); _aaaeb != nil {
					return _aaaeb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_eadcg := NewCT_BarSer()
				if _efbfe := d.DecodeElement(_eadcg, &_degfeca); _efbfe != nil {
					return _efbfe
				}
				_bedc.Ser = append(_bedc.Ser, _eadcg)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_bedc.DLbls = NewCT_DLbls()
				if _eggaa := d.DecodeElement(_bedc.DLbls, &_degfeca); _eggaa != nil {
					return _eggaa
				}
			default:
				_a.Log.Debug("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0045\u0047\u005f\u0042\u0061\u0072\u0043\u0068\u0061\u0072\u0074\u0053\u0068\u0061\u0072\u0065\u0064\u0020\u0025\u0076", _degfeca.Name)
				if _fbfcea := d.Skip(); _fbfcea != nil {
					return _fbfcea
				}
			}
		case _e.EndElement:
			break _gdde
		case _e.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_Crosses and its children, prefixing error messages with path
func (_aaae *CT_Crosses) ValidateWithPath(path string) error {
	if _aaae.ValAttr == ST_CrossesUnset {
		return _b.Errorf("\u0025\u0073\u002fV\u0061\u006c\u0041\u0074t\u0072\u0020\u0069\u0073\u0020\u0061\u0020m\u0061\u006e\u0064\u0061\u0074\u006f\u0072\u0079\u0020\u0066\u0069\u0065\u006c\u0064", path)
	}
	if _cbfag := _aaae.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _cbfag != nil {
		return _cbfag
	}
	return nil
}

type ST_AxPos byte

func (_cefeb ST_ErrBarType) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_cefeb.String(), start)
}

type CT_LegendEntryChoice struct {
	Delete *CT_Boolean
	TxPr   *_f.CT_TextBody
}
type CT_PivotFmts struct{ PivotFmt []*CT_PivotFmt }

func (_bagfc ST_LblOffset) String() string {
	if _bagfc.ST_LblOffsetPercent != nil {
		return _b.Sprintf("\u0025\u0076", *_bagfc.ST_LblOffsetPercent)
	}
	if _bagfc.ST_LblOffsetUShort != nil {
		return _b.Sprintf("\u0025\u0076", *_bagfc.ST_LblOffsetUShort)
	}
	return ""
}
func (_fgada ST_AxPos) Validate() error { return _fgada.ValidateWithPath("") }
func (_eeddf ST_BarGrouping) String() string {
	switch _eeddf {
	case 0:
		return ""
	case 1:
		return "\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u0053\u0074a\u0063\u006b\u0065\u0064"
	case 2:
		return "\u0063l\u0075\u0073\u0074\u0065\u0072\u0065d"
	case 3:
		return "\u0073\u0074\u0061\u006e\u0064\u0061\u0072\u0064"
	case 4:
		return "\u0073t\u0061\u0063\u006b\u0065\u0064"
	}
	return ""
}
func (_dagf *CT_SecondPieSize) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _dagf.ValAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0076\u0061\u006c"}, Value: _b.Sprintf("\u0025\u0076", *_dagf.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}
func (_ceegd ST_DispBlanksAs) String() string {
	switch _ceegd {
	case 0:
		return ""
	case 1:
		return "\u0073\u0070\u0061\u006e"
	case 2:
		return "\u0067\u0061\u0070"
	case 3:
		return "\u007a\u0065\u0072\u006f"
	}
	return ""
}

// Validate validates the CT_SplitType and its children
func (_caafg *CT_SplitType) Validate() error {
	return _caafg.ValidateWithPath("\u0043\u0054\u005fS\u0070\u006c\u0069\u0074\u0054\u0079\u0070\u0065")
}

// ValidateWithPath validates the CT_LblAlgn and its children, prefixing error messages with path
func (_bdcgd *CT_LblAlgn) ValidateWithPath(path string) error {
	if _bdcgd.ValAttr == ST_LblAlgnUnset {
		return _b.Errorf("\u0025\u0073\u002fV\u0061\u006c\u0041\u0074t\u0072\u0020\u0069\u0073\u0020\u0061\u0020m\u0061\u006e\u0064\u0061\u0074\u006f\u0072\u0079\u0020\u0066\u0069\u0065\u006c\u0064", path)
	}
	if _cbedf := _bdcgd.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _cbedf != nil {
		return _cbedf
	}
	return nil
}
func (_abgabb *ST_PictureFormat) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_abgabb = 0
	case "\u0073t\u0072\u0065\u0074\u0063\u0068":
		*_abgabb = 1
	case "\u0073\u0074\u0061c\u006b":
		*_abgabb = 2
	case "\u0073\u0074\u0061\u0063\u006b\u0053\u0063\u0061\u006c\u0065":
		*_abgabb = 3
	}
	return nil
}
func (_cgacg ST_TickLblPos) Validate() error { return _cgacg.ValidateWithPath("") }
func (_fggag *CT_DLblPos) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_fggag.ValAttr = ST_DLblPos(1)
	for _, _bdcgb := range start.Attr {
		if _bdcgb.Name.Local == "\u0076\u0061\u006c" {
			_fggag.ValAttr.UnmarshalXMLAttr(_bdcgb)
			continue
		}
	}
	for {
		_bge, _ddega := d.Token()
		if _ddega != nil {
			return _b.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0043\u0054\u005f\u0044\u004c\u0062\u006c\u0050\u006f\u0073\u003a\u0020%\u0073", _ddega)
		}
		if _bbaaf, _cagd := _bge.(_e.EndElement); _cagd && _bbaaf.Name == start.Name {
			break
		}
	}
	return nil
}
func (_gbfa *CT_Protection) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_cabee:
	for {
		_bgfcg, _fagbg := d.Token()
		if _fagbg != nil {
			return _fagbg
		}
		switch _ceaae := _bgfcg.(type) {
		case _e.StartElement:
			switch _ceaae.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "c\u0068\u0061\u0072\u0074\u004f\u0062\u006a\u0065\u0063\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "c\u0068\u0061\u0072\u0074\u004f\u0062\u006a\u0065\u0063\u0074"}:
				_gbfa.ChartObject = NewCT_Boolean()
				if _aeef := d.DecodeElement(_gbfa.ChartObject, &_ceaae); _aeef != nil {
					return _aeef
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0061\u0074\u0061"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0061\u0074\u0061"}:
				_gbfa.Data = NewCT_Boolean()
				if _dgdbf := d.DecodeElement(_gbfa.Data, &_ceaae); _dgdbf != nil {
					return _dgdbf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066\u006f\u0072\u006d\u0061\u0074\u0074\u0069\u006e\u0067"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066\u006f\u0072\u006d\u0061\u0074\u0074\u0069\u006e\u0067"}:
				_gbfa.Formatting = NewCT_Boolean()
				if _dedce := d.DecodeElement(_gbfa.Formatting, &_ceaae); _dedce != nil {
					return _dedce
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u006c\u0065\u0063\u0074\u0069\u006fn"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u006c\u0065\u0063\u0074\u0069\u006fn"}:
				_gbfa.Selection = NewCT_Boolean()
				if _egac := d.DecodeElement(_gbfa.Selection, &_ceaae); _egac != nil {
					return _egac
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0075\u0073\u0065\u0072\u0049\u006e\u0074\u0065\u0072\u0066\u0061\u0063\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0075\u0073\u0065\u0072\u0049\u006e\u0074\u0065\u0072\u0066\u0061\u0063\u0065"}:
				_gbfa.UserInterface = NewCT_Boolean()
				if _bcfe := d.DecodeElement(_gbfa.UserInterface, &_ceaae); _bcfe != nil {
					return _bcfe
				}
			default:
				_a.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0050r\u006f\u0074\u0065\u0063\u0074\u0069\u006f\u006e \u0025\u0076", _ceaae.Name)
				if _gecga := d.Skip(); _gecga != nil {
					return _gecga
				}
			}
		case _e.EndElement:
			break _cabee
		case _e.CharData:
		}
	}
	return nil
}

type CT_BarSer struct {
	Idx              *CT_UnsignedInt
	Order            *CT_UnsignedInt
	Tx               *CT_SerTx
	SpPr             *_f.CT_ShapeProperties
	InvertIfNegative *CT_Boolean
	PictureOptions   *CT_PictureOptions
	DPt              []*CT_DPt
	DLbls            *CT_DLbls
	Trendline        []*CT_Trendline
	ErrBars          *CT_ErrBars
	Cat              *CT_AxDataSource
	Val              *CT_NumDataSource
	Shape            *CT_Shape
	ExtLst           *CT_ExtensionList
}

// ValidateWithPath validates the CT_NumDataSourceChoice and its children, prefixing error messages with path
func (_edgeb *CT_NumDataSourceChoice) ValidateWithPath(path string) error {
	if _edgeb.NumRef != nil {
		if _fagee := _edgeb.NumRef.ValidateWithPath(path + "\u002fN\u0075\u006d\u0052\u0065\u0066"); _fagee != nil {
			return _fagee
		}
	}
	if _edgeb.NumLit != nil {
		if _ccfgc := _edgeb.NumLit.ValidateWithPath(path + "\u002fN\u0075\u006d\u004c\u0069\u0074"); _ccfgc != nil {
			return _ccfgc
		}
	}
	return nil
}
func (_befcgf *CT_UnsignedInt) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _aabde := range start.Attr {
		if _aabde.Name.Local == "\u0076\u0061\u006c" {
			_gcabc, _eccgf := _c.ParseUint(_aabde.Value, 10, 32)
			if _eccgf != nil {
				return _eccgf
			}
			_befcgf.ValAttr = uint32(_gcabc)
			continue
		}
	}
	for {
		_cbbbe, _fgcaab := d.Token()
		if _fgcaab != nil {
			return _b.Errorf("\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fU\u006e\u0073\u0069\u0067\u006e\u0065\u0064\u0049\u006e\u0074:\u0020\u0025\u0073", _fgcaab)
		}
		if _fafbb, _gebcb := _cbbbe.(_e.EndElement); _gebcb && _fafbb.Name == start.Name {
			break
		}
	}
	return nil
}
func NewCT_BuiltInUnit() *CT_BuiltInUnit { _daab := &CT_BuiltInUnit{}; return _daab }

// Validate validates the CT_BarDir and its children
func (_beg *CT_BarDir) Validate() error {
	return _beg.ValidateWithPath("\u0043T\u005f\u0042\u0061\u0072\u0044\u0069r")
}
func NewCT_SplitType() *CT_SplitType { _efba := &CT_SplitType{}; return _efba }

// Validate validates the CT_OfPieChart and its children
func (_edcb *CT_OfPieChart) Validate() error {
	return _edcb.ValidateWithPath("\u0043\u0054\u005f\u004f\u0066\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074")
}

// ValidateWithPath validates the CT_TrendlineType and its children, prefixing error messages with path
func (_aefec *CT_TrendlineType) ValidateWithPath(path string) error {
	if _egfca := _aefec.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _egfca != nil {
		return _egfca
	}
	return nil
}
func (_ebcaa *ST_SplitType) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_ebcaa = 0
	case "\u0061\u0075\u0074\u006f":
		*_ebcaa = 1
	case "\u0063\u0075\u0073\u0074":
		*_ebcaa = 2
	case "\u0070e\u0072\u0063\u0065\u006e\u0074":
		*_ebcaa = 3
	case "\u0070\u006f\u0073":
		*_ebcaa = 4
	case "\u0076\u0061\u006c":
		*_ebcaa = 5
	}
	return nil
}

type CT_BuiltInUnit struct{ ValAttr ST_BuiltInUnit }

func (_gcag *CT_DispUnitsChoice) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_cbbc:
	for {
		_ccfg, _bcec := d.Token()
		if _bcec != nil {
			return _bcec
		}
		switch _cedg := _ccfg.(type) {
		case _e.StartElement:
			switch _cedg.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0075\u0073\u0074\u0055\u006e\u0069\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0075\u0073\u0074\u0055\u006e\u0069\u0074"}:
				_gcag.CustUnit = NewCT_Double()
				if _gegf := d.DecodeElement(_gcag.CustUnit, &_cedg); _gegf != nil {
					return _gegf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "b\u0075\u0069\u006c\u0074\u0049\u006e\u0055\u006e\u0069\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "b\u0075\u0069\u006c\u0074\u0049\u006e\u0055\u006e\u0069\u0074"}:
				_gcag.BuiltInUnit = NewCT_BuiltInUnit()
				if _dba := d.DecodeElement(_gcag.BuiltInUnit, &_cedg); _dba != nil {
					return _dba
				}
			default:
				_a.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0065l\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0044\u0069\u0073\u0070\u0055\u006ei\u0074\u0073\u0043\u0068\u006f\u0069\u0063\u0065\u0020\u0025\u0076", _cedg.Name)
				if _ffaee := d.Skip(); _ffaee != nil {
					return _ffaee
				}
			}
		case _e.EndElement:
			break _cbbc
		case _e.CharData:
		}
	}
	return nil
}
func NewCT_ErrDir() *CT_ErrDir { _gfcf := &CT_ErrDir{}; _gfcf.ValAttr = ST_ErrDir(1); return _gfcf }

type CT_LegendEntry struct {
	Idx    *CT_UnsignedInt
	Choice *CT_LegendEntryChoice
	ExtLst *CT_ExtensionList
}

func (_efefa *CT_LegendEntry) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_efefa.Idx = NewCT_UnsignedInt()
_daae:
	for {
		_egga, _ebfa := d.Token()
		if _ebfa != nil {
			return _ebfa
		}
		switch _gbdg := _egga.(type) {
		case _e.StartElement:
			switch _gbdg.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}:
				if _edada := d.DecodeElement(_efefa.Idx, &_gbdg); _edada != nil {
					return _edada
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}:
				if _efefa.Choice == nil {
					_efefa.Choice = NewCT_LegendEntryChoice()
				}
				if _cada := d.DecodeElement(&_efefa.Choice.Delete, &_gbdg); _cada != nil {
					return _cada
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				if _efefa.Choice == nil {
					_efefa.Choice = NewCT_LegendEntryChoice()
				}
				if _ageb := d.DecodeElement(&_efefa.Choice.TxPr, &_gbdg); _ageb != nil {
					return _ageb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_efefa.ExtLst = NewCT_ExtensionList()
				if _afaee := d.DecodeElement(_efefa.ExtLst, &_gbdg); _afaee != nil {
					return _afaee
				}
			default:
				_a.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069n\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006et\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u004c\u0065\u0067\u0065\u006e\u0064\u0045n\u0074r\u0079\u0020\u0025\u0076", _gbdg.Name)
				if _cgcbd := d.Skip(); _cgcbd != nil {
					return _cgcbd
				}
			}
		case _e.EndElement:
			break _daae
		case _e.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_Title and its children, prefixing error messages with path
func (_fbgde *CT_Title) ValidateWithPath(path string) error {
	if _fbgde.Tx != nil {
		if _bgba := _fbgde.Tx.ValidateWithPath(path + "\u002f\u0054\u0078"); _bgba != nil {
			return _bgba
		}
	}
	if _fbgde.Layout != nil {
		if _aeacb := _fbgde.Layout.ValidateWithPath(path + "\u002fL\u0061\u0079\u006f\u0075\u0074"); _aeacb != nil {
			return _aeacb
		}
	}
	if _fbgde.Overlay != nil {
		if _ggfd := _fbgde.Overlay.ValidateWithPath(path + "\u002f\u004f\u0076\u0065\u0072\u006c\u0061\u0079"); _ggfd != nil {
			return _ggfd
		}
	}
	if _fbgde.SpPr != nil {
		if _ebfeb := _fbgde.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _ebfeb != nil {
			return _ebfeb
		}
	}
	if _fbgde.TxPr != nil {
		if _gbcg := _fbgde.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _gbcg != nil {
			return _gbcg
		}
	}
	if _fbgde.ExtLst != nil {
		if _fffad := _fbgde.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _fffad != nil {
			return _fffad
		}
	}
	return nil
}
func (_cdaea ST_ScatterStyle) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_cdaea.String(), start)
}

const (
	ST_GroupingUnset          ST_Grouping = 0
	ST_GroupingPercentStacked ST_Grouping = 1
	ST_GroupingStandard       ST_Grouping = 2
	ST_GroupingStacked        ST_Grouping = 3
)

func (_ebfae *CT_MultiLvlStrData) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _ebfae.PtCount != nil {
		_accad := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0070\u0074\u0043\u006f\u0075\u006et"}}
		e.EncodeElement(_ebfae.PtCount, _accad)
	}
	if _ebfae.Lvl != nil {
		_efcab := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006cv\u006c"}}
		for _, _ecfc := range _ebfae.Lvl {
			e.EncodeElement(_ecfc, _efcab)
		}
	}
	if _ebfae.ExtLst != nil {
		_gcbag := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_ebfae.ExtLst, _gcbag)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_SizeRepresents and its children
func (_agdda *CT_SizeRepresents) Validate() error {
	return _agdda.ValidateWithPath("\u0043\u0054\u005f\u0053\u0069\u007a\u0065\u0052\u0065\u0070\u0072\u0065s\u0065\u006e\u0074\u0073")
}
func (_fdgge ST_TrendlineType) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_fdgge.String(), start)
}

type EG_AxSharedChoice struct {
	Crosses   *CT_Crosses
	CrossesAt *CT_Double
}

func (_cebc *CT_StrVal) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _egegg := range start.Attr {
		if _egegg.Name.Local == "\u0069\u0064\u0078" {
			_gagab, _cacfb := _c.ParseUint(_egegg.Value, 10, 32)
			if _cacfb != nil {
				return _cacfb
			}
			_cebc.IdxAttr = uint32(_gagab)
			continue
		}
	}
_gabgdd:
	for {
		_bagdb, _bfddf := d.Token()
		if _bfddf != nil {
			return _bfddf
		}
		switch _dabaa := _bagdb.(type) {
		case _e.StartElement:
			switch _dabaa.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076"}:
				if _dceef := d.DecodeElement(&_cebc.V, &_dabaa); _dceef != nil {
					return _dceef
				}
			default:
				_a.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u0053\u0074\u0072V\u0061\u006c \u0025\u0076", _dabaa.Name)
				if _abegg := d.Skip(); _abegg != nil {
					return _abegg
				}
			}
		case _e.EndElement:
			break _gabgdd
		case _e.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_DispBlanksAs and its children, prefixing error messages with path
func (_feffe *CT_DispBlanksAs) ValidateWithPath(path string) error {
	if _eaad := _feffe.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _eaad != nil {
		return _eaad
	}
	return nil
}

// ValidateWithPath validates the CT_NumVal and its children, prefixing error messages with path
func (_ceeb *CT_NumVal) ValidateWithPath(path string) error { return nil }

type CT_ErrBarType struct{ ValAttr ST_ErrBarType }

func NewCT_Pie3DChart() *CT_Pie3DChart { _fdafc := &CT_Pie3DChart{}; return _fdafc }
func (_dffg ST_SplitType) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_dffg.String(), start)
}

// Validate validates the CT_HoleSize and its children
func (_ccfa *CT_HoleSize) Validate() error {
	return _ccfa.ValidateWithPath("C\u0054\u005f\u0048\u006f\u006c\u0065\u0053\u0069\u007a\u0065")
}

// ValidateWithPath validates the CT_DTable and its children, prefixing error messages with path
func (_edgec *CT_DTable) ValidateWithPath(path string) error {
	if _edgec.ShowHorzBorder != nil {
		if _fbdc := _edgec.ShowHorzBorder.ValidateWithPath(path + "\u002fS\u0068o\u0077\u0048\u006f\u0072\u007a\u0042\u006f\u0072\u0064\u0065\u0072"); _fbdc != nil {
			return _fbdc
		}
	}
	if _edgec.ShowVertBorder != nil {
		if _fcegc := _edgec.ShowVertBorder.ValidateWithPath(path + "\u002fS\u0068o\u0077\u0056\u0065\u0072\u0074\u0042\u006f\u0072\u0064\u0065\u0072"); _fcegc != nil {
			return _fcegc
		}
	}
	if _edgec.ShowOutline != nil {
		if _dfdb := _edgec.ShowOutline.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u004f\u0075\u0074\u006c\u0069\u006e\u0065"); _dfdb != nil {
			return _dfdb
		}
	}
	if _edgec.ShowKeys != nil {
		if _dfbca := _edgec.ShowKeys.ValidateWithPath(path + "\u002fS\u0068\u006f\u0077\u004b\u0065\u0079s"); _dfbca != nil {
			return _dfbca
		}
	}
	if _edgec.SpPr != nil {
		if _efbb := _edgec.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _efbb != nil {
			return _efbb
		}
	}
	if _edgec.TxPr != nil {
		if _caded := _edgec.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _caded != nil {
			return _caded
		}
	}
	if _edgec.ExtLst != nil {
		if _eefc := _edgec.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _eefc != nil {
			return _eefc
		}
	}
	return nil
}

// Validate validates the CT_SurfaceSer and its children
func (_cbbbg *CT_SurfaceSer) Validate() error {
	return _cbbbg.ValidateWithPath("\u0043\u0054\u005f\u0053\u0075\u0072\u0066\u0061\u0063\u0065\u0053\u0065\u0072")
}

type CT_ScatterStyle struct{ ValAttr ST_ScatterStyle }

// Validate validates the EG_SerShared and its children
func (_fccdc *EG_SerShared) Validate() error {
	return _fccdc.ValidateWithPath("\u0045\u0047\u005fS\u0065\u0072\u0053\u0068\u0061\u0072\u0065\u0064")
}
func (_dccf *CT_SurfaceChart) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_fbdcg:
	for {
		_ceafg, _aebd := d.Token()
		if _aebd != nil {
			return _aebd
		}
		switch _baca := _ceafg.(type) {
		case _e.StartElement:
			switch _baca.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0077i\u0072\u0065\u0066\u0072\u0061\u006de"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0077i\u0072\u0065\u0066\u0072\u0061\u006de"}:
				_dccf.Wireframe = NewCT_Boolean()
				if _ecgff := d.DecodeElement(_dccf.Wireframe, &_baca); _ecgff != nil {
					return _ecgff
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_fegfge := NewCT_SurfaceSer()
				if _gdgc := d.DecodeElement(_fegfge, &_baca); _gdgc != nil {
					return _gdgc
				}
				_dccf.Ser = append(_dccf.Ser, _fegfge)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u006e\u0064\u0046\u006d\u0074\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u006e\u0064\u0046\u006d\u0074\u0073"}:
				_dccf.BandFmts = NewCT_BandFmts()
				if _adeaa := d.DecodeElement(_dccf.BandFmts, &_baca); _adeaa != nil {
					return _adeaa
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				_cdfed := NewCT_UnsignedInt()
				if _dedff := d.DecodeElement(_cdfed, &_baca); _dedff != nil {
					return _dedff
				}
				_dccf.AxId = append(_dccf.AxId, _cdfed)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_dccf.ExtLst = NewCT_ExtensionList()
				if _aedff := d.DecodeElement(_dccf.ExtLst, &_baca); _aedff != nil {
					return _aedff
				}
			default:
				_a.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074e\u0064\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0053\u0075\u0072f\u0061\u0063\u0065\u0043\u0068\u0061\u0072\u0074\u0020\u0025\u0076", _baca.Name)
				if _cfgdd := d.Skip(); _cfgdd != nil {
					return _cfgdd
				}
			}
		case _e.EndElement:
			break _fbdcg
		case _e.CharData:
		}
	}
	return nil
}
func (_dcag *CT_LblOffset) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _dcag.ValAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0076\u0061\u006c"}, Value: _b.Sprintf("\u0025\u0076", *_dcag.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_LogBase and its children, prefixing error messages with path
func (_aeac *CT_LogBase) ValidateWithPath(path string) error {
	if _aeac.ValAttr < 2 {
		return _b.Errorf("%\u0073\u002f\u006d\u002e\u0056\u0061l\u0041\u0074\u0074\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u003e=\u0020\u0032\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, _aeac.ValAttr)
	}
	if _aeac.ValAttr > 1000 {
		return _b.Errorf("\u0025\u0073\u002f\u006d\u002e\u0056\u0061\u006c\u0041\u0074\u0074\u0072\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u003c\u003d\u00201\u0030\u0030\u0030\u0020\u0028h\u0061\u0076e\u0020\u0025\u0076\u0029", path, _aeac.ValAttr)
	}
	return nil
}

type CT_RadarSer struct {
	Idx    *CT_UnsignedInt
	Order  *CT_UnsignedInt
	Tx     *CT_SerTx
	SpPr   *_f.CT_ShapeProperties
	Marker *CT_Marker
	DPt    []*CT_DPt
	DLbls  *CT_DLbls
	Cat    *CT_AxDataSource
	Val    *CT_NumDataSource
	ExtLst *CT_ExtensionList
}

func (_fcfcg *CT_TimeUnit) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _dfgda := range start.Attr {
		if _dfgda.Name.Local == "\u0076\u0061\u006c" {
			_fcfcg.ValAttr.UnmarshalXMLAttr(_dfgda)
			continue
		}
	}
	for {
		_gcfcb, _daagbc := d.Token()
		if _daagbc != nil {
			return _b.Errorf("\u0070\u0061\u0072si\u006e\u0067\u0020\u0043\u0054\u005f\u0054\u0069\u006d\u0065\u0055\u006e\u0069\u0074\u003a\u0020\u0025\u0073", _daagbc)
		}
		if _aefbdd, _cfbgg := _gcfcb.(_e.EndElement); _cfbgg && _aefbdd.Name == start.Name {
			break
		}
	}
	return nil
}
func NewCT_HeaderFooter() *CT_HeaderFooter { _fdaaf := &CT_HeaderFooter{}; return _fdaaf }
func (_gedb *CT_PageMargins) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _dcaa := range start.Attr {
		if _dcaa.Name.Local == "\u006c" {
			_befb, _ebab := _c.ParseFloat(_dcaa.Value, 64)
			if _ebab != nil {
				return _ebab
			}
			_gedb.LAttr = _befb
			continue
		}
		if _dcaa.Name.Local == "\u0072" {
			_gdcd, _fabfa := _c.ParseFloat(_dcaa.Value, 64)
			if _fabfa != nil {
				return _fabfa
			}
			_gedb.RAttr = _gdcd
			continue
		}
		if _dcaa.Name.Local == "\u0074" {
			_efec, _bccfc := _c.ParseFloat(_dcaa.Value, 64)
			if _bccfc != nil {
				return _bccfc
			}
			_gedb.TAttr = _efec
			continue
		}
		if _dcaa.Name.Local == "\u0062" {
			_gbace, _caebf := _c.ParseFloat(_dcaa.Value, 64)
			if _caebf != nil {
				return _caebf
			}
			_gedb.BAttr = _gbace
			continue
		}
		if _dcaa.Name.Local == "\u0068\u0065\u0061\u0064\u0065\u0072" {
			_eabca, _gfdeg := _c.ParseFloat(_dcaa.Value, 64)
			if _gfdeg != nil {
				return _gfdeg
			}
			_gedb.HeaderAttr = _eabca
			continue
		}
		if _dcaa.Name.Local == "\u0066\u006f\u006f\u0074\u0065\u0072" {
			_cggf, _ggbfc := _c.ParseFloat(_dcaa.Value, 64)
			if _ggbfc != nil {
				return _ggbfc
			}
			_gedb.FooterAttr = _cggf
			continue
		}
	}
	for {
		_fcgg, _geab := d.Token()
		if _geab != nil {
			return _b.Errorf("\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fP\u0061\u0067\u0065\u004d\u0061\u0072\u0067\u0069\u006e\u0073:\u0020\u0025\u0073", _geab)
		}
		if _eaeee, _faac := _fcgg.(_e.EndElement); _faac && _eaeee.Name == start.Name {
			break
		}
	}
	return nil
}
func NewCT_PivotFmt() *CT_PivotFmt {
	_cagac := &CT_PivotFmt{}
	_cagac.Idx = NewCT_UnsignedInt()
	return _cagac
}
func NewCT_ScatterChart() *CT_ScatterChart {
	_gcec := &CT_ScatterChart{}
	_gcec.ScatterStyle = NewCT_ScatterStyle()
	return _gcec
}
func (_gbegb *ST_RadarStyle) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_gbegb = 0
	case "\u0073\u0074\u0061\u006e\u0064\u0061\u0072\u0064":
		*_gbegb = 1
	case "\u006d\u0061\u0072\u006b\u0065\u0072":
		*_gbegb = 2
	case "\u0066\u0069\u006c\u006c\u0065\u0064":
		*_gbegb = 3
	}
	return nil
}

// ValidateWithPath validates the CT_RadarSer and its children, prefixing error messages with path
func (_debda *CT_RadarSer) ValidateWithPath(path string) error {
	if _gedbf := _debda.Idx.ValidateWithPath(path + "\u002f\u0049\u0064\u0078"); _gedbf != nil {
		return _gedbf
	}
	if _bbafc := _debda.Order.ValidateWithPath(path + "\u002f\u004f\u0072\u0064\u0065\u0072"); _bbafc != nil {
		return _bbafc
	}
	if _debda.Tx != nil {
		if _bdaac := _debda.Tx.ValidateWithPath(path + "\u002f\u0054\u0078"); _bdaac != nil {
			return _bdaac
		}
	}
	if _debda.SpPr != nil {
		if _aacgc := _debda.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _aacgc != nil {
			return _aacgc
		}
	}
	if _debda.Marker != nil {
		if _ecff := _debda.Marker.ValidateWithPath(path + "\u002fM\u0061\u0072\u006b\u0065\u0072"); _ecff != nil {
			return _ecff
		}
	}
	for _eceba, _adgda := range _debda.DPt {
		if _gabgc := _adgda.ValidateWithPath(_b.Sprintf("\u0025\u0073\u002f\u0044\u0050\u0074\u005b\u0025\u0064\u005d", path, _eceba)); _gabgc != nil {
			return _gabgc
		}
	}
	if _debda.DLbls != nil {
		if _ebdfa := _debda.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _ebdfa != nil {
			return _ebdfa
		}
	}
	if _debda.Cat != nil {
		if _ffcef := _debda.Cat.ValidateWithPath(path + "\u002f\u0043\u0061\u0074"); _ffcef != nil {
			return _ffcef
		}
	}
	if _debda.Val != nil {
		if _bdbc := _debda.Val.ValidateWithPath(path + "\u002f\u0056\u0061\u006c"); _bdbc != nil {
			return _bdbc
		}
	}
	if _debda.ExtLst != nil {
		if _cgdb := _debda.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _cgdb != nil {
			return _cgdb
		}
	}
	return nil
}

// ValidateWithPath validates the CT_PivotSource and its children, prefixing error messages with path
func (_bdacb *CT_PivotSource) ValidateWithPath(path string) error {
	if _accag := _bdacb.FmtId.ValidateWithPath(path + "\u002f\u0046\u006d\u0074\u0049\u0064"); _accag != nil {
		return _accag
	}
	for _bdbgf, _eggc := range _bdacb.ExtLst {
		if _ecbd := _eggc.ValidateWithPath(_b.Sprintf("\u0025\u0073\u002f\u0045\u0078\u0074\u004c\u0073\u0074\u005b\u0025\u0064\u005d", path, _bdbgf)); _ecbd != nil {
			return _ecbd
		}
	}
	return nil
}

// Validate validates the UserShapes and its children
func (_ddaed *UserShapes) Validate() error {
	return _ddaed.ValidateWithPath("\u0055\u0073\u0065\u0072\u0053\u0068\u0061\u0070\u0065\u0073")
}

type CT_Trendline struct {
	Name          *string
	SpPr          *_f.CT_ShapeProperties
	TrendlineType *CT_TrendlineType
	Order         *CT_Order
	Period        *CT_Period
	Forward       *CT_Double
	Backward      *CT_Double
	Intercept     *CT_Double
	DispRSqr      *CT_Boolean
	DispEq        *CT_Boolean
	TrendlineLbl  *CT_TrendlineLbl
	ExtLst        *CT_ExtensionList
}

// Validate validates the CT_LblAlgn and its children
func (_baebe *CT_LblAlgn) Validate() error {
	return _baebe.ValidateWithPath("\u0043\u0054\u005f\u004c\u0062\u006c\u0041\u006c\u0067\u006e")
}
func (_ecbf ST_TickMark) ValidateWithPath(path string) error {
	switch _ecbf {
	case 0, 1, 2, 3, 4:
	default:
		return _b.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_ecbf))
	}
	return nil
}
func (_afab *CT_CustSplit) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _afab.SecondPiePt != nil {
		_cgdg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0065\u0063\u006f\u006e\u0064\u0050\u0069\u0065\u0050\u0074"}}
		for _, _fgdf := range _afab.SecondPiePt {
			e.EncodeElement(_fgdf, _cgdg)
		}
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

type UserShapes struct{ _ba.CT_Drawing }

// Validate validates the CT_Surface3DChart and its children
func (_ddegf *CT_Surface3DChart) Validate() error {
	return _ddegf.ValidateWithPath("\u0043\u0054\u005f\u0053\u0075\u0072\u0066\u0061\u0063\u0065\u0033\u0044C\u0068\u0061\u0072\u0074")
}

type CT_PrintSettings struct {
	HeaderFooter    *CT_HeaderFooter
	PageMargins     *CT_PageMargins
	PageSetup       *CT_PageSetup
	LegacyDrawingHF *CT_RelId
}

func NewCT_Trendline() *CT_Trendline {
	_bgbae := &CT_Trendline{}
	_bgbae.TrendlineType = NewCT_TrendlineType()
	return _bgbae
}
func (_cfaag *ST_SecondPieSize) ValidateWithPath(path string) error {
	_ggabc := []string{}
	if _cfaag.ST_SecondPieSizePercent != nil {
		_ggabc = append(_ggabc, "\u0053\u0054\u005fSe\u0063\u006f\u006e\u0064\u0050\u0069\u0065\u0053\u0069\u007a\u0065\u0050\u0065\u0072\u0063\u0065\u006e\u0074")
	}
	if _cfaag.ST_SecondPieSizeUShort != nil {
		_ggabc = append(_ggabc, "\u0053\u0054\u005f\u0053ec\u006f\u006e\u0064\u0050\u0069\u0065\u0053\u0069\u007a\u0065\u0055\u0053\u0068\u006fr\u0074")
	}
	if len(_ggabc) > 1 {
		return _b.Errorf("%\u0073\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u006d\u0065\u006d\u0062\u0065r\u0073\u0020\u0073e\u0074:\u0020\u0025\u0076", path, _ggabc)
	}
	return nil
}
func (_babac ST_LayoutMode) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_babac.String(), start)
}
func ParseUnionST_DepthPercent(s string) (ST_DepthPercent, error) {
	if ST_DepthPercentWithSymbolPatternRe.MatchString(s) {
		return ST_DepthPercent{ST_DepthPercentWithSymbol: &s}, nil
	}
	_cbdafd, _eece := _c.ParseUint(s, 10, 16)
	if _eece != nil {
		return ST_DepthPercent{}, _eece
	}
	_afbgb := uint16(_cbdafd)
	return ST_DepthPercent{ST_DepthPercentUShort: &_afbgb}, nil
}
func (_bdgfc *ST_BarDir) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_bdgfc = 0
	case "\u0062\u0061\u0072":
		*_bdgfc = 1
	case "\u0063\u006f\u006c":
		*_bdgfc = 2
	}
	return nil
}
func (_cbfgb *CT_ScatterChart) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_ffeaca := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0063\u0061\u0074\u0074\u0065\u0072S\u0074\u0079\u006c\u0065"}}
	e.EncodeElement(_cbfgb.ScatterStyle, _ffeaca)
	if _cbfgb.VaryColors != nil {
		_fgded := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_cbfgb.VaryColors, _fgded)
	}
	if _cbfgb.Ser != nil {
		_geabe := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _cgaa := range _cbfgb.Ser {
			e.EncodeElement(_cgaa, _geabe)
		}
	}
	if _cbfgb.DLbls != nil {
		_abgcg := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_cbfgb.DLbls, _abgcg)
	}
	_ebcd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	for _, _efbf := range _cbfgb.AxId {
		e.EncodeElement(_efbf, _ebcd)
	}
	if _cbfgb.ExtLst != nil {
		_bfaf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_cbfgb.ExtLst, _bfaf)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

type CT_SizeRepresents struct{ ValAttr ST_SizeRepresents }

func (_aedfd ST_PageSetupOrientation) ValidateWithPath(path string) error {
	switch _aedfd {
	case 0, 1, 2, 3:
	default:
		return _b.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_aedfd))
	}
	return nil
}
func (_bgfg ST_TimeUnit) String() string {
	switch _bgfg {
	case 0:
		return ""
	case 1:
		return "\u0064\u0061\u0079\u0073"
	case 2:
		return "\u006d\u006f\u006e\u0074\u0068\u0073"
	case 3:
		return "\u0079\u0065\u0061r\u0073"
	}
	return ""
}
func (_ddbb ST_LegendPos) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_ccgbcf := _e.Attr{}
	_ccgbcf.Name = name
	switch _ddbb {
	case ST_LegendPosUnset:
		_ccgbcf.Value = ""
	case ST_LegendPosB:
		_ccgbcf.Value = "\u0062"
	case ST_LegendPosTr:
		_ccgbcf.Value = "\u0074\u0072"
	case ST_LegendPosL:
		_ccgbcf.Value = "\u006c"
	case ST_LegendPosR:
		_ccgbcf.Value = "\u0072"
	case ST_LegendPosT:
		_ccgbcf.Value = "\u0074"
	}
	return _ccgbcf, nil
}

// ValidateWithPath validates the CT_NumData and its children, prefixing error messages with path
func (_dcda *CT_NumData) ValidateWithPath(path string) error {
	if _dcda.PtCount != nil {
		if _cbeb := _dcda.PtCount.ValidateWithPath(path + "\u002f\u0050\u0074\u0043\u006f\u0075\u006e\u0074"); _cbeb != nil {
			return _cbeb
		}
	}
	for _egdfc, _ebba := range _dcda.Pt {
		if _fcacee := _ebba.ValidateWithPath(_b.Sprintf("\u0025s\u002f\u0050\u0074\u005b\u0025\u0064]", path, _egdfc)); _fcacee != nil {
			return _fcacee
		}
	}
	if _dcda.ExtLst != nil {
		if _afdd := _dcda.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _afdd != nil {
			return _afdd
		}
	}
	return nil
}

type CT_OfPieType struct{ ValAttr ST_OfPieType }
type CT_LegendPos struct{ ValAttr ST_LegendPos }

func (_acefd ST_SizeRepresents) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_acefd.String(), start)
}
func (_bfbbd *ST_BuiltInUnit) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_eefag, _afcag := d.Token()
	if _afcag != nil {
		return _afcag
	}
	if _dgefg, _baebb := _eefag.(_e.EndElement); _baebb && _dgefg.Name == start.Name {
		*_bfbbd = 1
		return nil
	}
	if _bgdgg, _bggcc := _eefag.(_e.CharData); !_bggcc {
		return _b.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _eefag)
	} else {
		switch string(_bgdgg) {
		case "":
			*_bfbbd = 0
		case "\u0068\u0075\u006e\u0064\u0072\u0065\u0064\u0073":
			*_bfbbd = 1
		case "\u0074h\u006f\u0075\u0073\u0061\u006e\u0064s":
			*_bfbbd = 2
		case "\u0074\u0065\u006eT\u0068\u006f\u0075\u0073\u0061\u006e\u0064\u0073":
			*_bfbbd = 3
		case "\u0068\u0075n\u0064\u0072\u0065d\u0054\u0068\u006f\u0075\u0073\u0061\u006e\u0064\u0073":
			*_bfbbd = 4
		case "\u006d\u0069\u006c\u006c\u0069\u006f\u006e\u0073":
			*_bfbbd = 5
		case "t\u0065\u006e\u004d\u0069\u006c\u006c\u0069\u006f\u006e\u0073":
			*_bfbbd = 6
		case "\u0068u\u006ed\u0072\u0065\u0064\u004d\u0069\u006c\u006c\u0069\u006f\u006e\u0073":
			*_bfbbd = 7
		case "\u0062\u0069\u006c\u006c\u0069\u006f\u006e\u0073":
			*_bfbbd = 8
		case "\u0074r\u0069\u006c\u006c\u0069\u006f\u006es":
			*_bfbbd = 9
		}
	}
	_eefag, _afcag = d.Token()
	if _afcag != nil {
		return _afcag
	}
	if _fbbac, _ecbea := _eefag.(_e.EndElement); _ecbea && _fbbac.Name == start.Name {
		return nil
	}
	return _b.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _eefag)
}
func (_ddabg *CT_TextLanguageID) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _fefbf := range start.Attr {
		if _fefbf.Name.Local == "\u0076\u0061\u006c" {
			_gfca, _efga := _fefbf.Value, error(nil)
			if _efga != nil {
				return _efga
			}
			_ddabg.ValAttr = _gfca
			continue
		}
	}
	for {
		_bdafbb, _aeafc := d.Token()
		if _aeafc != nil {
			return _b.Errorf("\u0070\u0061r\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005f\u0054\u0065\u0078\u0074\u004c\u0061\u006e\u0067\u0075\u0061\u0067\u0065\u0049\u0044: \u0025\u0073", _aeafc)
		}
		if _acddd, _eacccf := _bdafbb.(_e.EndElement); _eacccf && _acddd.Name == start.Name {
			break
		}
	}
	return nil
}

// Validate validates the CT_Area3DChart and its children
func (_dd *CT_Area3DChart) Validate() error {
	return _dd.ValidateWithPath("\u0043\u0054\u005f\u0041\u0072\u0065\u0061\u0033\u0044C\u0068\u0061\u0072\u0074")
}

// Validate validates the EG_AreaChartShared and its children
func (_cgeee *EG_AreaChartShared) Validate() error {
	return _cgeee.ValidateWithPath("\u0045G\u005fA\u0072\u0065\u0061\u0043\u0068a\u0072\u0074S\u0068\u0061\u0072\u0065\u0064")
}

// Validate validates the CT_ChartLines and its children
func (_cfcf *CT_ChartLines) Validate() error {
	return _cfcf.ValidateWithPath("\u0043\u0054\u005f\u0043\u0068\u0061\u0072\u0074\u004c\u0069\u006e\u0065\u0073")
}

type CT_StockChart struct {
	Ser        []*CT_LineSer
	DLbls      *CT_DLbls
	DropLines  *CT_ChartLines
	HiLowLines *CT_ChartLines
	UpDownBars *CT_UpDownBars
	AxId       []*CT_UnsignedInt
	ExtLst     *CT_ExtensionList
}

// ValidateWithPath validates the CT_Surface and its children, prefixing error messages with path
func (_dfca *CT_Surface) ValidateWithPath(path string) error {
	if _dfca.Thickness != nil {
		if _bgaf := _dfca.Thickness.ValidateWithPath(path + "\u002f\u0054\u0068\u0069\u0063\u006b\u006e\u0065\u0073\u0073"); _bgaf != nil {
			return _bgaf
		}
	}
	if _dfca.SpPr != nil {
		if _eddae := _dfca.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _eddae != nil {
			return _eddae
		}
	}
	if _dfca.PictureOptions != nil {
		if _dabf := _dfca.PictureOptions.ValidateWithPath(path + "\u002fP\u0069c\u0074\u0075\u0072\u0065\u004f\u0070\u0074\u0069\u006f\u006e\u0073"); _dabf != nil {
			return _dabf
		}
	}
	if _dfca.ExtLst != nil {
		if _gfbgf := _dfca.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _gfbgf != nil {
			return _gfbgf
		}
	}
	return nil
}

type CT_RotX struct{ ValAttr *int8 }

// ST_Thickness is a union type
type ST_Thickness struct {
	ST_ThicknessPercent *string
	Uint32              *uint32
}

// Validate validates the CT_BubbleScale and its children
func (_ddcd *CT_BubbleScale) Validate() error {
	return _ddcd.ValidateWithPath("\u0043\u0054\u005f\u0042\u0075\u0062\u0062\u006c\u0065S\u0063\u0061\u006c\u0065")
}
func NewCT_UnsignedInt() *CT_UnsignedInt { _ebfebf := &CT_UnsignedInt{}; return _ebfebf }
func (_effg *ST_TickMark) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_ecadg, _cffcg := d.Token()
	if _cffcg != nil {
		return _cffcg
	}
	if _geebc, _aebbc := _ecadg.(_e.EndElement); _aebbc && _geebc.Name == start.Name {
		*_effg = 1
		return nil
	}
	if _ffeec, _efbff := _ecadg.(_e.CharData); !_efbff {
		return _b.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _ecadg)
	} else {
		switch string(_ffeec) {
		case "":
			*_effg = 0
		case "\u0063\u0072\u006fs\u0073":
			*_effg = 1
		case "\u0069\u006e":
			*_effg = 2
		case "\u006e\u006f\u006e\u0065":
			*_effg = 3
		case "\u006f\u0075\u0074":
			*_effg = 4
		}
	}
	_ecadg, _cffcg = d.Token()
	if _cffcg != nil {
		return _cffcg
	}
	if _fafff, _ceefc := _ecadg.(_e.EndElement); _ceefc && _fafff.Name == start.Name {
		return nil
	}
	return _b.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _ecadg)
}
func (_gdefd *CT_Thickness) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _gcabg := range start.Attr {
		if _gcabg.Name.Local == "\u0076\u0061\u006c" {
			_bdcdf, _ddegfb := ParseUnionST_Thickness(_gcabg.Value)
			if _ddegfb != nil {
				return _ddegfb
			}
			_gdefd.ValAttr = _bdcdf
			continue
		}
	}
	for {
		_cbfef, _fffbaa := d.Token()
		if _fffbaa != nil {
			return _b.Errorf("\u0070a\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005f\u0054\u0068i\u0063\u006b\u006e\u0065\u0073\u0073\u003a\u0020\u0025\u0073", _fffbaa)
		}
		if _dccg, _febcg := _cbfef.(_e.EndElement); _febcg && _dccg.Name == start.Name {
			break
		}
	}
	return nil
}
func NewCT_Chart() *CT_Chart { _bdga := &CT_Chart{}; _bdga.PlotArea = NewCT_PlotArea(); return _bdga }

type CT_ChartSpace struct {
	Date1904       *CT_Boolean
	Lang           *CT_TextLanguageID
	RoundedCorners *CT_Boolean
	Style          *CT_Style
	ClrMapOvr      *_f.CT_ColorMapping
	PivotSource    *CT_PivotSource
	Protection     *CT_Protection
	Chart          *CT_Chart
	SpPr           *_f.CT_ShapeProperties
	TxPr           *_f.CT_TextBody
	ExternalData   *CT_ExternalData
	PrintSettings  *CT_PrintSettings
	UserShapes     *CT_RelId
	ExtLst         *CT_ExtensionList
}

func (_efed *CT_BandFmts) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_edd:
	for {
		_accc, _cffcb := d.Token()
		if _cffcb != nil {
			return _cffcb
		}
		switch _fgef := _accc.(type) {
		case _e.StartElement:
			switch _fgef.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062a\u006e\u0064\u0046\u006d\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062a\u006e\u0064\u0046\u006d\u0074"}:
				_gge := NewCT_BandFmt()
				if _gaf := d.DecodeElement(_gge, &_fgef); _gaf != nil {
					return _gaf
				}
				_efed.BandFmt = append(_efed.BandFmt, _gge)
			default:
				_a.Log.Debug("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0042\u0061\u006e\u0064\u0046\u006d\u0074\u0073\u0020\u0025\u0076", _fgef.Name)
				if _gbda := d.Skip(); _gbda != nil {
					return _gbda
				}
			}
		case _e.EndElement:
			break _edd
		case _e.CharData:
		}
	}
	return nil
}
func (_dbde *CT_Order) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _dbde.ValAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0076\u0061\u006c"}, Value: _b.Sprintf("\u0025\u0076", *_dbde.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}
func (_ceed *CT_RelId) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0072\u003a\u0069\u0064"}, Value: _b.Sprintf("\u0025\u0076", _ceed.IdAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}
func (_efadf *ST_ErrValType) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_aeadb, _ffad := d.Token()
	if _ffad != nil {
		return _ffad
	}
	if _gbeda, _cgag := _aeadb.(_e.EndElement); _cgag && _gbeda.Name == start.Name {
		*_efadf = 1
		return nil
	}
	if _cgge, _acdbg := _aeadb.(_e.CharData); !_acdbg {
		return _b.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _aeadb)
	} else {
		switch string(_cgge) {
		case "":
			*_efadf = 0
		case "\u0063\u0075\u0073\u0074":
			*_efadf = 1
		case "\u0066\u0069\u0078\u0065\u0064\u0056\u0061\u006c":
			*_efadf = 2
		case "\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u0061\u0067\u0065":
			*_efadf = 3
		case "\u0073\u0074\u0064\u0044\u0065\u0076":
			*_efadf = 4
		case "\u0073\u0074\u0064\u0045\u0072\u0072":
			*_efadf = 5
		}
	}
	_aeadb, _ffad = d.Token()
	if _ffad != nil {
		return _ffad
	}
	if _abaaf, _cfdf := _aeadb.(_e.EndElement); _cfdf && _abaaf.Name == start.Name {
		return nil
	}
	return _b.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _aeadb)
}
func (_bgdba ST_PictureFormat) String() string {
	switch _bgdba {
	case 0:
		return ""
	case 1:
		return "\u0073t\u0072\u0065\u0074\u0063\u0068"
	case 2:
		return "\u0073\u0074\u0061c\u006b"
	case 3:
		return "\u0073\u0074\u0061\u0063\u006b\u0053\u0063\u0061\u006c\u0065"
	}
	return ""
}
func (_ffgf *CT_StrRef) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_geba:
	for {
		_gcae, _bccaf := d.Token()
		if _bccaf != nil {
			return _bccaf
		}
		switch _bdadb := _gcae.(type) {
		case _e.StartElement:
			switch _bdadb.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066"}:
				if _gdcag := d.DecodeElement(&_ffgf.F, &_bdadb); _gdcag != nil {
					return _gdcag
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u0043\u0061\u0063\u0068\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u0043\u0061\u0063\u0068\u0065"}:
				_ffgf.StrCache = NewCT_StrData()
				if _bgbc := d.DecodeElement(_ffgf.StrCache, &_bdadb); _bgbc != nil {
					return _bgbc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_ffgf.ExtLst = NewCT_ExtensionList()
				if _dagfc := d.DecodeElement(_ffgf.ExtLst, &_bdadb); _dagfc != nil {
					return _dagfc
				}
			default:
				_a.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u0053\u0074\u0072R\u0065\u0066 \u0025\u0076", _bdadb.Name)
				if _ccacd := d.Skip(); _ccacd != nil {
					return _ccacd
				}
			}
		case _e.EndElement:
			break _geba
		case _e.CharData:
		}
	}
	return nil
}
func (_fdc *CT_AxDataSourceChoice) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_aae:
	for {
		_aef, _degd := d.Token()
		if _degd != nil {
			return _degd
		}
		switch _dgad := _aef.(type) {
		case _e.StartElement:
			switch _dgad.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0075\u006c\u0074\u0069\u004c\u0076\u006c\u0053t\u0072\u0052\u0065\u0066"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0075\u006c\u0074\u0069\u004c\u0076\u006c\u0053t\u0072\u0052\u0065\u0066"}:
				_fdc.MultiLvlStrRef = NewCT_MultiLvlStrRef()
				if _caf := d.DecodeElement(_fdc.MultiLvlStrRef, &_dgad); _caf != nil {
					return _caf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0052\u0065\u0066"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0052\u0065\u0066"}:
				_fdc.NumRef = NewCT_NumRef()
				if _aefd := d.DecodeElement(_fdc.NumRef, &_dgad); _aefd != nil {
					return _aefd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u004c\u0069\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u004c\u0069\u0074"}:
				_fdc.NumLit = NewCT_NumData()
				if _gfg := d.DecodeElement(_fdc.NumLit, &_dgad); _gfg != nil {
					return _gfg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u0052\u0065\u0066"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u0052\u0065\u0066"}:
				_fdc.StrRef = NewCT_StrRef()
				if _bcb := d.DecodeElement(_fdc.StrRef, &_dgad); _bcb != nil {
					return _bcb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u004c\u0069\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u004c\u0069\u0074"}:
				_fdc.StrLit = NewCT_StrData()
				if _gba := d.DecodeElement(_fdc.StrLit, &_dgad); _gba != nil {
					return _gba
				}
			default:
				_a.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069n\u0067\u0020\u0075n\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006de\u006e\u0074\u0020\u006f\u006e C\u0054\u005f\u0041\u0078\u0044\u0061\u0074\u0061\u0053\u006f\u0075\u0072\u0063\u0065\u0043\u0068\u006f\u0069\u0063\u0065\u0020\u0025\u0076", _dgad.Name)
				if _fdg := d.Skip(); _fdg != nil {
					return _fdg
				}
			}
		case _e.EndElement:
			break _aae
		case _e.CharData:
		}
	}
	return nil
}

type EG_SurfaceChartShared struct {
	Wireframe *CT_Boolean
	Ser       []*CT_SurfaceSer
	BandFmts  *CT_BandFmts
}

// Validate validates the CT_CustSplit and its children
func (_cffb *CT_CustSplit) Validate() error {
	return _cffb.ValidateWithPath("\u0043\u0054\u005fC\u0075\u0073\u0074\u0053\u0070\u006c\u0069\u0074")
}
func (_cbed *CT_HPercent) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _fbcef := range start.Attr {
		if _fbcef.Name.Local == "\u0076\u0061\u006c" {
			_bbca, _cfgb := ParseUnionST_HPercent(_fbcef.Value)
			if _cfgb != nil {
				return _cfgb
			}
			_cbed.ValAttr = &_bbca
			continue
		}
	}
	for {
		_gdbg, _fgcc := d.Token()
		if _fgcc != nil {
			return _b.Errorf("\u0070\u0061\u0072si\u006e\u0067\u0020\u0043\u0054\u005f\u0048\u0050\u0065\u0072\u0063\u0065\u006e\u0074\u003a\u0020\u0025\u0073", _fgcc)
		}
		if _facd, _gded := _gdbg.(_e.EndElement); _gded && _facd.Name == start.Name {
			break
		}
	}
	return nil
}
func NewCT_PieChart() *CT_PieChart { _deace := &CT_PieChart{}; return _deace }
func (_acgc *CT_DLbl) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_acgc.Idx = NewCT_UnsignedInt()
_gdga:
	for {
		_dafb, _ebfg := d.Token()
		if _ebfg != nil {
			return _ebfg
		}
		switch _cade := _dafb.(type) {
		case _e.StartElement:
			switch _cade.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}:
				if _dac := d.DecodeElement(_acgc.Idx, &_cade); _dac != nil {
					return _dac
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}:
				if _acgc.Choice == nil {
					_acgc.Choice = NewCT_DLblChoice()
				}
				if _egf := d.DecodeElement(&_acgc.Choice.Delete, &_cade); _egf != nil {
					return _egf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}:
				if _acgc.Choice == nil {
					_acgc.Choice = NewCT_DLblChoice()
				}
				if _eabc := d.DecodeElement(&_acgc.Choice.Layout, &_cade); _eabc != nil {
					return _eabc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				if _acgc.Choice == nil {
					_acgc.Choice = NewCT_DLblChoice()
				}
				if _agcd := d.DecodeElement(&_acgc.Choice.Tx, &_cade); _agcd != nil {
					return _agcd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}:
				if _acgc.Choice == nil {
					_acgc.Choice = NewCT_DLblChoice()
				}
				if _bccg := d.DecodeElement(&_acgc.Choice.NumFmt, &_cade); _bccg != nil {
					return _bccg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				if _acgc.Choice == nil {
					_acgc.Choice = NewCT_DLblChoice()
				}
				if _cgbf := d.DecodeElement(&_acgc.Choice.SpPr, &_cade); _cgbf != nil {
					return _cgbf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				if _acgc.Choice == nil {
					_acgc.Choice = NewCT_DLblChoice()
				}
				if _cefe := d.DecodeElement(&_acgc.Choice.TxPr, &_cade); _cefe != nil {
					return _cefe
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064L\u0062\u006c\u0050\u006f\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064L\u0062\u006c\u0050\u006f\u0073"}:
				if _acgc.Choice == nil {
					_acgc.Choice = NewCT_DLblChoice()
				}
				if _bbb := d.DecodeElement(&_acgc.Choice.DLblPos, &_cade); _bbb != nil {
					return _bbb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}:
				if _acgc.Choice == nil {
					_acgc.Choice = NewCT_DLblChoice()
				}
				if _ebfed := d.DecodeElement(&_acgc.Choice.ShowLegendKey, &_cade); _ebfed != nil {
					return _ebfed
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006f\u0077\u0056\u0061\u006c"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006f\u0077\u0056\u0061\u006c"}:
				if _acgc.Choice == nil {
					_acgc.Choice = NewCT_DLblChoice()
				}
				if _gagb := d.DecodeElement(&_acgc.Choice.ShowVal, &_cade); _gagb != nil {
					return _gagb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}:
				if _acgc.Choice == nil {
					_acgc.Choice = NewCT_DLblChoice()
				}
				if _acdd := d.DecodeElement(&_acgc.Choice.ShowCatName, &_cade); _acdd != nil {
					return _acdd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}:
				if _acgc.Choice == nil {
					_acgc.Choice = NewCT_DLblChoice()
				}
				if _beee := d.DecodeElement(&_acgc.Choice.ShowSerName, &_cade); _beee != nil {
					return _beee
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}:
				if _acgc.Choice == nil {
					_acgc.Choice = NewCT_DLblChoice()
				}
				if _fafc := d.DecodeElement(&_acgc.Choice.ShowPercent, &_cade); _fafc != nil {
					return _fafc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0042\u0075\u0062\u0062\u006ce\u0053\u0069\u007a\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0042\u0075\u0062\u0062\u006ce\u0053\u0069\u007a\u0065"}:
				if _acgc.Choice == nil {
					_acgc.Choice = NewCT_DLblChoice()
				}
				if _gdgf := d.DecodeElement(&_acgc.Choice.ShowBubbleSize, &_cade); _gdgf != nil {
					return _gdgf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u0070\u0061\u0072\u0061\u0074\u006fr"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u0070\u0061\u0072\u0061\u0074\u006fr"}:
				if _acgc.Choice == nil {
					_acgc.Choice = NewCT_DLblChoice()
				}
				if _dabea := d.DecodeElement(&_acgc.Choice.Separator, &_cade); _dabea != nil {
					return _dabea
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_acgc.ExtLst = NewCT_ExtensionList()
				if _ffeb := d.DecodeElement(_acgc.ExtLst, &_cade); _ffeb != nil {
					return _ffeb
				}
			default:
				_a.Log.Debug("\u0073\u006b\u0069p\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043T\u005f\u0044\u004c\u0062\u006c\u0020\u0025\u0076", _cade.Name)
				if _acad := d.Skip(); _acad != nil {
					return _acad
				}
			}
		case _e.EndElement:
			break _gdga
		case _e.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_CustSplit and its children, prefixing error messages with path
func (_bcgfc *CT_CustSplit) ValidateWithPath(path string) error {
	for _efg, _fddg := range _bcgfc.SecondPiePt {
		if _edb := _fddg.ValidateWithPath(_b.Sprintf("\u0025s\u002fS\u0065\u0063\u006f\u006e\u0064P\u0069\u0065P\u0074\u005b\u0025\u0064\u005d", path, _efg)); _edb != nil {
			return _edb
		}
	}
	return nil
}

type CT_BubbleSer struct {
	Idx              *CT_UnsignedInt
	Order            *CT_UnsignedInt
	Tx               *CT_SerTx
	SpPr             *_f.CT_ShapeProperties
	InvertIfNegative *CT_Boolean
	DPt              []*CT_DPt
	DLbls            *CT_DLbls
	Trendline        []*CT_Trendline
	ErrBars          []*CT_ErrBars
	XVal             *CT_AxDataSource
	YVal             *CT_NumDataSource
	BubbleSize       *CT_NumDataSource
	Bubble3D         *CT_Boolean
	ExtLst           *CT_ExtensionList
}

func (_addff *ST_ErrBarType) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_fcgcg, _cdebb := d.Token()
	if _cdebb != nil {
		return _cdebb
	}
	if _feffbb, _geacb := _fcgcg.(_e.EndElement); _geacb && _feffbb.Name == start.Name {
		*_addff = 1
		return nil
	}
	if _aadga, _cgdd := _fcgcg.(_e.CharData); !_cgdd {
		return _b.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _fcgcg)
	} else {
		switch string(_aadga) {
		case "":
			*_addff = 0
		case "\u0062\u006f\u0074\u0068":
			*_addff = 1
		case "\u006d\u0069\u006eu\u0073":
			*_addff = 2
		case "\u0070\u006c\u0075\u0073":
			*_addff = 3
		}
	}
	_fcgcg, _cdebb = d.Token()
	if _cdebb != nil {
		return _cdebb
	}
	if _gdeae, _aeade := _fcgcg.(_e.EndElement); _aeade && _gdeae.Name == start.Name {
		return nil
	}
	return _b.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _fcgcg)
}

// Validate validates the CT_AxDataSource and its children
func (_cffc *CT_AxDataSource) Validate() error {
	return _cffc.ValidateWithPath("\u0043T\u005fA\u0078\u0044\u0061\u0074\u0061\u0053\u006f\u0075\u0072\u0063\u0065")
}

// ValidateWithPath validates the CT_Shape and its children, prefixing error messages with path
func (_fedfd *CT_Shape) ValidateWithPath(path string) error {
	if _cffea := _fedfd.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _cffea != nil {
		return _cffea
	}
	return nil
}
func (_fag *CT_BarGrouping) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _bdg := range start.Attr {
		if _bdg.Name.Local == "\u0076\u0061\u006c" {
			_fag.ValAttr.UnmarshalXMLAttr(_bdg)
			continue
		}
	}
	for {
		_babf, _dddb := d.Token()
		if _dddb != nil {
			return _b.Errorf("\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fB\u0061\u0072\u0047\u0072\u006f\u0075\u0070\u0069\u006e\u0067:\u0020\u0025\u0073", _dddb)
		}
		if _gbaed, _dfbe := _babf.(_e.EndElement); _dfbe && _gbaed.Name == start.Name {
			break
		}
	}
	return nil
}

// ValidateWithPath validates the CT_DoughnutChart and its children, prefixing error messages with path
func (_adddd *CT_DoughnutChart) ValidateWithPath(path string) error {
	if _adddd.VaryColors != nil {
		if _dbdd := _adddd.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _dbdd != nil {
			return _dbdd
		}
	}
	for _fbdg, _bcgce := range _adddd.Ser {
		if _dgc := _bcgce.ValidateWithPath(_b.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _fbdg)); _dgc != nil {
			return _dgc
		}
	}
	if _adddd.DLbls != nil {
		if _bdde := _adddd.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _bdde != nil {
			return _bdde
		}
	}
	if _adddd.FirstSliceAng != nil {
		if _gffg := _adddd.FirstSliceAng.ValidateWithPath(path + "\u002f\u0046\u0069\u0072\u0073\u0074\u0053\u006c\u0069c\u0065\u0041\u006e\u0067"); _gffg != nil {
			return _gffg
		}
	}
	if _adddd.HoleSize != nil {
		if _faeg := _adddd.HoleSize.ValidateWithPath(path + "\u002fH\u006f\u006c\u0065\u0053\u0069\u007ae"); _faeg != nil {
			return _faeg
		}
	}
	if _adddd.ExtLst != nil {
		if _gfgae := _adddd.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _gfgae != nil {
			return _gfgae
		}
	}
	return nil
}
func (_fdefe ST_Grouping) Validate() error { return _fdefe.ValidateWithPath("") }

// Validate validates the CT_PivotFmt and its children
func (_fdcb *CT_PivotFmt) Validate() error {
	return _fdcb.ValidateWithPath("C\u0054\u005f\u0050\u0069\u0076\u006f\u0074\u0046\u006d\u0074")
}
func (_ededg ST_CrossBetween) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_befce := _e.Attr{}
	_befce.Name = name
	switch _ededg {
	case ST_CrossBetweenUnset:
		_befce.Value = ""
	case ST_CrossBetweenBetween:
		_befce.Value = "\u0062e\u0074\u0077\u0065\u0065\u006e"
	case ST_CrossBetweenMidCat:
		_befce.Value = "\u006d\u0069\u0064\u0043\u0061\u0074"
	}
	return _befce, nil
}
func (_gfbee *CT_TickMark) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _gfbee.ValAttr != ST_TickMarkUnset {
		_fdeg, _aeecff := _gfbee.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
		if _aeecff != nil {
			return _aeecff
		}
		start.Attr = append(start.Attr, _fdeg)
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}
func (_bcgdb *ST_LegendPos) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_fbbfd, _gbbdf := d.Token()
	if _gbbdf != nil {
		return _gbbdf
	}
	if _cadag, _fabgcd := _fbbfd.(_e.EndElement); _fabgcd && _cadag.Name == start.Name {
		*_bcgdb = 1
		return nil
	}
	if _fbade, _afcad := _fbbfd.(_e.CharData); !_afcad {
		return _b.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _fbbfd)
	} else {
		switch string(_fbade) {
		case "":
			*_bcgdb = 0
		case "\u0062":
			*_bcgdb = 1
		case "\u0074\u0072":
			*_bcgdb = 2
		case "\u006c":
			*_bcgdb = 3
		case "\u0072":
			*_bcgdb = 4
		case "\u0074":
			*_bcgdb = 5
		}
	}
	_fbbfd, _gbbdf = d.Token()
	if _gbbdf != nil {
		return _gbbdf
	}
	if _afaaf, _ffbef := _fbbfd.(_e.EndElement); _ffbef && _afaaf.Name == start.Name {
		return nil
	}
	return _b.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _fbbfd)
}

type CT_Layout struct {
	ManualLayout *CT_ManualLayout
	ExtLst       *CT_ExtensionList
}
type CT_Area3DChart struct {
	Grouping   *CT_Grouping
	VaryColors *CT_Boolean
	Ser        []*CT_AreaSer
	DLbls      *CT_DLbls
	DropLines  *CT_ChartLines
	GapDepth   *CT_GapAmount
	AxId       []*CT_UnsignedInt
	ExtLst     *CT_ExtensionList
}

func (_dfcfd *CT_Thickness) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0076\u0061\u006c"}, Value: _b.Sprintf("\u0025\u0076", _dfcfd.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_LblOffset and its children, prefixing error messages with path
func (_gaae *CT_LblOffset) ValidateWithPath(path string) error {
	if _gaae.ValAttr != nil {
		if _caag := _gaae.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _caag != nil {
			return _caag
		}
	}
	return nil
}
func NewEG_AxSharedChoice() *EG_AxSharedChoice { _cacea := &EG_AxSharedChoice{}; return _cacea }
func (_gbf *CT_DispUnitsLbl) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _gbf.Layout != nil {
		_geaeb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006c\u0061\u0079\u006f\u0075\u0074"}}
		e.EncodeElement(_gbf.Layout, _geaeb)
	}
	if _gbf.Tx != nil {
		_edgecb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078"}}
		e.EncodeElement(_gbf.Tx, _edgecb)
	}
	if _gbf.SpPr != nil {
		_dbfd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_gbf.SpPr, _dbfd)
	}
	if _gbf.TxPr != nil {
		_agda := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_gbf.TxPr, _agda)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}
func NewUserShapes() *UserShapes {
	_bfeaae := &UserShapes{}
	_bfeaae.CT_Drawing = *_ba.NewCT_Drawing()
	return _bfeaae
}
func (_eeeccf *EG_DLblShared) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _eeeccf.NumFmt != nil {
		_efddg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u0046\u006d\u0074"}}
		e.EncodeElement(_eeeccf.NumFmt, _efddg)
	}
	if _eeeccf.SpPr != nil {
		_ccegae := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_eeeccf.SpPr, _ccegae)
	}
	if _eeeccf.TxPr != nil {
		_afcf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_eeeccf.TxPr, _afcf)
	}
	if _eeeccf.DLblPos != nil {
		_cafbe := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0050\u006fs"}}
		e.EncodeElement(_eeeccf.DLblPos, _cafbe)
	}
	if _eeeccf.ShowLegendKey != nil {
		_cdbed := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0073h\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}}
		e.EncodeElement(_eeeccf.ShowLegendKey, _cdbed)
	}
	if _eeeccf.ShowVal != nil {
		_gcad := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0073\u0068\u006f\u0077\u0056\u0061l"}}
		e.EncodeElement(_eeeccf.ShowVal, _gcad)
	}
	if _eeeccf.ShowCatName != nil {
		_edfab := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}}
		e.EncodeElement(_eeeccf.ShowCatName, _edfab)
	}
	if _eeeccf.ShowSerName != nil {
		_dddcda := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}}
		e.EncodeElement(_eeeccf.ShowSerName, _dddcda)
	}
	if _eeeccf.ShowPercent != nil {
		_bcabc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}}
		e.EncodeElement(_eeeccf.ShowPercent, _bcabc)
	}
	if _eeeccf.ShowBubbleSize != nil {
		_cgaec := _e.StartElement{Name: _e.Name{Local: "\u0063\u003as\u0068\u006f\u0077B\u0075\u0062\u0062\u006c\u0065\u0053\u0069\u007a\u0065"}}
		e.EncodeElement(_eeeccf.ShowBubbleSize, _cgaec)
	}
	if _eeeccf.Separator != nil {
		_feegd := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0073\u0065\u0070\u0061\u0072\u0061\u0074\u006f\u0072"}}
		_gb.AddPreserveSpaceAttr(&_feegd, *_eeeccf.Separator)
		e.EncodeElement(_eeeccf.Separator, _feegd)
	}
	return nil
}

type CT_CrossBetween struct{ ValAttr ST_CrossBetween }

func NewCT_Crosses() *CT_Crosses {
	_cgbca := &CT_Crosses{}
	_cgbca.ValAttr = ST_Crosses(1)
	return _cgbca
}
func NewCT_OfPieChart() *CT_OfPieChart {
	_cecfg := &CT_OfPieChart{}
	_cecfg.OfPieType = NewCT_OfPieType()
	return _cecfg
}

// ValidateWithPath validates the CT_PictureOptions and its children, prefixing error messages with path
func (_deagf *CT_PictureOptions) ValidateWithPath(path string) error {
	if _deagf.ApplyToFront != nil {
		if _agceg := _deagf.ApplyToFront.ValidateWithPath(path + "\u002f\u0041\u0070\u0070\u006c\u0079\u0054\u006f\u0046\u0072\u006f\u006e\u0074"); _agceg != nil {
			return _agceg
		}
	}
	if _deagf.ApplyToSides != nil {
		if _bcacd := _deagf.ApplyToSides.ValidateWithPath(path + "\u002f\u0041\u0070\u0070\u006c\u0079\u0054\u006f\u0053\u0069\u0064\u0065\u0073"); _bcacd != nil {
			return _bcacd
		}
	}
	if _deagf.ApplyToEnd != nil {
		if _eggf := _deagf.ApplyToEnd.ValidateWithPath(path + "/\u0041\u0070\u0070\u006c\u0079\u0054\u006f\u0045\u006e\u0064"); _eggf != nil {
			return _eggf
		}
	}
	if _deagf.PictureFormat != nil {
		if _fbbgg := _deagf.PictureFormat.ValidateWithPath(path + "\u002f\u0050\u0069\u0063\u0074\u0075\u0072\u0065\u0046o\u0072\u006d\u0061\u0074"); _fbbgg != nil {
			return _fbbgg
		}
	}
	if _deagf.PictureStackUnit != nil {
		if _aefbb := _deagf.PictureStackUnit.ValidateWithPath(path + "\u002f\u0050\u0069\u0063\u0074\u0075\u0072\u0065\u0053\u0074\u0061\u0063k\u0055\u006e\u0069\u0074"); _aefbb != nil {
			return _aefbb
		}
	}
	return nil
}
func (_edceg *CT_SerTxChoice) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _edceg.StrRef != nil {
		_ageba := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0074\u0072\u0052\u0065\u0066"}}
		e.EncodeElement(_edceg.StrRef, _ageba)
	}
	if _edceg.V != nil {
		_dgcb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0076"}}
		_gb.AddPreserveSpaceAttr(&_dgcb, *_edceg.V)
		e.EncodeElement(_edceg.V, _dgcb)
	}
	return nil
}

type CT_BandFmt struct {
	Idx  *CT_UnsignedInt
	SpPr *_f.CT_ShapeProperties
}

// Validate validates the CT_Style and its children
func (_bfgad *CT_Style) Validate() error {
	return _bfgad.ValidateWithPath("\u0043\u0054\u005f\u0053\u0074\u0079\u006c\u0065")
}
func NewCT_Extension() *CT_Extension { _baae := &CT_Extension{}; return _baae }
func (_feae *CT_Perspective) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _feae.ValAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0076\u0061\u006c"}, Value: _b.Sprintf("\u0025\u0076", *_feae.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}
func (_dbbd *CT_LegendEntry) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_edcg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0069d\u0078"}}
	e.EncodeElement(_dbbd.Idx, _edcg)
	if _dbbd.Choice != nil {
		_dbbd.Choice.MarshalXML(e, _e.StartElement{})
	}
	if _dbbd.ExtLst != nil {
		_decc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_dbbd.ExtLst, _decc)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}
func NewCT_PageMargins() *CT_PageMargins { _dfgf := &CT_PageMargins{}; return _dfgf }
func (_cfeff *CT_Surface) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_gefee:
	for {
		_feaf, _bbccbac := d.Token()
		if _bbccbac != nil {
			return _bbccbac
		}
		switch _ffbff := _feaf.(type) {
		case _e.StartElement:
			switch _ffbff.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074h\u0069\u0063\u006b\u006e\u0065\u0073s"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074h\u0069\u0063\u006b\u006e\u0065\u0073s"}:
				_cfeff.Thickness = NewCT_Thickness()
				if _dgcgd := d.DecodeElement(_cfeff.Thickness, &_ffbff); _dgcgd != nil {
					return _dgcgd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_cfeff.SpPr = _f.NewCT_ShapeProperties()
				if _dcfggg := d.DecodeElement(_cfeff.SpPr, &_ffbff); _dcfggg != nil {
					return _dcfggg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0063\u0074\u0075\u0072\u0065\u004f\u0070t\u0069\u006f\u006e\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0063\u0074\u0075\u0072\u0065\u004f\u0070t\u0069\u006f\u006e\u0073"}:
				_cfeff.PictureOptions = NewCT_PictureOptions()
				if _ffebg := d.DecodeElement(_cfeff.PictureOptions, &_ffbff); _ffebg != nil {
					return _ffebg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_cfeff.ExtLst = NewCT_ExtensionList()
				if _babc := d.DecodeElement(_cfeff.ExtLst, &_ffbff); _babc != nil {
					return _babc
				}
			default:
				_a.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006ce\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005fS\u0075\u0072\u0066\u0061\u0063\u0065\u0020\u0025\u0076", _ffbff.Name)
				if _dbca := d.Skip(); _dbca != nil {
					return _dbca
				}
			}
		case _e.EndElement:
			break _gefee
		case _e.CharData:
		}
	}
	return nil
}

const (
	ST_CrossBetweenUnset   ST_CrossBetween = 0
	ST_CrossBetweenBetween ST_CrossBetween = 1
	ST_CrossBetweenMidCat  ST_CrossBetween = 2
)

// Validate validates the CT_DepthPercent and its children
func (_begfe *CT_DepthPercent) Validate() error {
	return _begfe.ValidateWithPath("\u0043T\u005fD\u0065\u0070\u0074\u0068\u0050\u0065\u0072\u0063\u0065\u006e\u0074")
}
func (_dfac *CT_TrendlineType) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _dfac.ValAttr != ST_TrendlineTypeUnset {
		_ecac, _ccfff := _dfac.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
		if _ccfff != nil {
			return _ccfff
		}
		start.Attr = append(start.Attr, _ecac)
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}
func (_dfafd ST_OfPieType) String() string {
	switch _dfafd {
	case 0:
		return ""
	case 1:
		return "\u0070\u0069\u0065"
	case 2:
		return "\u0062\u0061\u0072"
	}
	return ""
}
func (_aded ST_TickLblPos) ValidateWithPath(path string) error {
	switch _aded {
	case 0, 1, 2, 3, 4:
	default:
		return _b.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_aded))
	}
	return nil
}

type CT_Shape struct{ ValAttr ST_Shape }

func (_cecfa *CT_FirstSliceAng) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _cecfa.ValAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0076\u0061\u006c"}, Value: _b.Sprintf("\u0025\u0076", *_cecfa.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}
func (_geecf *CT_ScatterChart) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_geecf.ScatterStyle = NewCT_ScatterStyle()
_ecfca:
	for {
		_ddaea, _dbfe := d.Token()
		if _dbfe != nil {
			return _dbfe
		}
		switch _abdg := _ddaea.(type) {
		case _e.StartElement:
			switch _abdg.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0063\u0061t\u0074\u0065\u0072\u0053\u0074\u0079\u006c\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0063\u0061t\u0074\u0065\u0072\u0053\u0074\u0079\u006c\u0065"}:
				if _fccbf := d.DecodeElement(_geecf.ScatterStyle, &_abdg); _fccbf != nil {
					return _fccbf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_geecf.VaryColors = NewCT_Boolean()
				if _gfgef := d.DecodeElement(_geecf.VaryColors, &_abdg); _gfgef != nil {
					return _gfgef
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_abcg := NewCT_ScatterSer()
				if _facff := d.DecodeElement(_abcg, &_abdg); _facff != nil {
					return _facff
				}
				_geecf.Ser = append(_geecf.Ser, _abcg)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_geecf.DLbls = NewCT_DLbls()
				if _ebddb := d.DecodeElement(_geecf.DLbls, &_abdg); _ebddb != nil {
					return _ebddb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				_bbddee := NewCT_UnsignedInt()
				if _fadc := d.DecodeElement(_bbddee, &_abdg); _fadc != nil {
					return _fadc
				}
				_geecf.AxId = append(_geecf.AxId, _bbddee)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_geecf.ExtLst = NewCT_ExtensionList()
				if _dfafg := d.DecodeElement(_geecf.ExtLst, &_abdg); _dfafg != nil {
					return _dfafg
				}
			default:
				_a.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074e\u0064\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0053\u0063\u0061t\u0074\u0065\u0072\u0043\u0068\u0061\u0072\u0074\u0020\u0025\u0076", _abdg.Name)
				if _ddgc := d.Skip(); _ddgc != nil {
					return _ddgc
				}
			}
		case _e.EndElement:
			break _ecfca
		case _e.CharData:
		}
	}
	return nil
}
func ParseUnionST_LblOffset(s string) (ST_LblOffset, error) {
	if ST_LblOffsetPercentPatternRe.MatchString(s) {
		return ST_LblOffset{ST_LblOffsetPercent: &s}, nil
	}
	_febd, _ceeac := _c.ParseUint(s, 10, 16)
	if _ceeac != nil {
		return ST_LblOffset{}, _ceeac
	}
	_egebb := uint16(_febd)
	return ST_LblOffset{ST_LblOffsetUShort: &_egebb}, nil
}
func (_fagb *CT_ChartLines) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_afde:
	for {
		_adcg, _acgfg := d.Token()
		if _acgfg != nil {
			return _acgfg
		}
		switch _ggcc := _adcg.(type) {
		case _e.StartElement:
			switch _ggcc.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_fagb.SpPr = _f.NewCT_ShapeProperties()
				if _fgcf := d.DecodeElement(_fagb.SpPr, &_ggcc); _fgcf != nil {
					return _fgcf
				}
			default:
				_a.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0043h\u0061\u0072\u0074\u004c\u0069\u006e\u0065\u0073 \u0025\u0076", _ggcc.Name)
				if _egda := d.Skip(); _egda != nil {
					return _egda
				}
			}
		case _e.EndElement:
			break _afde
		case _e.CharData:
		}
	}
	return nil
}
func (_bbdf *CT_AxDataSource) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_bbdf.Choice.MarshalXML(e, _e.StartElement{})
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_MultiLvlStrRef and its children
func (_bbegd *CT_MultiLvlStrRef) Validate() error {
	return _bbegd.ValidateWithPath("\u0043\u0054\u005f\u004d\u0075\u006c\u0074\u0069\u004c\u0076\u006c\u0053t\u0072\u0052\u0065\u0066")
}
func (_fcfg *CT_Chart) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _fcfg.Title != nil {
		_fbed := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0074\u0069\u0074\u006c\u0065"}}
		e.EncodeElement(_fcfg.Title, _fbed)
	}
	if _fcfg.AutoTitleDeleted != nil {
		_cdbg := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0061u\u0074\u006f\u0054\u0069\u0074l\u0065\u0044e\u006c\u0065\u0074\u0065\u0064"}}
		e.EncodeElement(_fcfg.AutoTitleDeleted, _cdbg)
	}
	if _fcfg.PivotFmts != nil {
		_cffa := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0070\u0069\u0076\u006f\u0074\u0046\u006d\u0074\u0073"}}
		e.EncodeElement(_fcfg.PivotFmts, _cffa)
	}
	if _fcfg.View3D != nil {
		_efcb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0076\u0069\u0065\u0077\u0033\u0044"}}
		e.EncodeElement(_fcfg.View3D, _efcb)
	}
	if _fcfg.Floor != nil {
		_ddaad := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0066\u006c\u006f\u006f\u0072"}}
		e.EncodeElement(_fcfg.Floor, _ddaad)
	}
	if _fcfg.SideWall != nil {
		_cbbg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0069\u0064\u0065\u0057\u0061\u006c\u006c"}}
		e.EncodeElement(_fcfg.SideWall, _cbbg)
	}
	if _fcfg.BackWall != nil {
		_gab := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0062\u0061\u0063\u006b\u0057\u0061\u006c\u006c"}}
		e.EncodeElement(_fcfg.BackWall, _gab)
	}
	_fbdd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0070\u006c\u006f\u0074\u0041\u0072\u0065\u0061"}}
	e.EncodeElement(_fcfg.PlotArea, _fbdd)
	if _fcfg.Legend != nil {
		_aced := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006c\u0065\u0067\u0065\u006e\u0064"}}
		e.EncodeElement(_fcfg.Legend, _aced)
	}
	if _fcfg.PlotVisOnly != nil {
		_gadg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0070\u006c\u006f\u0074\u0056\u0069\u0073\u004f\u006e\u006c\u0079"}}
		e.EncodeElement(_fcfg.PlotVisOnly, _gadg)
	}
	if _fcfg.DispBlanksAs != nil {
		_acdg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0064\u0069\u0073\u0070\u0042\u006c\u0061n\u006b\u0073\u0041\u0073"}}
		e.EncodeElement(_fcfg.DispBlanksAs, _acdg)
	}
	if _fcfg.ShowDLblsOverMax != nil {
		_febg := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0073h\u006f\u0077\u0044\u004c\u0062l\u0073\u004fv\u0065\u0072\u004d\u0061\u0078"}}
		e.EncodeElement(_fcfg.ShowDLblsOverMax, _febg)
	}
	if _fcfg.ExtLst != nil {
		_ceaga := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_fcfg.ExtLst, _ceaga)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}
func NewCT_Perspective() *CT_Perspective { _daaee := &CT_Perspective{}; return _daaee }
func (_agga *CT_DLbls) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _agga.DLbl != nil {
		_abdf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0064\u004c\u0062\u006c"}}
		for _, _beef := range _agga.DLbl {
			e.EncodeElement(_beef, _abdf)
		}
	}
	if _agga.Choice != nil {
		_agga.Choice.MarshalXML(e, _e.StartElement{})
	}
	if _agga.ExtLst != nil {
		_fafbf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_agga.ExtLst, _fafbf)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_TextLanguageID and its children, prefixing error messages with path
func (_gdgg *CT_TextLanguageID) ValidateWithPath(path string) error { return nil }
func ParseUnionST_BubbleScale(s string) (ST_BubbleScale, error) {
	if ST_BubbleScalePercentPatternRe.MatchString(s) {
		return ST_BubbleScale{ST_BubbleScalePercent: &s}, nil
	}
	_gbfbd, _cedda := _c.ParseUint(s, 10, 32)
	if _cedda != nil {
		return ST_BubbleScale{}, _cedda
	}
	_gcgfe := uint32(_gbfbd)
	return ST_BubbleScale{ST_BubbleScaleUInt: &_gcgfe}, nil
}

type CT_ErrBars struct {
	ErrDir     *CT_ErrDir
	ErrBarType *CT_ErrBarType
	ErrValType *CT_ErrValType
	NoEndCap   *CT_Boolean
	Plus       *CT_NumDataSource
	Minus      *CT_NumDataSource
	Val        *CT_Double
	SpPr       *_f.CT_ShapeProperties
	ExtLst     *CT_ExtensionList
}

func (_eefe ST_Crosses) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_bedae := _e.Attr{}
	_bedae.Name = name
	switch _eefe {
	case ST_CrossesUnset:
		_bedae.Value = ""
	case ST_CrossesAutoZero:
		_bedae.Value = "\u0061\u0075\u0074\u006f\u005a\u0065\u0072\u006f"
	case ST_CrossesMax:
		_bedae.Value = "\u006d\u0061\u0078"
	case ST_CrossesMin:
		_bedae.Value = "\u006d\u0069\u006e"
	}
	return _bedae, nil
}

const ST_HPercentWithSymbolPattern = "0\u002a\u0028\u0028\u005b\u0035\u002d\u0039\u005d\u0029|\u0028\u005b\u0031\u002d\u0039\u005d\u005b0-\u0039\u005d\u0029\u007c(\u005b\u0031\u002d\u0034\u005d\u005b\u0030\u002d\u0039][\u0030\u002d9\u005d\u0029\u007c\u0035\u0030\u0030\u0029\u0025"

type CT_SerTxChoice struct {
	StrRef *CT_StrRef
	V      *string
}

func (_gfbgdd *EG_PieChartShared) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_eagfc:
	for {
		_eccag, _fgecb := d.Token()
		if _fgecb != nil {
			return _fgecb
		}
		switch _eggbcf := _eccag.(type) {
		case _e.StartElement:
			switch _eggbcf.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_gfbgdd.VaryColors = NewCT_Boolean()
				if _caba := d.DecodeElement(_gfbgdd.VaryColors, &_eggbcf); _caba != nil {
					return _caba
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_fgda := NewCT_PieSer()
				if _fcebf := d.DecodeElement(_fgda, &_eggbcf); _fcebf != nil {
					return _fcebf
				}
				_gfbgdd.Ser = append(_gfbgdd.Ser, _fgda)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_gfbgdd.DLbls = NewCT_DLbls()
				if _edfgf := d.DecodeElement(_gfbgdd.DLbls, &_eggbcf); _edfgf != nil {
					return _edfgf
				}
			default:
				_a.Log.Debug("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0045\u0047\u005f\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074\u0053\u0068\u0061\u0072\u0065\u0064\u0020\u0025\u0076", _eggbcf.Name)
				if _bcdfg := d.Skip(); _bcdfg != nil {
					return _bcdfg
				}
			}
		case _e.EndElement:
			break _eagfc
		case _e.CharData:
		}
	}
	return nil
}

type CT_UpDownBar struct{ SpPr *_f.CT_ShapeProperties }

func NewCT_ValAx() *CT_ValAx {
	_gaddc := &CT_ValAx{}
	_gaddc.AxId = NewCT_UnsignedInt()
	_gaddc.Scaling = NewCT_Scaling()
	_gaddc.AxPos = NewCT_AxPos()
	_gaddc.CrossAx = NewCT_UnsignedInt()
	return _gaddc
}

// Validate validates the CT_PlotArea and its children
func (_acaaf *CT_PlotArea) Validate() error {
	return _acaaf.ValidateWithPath("C\u0054\u005f\u0050\u006c\u006f\u0074\u0041\u0072\u0065\u0061")
}

// Validate validates the CT_SerAx and its children
func (_bcabg *CT_SerAx) Validate() error {
	return _bcabg.ValidateWithPath("\u0043\u0054\u005f\u0053\u0065\u0072\u0041\u0078")
}
func NewCT_BubbleSer() *CT_BubbleSer {
	_fgga := &CT_BubbleSer{}
	_fgga.Idx = NewCT_UnsignedInt()
	_fgga.Order = NewCT_UnsignedInt()
	return _fgga
}
func (_gacge *ChartSpace) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_gacge.CT_ChartSpace = *NewCT_ChartSpace()
_ebbg:
	for {
		_dedgc, _egfg := d.Token()
		if _egfg != nil {
			return _egfg
		}
		switch _dfge := _dedgc.(type) {
		case _e.StartElement:
			switch _dfge.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0061\u0074\u0065\u0031\u0039\u0030\u0034"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0061\u0074\u0065\u0031\u0039\u0030\u0034"}:
				_gacge.Date1904 = NewCT_Boolean()
				if _dbffd := d.DecodeElement(_gacge.Date1904, &_dfge); _dbffd != nil {
					return _dbffd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u006e\u0067"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u006e\u0067"}:
				_gacge.Lang = NewCT_TextLanguageID()
				if _adcad := d.DecodeElement(_gacge.Lang, &_dfge); _adcad != nil {
					return _adcad
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u006f\u0075\u006e\u0064\u0065\u0064\u0043\u006fr\u006e\u0065\u0072\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u006f\u0075\u006e\u0064\u0065\u0064\u0043\u006fr\u006e\u0065\u0072\u0073"}:
				_gacge.RoundedCorners = NewCT_Boolean()
				if _eccd := d.DecodeElement(_gacge.RoundedCorners, &_dfge); _eccd != nil {
					return _eccd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0079l\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0079l\u0065"}:
				_gacge.Style = NewCT_Style()
				if _dabfa := d.DecodeElement(_gacge.Style, &_dfge); _dabfa != nil {
					return _dabfa
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063l\u0072\u004d\u0061\u0070\u004f\u0076r"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063l\u0072\u004d\u0061\u0070\u004f\u0076r"}:
				_gacge.ClrMapOvr = _f.NewCT_ColorMapping()
				if _aagdb := d.DecodeElement(_gacge.ClrMapOvr, &_dfge); _aagdb != nil {
					return _aagdb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "p\u0069\u0076\u006f\u0074\u0053\u006f\u0075\u0072\u0063\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "p\u0069\u0076\u006f\u0074\u0053\u006f\u0075\u0072\u0063\u0065"}:
				_gacge.PivotSource = NewCT_PivotSource()
				if _adaagb := d.DecodeElement(_gacge.PivotSource, &_dfge); _adaagb != nil {
					return _adaagb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0072\u006f\u0074\u0065\u0063\u0074\u0069\u006f\u006e"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0072\u006f\u0074\u0065\u0063\u0074\u0069\u006f\u006e"}:
				_gacge.Protection = NewCT_Protection()
				if _caaga := d.DecodeElement(_gacge.Protection, &_dfge); _caaga != nil {
					return _caaga
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0068\u0061r\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0068\u0061r\u0074"}:
				if _egbg := d.DecodeElement(_gacge.Chart, &_dfge); _egbg != nil {
					return _egbg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_gacge.SpPr = _f.NewCT_ShapeProperties()
				if _aedag := d.DecodeElement(_gacge.SpPr, &_dfge); _aedag != nil {
					return _aedag
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_gacge.TxPr = _f.NewCT_TextBody()
				if _aeadd := d.DecodeElement(_gacge.TxPr, &_dfge); _aeadd != nil {
					return _aeadd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074e\u0072\u006e\u0061\u006c\u0044\u0061\u0074\u0061"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074e\u0072\u006e\u0061\u006c\u0044\u0061\u0074\u0061"}:
				_gacge.ExternalData = NewCT_ExternalData()
				if _ccaf := d.DecodeElement(_gacge.ExternalData, &_dfge); _ccaf != nil {
					return _ccaf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0072\u0069\u006e\u0074\u0053\u0065\u0074\u0074\u0069\u006e\u0067\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0072\u0069\u006e\u0074\u0053\u0065\u0074\u0074\u0069\u006e\u0067\u0073"}:
				_gacge.PrintSettings = NewCT_PrintSettings()
				if _agaca := d.DecodeElement(_gacge.PrintSettings, &_dfge); _agaca != nil {
					return _agaca
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0075\u0073\u0065\u0072\u0053\u0068\u0061\u0070\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0075\u0073\u0065\u0072\u0053\u0068\u0061\u0070\u0065\u0073"}:
				_gacge.UserShapes = NewCT_RelId()
				if _gggfd := d.DecodeElement(_gacge.UserShapes, &_dfge); _gggfd != nil {
					return _gggfd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_gacge.ExtLst = NewCT_ExtensionList()
				if _geddd := d.DecodeElement(_gacge.ExtLst, &_dfge); _geddd != nil {
					return _geddd
				}
			default:
				_a.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006ce\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0068\u0061r\u0074\u0053\u0070\u0061\u0063\u0065\u0020\u0025\u0076", _dfge.Name)
				if _febbg := d.Skip(); _febbg != nil {
					return _febbg
				}
			}
		case _e.EndElement:
			break _ebbg
		case _e.CharData:
		}
	}
	return nil
}
func (_afgf *CT_GapAmount) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _agad := range start.Attr {
		if _agad.Name.Local == "\u0076\u0061\u006c" {
			_baccb, _eeecc := ParseUnionST_GapAmount(_agad.Value)
			if _eeecc != nil {
				return _eeecc
			}
			_afgf.ValAttr = &_baccb
			continue
		}
	}
	for {
		_fgeec, _gacd := d.Token()
		if _gacd != nil {
			return _b.Errorf("\u0070a\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005f\u0047\u0061p\u0041\u006d\u006f\u0075\u006e\u0074\u003a\u0020\u0025\u0073", _gacd)
		}
		if _acgbb, _edbee := _fgeec.(_e.EndElement); _edbee && _acgbb.Name == start.Name {
			break
		}
	}
	return nil
}
func NewCT_NumData() *CT_NumData { _agfd := &CT_NumData{}; return _agfd }
func (_fdggb *CT_Protection) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _fdggb.ChartObject != nil {
		_ddcdg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0063\u0068\u0061\u0072\u0074\u004f\u0062\u006a\u0065\u0063\u0074"}}
		e.EncodeElement(_fdggb.ChartObject, _ddcdg)
	}
	if _fdggb.Data != nil {
		_dccd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0064\u0061\u0074\u0061"}}
		e.EncodeElement(_fdggb.Data, _dccd)
	}
	if _fdggb.Formatting != nil {
		_ddfbb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0066o\u0072\u006d\u0061\u0074\u0074\u0069\u006e\u0067"}}
		e.EncodeElement(_fdggb.Formatting, _ddfbb)
	}
	if _fdggb.Selection != nil {
		_cabc := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0073\u0065\u006c\u0065\u0063\u0074\u0069\u006f\u006e"}}
		e.EncodeElement(_fdggb.Selection, _cabc)
	}
	if _fdggb.UserInterface != nil {
		_gaabfb := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0075s\u0065\u0072\u0049\u006e\u0074\u0065\u0072\u0066\u0061\u0063\u0065"}}
		e.EncodeElement(_fdggb.UserInterface, _gaabfb)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}
func (_faeb ST_Shape) Validate() error { return _faeb.ValidateWithPath("") }

type CT_PieChart struct {
	VaryColors    *CT_Boolean
	Ser           []*CT_PieSer
	DLbls         *CT_DLbls
	FirstSliceAng *CT_FirstSliceAng
	ExtLst        *CT_ExtensionList
}

func (_bbddf *CT_LogBase) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0076\u0061\u006c"}, Value: _b.Sprintf("\u0025\u0076", _bbddf.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}
func (_ceedb ST_Grouping) ValidateWithPath(path string) error {
	switch _ceedb {
	case 0, 1, 2, 3:
	default:
		return _b.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_ceedb))
	}
	return nil
}

// ValidateWithPath validates the CT_ChartSpace and its children, prefixing error messages with path
func (_fcac *CT_ChartSpace) ValidateWithPath(path string) error {
	if _fcac.Date1904 != nil {
		if _bdgd := _fcac.Date1904.ValidateWithPath(path + "\u002fD\u0061\u0074\u0065\u0031\u0039\u00304"); _bdgd != nil {
			return _bdgd
		}
	}
	if _fcac.Lang != nil {
		if _ffdc := _fcac.Lang.ValidateWithPath(path + "\u002f\u004c\u0061n\u0067"); _ffdc != nil {
			return _ffdc
		}
	}
	if _fcac.RoundedCorners != nil {
		if _bdcd := _fcac.RoundedCorners.ValidateWithPath(path + "\u002fR\u006fu\u006e\u0064\u0065\u0064\u0043\u006f\u0072\u006e\u0065\u0072\u0073"); _bdcd != nil {
			return _bdcd
		}
	}
	if _fcac.Style != nil {
		if _ceegca := _fcac.Style.ValidateWithPath(path + "\u002f\u0053\u0074\u0079\u006c\u0065"); _ceegca != nil {
			return _ceegca
		}
	}
	if _fcac.ClrMapOvr != nil {
		if _eaf := _fcac.ClrMapOvr.ValidateWithPath(path + "\u002f\u0043\u006c\u0072\u004d\u0061\u0070\u004f\u0076\u0072"); _eaf != nil {
			return _eaf
		}
	}
	if _fcac.PivotSource != nil {
		if _dfbc := _fcac.PivotSource.ValidateWithPath(path + "\u002f\u0050\u0069v\u006f\u0074\u0053\u006f\u0075\u0072\u0063\u0065"); _dfbc != nil {
			return _dfbc
		}
	}
	if _fcac.Protection != nil {
		if _cbdaf := _fcac.Protection.ValidateWithPath(path + "/\u0050\u0072\u006f\u0074\u0065\u0063\u0074\u0069\u006f\u006e"); _cbdaf != nil {
			return _cbdaf
		}
	}
	if _fgfd := _fcac.Chart.ValidateWithPath(path + "\u002f\u0043\u0068\u0061\u0072\u0074"); _fgfd != nil {
		return _fgfd
	}
	if _fcac.SpPr != nil {
		if _deba := _fcac.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _deba != nil {
			return _deba
		}
	}
	if _fcac.TxPr != nil {
		if _feced := _fcac.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _feced != nil {
			return _feced
		}
	}
	if _fcac.ExternalData != nil {
		if _ecdeg := _fcac.ExternalData.ValidateWithPath(path + "\u002f\u0045\u0078\u0074\u0065\u0072\u006e\u0061\u006c\u0044\u0061\u0074\u0061"); _ecdeg != nil {
			return _ecdeg
		}
	}
	if _fcac.PrintSettings != nil {
		if _eagb := _fcac.PrintSettings.ValidateWithPath(path + "\u002f\u0050\u0072\u0069\u006e\u0074\u0053\u0065\u0074t\u0069\u006e\u0067\u0073"); _eagb != nil {
			return _eagb
		}
	}
	if _fcac.UserShapes != nil {
		if _ffdce := _fcac.UserShapes.ValidateWithPath(path + "/\u0055\u0073\u0065\u0072\u0053\u0068\u0061\u0070\u0065\u0073"); _ffdce != nil {
			return _ffdce
		}
	}
	if _fcac.ExtLst != nil {
		if _beba := _fcac.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _beba != nil {
			return _beba
		}
	}
	return nil
}
func (_cgbcc ST_LegendPos) ValidateWithPath(path string) error {
	switch _cgbcc {
	case 0, 1, 2, 3, 4, 5:
	default:
		return _b.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_cgbcc))
	}
	return nil
}

// Validate validates the CT_NumRef and its children
func (_facdb *CT_NumRef) Validate() error {
	return _facdb.ValidateWithPath("\u0043T\u005f\u004e\u0075\u006d\u0052\u0065f")
}
func NewCT_SurfaceChart() *CT_SurfaceChart { _fbeedg := &CT_SurfaceChart{}; return _fbeedg }
func (_eaeba *Group_DLbls) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_gccdc:
	for {
		_fdgd, _eabaa := d.Token()
		if _eabaa != nil {
			return _eabaa
		}
		switch _cgccff := _fdgd.(type) {
		case _e.StartElement:
			switch _cgccff.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}:
				_eaeba.NumFmt = NewCT_NumFmt()
				if _afcdb := d.DecodeElement(_eaeba.NumFmt, &_cgccff); _afcdb != nil {
					return _afcdb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_eaeba.SpPr = _f.NewCT_ShapeProperties()
				if _gaega := d.DecodeElement(_eaeba.SpPr, &_cgccff); _gaega != nil {
					return _gaega
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_eaeba.TxPr = _f.NewCT_TextBody()
				if _afge := d.DecodeElement(_eaeba.TxPr, &_cgccff); _afge != nil {
					return _afge
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064L\u0062\u006c\u0050\u006f\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064L\u0062\u006c\u0050\u006f\u0073"}:
				_eaeba.DLblPos = NewCT_DLblPos()
				if _cdegf := d.DecodeElement(_eaeba.DLblPos, &_cgccff); _cdegf != nil {
					return _cdegf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}:
				_eaeba.ShowLegendKey = NewCT_Boolean()
				if _geebb := d.DecodeElement(_eaeba.ShowLegendKey, &_cgccff); _geebb != nil {
					return _geebb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006f\u0077\u0056\u0061\u006c"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006f\u0077\u0056\u0061\u006c"}:
				_eaeba.ShowVal = NewCT_Boolean()
				if _baedg := d.DecodeElement(_eaeba.ShowVal, &_cgccff); _baedg != nil {
					return _baedg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}:
				_eaeba.ShowCatName = NewCT_Boolean()
				if _eggbf := d.DecodeElement(_eaeba.ShowCatName, &_cgccff); _eggbf != nil {
					return _eggbf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}:
				_eaeba.ShowSerName = NewCT_Boolean()
				if _bdcf := d.DecodeElement(_eaeba.ShowSerName, &_cgccff); _bdcf != nil {
					return _bdcf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}:
				_eaeba.ShowPercent = NewCT_Boolean()
				if _aeagf := d.DecodeElement(_eaeba.ShowPercent, &_cgccff); _aeagf != nil {
					return _aeagf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0042\u0075\u0062\u0062\u006ce\u0053\u0069\u007a\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0042\u0075\u0062\u0062\u006ce\u0053\u0069\u007a\u0065"}:
				_eaeba.ShowBubbleSize = NewCT_Boolean()
				if _ddecd := d.DecodeElement(_eaeba.ShowBubbleSize, &_cgccff); _ddecd != nil {
					return _ddecd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u0070\u0061\u0072\u0061\u0074\u006fr"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u0070\u0061\u0072\u0061\u0074\u006fr"}:
				_eaeba.Separator = new(string)
				if _eabe := d.DecodeElement(_eaeba.Separator, &_cgccff); _eabe != nil {
					return _eabe
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006fw\u004c\u0065\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006fw\u004c\u0065\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}:
				_eaeba.ShowLeaderLines = NewCT_Boolean()
				if _dgdgf := d.DecodeElement(_eaeba.ShowLeaderLines, &_cgccff); _dgdgf != nil {
					return _dgdgf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "l\u0065\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "l\u0065\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}:
				_eaeba.LeaderLines = NewCT_ChartLines()
				if _aecfg := d.DecodeElement(_eaeba.LeaderLines, &_cgccff); _aecfg != nil {
					return _aecfg
				}
			default:
				_a.Log.Debug("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0047\u0072\u006f\u0075\u0070\u005f\u0044\u004c\u0062\u006c\u0073\u0020\u0025\u0076", _cgccff.Name)
				if _faafa := d.Skip(); _faafa != nil {
					return _faafa
				}
			}
		case _e.EndElement:
			break _gccdc
		case _e.CharData:
		}
	}
	return nil
}
func (_cbgg *CT_Tx) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_cbgg.Choice = NewCT_TxChoice()
_dgfba:
	for {
		_dgfbg, _fgebf := d.Token()
		if _fgebf != nil {
			return _fgebf
		}
		switch _bgeff := _dgfbg.(type) {
		case _e.StartElement:
			switch _bgeff.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u0052\u0065\u0066"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u0052\u0065\u0066"}:
				_cbgg.Choice = NewCT_TxChoice()
				if _fggagg := d.DecodeElement(&_cbgg.Choice.StrRef, &_bgeff); _fggagg != nil {
					return _fggagg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u0069\u0063\u0068"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u0069\u0063\u0068"}:
				_cbgg.Choice = NewCT_TxChoice()
				if _ggcfc := d.DecodeElement(&_cbgg.Choice.Rich, &_bgeff); _ggcfc != nil {
					return _ggcfc
				}
			default:
				_a.Log.Debug("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006fn \u0043\u0054\u005fT\u0078 \u0025\u0076", _bgeff.Name)
				if _ggegc := d.Skip(); _ggegc != nil {
					return _ggegc
				}
			}
		case _e.EndElement:
			break _dgfba
		case _e.CharData:
		}
	}
	return nil
}
func (_cfcde *CT_LineSer) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_fcde := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0069d\u0078"}}
	e.EncodeElement(_cfcde.Idx, _fcde)
	_dbedb := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006f\u0072\u0064\u0065\u0072"}}
	e.EncodeElement(_cfcde.Order, _dbedb)
	if _cfcde.Tx != nil {
		_fegc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078"}}
		e.EncodeElement(_cfcde.Tx, _fegc)
	}
	if _cfcde.SpPr != nil {
		_gcaf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_cfcde.SpPr, _gcaf)
	}
	if _cfcde.Marker != nil {
		_ddfdf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006d\u0061\u0072\u006b\u0065\u0072"}}
		e.EncodeElement(_cfcde.Marker, _ddfdf)
	}
	if _cfcde.DPt != nil {
		_dfaff := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0064P\u0074"}}
		for _, _eagg := range _cfcde.DPt {
			e.EncodeElement(_eagg, _dfaff)
		}
	}
	if _cfcde.DLbls != nil {
		_fccc := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_cfcde.DLbls, _fccc)
	}
	if _cfcde.Trendline != nil {
		_gbca := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0074\u0072\u0065\u006e\u0064\u006c\u0069\u006e\u0065"}}
		for _, _fbede := range _cfcde.Trendline {
			e.EncodeElement(_fbede, _gbca)
		}
	}
	if _cfcde.ErrBars != nil {
		_aabb := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0065\u0072\u0072\u0042\u0061\u0072s"}}
		e.EncodeElement(_cfcde.ErrBars, _aabb)
	}
	if _cfcde.Cat != nil {
		_egfea := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0063a\u0074"}}
		e.EncodeElement(_cfcde.Cat, _egfea)
	}
	if _cfcde.Val != nil {
		_gabf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0076a\u006c"}}
		e.EncodeElement(_cfcde.Val, _gabf)
	}
	if _cfcde.Smooth != nil {
		_gefcg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u006d\u006f\u006f\u0074\u0068"}}
		e.EncodeElement(_cfcde.Smooth, _gefcg)
	}
	if _cfcde.ExtLst != nil {
		_gffed := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_cfcde.ExtLst, _gffed)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}
func (_bebe *CT_SecondPieSize) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _aabcd := range start.Attr {
		if _aabcd.Name.Local == "\u0076\u0061\u006c" {
			_ffcbb, _deagd := ParseUnionST_SecondPieSize(_aabcd.Value)
			if _deagd != nil {
				return _deagd
			}
			_bebe.ValAttr = &_ffcbb
			continue
		}
	}
	for {
		_aegd, _bfdcd := d.Token()
		if _bfdcd != nil {
			return _b.Errorf("\u0070\u0061\u0072\u0073i\u006e\u0067\u0020\u0043\u0054\u005f\u0053\u0065\u0063\u006fn\u0064P\u0069\u0065\u0053\u0069\u007a\u0065\u003a \u0025\u0073", _bfdcd)
		}
		if _fbdac, _fccfa := _aegd.(_e.EndElement); _fccfa && _fbdac.Name == start.Name {
			break
		}
	}
	return nil
}
func (_bffdd ST_OfPieType) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_gggfg := _e.Attr{}
	_gggfg.Name = name
	switch _bffdd {
	case ST_OfPieTypeUnset:
		_gggfg.Value = ""
	case ST_OfPieTypePie:
		_gggfg.Value = "\u0070\u0069\u0065"
	case ST_OfPieTypeBar:
		_gggfg.Value = "\u0062\u0061\u0072"
	}
	return _gggfg, nil
}
func (_ccb *CT_AreaSer) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_ccb.Idx = NewCT_UnsignedInt()
	_ccb.Order = NewCT_UnsignedInt()
_geg:
	for {
		_cge, _adc := d.Token()
		if _adc != nil {
			return _adc
		}
		switch _fbg := _cge.(type) {
		case _e.StartElement:
			switch _fbg.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}:
				if _cfa := d.DecodeElement(_ccb.Idx, &_fbg); _cfa != nil {
					return _cfa
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}:
				if _ffd := d.DecodeElement(_ccb.Order, &_fbg); _ffd != nil {
					return _ffd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				_ccb.Tx = NewCT_SerTx()
				if _ebe := d.DecodeElement(_ccb.Tx, &_fbg); _ebe != nil {
					return _ebe
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_ccb.SpPr = _f.NewCT_ShapeProperties()
				if _fce := d.DecodeElement(_ccb.SpPr, &_fbg); _fce != nil {
					return _fce
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0063\u0074\u0075\u0072\u0065\u004f\u0070t\u0069\u006f\u006e\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0063\u0074\u0075\u0072\u0065\u004f\u0070t\u0069\u006f\u006e\u0073"}:
				_ccb.PictureOptions = NewCT_PictureOptions()
				if _bcc := d.DecodeElement(_ccb.PictureOptions, &_fbg); _bcc != nil {
					return _bcc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0050\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0050\u0074"}:
				_fea := NewCT_DPt()
				if _ddae := d.DecodeElement(_fea, &_fbg); _ddae != nil {
					return _ddae
				}
				_ccb.DPt = append(_ccb.DPt, _fea)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_ccb.DLbls = NewCT_DLbls()
				if _acg := d.DecodeElement(_ccb.DLbls, &_fbg); _acg != nil {
					return _acg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074r\u0065\u006e\u0064\u006c\u0069\u006ee"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074r\u0065\u006e\u0064\u006c\u0069\u006ee"}:
				_fd := NewCT_Trendline()
				if _cb := d.DecodeElement(_fd, &_fbg); _cb != nil {
					return _cb
				}
				_ccb.Trendline = append(_ccb.Trendline, _fd)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065r\u0072\u0042\u0061\u0072\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065r\u0072\u0042\u0061\u0072\u0073"}:
				_fgg := NewCT_ErrBars()
				if _gcef := d.DecodeElement(_fgg, &_fbg); _gcef != nil {
					return _gcef
				}
				_ccb.ErrBars = append(_ccb.ErrBars, _fgg)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074"}:
				_ccb.Cat = NewCT_AxDataSource()
				if _gef := d.DecodeElement(_ccb.Cat, &_fbg); _gef != nil {
					return _gef
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006c"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006c"}:
				_ccb.Val = NewCT_NumDataSource()
				if _gbd := d.DecodeElement(_ccb.Val, &_fbg); _gbd != nil {
					return _gbd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_ccb.ExtLst = NewCT_ExtensionList()
				if _cgg := d.DecodeElement(_ccb.ExtLst, &_fbg); _cgg != nil {
					return _cgg
				}
			default:
				_a.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006ce\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005fA\u0072\u0065\u0061\u0053\u0065\u0072\u0020\u0025\u0076", _fbg.Name)
				if _cef := d.Skip(); _cef != nil {
					return _cef
				}
			}
		case _e.EndElement:
			break _geg
		case _e.CharData:
		}
	}
	return nil
}
func (_aefb *CT_BarGrouping) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _aefb.ValAttr != ST_BarGroupingUnset {
		_ddd, _ddfg := _aefb.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
		if _ddfg != nil {
			return _ddfg
		}
		start.Attr = append(start.Attr, _ddd)
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

const (
	ST_TickLblPosUnset  ST_TickLblPos = 0
	ST_TickLblPosHigh   ST_TickLblPos = 1
	ST_TickLblPosLow    ST_TickLblPos = 2
	ST_TickLblPosNextTo ST_TickLblPos = 3
	ST_TickLblPosNone   ST_TickLblPos = 4
)

// ValidateWithPath validates the CT_PictureFormat and its children, prefixing error messages with path
func (_gdbgf *CT_PictureFormat) ValidateWithPath(path string) error {
	if _gdbgf.ValAttr == ST_PictureFormatUnset {
		return _b.Errorf("\u0025\u0073\u002fV\u0061\u006c\u0041\u0074t\u0072\u0020\u0069\u0073\u0020\u0061\u0020m\u0061\u006e\u0064\u0061\u0074\u006f\u0072\u0079\u0020\u0066\u0069\u0065\u006c\u0064", path)
	}
	if _agbf := _gdbgf.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _agbf != nil {
		return _agbf
	}
	return nil
}
func NewEG_LegendEntryData() *EG_LegendEntryData { _adafe := &EG_LegendEntryData{}; return _adafe }
func (_aafg ST_MarkerStyle) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_aafg.String(), start)
}

type CT_PivotSource struct {
	Name   string
	FmtId  *CT_UnsignedInt
	ExtLst []*CT_ExtensionList
}
type ST_MarkerStyle byte

func NewCT_LegendEntryChoice() *CT_LegendEntryChoice {
	_ecabe := &CT_LegendEntryChoice{}
	return _ecabe
}

const (
	ST_ShapeUnset        ST_Shape = 0
	ST_ShapeCone         ST_Shape = 1
	ST_ShapeConeToMax    ST_Shape = 2
	ST_ShapeBox          ST_Shape = 3
	ST_ShapeCylinder     ST_Shape = 4
	ST_ShapePyramid      ST_Shape = 5
	ST_ShapePyramidToMax ST_Shape = 6
)

func (_cfgbf *EG_DLblShared) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_acgbc:
	for {
		_cecad, _cbdea := d.Token()
		if _cbdea != nil {
			return _cbdea
		}
		switch _fafge := _cecad.(type) {
		case _e.StartElement:
			switch _fafge.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}:
				_cfgbf.NumFmt = NewCT_NumFmt()
				if _agfc := d.DecodeElement(_cfgbf.NumFmt, &_fafge); _agfc != nil {
					return _agfc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_cfgbf.SpPr = _f.NewCT_ShapeProperties()
				if _bdggg := d.DecodeElement(_cfgbf.SpPr, &_fafge); _bdggg != nil {
					return _bdggg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_cfgbf.TxPr = _f.NewCT_TextBody()
				if _fdafd := d.DecodeElement(_cfgbf.TxPr, &_fafge); _fdafd != nil {
					return _fdafd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064L\u0062\u006c\u0050\u006f\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064L\u0062\u006c\u0050\u006f\u0073"}:
				_cfgbf.DLblPos = NewCT_DLblPos()
				if _bbga := d.DecodeElement(_cfgbf.DLblPos, &_fafge); _bbga != nil {
					return _bbga
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}:
				_cfgbf.ShowLegendKey = NewCT_Boolean()
				if _agcbe := d.DecodeElement(_cfgbf.ShowLegendKey, &_fafge); _agcbe != nil {
					return _agcbe
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006f\u0077\u0056\u0061\u006c"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006f\u0077\u0056\u0061\u006c"}:
				_cfgbf.ShowVal = NewCT_Boolean()
				if _fcfcgd := d.DecodeElement(_cfgbf.ShowVal, &_fafge); _fcfcgd != nil {
					return _fcfcgd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}:
				_cfgbf.ShowCatName = NewCT_Boolean()
				if _abagc := d.DecodeElement(_cfgbf.ShowCatName, &_fafge); _abagc != nil {
					return _abagc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}:
				_cfgbf.ShowSerName = NewCT_Boolean()
				if _aedfb := d.DecodeElement(_cfgbf.ShowSerName, &_fafge); _aedfb != nil {
					return _aedfb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}:
				_cfgbf.ShowPercent = NewCT_Boolean()
				if _addca := d.DecodeElement(_cfgbf.ShowPercent, &_fafge); _addca != nil {
					return _addca
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0042\u0075\u0062\u0062\u006ce\u0053\u0069\u007a\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0042\u0075\u0062\u0062\u006ce\u0053\u0069\u007a\u0065"}:
				_cfgbf.ShowBubbleSize = NewCT_Boolean()
				if _eabf := d.DecodeElement(_cfgbf.ShowBubbleSize, &_fafge); _eabf != nil {
					return _eabf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u0070\u0061\u0072\u0061\u0074\u006fr"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u0070\u0061\u0072\u0061\u0074\u006fr"}:
				_cfgbf.Separator = new(string)
				if _gebcc := d.DecodeElement(_cfgbf.Separator, &_fafge); _gebcc != nil {
					return _gebcc
				}
			default:
				_a.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0045\u0047\u005f\u0044L\u0062\u006c\u0053\u0068\u0061\u0072\u0065\u0064 \u0025\u0076", _fafge.Name)
				if _bfeb := d.Skip(); _bfeb != nil {
					return _bfeb
				}
			}
		case _e.EndElement:
			break _acgbc
		case _e.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_ValAx and its children, prefixing error messages with path
func (_abfc *CT_ValAx) ValidateWithPath(path string) error {
	if _gcdba := _abfc.AxId.ValidateWithPath(path + "\u002f\u0041\u0078I\u0064"); _gcdba != nil {
		return _gcdba
	}
	if _ebdbf := _abfc.Scaling.ValidateWithPath(path + "\u002f\u0053\u0063\u0061\u006c\u0069\u006e\u0067"); _ebdbf != nil {
		return _ebdbf
	}
	if _abfc.Delete != nil {
		if _eadfg := _abfc.Delete.ValidateWithPath(path + "\u002fD\u0065\u006c\u0065\u0074\u0065"); _eadfg != nil {
			return _eadfg
		}
	}
	if _ebea := _abfc.AxPos.ValidateWithPath(path + "\u002f\u0041\u0078\u0050\u006f\u0073"); _ebea != nil {
		return _ebea
	}
	if _abfc.MajorGridlines != nil {
		if _aedfff := _abfc.MajorGridlines.ValidateWithPath(path + "\u002fM\u0061j\u006f\u0072\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"); _aedfff != nil {
			return _aedfff
		}
	}
	if _abfc.MinorGridlines != nil {
		if _bcffca := _abfc.MinorGridlines.ValidateWithPath(path + "\u002fM\u0069n\u006f\u0072\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"); _bcffca != nil {
			return _bcffca
		}
	}
	if _abfc.Title != nil {
		if _bcfaf := _abfc.Title.ValidateWithPath(path + "\u002f\u0054\u0069\u0074\u006c\u0065"); _bcfaf != nil {
			return _bcfaf
		}
	}
	if _abfc.NumFmt != nil {
		if _cgcag := _abfc.NumFmt.ValidateWithPath(path + "\u002fN\u0075\u006d\u0046\u006d\u0074"); _cgcag != nil {
			return _cgcag
		}
	}
	if _abfc.MajorTickMark != nil {
		if _cfbag := _abfc.MajorTickMark.ValidateWithPath(path + "\u002f\u004d\u0061\u006a\u006f\u0072\u0054\u0069\u0063k\u004d\u0061\u0072\u006b"); _cfbag != nil {
			return _cfbag
		}
	}
	if _abfc.MinorTickMark != nil {
		if _dbfde := _abfc.MinorTickMark.ValidateWithPath(path + "\u002f\u004d\u0069\u006e\u006f\u0072\u0054\u0069\u0063k\u004d\u0061\u0072\u006b"); _dbfde != nil {
			return _dbfde
		}
	}
	if _abfc.TickLblPos != nil {
		if _dcce := _abfc.TickLblPos.ValidateWithPath(path + "/\u0054\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"); _dcce != nil {
			return _dcce
		}
	}
	if _abfc.SpPr != nil {
		if _ecadd := _abfc.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _ecadd != nil {
			return _ecadd
		}
	}
	if _abfc.TxPr != nil {
		if _egaa := _abfc.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _egaa != nil {
			return _egaa
		}
	}
	if _edbfc := _abfc.CrossAx.ValidateWithPath(path + "\u002f\u0043\u0072\u006f\u0073\u0073\u0041\u0078"); _edbfc != nil {
		return _edbfc
	}
	if _abfc.Choice != nil {
		if _aacb := _abfc.Choice.ValidateWithPath(path + "\u002fC\u0068\u006f\u0069\u0063\u0065"); _aacb != nil {
			return _aacb
		}
	}
	if _abfc.CrossBetween != nil {
		if _fbfff := _abfc.CrossBetween.ValidateWithPath(path + "\u002f\u0043\u0072\u006f\u0073\u0073\u0042\u0065\u0074\u0077\u0065\u0065\u006e"); _fbfff != nil {
			return _fbfff
		}
	}
	if _abfc.MajorUnit != nil {
		if _cfdc := _abfc.MajorUnit.ValidateWithPath(path + "\u002f\u004d\u0061\u006a\u006f\u0072\u0055\u006e\u0069\u0074"); _cfdc != nil {
			return _cfdc
		}
	}
	if _abfc.MinorUnit != nil {
		if _bfgac := _abfc.MinorUnit.ValidateWithPath(path + "\u002f\u004d\u0069\u006e\u006f\u0072\u0055\u006e\u0069\u0074"); _bfgac != nil {
			return _bfgac
		}
	}
	if _abfc.DispUnits != nil {
		if _gbde := _abfc.DispUnits.ValidateWithPath(path + "\u002f\u0044\u0069\u0073\u0070\u0055\u006e\u0069\u0074\u0073"); _gbde != nil {
			return _gbde
		}
	}
	if _abfc.ExtLst != nil {
		if _egeae := _abfc.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _egeae != nil {
			return _egeae
		}
	}
	return nil
}
func (_bdeaa ST_PictureFormat) ValidateWithPath(path string) error {
	switch _bdeaa {
	case 0, 1, 2, 3:
	default:
		return _b.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_bdeaa))
	}
	return nil
}
func (_dbegf *EG_AreaChartShared) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_faabb:
	for {
		_bebgc, _fbac := d.Token()
		if _fbac != nil {
			return _fbac
		}
		switch _afdfd := _bebgc.(type) {
		case _e.StartElement:
			switch _afdfd.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}:
				_dbegf.Grouping = NewCT_Grouping()
				if _agba := d.DecodeElement(_dbegf.Grouping, &_afdfd); _agba != nil {
					return _agba
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_dbegf.VaryColors = NewCT_Boolean()
				if _gegfa := d.DecodeElement(_dbegf.VaryColors, &_afdfd); _gegfa != nil {
					return _gegfa
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_dcae := NewCT_AreaSer()
				if _bbbcd := d.DecodeElement(_dcae, &_afdfd); _bbbcd != nil {
					return _bbbcd
				}
				_dbegf.Ser = append(_dbegf.Ser, _dcae)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_dbegf.DLbls = NewCT_DLbls()
				if _cbbeg := d.DecodeElement(_dbegf.DLbls, &_afdfd); _cbbeg != nil {
					return _cbbeg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064r\u006f\u0070\u004c\u0069\u006e\u0065s"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064r\u006f\u0070\u004c\u0069\u006e\u0065s"}:
				_dbegf.DropLines = NewCT_ChartLines()
				if _eceegb := d.DecodeElement(_dbegf.DropLines, &_afdfd); _eceegb != nil {
					return _eceegb
				}
			default:
				_a.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0065l\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0045\u0047\u005f\u0041\u0072\u0065\u0061\u0043\u0068a\u0072\u0074\u0053\u0068\u0061\u0072\u0065\u0064\u0020\u0025\u0076", _afdfd.Name)
				if _dgae := d.Skip(); _dgae != nil {
					return _dgae
				}
			}
		case _e.EndElement:
			break _faabb
		case _e.CharData:
		}
	}
	return nil
}

// Validate validates the CT_TextLanguageID and its children
func (_fdbfe *CT_TextLanguageID) Validate() error {
	return _fdbfe.ValidateWithPath("\u0043\u0054\u005f\u0054\u0065\u0078\u0074\u004c\u0061\u006e\u0067\u0075a\u0067\u0065\u0049\u0044")
}

// Validate validates the CT_SurfaceChart and its children
func (_bgddd *CT_SurfaceChart) Validate() error {
	return _bgddd.ValidateWithPath("\u0043T\u005fS\u0075\u0072\u0066\u0061\u0063\u0065\u0043\u0068\u0061\u0072\u0074")
}
func (_aabff ST_LayoutTarget) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_acbbe := _e.Attr{}
	_acbbe.Name = name
	switch _aabff {
	case ST_LayoutTargetUnset:
		_acbbe.Value = ""
	case ST_LayoutTargetInner:
		_acbbe.Value = "\u0069\u006e\u006ee\u0072"
	case ST_LayoutTargetOuter:
		_acbbe.Value = "\u006f\u0075\u0074e\u0072"
	}
	return _acbbe, nil
}
func NewCT_StrRef() *CT_StrRef { _bdbf := &CT_StrRef{}; return _bdbf }
func (_dadff *CT_DispBlanksAs) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _dadff.ValAttr != ST_DispBlanksAsUnset {
		_cdee, _cgca := _dadff.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
		if _cgca != nil {
			return _cgca
		}
		start.Attr = append(start.Attr, _cdee)
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}
func (_abfb *CT_TimeUnit) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _abfb.ValAttr != ST_TimeUnitUnset {
		_dbgg, _adffb := _abfb.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
		if _adffb != nil {
			return _adffb
		}
		start.Attr = append(start.Attr, _dbgg)
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_Tx and its children, prefixing error messages with path
func (_beacf *CT_Tx) ValidateWithPath(path string) error {
	if _dacg := _beacf.Choice.ValidateWithPath(path + "\u002fC\u0068\u006f\u0069\u0063\u0065"); _dacg != nil {
		return _dacg
	}
	return nil
}
func (_cdcbac ST_PageSetupOrientation) String() string {
	switch _cdcbac {
	case 0:
		return ""
	case 1:
		return "\u0064e\u0066\u0061\u0075\u006c\u0074"
	case 2:
		return "\u0070\u006f\u0072\u0074\u0072\u0061\u0069\u0074"
	case 3:
		return "\u006ca\u006e\u0064\u0073\u0063\u0061\u0070e"
	}
	return ""
}
func (_cfff *CT_ManualLayout) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_ccad:
	for {
		_ccgef, _eeedd := d.Token()
		if _eeedd != nil {
			return _eeedd
		}
		switch _fagba := _ccgef.(type) {
		case _e.StartElement:
			switch _fagba.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079o\u0075\u0074\u0054\u0061\u0072\u0067\u0065\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079o\u0075\u0074\u0054\u0061\u0072\u0067\u0065\u0074"}:
				_cfff.LayoutTarget = NewCT_LayoutTarget()
				if _cdeca := d.DecodeElement(_cfff.LayoutTarget, &_fagba); _cdeca != nil {
					return _cdeca
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0078\u004d\u006fd\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0078\u004d\u006fd\u0065"}:
				_cfff.XMode = NewCT_LayoutMode()
				if _bcgde := d.DecodeElement(_cfff.XMode, &_fagba); _bcgde != nil {
					return _bcgde
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0079\u004d\u006fd\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0079\u004d\u006fd\u0065"}:
				_cfff.YMode = NewCT_LayoutMode()
				if _cbaeb := d.DecodeElement(_cfff.YMode, &_fagba); _cbaeb != nil {
					return _cbaeb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0077\u004d\u006fd\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0077\u004d\u006fd\u0065"}:
				_cfff.WMode = NewCT_LayoutMode()
				if _adeg := d.DecodeElement(_cfff.WMode, &_fagba); _adeg != nil {
					return _adeg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0068\u004d\u006fd\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0068\u004d\u006fd\u0065"}:
				_cfff.HMode = NewCT_LayoutMode()
				if _cggg := d.DecodeElement(_cfff.HMode, &_fagba); _cggg != nil {
					return _cggg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0078"}:
				_cfff.X = NewCT_Double()
				if _eeefe := d.DecodeElement(_cfff.X, &_fagba); _eeefe != nil {
					return _eeefe
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0079"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0079"}:
				_cfff.Y = NewCT_Double()
				if _fdeea := d.DecodeElement(_cfff.Y, &_fagba); _fdeea != nil {
					return _fdeea
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0077"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0077"}:
				_cfff.W = NewCT_Double()
				if _cdfb := d.DecodeElement(_cfff.W, &_fagba); _cdfb != nil {
					return _cdfb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0068"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0068"}:
				_cfff.H = NewCT_Double()
				if _gcgf := d.DecodeElement(_cfff.H, &_fagba); _gcgf != nil {
					return _gcgf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_cfff.ExtLst = NewCT_ExtensionList()
				if _edcgg := d.DecodeElement(_cfff.ExtLst, &_fagba); _edcgg != nil {
					return _edcgg
				}
			default:
				_a.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074e\u0064\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u004d\u0061\u006eu\u0061\u006c\u004c\u0061\u0079\u006f\u0075\u0074\u0020\u0025\u0076", _fagba.Name)
				if _geaea := d.Skip(); _geaea != nil {
					return _geaea
				}
			}
		case _e.EndElement:
			break _ccad
		case _e.CharData:
		}
	}
	return nil
}
func (_fgafb *ST_AxPos) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_faedd, _bagg := d.Token()
	if _bagg != nil {
		return _bagg
	}
	if _dadfgg, _fdeefd := _faedd.(_e.EndElement); _fdeefd && _dadfgg.Name == start.Name {
		*_fgafb = 1
		return nil
	}
	if _bgcbc, _bacag := _faedd.(_e.CharData); !_bacag {
		return _b.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _faedd)
	} else {
		switch string(_bgcbc) {
		case "":
			*_fgafb = 0
		case "\u0062":
			*_fgafb = 1
		case "\u006c":
			*_fgafb = 2
		case "\u0072":
			*_fgafb = 3
		case "\u0074":
			*_fgafb = 4
		}
	}
	_faedd, _bagg = d.Token()
	if _bagg != nil {
		return _bagg
	}
	if _dbada, _gbcfc := _faedd.(_e.EndElement); _gbcfc && _dbada.Name == start.Name {
		return nil
	}
	return _b.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _faedd)
}
func (_deccd *EG_LineChartShared) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_deccd.Grouping = NewCT_Grouping()
_ebgff:
	for {
		_aaaf, _aggbe := d.Token()
		if _aggbe != nil {
			return _aggbe
		}
		switch _cdega := _aaaf.(type) {
		case _e.StartElement:
			switch _cdega.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}:
				if _abbc := d.DecodeElement(_deccd.Grouping, &_cdega); _abbc != nil {
					return _abbc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_deccd.VaryColors = NewCT_Boolean()
				if _cgbbd := d.DecodeElement(_deccd.VaryColors, &_cdega); _cgbbd != nil {
					return _cgbbd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_gaee := NewCT_LineSer()
				if _cacbc := d.DecodeElement(_gaee, &_cdega); _cacbc != nil {
					return _cacbc
				}
				_deccd.Ser = append(_deccd.Ser, _gaee)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_deccd.DLbls = NewCT_DLbls()
				if _fbefa := d.DecodeElement(_deccd.DLbls, &_cdega); _fbefa != nil {
					return _fbefa
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064r\u006f\u0070\u004c\u0069\u006e\u0065s"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064r\u006f\u0070\u004c\u0069\u006e\u0065s"}:
				_deccd.DropLines = NewCT_ChartLines()
				if _gdgdd := d.DecodeElement(_deccd.DropLines, &_cdega); _gdgdd != nil {
					return _gdgdd
				}
			default:
				_a.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0065l\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0045\u0047\u005f\u004c\u0069\u006e\u0065\u0043\u0068a\u0072\u0074\u0053\u0068\u0061\u0072\u0065\u0064\u0020\u0025\u0076", _cdega.Name)
				if _fbefc := d.Skip(); _fbefc != nil {
					return _fbefc
				}
			}
		case _e.EndElement:
			break _ebgff
		case _e.CharData:
		}
	}
	return nil
}
func (_acccd ST_RadarStyle) String() string {
	switch _acccd {
	case 0:
		return ""
	case 1:
		return "\u0073\u0074\u0061\u006e\u0064\u0061\u0072\u0064"
	case 2:
		return "\u006d\u0061\u0072\u006b\u0065\u0072"
	case 3:
		return "\u0066\u0069\u006c\u006c\u0065\u0064"
	}
	return ""
}
func (_cdgbec ST_TickMark) String() string {
	switch _cdgbec {
	case 0:
		return ""
	case 1:
		return "\u0063\u0072\u006fs\u0073"
	case 2:
		return "\u0069\u006e"
	case 3:
		return "\u006e\u006f\u006e\u0065"
	case 4:
		return "\u006f\u0075\u0074"
	}
	return ""
}
func (_bfac *CT_BubbleScale) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _gde := range start.Attr {
		if _gde.Name.Local == "\u0076\u0061\u006c" {
			_ffg, _gdbd := ParseUnionST_BubbleScale(_gde.Value)
			if _gdbd != nil {
				return _gdbd
			}
			_bfac.ValAttr = &_ffg
			continue
		}
	}
	for {
		_afgga, _gaag := d.Token()
		if _gaag != nil {
			return _b.Errorf("\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fB\u0075\u0062\u0062\u006c\u0065\u0053\u0063\u0061\u006c\u0065:\u0020\u0025\u0073", _gaag)
		}
		if _eec, _dgefd := _afgga.(_e.EndElement); _dgefd && _eec.Name == start.Name {
			break
		}
	}
	return nil
}

// Validate validates the CT_Layout and its children
func (_ddag *CT_Layout) Validate() error {
	return _ddag.ValidateWithPath("\u0043T\u005f\u004c\u0061\u0079\u006f\u0075t")
}

// Validate validates the CT_DispUnits and its children
func (_ffdge *CT_DispUnits) Validate() error {
	return _ffdge.ValidateWithPath("\u0043\u0054\u005fD\u0069\u0073\u0070\u0055\u006e\u0069\u0074\u0073")
}

// Validate validates the CT_DLblsChoice and its children
func (_ecae *CT_DLblsChoice) Validate() error {
	return _ecae.ValidateWithPath("\u0043\u0054\u005f\u0044\u004c\u0062\u006c\u0073\u0043h\u006f\u0069\u0063\u0065")
}

// ValidateWithPath validates the CT_StockChart and its children, prefixing error messages with path
func (_bdfbd *CT_StockChart) ValidateWithPath(path string) error {
	for _aeeac, _gcgfa := range _bdfbd.Ser {
		if _gdea := _gcgfa.ValidateWithPath(_b.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _aeeac)); _gdea != nil {
			return _gdea
		}
	}
	if _bdfbd.DLbls != nil {
		if _ddec := _bdfbd.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _ddec != nil {
			return _ddec
		}
	}
	if _bdfbd.DropLines != nil {
		if _fafcf := _bdfbd.DropLines.ValidateWithPath(path + "\u002f\u0044\u0072\u006f\u0070\u004c\u0069\u006e\u0065\u0073"); _fafcf != nil {
			return _fafcf
		}
	}
	if _bdfbd.HiLowLines != nil {
		if _ccgff := _bdfbd.HiLowLines.ValidateWithPath(path + "/\u0048\u0069\u004c\u006f\u0077\u004c\u0069\u006e\u0065\u0073"); _ccgff != nil {
			return _ccgff
		}
	}
	if _bdfbd.UpDownBars != nil {
		if _bdfcf := _bdfbd.UpDownBars.ValidateWithPath(path + "/\u0055\u0070\u0044\u006f\u0077\u006e\u0042\u0061\u0072\u0073"); _bdfcf != nil {
			return _bdfcf
		}
	}
	for _ccef, _cgabb := range _bdfbd.AxId {
		if _bdada := _cgabb.ValidateWithPath(_b.Sprintf("%\u0073\u002f\u0041\u0078\u0049\u0064\u005b\u0025\u0064\u005d", path, _ccef)); _bdada != nil {
			return _bdada
		}
	}
	if _bdfbd.ExtLst != nil {
		if _cfaec := _bdfbd.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _cfaec != nil {
			return _cfaec
		}
	}
	return nil
}
func (_aaba *CT_PieSer) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_aaba.Idx = NewCT_UnsignedInt()
	_aaba.Order = NewCT_UnsignedInt()
_cgfc:
	for {
		_ddca, _cgdc := d.Token()
		if _cgdc != nil {
			return _cgdc
		}
		switch _bgeef := _ddca.(type) {
		case _e.StartElement:
			switch _bgeef.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}:
				if _bgcc := d.DecodeElement(_aaba.Idx, &_bgeef); _bgcc != nil {
					return _bgcc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}:
				if _gbgfe := d.DecodeElement(_aaba.Order, &_bgeef); _gbgfe != nil {
					return _gbgfe
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				_aaba.Tx = NewCT_SerTx()
				if _cbfbe := d.DecodeElement(_aaba.Tx, &_bgeef); _cbfbe != nil {
					return _cbfbe
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_aaba.SpPr = _f.NewCT_ShapeProperties()
				if _fcef := d.DecodeElement(_aaba.SpPr, &_bgeef); _fcef != nil {
					return _fcef
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065x\u0070\u006c\u006f\u0073\u0069\u006fn"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065x\u0070\u006c\u006f\u0073\u0069\u006fn"}:
				_aaba.Explosion = NewCT_UnsignedInt()
				if _cefad := d.DecodeElement(_aaba.Explosion, &_bgeef); _cefad != nil {
					return _cefad
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0050\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0050\u0074"}:
				_egeca := NewCT_DPt()
				if _bgcea := d.DecodeElement(_egeca, &_bgeef); _bgcea != nil {
					return _bgcea
				}
				_aaba.DPt = append(_aaba.DPt, _egeca)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_aaba.DLbls = NewCT_DLbls()
				if _cgeag := d.DecodeElement(_aaba.DLbls, &_bgeef); _cgeag != nil {
					return _cgeag
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074"}:
				_aaba.Cat = NewCT_AxDataSource()
				if _gfefg := d.DecodeElement(_aaba.Cat, &_bgeef); _gfefg != nil {
					return _gfefg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006c"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006c"}:
				_aaba.Val = NewCT_NumDataSource()
				if _ebedf := d.DecodeElement(_aaba.Val, &_bgeef); _ebedf != nil {
					return _ebedf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_aaba.ExtLst = NewCT_ExtensionList()
				if _acabae := d.DecodeElement(_aaba.ExtLst, &_bgeef); _acabae != nil {
					return _acabae
				}
			default:
				_a.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u0050\u0069\u0065S\u0065\u0072 \u0025\u0076", _bgeef.Name)
				if _ffcg := d.Skip(); _ffcg != nil {
					return _ffcg
				}
			}
		case _e.EndElement:
			break _cgfc
		case _e.CharData:
		}
	}
	return nil
}
func (_cbfaa *ST_Shape) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_cbbegb, _bbbcb := d.Token()
	if _bbbcb != nil {
		return _bbbcb
	}
	if _aabdd, _babdd := _cbbegb.(_e.EndElement); _babdd && _aabdd.Name == start.Name {
		*_cbfaa = 1
		return nil
	}
	if _gbbfg, _gdadd := _cbbegb.(_e.CharData); !_gdadd {
		return _b.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _cbbegb)
	} else {
		switch string(_gbbfg) {
		case "":
			*_cbfaa = 0
		case "\u0063\u006f\u006e\u0065":
			*_cbfaa = 1
		case "\u0063o\u006e\u0065\u0054\u006f\u004d\u0061x":
			*_cbfaa = 2
		case "\u0062\u006f\u0078":
			*_cbfaa = 3
		case "\u0063\u0079\u006c\u0069\u006e\u0064\u0065\u0072":
			*_cbfaa = 4
		case "\u0070y\u0072\u0061\u006d\u0069\u0064":
			*_cbfaa = 5
		case "\u0070\u0079\u0072a\u006d\u0069\u0064\u0054\u006f\u004d\u0061\u0078":
			*_cbfaa = 6
		}
	}
	_cbbegb, _bbbcb = d.Token()
	if _bbbcb != nil {
		return _bbbcb
	}
	if _cdgg, _fcaab := _cbbegb.(_e.EndElement); _fcaab && _cdgg.Name == start.Name {
		return nil
	}
	return _b.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _cbbegb)
}

// ValidateWithPath validates the CT_ExtensionList and its children, prefixing error messages with path
func (_gefe *CT_ExtensionList) ValidateWithPath(path string) error {
	for _fcga, _bgfb := range _gefe.Ext {
		if _gaeb := _bgfb.ValidateWithPath(_b.Sprintf("\u0025\u0073\u002f\u0045\u0078\u0074\u005b\u0025\u0064\u005d", path, _fcga)); _gaeb != nil {
			return _gaeb
		}
	}
	return nil
}

const (
	ST_TrendlineTypeUnset     ST_TrendlineType = 0
	ST_TrendlineTypeExp       ST_TrendlineType = 1
	ST_TrendlineTypeLinear    ST_TrendlineType = 2
	ST_TrendlineTypeLog       ST_TrendlineType = 3
	ST_TrendlineTypeMovingAvg ST_TrendlineType = 4
	ST_TrendlineTypePoly      ST_TrendlineType = 5
	ST_TrendlineTypePower     ST_TrendlineType = 6
)

// ValidateWithPath validates the CT_PictureStackUnit and its children, prefixing error messages with path
func (_dcade *CT_PictureStackUnit) ValidateWithPath(path string) error {
	if _dcade.ValAttr <= 0 {
		return _b.Errorf("\u0025\u0073\u002fm.\u0056\u0061\u006c\u0041\u0074\u0074\u0072\u0020\u006du\u0073t\u0020b\u0065 \u003e\u0020\u0030\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025\u0076\u0029", path, _dcade.ValAttr)
	}
	return nil
}
func NewCT_DLblsChoice() *CT_DLblsChoice { _cebg := &CT_DLblsChoice{}; return _cebg }
func (_fcfgg *ST_OfPieType) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_fcfgg = 0
	case "\u0070\u0069\u0065":
		*_fcfgg = 1
	case "\u0062\u0061\u0072":
		*_fcfgg = 2
	}
	return nil
}

type CT_Extension struct {
	UriAttr *string
	Any     _gb.Any
}
type CT_TrendlineType struct{ ValAttr ST_TrendlineType }

func (_fdceef *ST_HoleSize) Validate() error { return _fdceef.ValidateWithPath("") }

// Validate validates the CT_Lvl and its children
func (_efbe *CT_Lvl) Validate() error {
	return _efbe.ValidateWithPath("\u0043\u0054\u005f\u004c\u0076\u006c")
}

// ValidateWithPath validates the CT_GapAmount and its children, prefixing error messages with path
func (_eedf *CT_GapAmount) ValidateWithPath(path string) error {
	if _eedf.ValAttr != nil {
		if _bfgbe := _eedf.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _bfgbe != nil {
			return _bfgbe
		}
	}
	return nil
}
func NewCT_Orientation() *CT_Orientation   { _dfffd := &CT_Orientation{}; return _dfffd }
func (_abecg ST_TickMark) Validate() error { return _abecg.ValidateWithPath("") }
func (_gda *CT_BarSer) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_gda.Idx = NewCT_UnsignedInt()
	_gda.Order = NewCT_UnsignedInt()
_feag:
	for {
		_dfdd, _cgea := d.Token()
		if _cgea != nil {
			return _cgea
		}
		switch _degf := _dfdd.(type) {
		case _e.StartElement:
			switch _degf.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}:
				if _bgg := d.DecodeElement(_gda.Idx, &_degf); _bgg != nil {
					return _bgg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}:
				if _ggeg := d.DecodeElement(_gda.Order, &_degf); _ggeg != nil {
					return _ggeg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				_gda.Tx = NewCT_SerTx()
				if _fdbc := d.DecodeElement(_gda.Tx, &_degf); _fdbc != nil {
					return _fdbc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_gda.SpPr = _f.NewCT_ShapeProperties()
				if _ebgb := d.DecodeElement(_gda.SpPr, &_degf); _ebgb != nil {
					return _ebgb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u006ev\u0065\u0072\u0074I\u0066\u004e\u0065\u0067\u0061\u0074\u0069\u0076\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u006ev\u0065\u0072\u0074I\u0066\u004e\u0065\u0067\u0061\u0074\u0069\u0076\u0065"}:
				_gda.InvertIfNegative = NewCT_Boolean()
				if _gegd := d.DecodeElement(_gda.InvertIfNegative, &_degf); _gegd != nil {
					return _gegd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0063\u0074\u0075\u0072\u0065\u004f\u0070t\u0069\u006f\u006e\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0063\u0074\u0075\u0072\u0065\u004f\u0070t\u0069\u006f\u006e\u0073"}:
				_gda.PictureOptions = NewCT_PictureOptions()
				if _cedc := d.DecodeElement(_gda.PictureOptions, &_degf); _cedc != nil {
					return _cedc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0050\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0050\u0074"}:
				_fgb := NewCT_DPt()
				if _bfdf := d.DecodeElement(_fgb, &_degf); _bfdf != nil {
					return _bfdf
				}
				_gda.DPt = append(_gda.DPt, _fgb)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_gda.DLbls = NewCT_DLbls()
				if _bcgf := d.DecodeElement(_gda.DLbls, &_degf); _bcgf != nil {
					return _bcgf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074r\u0065\u006e\u0064\u006c\u0069\u006ee"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074r\u0065\u006e\u0064\u006c\u0069\u006ee"}:
				_egb := NewCT_Trendline()
				if _fecfd := d.DecodeElement(_egb, &_degf); _fecfd != nil {
					return _fecfd
				}
				_gda.Trendline = append(_gda.Trendline, _egb)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065r\u0072\u0042\u0061\u0072\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065r\u0072\u0042\u0061\u0072\u0073"}:
				_gda.ErrBars = NewCT_ErrBars()
				if _adab := d.DecodeElement(_gda.ErrBars, &_degf); _adab != nil {
					return _adab
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074"}:
				_gda.Cat = NewCT_AxDataSource()
				if _bfcc := d.DecodeElement(_gda.Cat, &_degf); _bfcc != nil {
					return _bfcc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006c"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006c"}:
				_gda.Val = NewCT_NumDataSource()
				if _bcgb := d.DecodeElement(_gda.Val, &_degf); _bcgb != nil {
					return _bcgb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u0061p\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u0061p\u0065"}:
				_gda.Shape = NewCT_Shape()
				if _add := d.DecodeElement(_gda.Shape, &_degf); _add != nil {
					return _add
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_gda.ExtLst = NewCT_ExtensionList()
				if _cga := d.DecodeElement(_gda.ExtLst, &_degf); _cga != nil {
					return _cga
				}
			default:
				_a.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u0042\u0061\u0072S\u0065\u0072 \u0025\u0076", _degf.Name)
				if _aead := d.Skip(); _aead != nil {
					return _aead
				}
			}
		case _e.EndElement:
			break _feag
		case _e.CharData:
		}
	}
	return nil
}

type CT_LineSer struct {
	Idx       *CT_UnsignedInt
	Order     *CT_UnsignedInt
	Tx        *CT_SerTx
	SpPr      *_f.CT_ShapeProperties
	Marker    *CT_Marker
	DPt       []*CT_DPt
	DLbls     *CT_DLbls
	Trendline []*CT_Trendline
	ErrBars   *CT_ErrBars
	Cat       *CT_AxDataSource
	Val       *CT_NumDataSource
	Smooth    *CT_Boolean
	ExtLst    *CT_ExtensionList
}
type ST_TrendlineType byte
type CT_UnsignedInt struct{ ValAttr uint32 }

func (_bbaa *CT_BarDir) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _baab := range start.Attr {
		if _baab.Name.Local == "\u0076\u0061\u006c" {
			_bbaa.ValAttr.UnmarshalXMLAttr(_baab)
			continue
		}
	}
	for {
		_eega, _gfc := d.Token()
		if _gfc != nil {
			return _b.Errorf("p\u0061\u0072\u0073\u0069ng\u0020C\u0054\u005f\u0042\u0061\u0072D\u0069\u0072\u003a\u0020\u0025\u0073", _gfc)
		}
		if _gff, _cfe := _eega.(_e.EndElement); _cfe && _gff.Name == start.Name {
			break
		}
	}
	return nil
}

// Validate validates the CT_TrendlineType and its children
func (_cfagcd *CT_TrendlineType) Validate() error {
	return _cfagcd.ValidateWithPath("\u0043\u0054_\u0054\u0072\u0065n\u0064\u006c\u0069\u006e\u0065\u0054\u0079\u0070\u0065")
}

// Validate validates the CT_PlotAreaChoice and its children
func (_ededf *CT_PlotAreaChoice) Validate() error {
	return _ededf.ValidateWithPath("\u0043\u0054\u005f\u0050\u006c\u006f\u0074\u0041\u0072\u0065\u0061\u0043h\u006f\u0069\u0063\u0065")
}

// Validate validates the CT_BarSer and its children
func (_dcc *CT_BarSer) Validate() error {
	return _dcc.ValidateWithPath("\u0043T\u005f\u0042\u0061\u0072\u0053\u0065r")
}
func (_aafa *CT_ErrDir) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_aafa.ValAttr = ST_ErrDir(1)
	for _, _ceeee := range start.Attr {
		if _ceeee.Name.Local == "\u0076\u0061\u006c" {
			_aafa.ValAttr.UnmarshalXMLAttr(_ceeee)
			continue
		}
	}
	for {
		_ccdc, _gadgf := d.Token()
		if _gadgf != nil {
			return _b.Errorf("p\u0061\u0072\u0073\u0069ng\u0020C\u0054\u005f\u0045\u0072\u0072D\u0069\u0072\u003a\u0020\u0025\u0073", _gadgf)
		}
		if _fbce, _aeag := _ccdc.(_e.EndElement); _aeag && _fbce.Name == start.Name {
			break
		}
	}
	return nil
}
func (_fddf *EG_AxShared) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_fddf.AxId = NewCT_UnsignedInt()
	_fddf.Scaling = NewCT_Scaling()
	_fddf.AxPos = NewCT_AxPos()
	_fddf.CrossAx = NewCT_UnsignedInt()
_dedb:
	for {
		_ccagc, _bade := d.Token()
		if _bade != nil {
			return _bade
		}
		switch _gecgf := _ccagc.(type) {
		case _e.StartElement:
			switch _gecgf.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				if _bfcce := d.DecodeElement(_fddf.AxId, &_gecgf); _bfcce != nil {
					return _bfcce
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073c\u0061\u006c\u0069\u006e\u0067"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073c\u0061\u006c\u0069\u006e\u0067"}:
				if _acgba := d.DecodeElement(_fddf.Scaling, &_gecgf); _acgba != nil {
					return _acgba
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}:
				_fddf.Delete = NewCT_Boolean()
				if _fdffd := d.DecodeElement(_fddf.Delete, &_gecgf); _fdffd != nil {
					return _fdffd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0050o\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0050o\u0073"}:
				if _fcecc := d.DecodeElement(_fddf.AxPos, &_gecgf); _fcecc != nil {
					return _fcecc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}:
				_fddf.MajorGridlines = NewCT_ChartLines()
				if _dcegb := d.DecodeElement(_fddf.MajorGridlines, &_gecgf); _dcegb != nil {
					return _dcegb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}:
				_fddf.MinorGridlines = NewCT_ChartLines()
				if _bgbce := d.DecodeElement(_fddf.MinorGridlines, &_gecgf); _bgbce != nil {
					return _bgbce
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0074l\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0074l\u0065"}:
				_fddf.Title = NewCT_Title()
				if _adafb := d.DecodeElement(_fddf.Title, &_gecgf); _adafb != nil {
					return _adafb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}:
				_fddf.NumFmt = NewCT_NumFmt()
				if _bggdf := d.DecodeElement(_fddf.NumFmt, &_gecgf); _bggdf != nil {
					return _bggdf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}:
				_fddf.MajorTickMark = NewCT_TickMark()
				if _adbea := d.DecodeElement(_fddf.MajorTickMark, &_gecgf); _adbea != nil {
					return _adbea
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}:
				_fddf.MinorTickMark = NewCT_TickMark()
				if _fbgdg := d.DecodeElement(_fddf.MinorTickMark, &_gecgf); _fbgdg != nil {
					return _fbgdg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}:
				_fddf.TickLblPos = NewCT_TickLblPos()
				if _fedbfa := d.DecodeElement(_fddf.TickLblPos, &_gecgf); _fedbfa != nil {
					return _fedbfa
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_fddf.SpPr = _f.NewCT_ShapeProperties()
				if _fcgf := d.DecodeElement(_fddf.SpPr, &_gecgf); _fcgf != nil {
					return _fcgf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_fddf.TxPr = _f.NewCT_TextBody()
				if _acbfd := d.DecodeElement(_fddf.TxPr, &_gecgf); _acbfd != nil {
					return _acbfd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0041\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0041\u0078"}:
				if _ceddc := d.DecodeElement(_fddf.CrossAx, &_gecgf); _ceddc != nil {
					return _ceddc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073"}:
				_fddf.Choice = NewEG_AxSharedChoice()
				if _dabed := d.DecodeElement(&_fddf.Choice.Crosses, &_gecgf); _dabed != nil {
					return _dabed
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073\u0041t"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073\u0041t"}:
				_fddf.Choice = NewEG_AxSharedChoice()
				if _bebef := d.DecodeElement(&_fddf.Choice.CrossesAt, &_gecgf); _bebef != nil {
					return _bebef
				}
			default:
				_a.Log.Debug("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0045\u0047\u005f\u0041\u0078\u0053\u0068\u0061\u0072\u0065\u0064\u0020\u0025\u0076", _gecgf.Name)
				if _dbga := d.Skip(); _dbga != nil {
					return _dbga
				}
			}
		case _e.EndElement:
			break _dedb
		case _e.CharData:
		}
	}
	return nil
}
func NewCT_LegendEntry() *CT_LegendEntry {
	_ffefc := &CT_LegendEntry{}
	_ffefc.Idx = NewCT_UnsignedInt()
	return _ffefc
}
func (_cfgca ST_TimeUnit) ValidateWithPath(path string) error {
	switch _cfgca {
	case 0, 1, 2, 3:
	default:
		return _b.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_cfgca))
	}
	return nil
}
func NewCT_BubbleScale() *CT_BubbleScale { _daa := &CT_BubbleScale{}; return _daa }
func (_dedeb *CT_Period) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _dedeb.ValAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0076\u0061\u006c"}, Value: _b.Sprintf("\u0025\u0076", *_dedeb.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}
func NewEG_SurfaceChartShared() *EG_SurfaceChartShared {
	_gfggeg := &EG_SurfaceChartShared{}
	return _gfggeg
}
func (_egagcdg ST_Orientation) ValidateWithPath(path string) error {
	switch _egagcdg {
	case 0, 1, 2:
	default:
		return _b.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_egagcdg))
	}
	return nil
}

type ST_TickLblPos byte

func NewGroup_DLbls() *Group_DLbls { _fagcf := &Group_DLbls{}; return _fagcf }
func (_cded *ST_PageSetupOrientation) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_eefce, _fccdd := d.Token()
	if _fccdd != nil {
		return _fccdd
	}
	if _cgaag, _ffaac := _eefce.(_e.EndElement); _ffaac && _cgaag.Name == start.Name {
		*_cded = 1
		return nil
	}
	if _facgg, _eaeac := _eefce.(_e.CharData); !_eaeac {
		return _b.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _eefce)
	} else {
		switch string(_facgg) {
		case "":
			*_cded = 0
		case "\u0064e\u0066\u0061\u0075\u006c\u0074":
			*_cded = 1
		case "\u0070\u006f\u0072\u0074\u0072\u0061\u0069\u0074":
			*_cded = 2
		case "\u006ca\u006e\u0064\u0073\u0063\u0061\u0070e":
			*_cded = 3
		}
	}
	_eefce, _fccdd = d.Token()
	if _fccdd != nil {
		return _fccdd
	}
	if _efab, _edaf := _eefce.(_e.EndElement); _edaf && _efab.Name == start.Name {
		return nil
	}
	return _b.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _eefce)
}
func NewCT_RadarStyle() *CT_RadarStyle { _gfcgf := &CT_RadarStyle{}; return _gfcgf }
func (_bdfcb ST_BarDir) ValidateWithPath(path string) error {
	switch _bdfcb {
	case 0, 1, 2:
	default:
		return _b.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_bdfcb))
	}
	return nil
}

type CT_PlotAreaChoice struct {
	AreaChart      *CT_AreaChart
	Area3DChart    *CT_Area3DChart
	LineChart      *CT_LineChart
	Line3DChart    *CT_Line3DChart
	StockChart     *CT_StockChart
	RadarChart     *CT_RadarChart
	ScatterChart   *CT_ScatterChart
	PieChart       *CT_PieChart
	Pie3DChart     *CT_Pie3DChart
	DoughnutChart  *CT_DoughnutChart
	BarChart       *CT_BarChart
	Bar3DChart     *CT_Bar3DChart
	OfPieChart     *CT_OfPieChart
	SurfaceChart   *CT_SurfaceChart
	Surface3DChart *CT_Surface3DChart
	BubbleChart    *CT_BubbleChart
}

// ValidateWithPath validates the CT_TrendlineLbl and its children, prefixing error messages with path
func (_ggcb *CT_TrendlineLbl) ValidateWithPath(path string) error {
	if _ggcb.Layout != nil {
		if _efbfb := _ggcb.Layout.ValidateWithPath(path + "\u002fL\u0061\u0079\u006f\u0075\u0074"); _efbfb != nil {
			return _efbfb
		}
	}
	if _ggcb.Tx != nil {
		if _cdcba := _ggcb.Tx.ValidateWithPath(path + "\u002f\u0054\u0078"); _cdcba != nil {
			return _cdcba
		}
	}
	if _ggcb.NumFmt != nil {
		if _gabd := _ggcb.NumFmt.ValidateWithPath(path + "\u002fN\u0075\u006d\u0046\u006d\u0074"); _gabd != nil {
			return _gabd
		}
	}
	if _ggcb.SpPr != nil {
		if _cbacb := _ggcb.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _cbacb != nil {
			return _cbacb
		}
	}
	if _ggcb.TxPr != nil {
		if _gfadg := _ggcb.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _gfadg != nil {
			return _gfadg
		}
	}
	if _ggcb.ExtLst != nil {
		if _fadag := _ggcb.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _fadag != nil {
			return _fadag
		}
	}
	return nil
}
func (_feedfc ST_ErrDir) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_feedfc.String(), start)
}
func (_accaa *ST_ScatterStyle) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_bgfaf, _bgec := d.Token()
	if _bgec != nil {
		return _bgec
	}
	if _gagae, _ccedg := _bgfaf.(_e.EndElement); _ccedg && _gagae.Name == start.Name {
		*_accaa = 1
		return nil
	}
	if _caggf, _beedfc := _bgfaf.(_e.CharData); !_beedfc {
		return _b.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _bgfaf)
	} else {
		switch string(_caggf) {
		case "":
			*_accaa = 0
		case "\u006e\u006f\u006e\u0065":
			*_accaa = 1
		case "\u006c\u0069\u006e\u0065":
			*_accaa = 2
		case "\u006c\u0069\u006e\u0065\u004d\u0061\u0072\u006b\u0065\u0072":
			*_accaa = 3
		case "\u006d\u0061\u0072\u006b\u0065\u0072":
			*_accaa = 4
		case "\u0073\u006d\u006f\u006f\u0074\u0068":
			*_accaa = 5
		case "\u0073\u006d\u006fo\u0074\u0068\u004d\u0061\u0072\u006b\u0065\u0072":
			*_accaa = 6
		}
	}
	_bgfaf, _bgec = d.Token()
	if _bgec != nil {
		return _bgec
	}
	if _effde, _gebda := _bgfaf.(_e.EndElement); _gebda && _effde.Name == start.Name {
		return nil
	}
	return _b.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _bgfaf)
}

// Validate validates the Group_DLbls and its children
func (_fcddc *Group_DLbls) Validate() error {
	return _fcddc.ValidateWithPath("G\u0072\u006f\u0075\u0070\u005f\u0044\u004c\u0062\u006c\u0073")
}
func (_gdfe *ST_BarGrouping) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_gdfe = 0
	case "\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u0053\u0074a\u0063\u006b\u0065\u0064":
		*_gdfe = 1
	case "\u0063l\u0075\u0073\u0074\u0065\u0072\u0065d":
		*_gdfe = 2
	case "\u0073\u0074\u0061\u006e\u0064\u0061\u0072\u0064":
		*_gdfe = 3
	case "\u0073t\u0061\u0063\u006b\u0065\u0064":
		*_gdfe = 4
	}
	return nil
}
func (_dbaa *ST_BuiltInUnit) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_dbaa = 0
	case "\u0068\u0075\u006e\u0064\u0072\u0065\u0064\u0073":
		*_dbaa = 1
	case "\u0074h\u006f\u0075\u0073\u0061\u006e\u0064s":
		*_dbaa = 2
	case "\u0074\u0065\u006eT\u0068\u006f\u0075\u0073\u0061\u006e\u0064\u0073":
		*_dbaa = 3
	case "\u0068\u0075n\u0064\u0072\u0065d\u0054\u0068\u006f\u0075\u0073\u0061\u006e\u0064\u0073":
		*_dbaa = 4
	case "\u006d\u0069\u006c\u006c\u0069\u006f\u006e\u0073":
		*_dbaa = 5
	case "t\u0065\u006e\u004d\u0069\u006c\u006c\u0069\u006f\u006e\u0073":
		*_dbaa = 6
	case "\u0068u\u006ed\u0072\u0065\u0064\u004d\u0069\u006c\u006c\u0069\u006f\u006e\u0073":
		*_dbaa = 7
	case "\u0062\u0069\u006c\u006c\u0069\u006f\u006e\u0073":
		*_dbaa = 8
	case "\u0074r\u0069\u006c\u006c\u0069\u006f\u006es":
		*_dbaa = 9
	}
	return nil
}
func NewCT_Boolean() *CT_Boolean { _agce := &CT_Boolean{}; return _agce }
func (_babfe *CT_NumFmt) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _gcbfd := range start.Attr {
		if _gcbfd.Name.Local == "\u0066\u006f\u0072\u006d\u0061\u0074\u0043\u006f\u0064\u0065" {
			_gefg, _aacg := _gcbfd.Value, error(nil)
			if _aacg != nil {
				return _aacg
			}
			_babfe.FormatCodeAttr = _gefg
			continue
		}
		if _gcbfd.Name.Local == "\u0073\u006f\u0075r\u0063\u0065\u004c\u0069\u006e\u006b\u0065\u0064" {
			_gfbf, _abcb := _c.ParseBool(_gcbfd.Value)
			if _abcb != nil {
				return _abcb
			}
			_babfe.SourceLinkedAttr = &_gfbf
			continue
		}
	}
	for {
		_cgbad, _dgfd := d.Token()
		if _dgfd != nil {
			return _b.Errorf("p\u0061\u0072\u0073\u0069ng\u0020C\u0054\u005f\u004e\u0075\u006dF\u006d\u0074\u003a\u0020\u0025\u0073", _dgfd)
		}
		if _dfcb, _dcfg := _cgbad.(_e.EndElement); _dcfg && _dfcb.Name == start.Name {
			break
		}
	}
	return nil
}

// Validate validates the CT_DoughnutChart and its children
func (_badc *CT_DoughnutChart) Validate() error {
	return _badc.ValidateWithPath("\u0043\u0054_\u0044\u006f\u0075g\u0068\u006e\u0075\u0074\u0043\u0068\u0061\u0072\u0074")
}

// ValidateWithPath validates the CT_NumRef and its children, prefixing error messages with path
func (_agebc *CT_NumRef) ValidateWithPath(path string) error {
	if _agebc.NumCache != nil {
		if _faegd := _agebc.NumCache.ValidateWithPath(path + "\u002fN\u0075\u006d\u0043\u0061\u0063\u0068e"); _faegd != nil {
			return _faegd
		}
	}
	if _agebc.ExtLst != nil {
		if _ffefa := _agebc.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _ffefa != nil {
			return _ffefa
		}
	}
	return nil
}

type CT_Line3DChart struct {
	Grouping   *CT_Grouping
	VaryColors *CT_Boolean
	Ser        []*CT_LineSer
	DLbls      *CT_DLbls
	DropLines  *CT_ChartLines
	GapDepth   *CT_GapAmount
	AxId       []*CT_UnsignedInt
	ExtLst     *CT_ExtensionList
}

// Validate validates the CT_BubbleChart and its children
func (_ddfe *CT_BubbleChart) Validate() error {
	return _ddfe.ValidateWithPath("\u0043\u0054\u005f\u0042\u0075\u0062\u0062\u006c\u0065C\u0068\u0061\u0072\u0074")
}
func NewCT_DepthPercent() *CT_DepthPercent { _baeac := &CT_DepthPercent{}; return _baeac }

// ValidateWithPath validates the CT_LegendEntryChoice and its children, prefixing error messages with path
func (_afga *CT_LegendEntryChoice) ValidateWithPath(path string) error {
	if _afga.Delete != nil {
		if _eeef := _afga.Delete.ValidateWithPath(path + "\u002fD\u0065\u006c\u0065\u0074\u0065"); _eeef != nil {
			return _eeef
		}
	}
	if _afga.TxPr != nil {
		if _ebcb := _afga.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _ebcb != nil {
			return _ebcb
		}
	}
	return nil
}

// Validate validates the CT_ErrDir and its children
func (_cffe *CT_ErrDir) Validate() error {
	return _cffe.ValidateWithPath("\u0043T\u005f\u0045\u0072\u0072\u0044\u0069r")
}
func NewCT_AreaChart() *CT_AreaChart { _bd := &CT_AreaChart{}; return _bd }

// Validate validates the CT_StrData and its children
func (_bcfgf *CT_StrData) Validate() error {
	return _bcfgf.ValidateWithPath("\u0043\u0054\u005f\u0053\u0074\u0072\u0044\u0061\u0074\u0061")
}
func (_ffffdb *ST_RadarStyle) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_gdbf, _fdgba := d.Token()
	if _fdgba != nil {
		return _fdgba
	}
	if _ddbe, _dafdgcg := _gdbf.(_e.EndElement); _dafdgcg && _ddbe.Name == start.Name {
		*_ffffdb = 1
		return nil
	}
	if _ebccd, _bbadc := _gdbf.(_e.CharData); !_bbadc {
		return _b.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _gdbf)
	} else {
		switch string(_ebccd) {
		case "":
			*_ffffdb = 0
		case "\u0073\u0074\u0061\u006e\u0064\u0061\u0072\u0064":
			*_ffffdb = 1
		case "\u006d\u0061\u0072\u006b\u0065\u0072":
			*_ffffdb = 2
		case "\u0066\u0069\u006c\u006c\u0065\u0064":
			*_ffffdb = 3
		}
	}
	_gdbf, _fdgba = d.Token()
	if _fdgba != nil {
		return _fdgba
	}
	if _efcee, _bfcee := _gdbf.(_e.EndElement); _bfcee && _efcee.Name == start.Name {
		return nil
	}
	return _b.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _gdbf)
}

var ST_HoleSizePercentPatternRe = _g.MustCompile(ST_HoleSizePercentPattern)

func (_cgbd ST_ErrValType) String() string {
	switch _cgbd {
	case 0:
		return ""
	case 1:
		return "\u0063\u0075\u0073\u0074"
	case 2:
		return "\u0066\u0069\u0078\u0065\u0064\u0056\u0061\u006c"
	case 3:
		return "\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u0061\u0067\u0065"
	case 4:
		return "\u0073\u0074\u0064\u0044\u0065\u0076"
	case 5:
		return "\u0073\u0074\u0064\u0045\u0072\u0072"
	}
	return ""
}

const (
	ST_PageSetupOrientationUnset     ST_PageSetupOrientation = 0
	ST_PageSetupOrientationDefault   ST_PageSetupOrientation = 1
	ST_PageSetupOrientationPortrait  ST_PageSetupOrientation = 2
	ST_PageSetupOrientationLandscape ST_PageSetupOrientation = 3
)

func (_fbcd *CT_Layout) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _fbcd.ManualLayout != nil {
		_eegca := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006d\u0061\u006e\u0075\u0061\u006c\u004ca\u0079\u006f\u0075\u0074"}}
		e.EncodeElement(_fbcd.ManualLayout, _eegca)
	}
	if _fbcd.ExtLst != nil {
		_gade := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_fbcd.ExtLst, _gade)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_DLbls and its children
func (_gbcd *CT_DLbls) Validate() error {
	return _gbcd.ValidateWithPath("\u0043\u0054\u005f\u0044\u004c\u0062\u006c\u0073")
}
func NewCT_Scaling() *CT_Scaling { _gbbea := &CT_Scaling{}; return _gbbea }
func (_beff ST_BarGrouping) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_fgebg := _e.Attr{}
	_fgebg.Name = name
	switch _beff {
	case ST_BarGroupingUnset:
		_fgebg.Value = ""
	case ST_BarGroupingPercentStacked:
		_fgebg.Value = "\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u0053\u0074a\u0063\u006b\u0065\u0064"
	case ST_BarGroupingClustered:
		_fgebg.Value = "\u0063l\u0075\u0073\u0074\u0065\u0072\u0065d"
	case ST_BarGroupingStandard:
		_fgebg.Value = "\u0073\u0074\u0061\u006e\u0064\u0061\u0072\u0064"
	case ST_BarGroupingStacked:
		_fgebg.Value = "\u0073t\u0061\u0063\u006b\u0065\u0064"
	}
	return _fgebg, nil
}
func (_efede ST_ErrDir) Validate() error { return _efede.ValidateWithPath("") }
func (_ddafc ST_ErrDir) String() string {
	switch _ddafc {
	case 0:
		return ""
	case 1:
		return "\u0078"
	case 2:
		return "\u0079"
	}
	return ""
}

type CT_AreaSer struct {
	Idx            *CT_UnsignedInt
	Order          *CT_UnsignedInt
	Tx             *CT_SerTx
	SpPr           *_f.CT_ShapeProperties
	PictureOptions *CT_PictureOptions
	DPt            []*CT_DPt
	DLbls          *CT_DLbls
	Trendline      []*CT_Trendline
	ErrBars        []*CT_ErrBars
	Cat            *CT_AxDataSource
	Val            *CT_NumDataSource
	ExtLst         *CT_ExtensionList
}
type CT_Bar3DChart struct {
	BarDir     *CT_BarDir
	Grouping   *CT_BarGrouping
	VaryColors *CT_Boolean
	Ser        []*CT_BarSer
	DLbls      *CT_DLbls
	GapWidth   *CT_GapAmount
	GapDepth   *CT_GapAmount
	Shape      *CT_Shape
	AxId       []*CT_UnsignedInt
	ExtLst     *CT_ExtensionList
}
type CT_AxPos struct{ ValAttr ST_AxPos }

// Validate validates the CT_Crosses and its children
func (_dcdbe *CT_Crosses) Validate() error {
	return _dcdbe.ValidateWithPath("\u0043\u0054\u005f\u0043\u0072\u006f\u0073\u0073\u0065\u0073")
}
func (_bfdaf ST_LblOffset) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _bfdaf.ST_LblOffsetPercent != nil {
		e.EncodeToken(_e.CharData(*_bfdaf.ST_LblOffsetPercent))
	}
	if _bfdaf.ST_LblOffsetUShort != nil {
		e.EncodeToken(_e.CharData(_b.Sprintf("\u0025\u0064", *_bfdaf.ST_LblOffsetUShort)))
	}
	return e.EncodeToken(_e.EndElement{Name: start.Name})
}

// Validate validates the CT_DispUnitsChoice and its children
func (_fgbd *CT_DispUnitsChoice) Validate() error {
	return _fgbd.ValidateWithPath("\u0043T\u005fD\u0069\u0073\u0070\u0055\u006ei\u0074\u0073C\u0068\u006f\u0069\u0063\u0065")
}

// Validate validates the CT_ErrValType and its children
func (_ceaea *CT_ErrValType) Validate() error {
	return _ceaea.ValidateWithPath("\u0043\u0054\u005f\u0045\u0072\u0072\u0056\u0061\u006c\u0054\u0079\u0070\u0065")
}

type CT_DLblChoice struct {
	Delete         *CT_Boolean
	Layout         *CT_Layout
	Tx             *CT_Tx
	NumFmt         *CT_NumFmt
	SpPr           *_f.CT_ShapeProperties
	TxPr           *_f.CT_TextBody
	DLblPos        *CT_DLblPos
	ShowLegendKey  *CT_Boolean
	ShowVal        *CT_Boolean
	ShowCatName    *CT_Boolean
	ShowSerName    *CT_Boolean
	ShowPercent    *CT_Boolean
	ShowBubbleSize *CT_Boolean
	Separator      *string
}

func (_fffg ST_GapAmount) String() string {
	if _fffg.ST_GapAmountPercent != nil {
		return _b.Sprintf("\u0025\u0076", *_fffg.ST_GapAmountPercent)
	}
	if _fffg.ST_GapAmountUShort != nil {
		return _b.Sprintf("\u0025\u0076", *_fffg.ST_GapAmountUShort)
	}
	return ""
}

// ValidateWithPath validates the CT_LayoutMode and its children, prefixing error messages with path
func (_aabc *CT_LayoutMode) ValidateWithPath(path string) error {
	if _dagcad := _aabc.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _dagcad != nil {
		return _dagcad
	}
	return nil
}
func NewCT_ScatterSer() *CT_ScatterSer {
	_fabgc := &CT_ScatterSer{}
	_fabgc.Idx = NewCT_UnsignedInt()
	_fabgc.Order = NewCT_UnsignedInt()
	return _fabgc
}

// ValidateWithPath validates the CT_AreaChart and its children, prefixing error messages with path
func (_fge *CT_AreaChart) ValidateWithPath(path string) error {
	if _fge.Grouping != nil {
		if _eee := _fge.Grouping.ValidateWithPath(path + "\u002fG\u0072\u006f\u0075\u0070\u0069\u006eg"); _eee != nil {
			return _eee
		}
	}
	if _fge.VaryColors != nil {
		if _efe := _fge.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _efe != nil {
			return _efe
		}
	}
	for _gec, _bbd := range _fge.Ser {
		if _bfd := _bbd.ValidateWithPath(_b.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _gec)); _bfd != nil {
			return _bfd
		}
	}
	if _fge.DLbls != nil {
		if _def := _fge.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _def != nil {
			return _def
		}
	}
	if _fge.DropLines != nil {
		if _cec := _fge.DropLines.ValidateWithPath(path + "\u002f\u0044\u0072\u006f\u0070\u004c\u0069\u006e\u0065\u0073"); _cec != nil {
			return _cec
		}
	}
	for _gcfg, _gae := range _fge.AxId {
		if _dbe := _gae.ValidateWithPath(_b.Sprintf("%\u0073\u002f\u0041\u0078\u0049\u0064\u005b\u0025\u0064\u005d", path, _gcfg)); _dbe != nil {
			return _dbe
		}
	}
	if _fge.ExtLst != nil {
		if _eaa := _fge.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _eaa != nil {
			return _eaa
		}
	}
	return nil
}

// ValidateWithPath validates the CT_HPercent and its children, prefixing error messages with path
func (_cdbd *CT_HPercent) ValidateWithPath(path string) error {
	if _cdbd.ValAttr != nil {
		if _ggcf := _cdbd.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _ggcf != nil {
			return _ggcf
		}
	}
	return nil
}

type CT_DTable struct {
	ShowHorzBorder *CT_Boolean
	ShowVertBorder *CT_Boolean
	ShowOutline    *CT_Boolean
	ShowKeys       *CT_Boolean
	SpPr           *_f.CT_ShapeProperties
	TxPr           *_f.CT_TextBody
	ExtLst         *CT_ExtensionList
}

func (_eacb *CT_Lvl) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_dfcde:
	for {
		_eadfb, _fcbf := d.Token()
		if _fcbf != nil {
			return _fcbf
		}
		switch _dcdfe := _eadfb.(type) {
		case _e.StartElement:
			switch _dcdfe.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0074"}:
				_bdfe := NewCT_StrVal()
				if _befcb := d.DecodeElement(_bdfe, &_dcdfe); _befcb != nil {
					return _befcb
				}
				_eacb.Pt = append(_eacb.Pt, _bdfe)
			default:
				_a.Log.Debug("\u0073\u006b\u0069\u0070\u0070i\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u004c\u0076\u006c\u0020\u0025\u0076", _dcdfe.Name)
				if _deae := d.Skip(); _deae != nil {
					return _deae
				}
			}
		case _e.EndElement:
			break _dfcde
		case _e.CharData:
		}
	}
	return nil
}
func (_bdafc *CT_NumVal) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0069\u0064\u0078"}, Value: _b.Sprintf("\u0025\u0076", _bdafc.IdxAttr)})
	if _bdafc.FormatCodeAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0066\u006f\u0072\u006d\u0061\u0074\u0043\u006f\u0064\u0065"}, Value: _b.Sprintf("\u0025\u0076", *_bdafc.FormatCodeAttr)})
	}
	e.EncodeToken(start)
	_dfedf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0076"}}
	_gb.AddPreserveSpaceAttr(&_dfedf, _bdafc.V)
	e.EncodeElement(_bdafc.V, _dfedf)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// ST_SecondPieSize is a union type
type ST_SecondPieSize struct {
	ST_SecondPieSizePercent *string
	ST_SecondPieSizeUShort  *uint16
}

func (_gdafc ST_BuiltInUnit) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_gdafc.String(), start)
}
func NewCT_GapAmount() *CT_GapAmount { _bbegg := &CT_GapAmount{}; return _bbegg }

// ValidateWithPath validates the CT_CrossBetween and its children, prefixing error messages with path
func (_adad *CT_CrossBetween) ValidateWithPath(path string) error {
	if _adad.ValAttr == ST_CrossBetweenUnset {
		return _b.Errorf("\u0025\u0073\u002fV\u0061\u006c\u0041\u0074t\u0072\u0020\u0069\u0073\u0020\u0061\u0020m\u0061\u006e\u0064\u0061\u0074\u006f\u0072\u0079\u0020\u0066\u0069\u0065\u006c\u0064", path)
	}
	if _egba := _adad.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _egba != nil {
		return _egba
	}
	return nil
}
func (_abac *CT_ErrBars) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _abac.ErrDir != nil {
		_fggb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0072\u0072\u0044\u0069\u0072"}}
		e.EncodeElement(_abac.ErrDir, _fggb)
	}
	_dbeb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065r\u0072\u0042\u0061\u0072\u0054\u0079\u0070\u0065"}}
	e.EncodeElement(_abac.ErrBarType, _dbeb)
	_fcg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065r\u0072\u0056\u0061\u006c\u0054\u0079\u0070\u0065"}}
	e.EncodeElement(_abac.ErrValType, _fcg)
	if _abac.NoEndCap != nil {
		_fedbb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006e\u006f\u0045\u006e\u0064\u0043\u0061\u0070"}}
		e.EncodeElement(_abac.NoEndCap, _fedbb)
	}
	if _abac.Plus != nil {
		_dgadg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0070\u006c\u0075\u0073"}}
		e.EncodeElement(_abac.Plus, _dgadg)
	}
	if _abac.Minus != nil {
		_cgba := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006d\u0069\u006e\u0075\u0073"}}
		e.EncodeElement(_abac.Minus, _cgba)
	}
	if _abac.Val != nil {
		_aede := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0076a\u006c"}}
		e.EncodeElement(_abac.Val, _aede)
	}
	if _abac.SpPr != nil {
		_dfeb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_abac.SpPr, _dfeb)
	}
	if _abac.ExtLst != nil {
		_dea := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_abac.ExtLst, _dea)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}
func (_abgeg *ST_SplitType) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_fgabc, _dbafa := d.Token()
	if _dbafa != nil {
		return _dbafa
	}
	if _abccg, _edbcc := _fgabc.(_e.EndElement); _edbcc && _abccg.Name == start.Name {
		*_abgeg = 1
		return nil
	}
	if _cefgad, _acbbb := _fgabc.(_e.CharData); !_acbbb {
		return _b.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _fgabc)
	} else {
		switch string(_cefgad) {
		case "":
			*_abgeg = 0
		case "\u0061\u0075\u0074\u006f":
			*_abgeg = 1
		case "\u0063\u0075\u0073\u0074":
			*_abgeg = 2
		case "\u0070e\u0072\u0063\u0065\u006e\u0074":
			*_abgeg = 3
		case "\u0070\u006f\u0073":
			*_abgeg = 4
		case "\u0076\u0061\u006c":
			*_abgeg = 5
		}
	}
	_fgabc, _dbafa = d.Token()
	if _dbafa != nil {
		return _dbafa
	}
	if _fagg, _edeg := _fgabc.(_e.EndElement); _edeg && _fagg.Name == start.Name {
		return nil
	}
	return _b.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _fgabc)
}
func (_gabec *CT_TrendlineLbl) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _gabec.Layout != nil {
		_ecebc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006c\u0061\u0079\u006f\u0075\u0074"}}
		e.EncodeElement(_gabec.Layout, _ecebc)
	}
	if _gabec.Tx != nil {
		_agbbd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078"}}
		e.EncodeElement(_gabec.Tx, _agbbd)
	}
	if _gabec.NumFmt != nil {
		_ddefda := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u0046\u006d\u0074"}}
		e.EncodeElement(_gabec.NumFmt, _ddefda)
	}
	if _gabec.SpPr != nil {
		_afgbf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_gabec.SpPr, _afgbf)
	}
	if _gabec.TxPr != nil {
		_efdgg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_gabec.TxPr, _efdgg)
	}
	if _gabec.ExtLst != nil {
		_eabbc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_gabec.ExtLst, _eabbc)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}
func (_ceg *CT_BandFmts) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _ceg.BandFmt != nil {
		_fca := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0062\u0061\u006e\u0064\u0046\u006dt"}}
		for _, _ffe := range _ceg.BandFmt {
			e.EncodeElement(_ffe, _fca)
		}
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}
func (_bccdc *CT_ExtensionList) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_fdac:
	for {
		_fedff, _feaag := d.Token()
		if _feaag != nil {
			return _feaag
		}
		switch _caga := _fedff.(type) {
		case _e.StartElement:
			switch _caga.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074"}:
				_gecg := NewCT_Extension()
				if _egbf := d.DecodeElement(_gecg, &_caga); _egbf != nil {
					return _egbf
				}
				_bccdc.Ext = append(_bccdc.Ext, _gecg)
			default:
				_a.Log.Debug("\u0073\u006b\u0069\u0070\u0070i\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0045\u0078\u0074\u0065\u006e\u0073\u0069\u006f\u006e\u004c\u0069\u0073\u0074\u0020\u0025v", _caga.Name)
				if _edgb := d.Skip(); _edgb != nil {
					return _edgb
				}
			}
		case _e.EndElement:
			break _fdac
		case _e.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_Lvl and its children, prefixing error messages with path
func (_fcfa *CT_Lvl) ValidateWithPath(path string) error {
	for _aeba, _ceab := range _fcfa.Pt {
		if _bagb := _ceab.ValidateWithPath(_b.Sprintf("\u0025s\u002f\u0050\u0074\u005b\u0025\u0064]", path, _aeba)); _bagb != nil {
			return _bagb
		}
	}
	return nil
}

type ST_RadarStyle byte
type ST_ScatterStyle byte

func (_cegf *CT_CustSplit) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_cgec:
	for {
		_cddde, _ebcg := d.Token()
		if _ebcg != nil {
			return _ebcg
		}
		switch _egee := _cddde.(type) {
		case _e.StartElement:
			switch _egee.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0065\u0063\u006f\u006e\u0064\u0050\u0069\u0065\u0050\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0065\u0063\u006f\u006e\u0064\u0050\u0069\u0065\u0050\u0074"}:
				_dede := NewCT_UnsignedInt()
				if _bgac := d.DecodeElement(_dede, &_egee); _bgac != nil {
					return _bgac
				}
				_cegf.SecondPiePt = append(_cegf.SecondPiePt, _dede)
			default:
				_a.Log.Debug("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075n\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054_C\u0075\u0073t\u0053\u0070\u006c\u0069\u0074\u0020\u0025\u0076", _egee.Name)
				if _aed := d.Skip(); _aed != nil {
					return _aed
				}
			}
		case _e.EndElement:
			break _cgec
		case _e.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_UnsignedInt and its children, prefixing error messages with path
func (_bdbbg *CT_UnsignedInt) ValidateWithPath(path string) error { return nil }
func (_ggfg *CT_DPt) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_fgdb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0069d\u0078"}}
	e.EncodeElement(_ggfg.Idx, _fgdb)
	if _ggfg.InvertIfNegative != nil {
		_fgee := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0069n\u0076\u0065\u0072\u0074\u0049f\u004e\u0065g\u0061\u0074\u0069\u0076\u0065"}}
		e.EncodeElement(_ggfg.InvertIfNegative, _fgee)
	}
	if _ggfg.Marker != nil {
		_dbfb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006d\u0061\u0072\u006b\u0065\u0072"}}
		e.EncodeElement(_ggfg.Marker, _dbfb)
	}
	if _ggfg.Bubble3D != nil {
		_aabe := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0062\u0075\u0062\u0062\u006c\u0065\u0033\u0044"}}
		e.EncodeElement(_ggfg.Bubble3D, _aabe)
	}
	if _ggfg.Explosion != nil {
		_ceae := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0065\u0078\u0070\u006c\u006f\u0073\u0069\u006f\u006e"}}
		e.EncodeElement(_ggfg.Explosion, _ceae)
	}
	if _ggfg.SpPr != nil {
		_dged := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_ggfg.SpPr, _dged)
	}
	if _ggfg.PictureOptions != nil {
		_fecg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003ap\u0069\u0063\u0074u\u0072\u0065\u004f\u0070\u0074\u0069\u006f\u006e\u0073"}}
		e.EncodeElement(_ggfg.PictureOptions, _fecg)
	}
	if _ggfg.ExtLst != nil {
		_agcf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_ggfg.ExtLst, _agcf)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

const ST_LblOffsetPercentPattern = "\u0030\u002a\u0028\u0028\u005b\u0030\u002d\u0039]\u0029\u007c\u0028[1\u002d\u0039\u005d\u005b\u0030\u002d9\u005d\u0029\u007c\u0028\u005b\u0031\u002d\u0039\u005d\u005b\u0030\u002d\u0039\u005d\u005b0\u002d\u0039\u005d\u0029\u007c\u0031\u0030\u00300\u0029\u0025"

func (_addg *ST_DLblPos) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_gddfg, _egdag := d.Token()
	if _egdag != nil {
		return _egdag
	}
	if _decga, _ceggd := _gddfg.(_e.EndElement); _ceggd && _decga.Name == start.Name {
		*_addg = 1
		return nil
	}
	if _efcfg, _bffe := _gddfg.(_e.CharData); !_bffe {
		return _b.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _gddfg)
	} else {
		switch string(_efcfg) {
		case "":
			*_addg = 0
		case "\u0062e\u0073\u0074\u0046\u0069\u0074":
			*_addg = 1
		case "\u0062":
			*_addg = 2
		case "\u0063\u0074\u0072":
			*_addg = 3
		case "\u0069\u006e\u0042\u0061\u0073\u0065":
			*_addg = 4
		case "\u0069\u006e\u0045n\u0064":
			*_addg = 5
		case "\u006c":
			*_addg = 6
		case "\u006f\u0075\u0074\u0045\u006e\u0064":
			*_addg = 7
		case "\u0072":
			*_addg = 8
		case "\u0074":
			*_addg = 9
		}
	}
	_gddfg, _egdag = d.Token()
	if _egdag != nil {
		return _egdag
	}
	if _cebb, _ebedb := _gddfg.(_e.EndElement); _ebedb && _cebb.Name == start.Name {
		return nil
	}
	return _b.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _gddfg)
}

// ValidateWithPath validates the CT_BandFmts and its children, prefixing error messages with path
func (_ffea *CT_BandFmts) ValidateWithPath(path string) error {
	for _ddf, _ddfc := range _ffea.BandFmt {
		if _bgdb := _ddfc.ValidateWithPath(_b.Sprintf("\u0025\u0073\u002f\u0042\u0061\u006e\u0064\u0046\u006dt\u005b\u0025\u0064\u005d", path, _ddf)); _bgdb != nil {
			return _bgdb
		}
	}
	return nil
}
func (_efgb *ST_HoleSize) ValidateWithPath(path string) error {
	_bcfbe := []string{}
	if _efgb.ST_HoleSizePercent != nil {
		_bcfbe = append(_bcfbe, "\u0053T\u005fH\u006f\u006c\u0065\u0053\u0069z\u0065\u0050e\u0072\u0063\u0065\u006e\u0074")
	}
	if _efgb.ST_HoleSizeUByte != nil {
		_bcfbe = append(_bcfbe, "\u0053\u0054_\u0048\u006f\u006ce\u0053\u0069\u007a\u0065\u0055\u0042\u0079\u0074\u0065")
	}
	if len(_bcfbe) > 1 {
		return _b.Errorf("%\u0073\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u006d\u0065\u006d\u0062\u0065r\u0073\u0020\u0073e\u0074:\u0020\u0025\u0076", path, _bcfbe)
	}
	return nil
}
func (_bgddff *ST_Grouping) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_bgddff = 0
	case "\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u0053\u0074a\u0063\u006b\u0065\u0064":
		*_bgddff = 1
	case "\u0073\u0074\u0061\u006e\u0064\u0061\u0072\u0064":
		*_bgddff = 2
	case "\u0073t\u0061\u0063\u006b\u0065\u0064":
		*_bgddff = 3
	}
	return nil
}
func (_egegag ST_TickMark) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_faafg := _e.Attr{}
	_faafg.Name = name
	switch _egegag {
	case ST_TickMarkUnset:
		_faafg.Value = ""
	case ST_TickMarkCross:
		_faafg.Value = "\u0063\u0072\u006fs\u0073"
	case ST_TickMarkIn:
		_faafg.Value = "\u0069\u006e"
	case ST_TickMarkNone:
		_faafg.Value = "\u006e\u006f\u006e\u0065"
	case ST_TickMarkOut:
		_faafg.Value = "\u006f\u0075\u0074"
	}
	return _faafg, nil
}

var ST_SecondPieSizePercentPatternRe = _g.MustCompile(ST_SecondPieSizePercentPattern)

func (_aeggc *CT_TrendlineType) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _eaffe := range start.Attr {
		if _eaffe.Name.Local == "\u0076\u0061\u006c" {
			_aeggc.ValAttr.UnmarshalXMLAttr(_eaffe)
			continue
		}
	}
	for {
		_gbfb, _eafcc := d.Token()
		if _eafcc != nil {
			return _b.Errorf("\u0070\u0061\u0072\u0073i\u006e\u0067\u0020\u0043\u0054\u005f\u0054\u0072\u0065\u006ed\u006ci\u006e\u0065\u0054\u0079\u0070\u0065\u003a \u0025\u0073", _eafcc)
		}
		if _bfeca, _fgbc := _gbfb.(_e.EndElement); _fgbc && _bfeca.Name == start.Name {
			break
		}
	}
	return nil
}
func (_fdfcfc ST_CrossBetween) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_fdfcfc.String(), start)
}

const (
	ST_CrossesUnset    ST_Crosses = 0
	ST_CrossesAutoZero ST_Crosses = 1
	ST_CrossesMax      ST_Crosses = 2
	ST_CrossesMin      ST_Crosses = 3
)

func (_deacf ST_LayoutTarget) Validate() error { return _deacf.ValidateWithPath("") }

type ST_Shape byte

func (_aedg *CT_UpDownBar) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_dedd:
	for {
		_gabfe, _eegbd := d.Token()
		if _eegbd != nil {
			return _eegbd
		}
		switch _fgbe := _gabfe.(type) {
		case _e.StartElement:
			switch _fgbe.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_aedg.SpPr = _f.NewCT_ShapeProperties()
				if _fbfabc := d.DecodeElement(_aedg.SpPr, &_fgbe); _fbfabc != nil {
					return _fbfabc
				}
			default:
				_a.Log.Debug("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075n\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054_U\u0070\u0044o\u0077\u006e\u0042\u0061\u0072\u0020\u0025\u0076", _fgbe.Name)
				if _febbe := d.Skip(); _febbe != nil {
					return _febbe
				}
			}
		case _e.EndElement:
			break _dedd
		case _e.CharData:
		}
	}
	return nil
}

// Validate validates the CT_Chart and its children
func (_efef *CT_Chart) Validate() error {
	return _efef.ValidateWithPath("\u0043\u0054\u005f\u0043\u0068\u0061\u0072\u0074")
}

// Validate validates the CT_AxisUnit and its children
func (_cbd *CT_AxisUnit) Validate() error {
	return _cbd.ValidateWithPath("C\u0054\u005f\u0041\u0078\u0069\u0073\u0055\u006e\u0069\u0074")
}
func ParseUnionST_SecondPieSize(s string) (ST_SecondPieSize, error) {
	if ST_SecondPieSizePercentPatternRe.MatchString(s) {
		return ST_SecondPieSize{ST_SecondPieSizePercent: &s}, nil
	}
	_dbbe, _gffc := _c.ParseUint(s, 10, 16)
	if _gffc != nil {
		return ST_SecondPieSize{}, _gffc
	}
	_defae := uint16(_dbbe)
	return ST_SecondPieSize{ST_SecondPieSizeUShort: &_defae}, nil
}

// ValidateWithPath validates the CT_View3D and its children, prefixing error messages with path
func (_eddf *CT_View3D) ValidateWithPath(path string) error {
	if _eddf.RotX != nil {
		if _bdage := _eddf.RotX.ValidateWithPath(path + "\u002f\u0052\u006ft\u0058"); _bdage != nil {
			return _bdage
		}
	}
	if _eddf.HPercent != nil {
		if _cbdg := _eddf.HPercent.ValidateWithPath(path + "\u002fH\u0050\u0065\u0072\u0063\u0065\u006et"); _cbdg != nil {
			return _cbdg
		}
	}
	if _eddf.RotY != nil {
		if _eageb := _eddf.RotY.ValidateWithPath(path + "\u002f\u0052\u006ft\u0059"); _eageb != nil {
			return _eageb
		}
	}
	if _eddf.DepthPercent != nil {
		if _dadbb := _eddf.DepthPercent.ValidateWithPath(path + "\u002f\u0044\u0065\u0070\u0074\u0068\u0050\u0065\u0072\u0063\u0065\u006e\u0074"); _dadbb != nil {
			return _dadbb
		}
	}
	if _eddf.RAngAx != nil {
		if _gdgab := _eddf.RAngAx.ValidateWithPath(path + "\u002fR\u0041\u006e\u0067\u0041\u0078"); _gdgab != nil {
			return _gdgab
		}
	}
	if _eddf.Perspective != nil {
		if _fcce := _eddf.Perspective.ValidateWithPath(path + "\u002f\u0050\u0065r\u0073\u0070\u0065\u0063\u0074\u0069\u0076\u0065"); _fcce != nil {
			return _fcce
		}
	}
	if _eddf.ExtLst != nil {
		if _adbd := _eddf.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _adbd != nil {
			return _adbd
		}
	}
	return nil
}
func NewCT_Style() *CT_Style           { _efaef := &CT_Style{}; _efaef.ValAttr = 1; return _efaef }
func NewCT_ErrBarType() *CT_ErrBarType { _ffdb := &CT_ErrBarType{}; return _ffdb }
func (_babd *ST_ErrDir) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_babd = 0
	case "\u0078":
		*_babd = 1
	case "\u0079":
		*_babd = 2
	}
	return nil
}

// Validate validates the CT_View3D and its children
func (_ecca *CT_View3D) Validate() error {
	return _ecca.ValidateWithPath("\u0043T\u005f\u0056\u0069\u0065\u0077\u0033D")
}
func (_dcgea *CT_SplitType) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _dcgea.ValAttr != ST_SplitTypeUnset {
		_gffgg, _fbgc := _dcgea.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
		if _fbgc != nil {
			return _fbgc
		}
		start.Attr = append(start.Attr, _gffgg)
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}
func (_fbcag *CT_Shape) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _dfce := range start.Attr {
		if _dfce.Name.Local == "\u0076\u0061\u006c" {
			_fbcag.ValAttr.UnmarshalXMLAttr(_dfce)
			continue
		}
	}
	for {
		_bccce, _afba := d.Token()
		if _afba != nil {
			return _b.Errorf("p\u0061r\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fS\u0068\u0061\u0070\u0065: \u0025\u0073", _afba)
		}
		if _acgeg, _ggbfcd := _bccce.(_e.EndElement); _ggbfcd && _acgeg.Name == start.Name {
			break
		}
	}
	return nil
}
func (_bddad *ST_MarkerStyle) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_bddad = 0
	case "\u0063\u0069\u0072\u0063\u006c\u0065":
		*_bddad = 1
	case "\u0064\u0061\u0073\u0068":
		*_bddad = 2
	case "\u0064i\u0061\u006d\u006f\u006e\u0064":
		*_bddad = 3
	case "\u0064\u006f\u0074":
		*_bddad = 4
	case "\u006e\u006f\u006e\u0065":
		*_bddad = 5
	case "\u0070i\u0063\u0074\u0075\u0072\u0065":
		*_bddad = 6
	case "\u0070\u006c\u0075\u0073":
		*_bddad = 7
	case "\u0073\u0071\u0075\u0061\u0072\u0065":
		*_bddad = 8
	case "\u0073\u0074\u0061\u0072":
		*_bddad = 9
	case "\u0074\u0072\u0069\u0061\u006e\u0067\u006c\u0065":
		*_bddad = 10
	case "\u0078":
		*_bddad = 11
	case "\u0061\u0075\u0074\u006f":
		*_bddad = 12
	}
	return nil
}
func NewCT_SerAx() *CT_SerAx {
	_ggea := &CT_SerAx{}
	_ggea.AxId = NewCT_UnsignedInt()
	_ggea.Scaling = NewCT_Scaling()
	_ggea.AxPos = NewCT_AxPos()
	_ggea.CrossAx = NewCT_UnsignedInt()
	return _ggea
}
func (_gfeee ST_Shape) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_cgefb := _e.Attr{}
	_cgefb.Name = name
	switch _gfeee {
	case ST_ShapeUnset:
		_cgefb.Value = ""
	case ST_ShapeCone:
		_cgefb.Value = "\u0063\u006f\u006e\u0065"
	case ST_ShapeConeToMax:
		_cgefb.Value = "\u0063o\u006e\u0065\u0054\u006f\u004d\u0061x"
	case ST_ShapeBox:
		_cgefb.Value = "\u0062\u006f\u0078"
	case ST_ShapeCylinder:
		_cgefb.Value = "\u0063\u0079\u006c\u0069\u006e\u0064\u0065\u0072"
	case ST_ShapePyramid:
		_cgefb.Value = "\u0070y\u0072\u0061\u006d\u0069\u0064"
	case ST_ShapePyramidToMax:
		_cgefb.Value = "\u0070\u0079\u0072a\u006d\u0069\u0064\u0054\u006f\u004d\u0061\u0078"
	}
	return _cgefb, nil
}

// Validate validates the CT_ErrBars and its children
func (_cffaa *CT_ErrBars) Validate() error {
	return _cffaa.ValidateWithPath("\u0043\u0054\u005f\u0045\u0072\u0072\u0042\u0061\u0072\u0073")
}
func (_ccbag ST_BarGrouping) Validate() error { return _ccbag.ValidateWithPath("") }
func NewCT_Overlap() *CT_Overlap              { _fageee := &CT_Overlap{}; return _fageee }
func (_fbeba *CT_SerTx) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_fbeba.Choice = NewCT_SerTxChoice()
_dbdaf:
	for {
		_bgbgd, _dcge := d.Token()
		if _dcge != nil {
			return _dcge
		}
		switch _feddg := _bgbgd.(type) {
		case _e.StartElement:
			switch _feddg.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u0052\u0065\u0066"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u0052\u0065\u0066"}:
				_fbeba.Choice = NewCT_SerTxChoice()
				if _feedf := d.DecodeElement(&_fbeba.Choice.StrRef, &_feddg); _feedf != nil {
					return _feedf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076"}:
				_fbeba.Choice = NewCT_SerTxChoice()
				if _gecba := d.DecodeElement(&_fbeba.Choice.V, &_feddg); _gecba != nil {
					return _gecba
				}
			default:
				_a.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006eg\u0020\u0075\u006es\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0053\u0065\u0072\u0054\u0078\u0020\u0025\u0076", _feddg.Name)
				if _dcfad := d.Skip(); _dcfad != nil {
					return _dcfad
				}
			}
		case _e.EndElement:
			break _dbdaf
		case _e.CharData:
		}
	}
	return nil
}
func NewEG_BarChartShared() *EG_BarChartShared {
	_ecbgf := &EG_BarChartShared{}
	_ecbgf.BarDir = NewCT_BarDir()
	return _ecbgf
}
func (_aaed *CT_ScatterSer) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_agaaa := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0069d\u0078"}}
	e.EncodeElement(_aaed.Idx, _agaaa)
	_dbefa := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006f\u0072\u0064\u0065\u0072"}}
	e.EncodeElement(_aaed.Order, _dbefa)
	if _aaed.Tx != nil {
		_gefbd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078"}}
		e.EncodeElement(_aaed.Tx, _gefbd)
	}
	if _aaed.SpPr != nil {
		_gafcg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_aaed.SpPr, _gafcg)
	}
	if _aaed.Marker != nil {
		_gdaag := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006d\u0061\u0072\u006b\u0065\u0072"}}
		e.EncodeElement(_aaed.Marker, _gdaag)
	}
	if _aaed.DPt != nil {
		_fgdca := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0064P\u0074"}}
		for _, _egcf := range _aaed.DPt {
			e.EncodeElement(_egcf, _fgdca)
		}
	}
	if _aaed.DLbls != nil {
		_fcgb := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_aaed.DLbls, _fcgb)
	}
	if _aaed.Trendline != nil {
		_gbdbg := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0074\u0072\u0065\u006e\u0064\u006c\u0069\u006e\u0065"}}
		for _, _cedd := range _aaed.Trendline {
			e.EncodeElement(_cedd, _gbdbg)
		}
	}
	if _aaed.ErrBars != nil {
		_cgcbdf := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0065\u0072\u0072\u0042\u0061\u0072s"}}
		for _, _beeeb := range _aaed.ErrBars {
			e.EncodeElement(_beeeb, _cgcbdf)
		}
	}
	if _aaed.XVal != nil {
		_fgfcd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0078\u0056\u0061\u006c"}}
		e.EncodeElement(_aaed.XVal, _fgfcd)
	}
	if _aaed.YVal != nil {
		_dddbg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0079\u0056\u0061\u006c"}}
		e.EncodeElement(_aaed.YVal, _dddbg)
	}
	if _aaed.Smooth != nil {
		_gcgdf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u006d\u006f\u006f\u0074\u0068"}}
		e.EncodeElement(_aaed.Smooth, _gcgdf)
	}
	if _aaed.ExtLst != nil {
		_fdfc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_aaed.ExtLst, _fdfc)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_Orientation and its children, prefixing error messages with path
func (_eecdd *CT_Orientation) ValidateWithPath(path string) error {
	if _dfec := _eecdd.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _dfec != nil {
		return _dfec
	}
	return nil
}

// Validate validates the CT_AreaSer and its children
func (_gdg *CT_AreaSer) Validate() error {
	return _gdg.ValidateWithPath("\u0043\u0054\u005f\u0041\u0072\u0065\u0061\u0053\u0065\u0072")
}
func (_bfecf *CT_Boolean) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _fdda := range start.Attr {
		if _fdda.Name.Local == "\u0076\u0061\u006c" {
			_cgac, _gca := _c.ParseBool(_fdda.Value)
			if _gca != nil {
				return _gca
			}
			_bfecf.ValAttr = &_cgac
			continue
		}
	}
	for {
		_baf, _bea := d.Token()
		if _bea != nil {
			return _b.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0043\u0054\u005f\u0042\u006f\u006f\u006c\u0065\u0061\u006e\u003a\u0020%\u0073", _bea)
		}
		if _ceea, _eccfd := _baf.(_e.EndElement); _eccfd && _ceea.Name == start.Name {
			break
		}
	}
	return nil
}
func (_aecfb ST_LblAlgn) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_egcfe := _e.Attr{}
	_egcfe.Name = name
	switch _aecfb {
	case ST_LblAlgnUnset:
		_egcfe.Value = ""
	case ST_LblAlgnCtr:
		_egcfe.Value = "\u0063\u0074\u0072"
	case ST_LblAlgnL:
		_egcfe.Value = "\u006c"
	case ST_LblAlgnR:
		_egcfe.Value = "\u0072"
	}
	return _egcfe, nil
}
func (_bgeba ST_OfPieType) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_bgeba.String(), start)
}
func (_fggd *CT_TxChoice) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _fggd.StrRef != nil {
		_cdcdf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0074\u0072\u0052\u0065\u0066"}}
		e.EncodeElement(_fggd.StrRef, _cdcdf)
	}
	if _fggd.Rich != nil {
		_aebe := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0072\u0069\u0063\u0068"}}
		e.EncodeElement(_fggd.Rich, _aebe)
	}
	return nil
}
func (_ecdd ST_CrossBetween) Validate() error { return _ecdd.ValidateWithPath("") }

type CT_Overlap struct{ ValAttr *ST_Overlap }

func NewCT_BubbleChart() *CT_BubbleChart { _ddab := &CT_BubbleChart{}; return _ddab }

type CT_MarkerStyle struct{ ValAttr ST_MarkerStyle }

func NewEG_LineChartShared() *EG_LineChartShared {
	_dfgdc := &EG_LineChartShared{}
	_dfgdc.Grouping = NewCT_Grouping()
	return _dfgdc
}

// Validate validates the CT_ExternalData and its children
func (_gfeea *CT_ExternalData) Validate() error {
	return _gfeea.ValidateWithPath("\u0043T\u005fE\u0078\u0074\u0065\u0072\u006e\u0061\u006c\u0044\u0061\u0074\u0061")
}
func (_bfdd *CT_PlotAreaChoice) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_cdfa:
	for {
		_ddfea, _bcbab := d.Token()
		if _bcbab != nil {
			return _bcbab
		}
		switch _bfgbc := _ddfea.(type) {
		case _e.StartElement:
			switch _bfgbc.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061r\u0065\u0061\u0043\u0068\u0061\u0072t"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061r\u0065\u0061\u0043\u0068\u0061\u0072t"}:
				_bfdd.AreaChart = NewCT_AreaChart()
				if _ebeec := d.DecodeElement(_bfdd.AreaChart, &_bfgbc); _ebeec != nil {
					return _ebeec
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "a\u0072\u0065\u0061\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "a\u0072\u0065\u0061\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}:
				_bfdd.Area3DChart = NewCT_Area3DChart()
				if _dffaa := d.DecodeElement(_bfdd.Area3DChart, &_bfgbc); _dffaa != nil {
					return _dffaa
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006ci\u006e\u0065\u0043\u0068\u0061\u0072t"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006ci\u006e\u0065\u0043\u0068\u0061\u0072t"}:
				_bfdd.LineChart = NewCT_LineChart()
				if _bcdgc := d.DecodeElement(_bfdd.LineChart, &_bfgbc); _bcdgc != nil {
					return _bcdgc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "l\u0069\u006e\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "l\u0069\u006e\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}:
				_bfdd.Line3DChart = NewCT_Line3DChart()
				if _caaf := d.DecodeElement(_bfdd.Line3DChart, &_bfgbc); _caaf != nil {
					return _caaf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u006f\u0063\u006b\u0043\u0068\u0061\u0072\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u006f\u0063\u006b\u0043\u0068\u0061\u0072\u0074"}:
				_bfdd.StockChart = NewCT_StockChart()
				if _bebad := d.DecodeElement(_bfdd.StockChart, &_bfgbc); _bebad != nil {
					return _bebad
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u0061\u0064\u0061\u0072\u0043\u0068\u0061\u0072\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u0061\u0064\u0061\u0072\u0043\u0068\u0061\u0072\u0074"}:
				_bfdd.RadarChart = NewCT_RadarChart()
				if _fbagc := d.DecodeElement(_bfdd.RadarChart, &_bfgbc); _fbagc != nil {
					return _fbagc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0063\u0061t\u0074\u0065\u0072\u0043\u0068\u0061\u0072\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0063\u0061t\u0074\u0065\u0072\u0043\u0068\u0061\u0072\u0074"}:
				_bfdd.ScatterChart = NewCT_ScatterChart()
				if _fceca := d.DecodeElement(_bfdd.ScatterChart, &_bfgbc); _fceca != nil {
					return _fceca
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0065\u0043\u0068\u0061\u0072\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0065\u0043\u0068\u0061\u0072\u0074"}:
				_bfdd.PieChart = NewCT_PieChart()
				if _decg := d.DecodeElement(_bfdd.PieChart, &_bfgbc); _decg != nil {
					return _decg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}:
				_bfdd.Pie3DChart = NewCT_Pie3DChart()
				if _bedeg := d.DecodeElement(_bfdd.Pie3DChart, &_bfgbc); _bedeg != nil {
					return _bedeg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u006f\u0075\u0067\u0068\u006e\u0075\u0074\u0043\u0068\u0061\u0072\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u006f\u0075\u0067\u0068\u006e\u0075\u0074\u0043\u0068\u0061\u0072\u0074"}:
				_bfdd.DoughnutChart = NewCT_DoughnutChart()
				if _ffeg := d.DecodeElement(_bfdd.DoughnutChart, &_bfgbc); _ffeg != nil {
					return _ffeg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0072\u0043\u0068\u0061\u0072\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0072\u0043\u0068\u0061\u0072\u0074"}:
				_bfdd.BarChart = NewCT_BarChart()
				if _edfc := d.DecodeElement(_bfdd.BarChart, &_bfgbc); _edfc != nil {
					return _edfc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0072\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0072\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}:
				_bfdd.Bar3DChart = NewCT_Bar3DChart()
				if _eefcf := d.DecodeElement(_bfdd.Bar3DChart, &_bfgbc); _eefcf != nil {
					return _eefcf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0066\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0066\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074"}:
				_bfdd.OfPieChart = NewCT_OfPieChart()
				if _baee := d.DecodeElement(_bfdd.OfPieChart, &_bfgbc); _baee != nil {
					return _baee
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0075\u0072f\u0061\u0063\u0065\u0043\u0068\u0061\u0072\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0075\u0072f\u0061\u0063\u0065\u0043\u0068\u0061\u0072\u0074"}:
				_bfdd.SurfaceChart = NewCT_SurfaceChart()
				if _caeaf := d.DecodeElement(_bfdd.SurfaceChart, &_bfgbc); _caeaf != nil {
					return _caeaf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0075\u0072\u0066\u0061\u0063\u0065\u0033\u0044C\u0068\u0061\u0072\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0075\u0072\u0066\u0061\u0063\u0065\u0033\u0044C\u0068\u0061\u0072\u0074"}:
				_bfdd.Surface3DChart = NewCT_Surface3DChart()
				if _edabaf := d.DecodeElement(_bfdd.Surface3DChart, &_bfgbc); _edabaf != nil {
					return _edabaf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "b\u0075\u0062\u0062\u006c\u0065\u0043\u0068\u0061\u0072\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "b\u0075\u0062\u0062\u006c\u0065\u0043\u0068\u0061\u0072\u0074"}:
				_bfdd.BubbleChart = NewCT_BubbleChart()
				if _fccb := d.DecodeElement(_bfdd.BubbleChart, &_bfgbc); _fccb != nil {
					return _fccb
				}
			default:
				_a.Log.Debug("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0050\u006c\u006f\u0074\u0041\u0072\u0065\u0061\u0043\u0068\u006f\u0069\u0063\u0065\u0020\u0025\u0076", _bfgbc.Name)
				if _faffc := d.Skip(); _faffc != nil {
					return _faffc
				}
			}
		case _e.EndElement:
			break _cdfa
		case _e.CharData:
		}
	}
	return nil
}

var ST_BubbleScalePercentPatternRe = _g.MustCompile(ST_BubbleScalePercentPattern)

// Validate validates the CT_Scaling and its children
func (_effac *CT_Scaling) Validate() error {
	return _effac.ValidateWithPath("\u0043\u0054\u005f\u0053\u0063\u0061\u006c\u0069\u006e\u0067")
}

// ValidateWithPath validates the CT_SerTx and its children, prefixing error messages with path
func (_gbbeaa *CT_SerTx) ValidateWithPath(path string) error {
	if _dggff := _gbbeaa.Choice.ValidateWithPath(path + "\u002fC\u0068\u006f\u0069\u0063\u0065"); _dggff != nil {
		return _dggff
	}
	return nil
}
func (_cbbgf ST_TickMark) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_cbbgf.String(), start)
}
func (_ggbgd ST_SplitType) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_feaee := _e.Attr{}
	_feaee.Name = name
	switch _ggbgd {
	case ST_SplitTypeUnset:
		_feaee.Value = ""
	case ST_SplitTypeAuto:
		_feaee.Value = "\u0061\u0075\u0074\u006f"
	case ST_SplitTypeCust:
		_feaee.Value = "\u0063\u0075\u0073\u0074"
	case ST_SplitTypePercent:
		_feaee.Value = "\u0070e\u0072\u0063\u0065\u006e\u0074"
	case ST_SplitTypePos:
		_feaee.Value = "\u0070\u006f\u0073"
	case ST_SplitTypeVal:
		_feaee.Value = "\u0076\u0061\u006c"
	}
	return _feaee, nil
}

type EG_AreaChartShared struct {
	Grouping   *CT_Grouping
	VaryColors *CT_Boolean
	Ser        []*CT_AreaSer
	DLbls      *CT_DLbls
	DropLines  *CT_ChartLines
}
type CT_DateAx struct {
	AxId           *CT_UnsignedInt
	Scaling        *CT_Scaling
	Delete         *CT_Boolean
	AxPos          *CT_AxPos
	MajorGridlines *CT_ChartLines
	MinorGridlines *CT_ChartLines
	Title          *CT_Title
	NumFmt         *CT_NumFmt
	MajorTickMark  *CT_TickMark
	MinorTickMark  *CT_TickMark
	TickLblPos     *CT_TickLblPos
	SpPr           *_f.CT_ShapeProperties
	TxPr           *_f.CT_TextBody
	CrossAx        *CT_UnsignedInt
	Choice         *EG_AxSharedChoice
	Auto           *CT_Boolean
	LblOffset      *CT_LblOffset
	BaseTimeUnit   *CT_TimeUnit
	MajorUnit      *CT_AxisUnit
	MajorTimeUnit  *CT_TimeUnit
	MinorUnit      *CT_AxisUnit
	MinorTimeUnit  *CT_TimeUnit
	ExtLst         *CT_ExtensionList
}

func (_bgbgeg ST_AxPos) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_gbafd := _e.Attr{}
	_gbafd.Name = name
	switch _bgbgeg {
	case ST_AxPosUnset:
		_gbafd.Value = ""
	case ST_AxPosB:
		_gbafd.Value = "\u0062"
	case ST_AxPosL:
		_gbafd.Value = "\u006c"
	case ST_AxPosR:
		_gbafd.Value = "\u0072"
	case ST_AxPosT:
		_gbafd.Value = "\u0074"
	}
	return _gbafd, nil
}

// ValidateWithPath validates the CT_HoleSize and its children, prefixing error messages with path
func (_bcedb *CT_HoleSize) ValidateWithPath(path string) error {
	if _bcedb.ValAttr != nil {
		if _gbgb := _bcedb.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _gbgb != nil {
			return _gbgb
		}
	}
	return nil
}

type CT_ValAx struct {
	AxId           *CT_UnsignedInt
	Scaling        *CT_Scaling
	Delete         *CT_Boolean
	AxPos          *CT_AxPos
	MajorGridlines *CT_ChartLines
	MinorGridlines *CT_ChartLines
	Title          *CT_Title
	NumFmt         *CT_NumFmt
	MajorTickMark  *CT_TickMark
	MinorTickMark  *CT_TickMark
	TickLblPos     *CT_TickLblPos
	SpPr           *_f.CT_ShapeProperties
	TxPr           *_f.CT_TextBody
	CrossAx        *CT_UnsignedInt
	Choice         *EG_AxSharedChoice
	CrossBetween   *CT_CrossBetween
	MajorUnit      *CT_AxisUnit
	MinorUnit      *CT_AxisUnit
	DispUnits      *CT_DispUnits
	ExtLst         *CT_ExtensionList
}

func (_fafd *CT_HPercent) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _fafd.ValAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0076\u0061\u006c"}, Value: _b.Sprintf("\u0025\u0076", *_fafd.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}
func (_cgff *CT_CrossBetween) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_cgff.ValAttr = ST_CrossBetween(1)
	for _, _cab := range start.Attr {
		if _cab.Name.Local == "\u0076\u0061\u006c" {
			_cgff.ValAttr.UnmarshalXMLAttr(_cab)
			continue
		}
	}
	for {
		_efac, _bacc := d.Token()
		if _bacc != nil {
			return _b.Errorf("p\u0061\u0072\u0073\u0069\u006e\u0067 \u0043\u0054\u005f\u0043\u0072\u006f\u0073\u0073\u0042e\u0074\u0077\u0065e\u006e:\u0020\u0025\u0073", _bacc)
		}
		if _dddc, _gfa := _efac.(_e.EndElement); _gfa && _dddc.Name == start.Name {
			break
		}
	}
	return nil
}

var ST_HPercentWithSymbolPatternRe = _g.MustCompile(ST_HPercentWithSymbolPattern)

type CT_Legend struct {
	LegendPos   *CT_LegendPos
	LegendEntry []*CT_LegendEntry
	Layout      *CT_Layout
	Overlay     *CT_Boolean
	SpPr        *_f.CT_ShapeProperties
	TxPr        *_f.CT_TextBody
	ExtLst      *CT_ExtensionList
}

func (_edge *CT_ChartLines) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _edge.SpPr != nil {
		_fbfg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_edge.SpPr, _fbfg)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}
func NewCT_Period() *CT_Period { _acec := &CT_Period{}; return _acec }
func (_gcfbg ST_ScatterStyle) String() string {
	switch _gcfbg {
	case 0:
		return ""
	case 1:
		return "\u006e\u006f\u006e\u0065"
	case 2:
		return "\u006c\u0069\u006e\u0065"
	case 3:
		return "\u006c\u0069\u006e\u0065\u004d\u0061\u0072\u006b\u0065\u0072"
	case 4:
		return "\u006d\u0061\u0072\u006b\u0065\u0072"
	case 5:
		return "\u0073\u006d\u006f\u006f\u0074\u0068"
	case 6:
		return "\u0073\u006d\u006fo\u0074\u0068\u004d\u0061\u0072\u006b\u0065\u0072"
	}
	return ""
}
func (_baeb *CT_DLbl) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_eafc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0069d\u0078"}}
	e.EncodeElement(_baeb.Idx, _eafc)
	if _baeb.Choice != nil {
		_baeb.Choice.MarshalXML(e, _e.StartElement{})
	}
	if _baeb.ExtLst != nil {
		_ceda := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_baeb.ExtLst, _ceda)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}
func NewCT_RadarChart() *CT_RadarChart {
	_eabb := &CT_RadarChart{}
	_eabb.RadarStyle = NewCT_RadarStyle()
	return _eabb
}
func NewCT_Shape() *CT_Shape { _affba := &CT_Shape{}; return _affba }

// Validate validates the CT_PageMargins and its children
func (_agdaf *CT_PageMargins) Validate() error {
	return _agdaf.ValidateWithPath("\u0043\u0054\u005f\u0050\u0061\u0067\u0065\u004d\u0061r\u0067\u0069\u006e\u0073")
}

type CT_SurfaceChart struct {
	Wireframe *CT_Boolean
	Ser       []*CT_SurfaceSer
	BandFmts  *CT_BandFmts
	AxId      []*CT_UnsignedInt
	ExtLst    *CT_ExtensionList
}

func NewCT_SecondPieSize() *CT_SecondPieSize { _caebg := &CT_SecondPieSize{}; return _caebg }

type ST_TimeUnit byte

// ValidateWithPath validates the CT_NumDataSource and its children, prefixing error messages with path
func (_bbfc *CT_NumDataSource) ValidateWithPath(path string) error {
	if _gaeg := _bbfc.Choice.ValidateWithPath(path + "\u002fC\u0068\u006f\u0069\u0063\u0065"); _gaeg != nil {
		return _gaeg
	}
	return nil
}
func (_afedc *CT_LayoutMode) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _ffbf := range start.Attr {
		if _ffbf.Name.Local == "\u0076\u0061\u006c" {
			_afedc.ValAttr.UnmarshalXMLAttr(_ffbf)
			continue
		}
	}
	for {
		_bdagg, _bebde := d.Token()
		if _bebde != nil {
			return _b.Errorf("\u0070a\u0072\u0073\u0069\u006eg\u0020\u0043\u0054\u005f\u004ca\u0079o\u0075t\u004d\u006f\u0064\u0065\u003a\u0020\u0025s", _bebde)
		}
		if _cefgb, _fdbg := _bdagg.(_e.EndElement); _fdbg && _cefgb.Name == start.Name {
			break
		}
	}
	return nil
}

type CT_DoughnutChart struct {
	VaryColors    *CT_Boolean
	Ser           []*CT_PieSer
	DLbls         *CT_DLbls
	FirstSliceAng *CT_FirstSliceAng
	HoleSize      *CT_HoleSize
	ExtLst        *CT_ExtensionList
}

// Validate validates the CT_TrendlineLbl and its children
func (_daed *CT_TrendlineLbl) Validate() error {
	return _daed.ValidateWithPath("\u0043T\u005fT\u0072\u0065\u006e\u0064\u006c\u0069\u006e\u0065\u004c\u0062\u006c")
}

// ValidateWithPath validates the CT_SplitType and its children, prefixing error messages with path
func (_aebb *CT_SplitType) ValidateWithPath(path string) error {
	if _cedgd := _aebb.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _cedgd != nil {
		return _cedgd
	}
	return nil
}

type CT_CustSplit struct{ SecondPiePt []*CT_UnsignedInt }
type ST_BuiltInUnit byte
type EG_SerShared struct {
	Idx   *CT_UnsignedInt
	Order *CT_UnsignedInt
	Tx    *CT_SerTx
	SpPr  *_f.CT_ShapeProperties
}

func (_aaec *CT_HeaderFooter) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _cffd := range start.Attr {
		if _cffd.Name.Local == "\u0061\u006ci\u0067\u006e\u0057i\u0074\u0068\u004d\u0061\u0072\u0067\u0069\u006e\u0073" {
			_fdcf, _bdgf := _c.ParseBool(_cffd.Value)
			if _bdgf != nil {
				return _bdgf
			}
			_aaec.AlignWithMarginsAttr = &_fdcf
			continue
		}
		if _cffd.Name.Local == "\u0064\u0069f\u0066\u0065\u0072e\u006e\u0074\u004f\u0064\u0064\u0045\u0076\u0065\u006e" {
			_gcbe, _debc := _c.ParseBool(_cffd.Value)
			if _debc != nil {
				return _debc
			}
			_aaec.DifferentOddEvenAttr = &_gcbe
			continue
		}
		if _cffd.Name.Local == "\u0064\u0069\u0066\u0066\u0065\u0072\u0065\u006e\u0074F\u0069\u0072\u0073\u0074" {
			_gabg, _cgeb := _c.ParseBool(_cffd.Value)
			if _cgeb != nil {
				return _cgeb
			}
			_aaec.DifferentFirstAttr = &_gabg
			continue
		}
	}
_abgc:
	for {
		_ggde, _cdce := d.Token()
		if _cdce != nil {
			return _cdce
		}
		switch _dfcg := _ggde.(type) {
		case _e.StartElement:
			switch _dfcg.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006fd\u0064\u0048\u0065\u0061\u0064\u0065r"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006fd\u0064\u0048\u0065\u0061\u0064\u0065r"}:
				_aaec.OddHeader = new(string)
				if _bgda := d.DecodeElement(_aaec.OddHeader, &_dfcg); _bgda != nil {
					return _bgda
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006fd\u0064\u0046\u006f\u006f\u0074\u0065r"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006fd\u0064\u0046\u006f\u006f\u0074\u0065r"}:
				_aaec.OddFooter = new(string)
				if _caaad := d.DecodeElement(_aaec.OddFooter, &_dfcg); _caaad != nil {
					return _caaad
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0076\u0065\u006e\u0048\u0065\u0061\u0064\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0076\u0065\u006e\u0048\u0065\u0061\u0064\u0065\u0072"}:
				_aaec.EvenHeader = new(string)
				if _gbge := d.DecodeElement(_aaec.EvenHeader, &_dfcg); _gbge != nil {
					return _gbge
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0076\u0065\u006e\u0046\u006f\u006f\u0074\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0076\u0065\u006e\u0046\u006f\u006f\u0074\u0065\u0072"}:
				_aaec.EvenFooter = new(string)
				if _becc := d.DecodeElement(_aaec.EvenFooter, &_dfcg); _becc != nil {
					return _becc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "f\u0069\u0072\u0073\u0074\u0048\u0065\u0061\u0064\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "f\u0069\u0072\u0073\u0074\u0048\u0065\u0061\u0064\u0065\u0072"}:
				_aaec.FirstHeader = new(string)
				if _dafdc := d.DecodeElement(_aaec.FirstHeader, &_dfcg); _dafdc != nil {
					return _dafdc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "f\u0069\u0072\u0073\u0074\u0046\u006f\u006f\u0074\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "f\u0069\u0072\u0073\u0074\u0046\u006f\u006f\u0074\u0065\u0072"}:
				_aaec.FirstFooter = new(string)
				if _gdbga := d.DecodeElement(_aaec.FirstFooter, &_dfcg); _gdbga != nil {
					return _gdbga
				}
			default:
				_a.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074e\u0064\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0048\u0065\u0061d\u0065\u0072\u0046\u006f\u006f\u0074\u0065\u0072\u0020\u0025\u0076", _dfcg.Name)
				if _gggb := d.Skip(); _gggb != nil {
					return _gggb
				}
			}
		case _e.EndElement:
			break _abgc
		case _e.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the Group_DLbl and its children, prefixing error messages with path
func (_ebcdg *Group_DLbl) ValidateWithPath(path string) error {
	if _ebcdg.Layout != nil {
		if _acfefd := _ebcdg.Layout.ValidateWithPath(path + "\u002fL\u0061\u0079\u006f\u0075\u0074"); _acfefd != nil {
			return _acfefd
		}
	}
	if _ebcdg.Tx != nil {
		if _dgcbd := _ebcdg.Tx.ValidateWithPath(path + "\u002f\u0054\u0078"); _dgcbd != nil {
			return _dgcbd
		}
	}
	if _ebcdg.NumFmt != nil {
		if _cacge := _ebcdg.NumFmt.ValidateWithPath(path + "\u002fN\u0075\u006d\u0046\u006d\u0074"); _cacge != nil {
			return _cacge
		}
	}
	if _ebcdg.SpPr != nil {
		if _fcbec := _ebcdg.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _fcbec != nil {
			return _fcbec
		}
	}
	if _ebcdg.TxPr != nil {
		if _bgcd := _ebcdg.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _bgcd != nil {
			return _bgcd
		}
	}
	if _ebcdg.DLblPos != nil {
		if _geecd := _ebcdg.DLblPos.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0050\u006f\u0073"); _geecd != nil {
			return _geecd
		}
	}
	if _ebcdg.ShowLegendKey != nil {
		if _cabec := _ebcdg.ShowLegendKey.ValidateWithPath(path + "\u002f\u0053\u0068\u006f\u0077\u004c\u0065\u0067\u0065n\u0064\u004b\u0065\u0079"); _cabec != nil {
			return _cabec
		}
	}
	if _ebcdg.ShowVal != nil {
		if _fabfe := _ebcdg.ShowVal.ValidateWithPath(path + "\u002f\u0053\u0068\u006f\u0077\u0056\u0061\u006c"); _fabfe != nil {
			return _fabfe
		}
	}
	if _ebcdg.ShowCatName != nil {
		if _gaaf := _ebcdg.ShowCatName.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"); _gaaf != nil {
			return _gaaf
		}
	}
	if _ebcdg.ShowSerName != nil {
		if _efcbe := _ebcdg.ShowSerName.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"); _efcbe != nil {
			return _efcbe
		}
	}
	if _ebcdg.ShowPercent != nil {
		if _efagf := _ebcdg.ShowPercent.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"); _efagf != nil {
			return _efagf
		}
	}
	if _ebcdg.ShowBubbleSize != nil {
		if _dgbea := _ebcdg.ShowBubbleSize.ValidateWithPath(path + "\u002fS\u0068o\u0077\u0042\u0075\u0062\u0062\u006c\u0065\u0053\u0069\u007a\u0065"); _dgbea != nil {
			return _dgbea
		}
	}
	return nil
}
func (_cadde ST_BarDir) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_cadde.String(), start)
}
func NewCT_BandFmt() *CT_BandFmt { _dbd := &CT_BandFmt{}; _dbd.Idx = NewCT_UnsignedInt(); return _dbd }

type CT_ManualLayout struct {
	LayoutTarget *CT_LayoutTarget
	XMode        *CT_LayoutMode
	YMode        *CT_LayoutMode
	WMode        *CT_LayoutMode
	HMode        *CT_LayoutMode
	X            *CT_Double
	Y            *CT_Double
	W            *CT_Double
	H            *CT_Double
	ExtLst       *CT_ExtensionList
}

func (_bdgc *CT_Skip) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_bdgc.ValAttr = 1
	for _, _agge := range start.Attr {
		if _agge.Name.Local == "\u0076\u0061\u006c" {
			_adgcb, _adcd := _c.ParseUint(_agge.Value, 10, 32)
			if _adcd != nil {
				return _adcd
			}
			_bdgc.ValAttr = uint32(_adgcb)
			continue
		}
	}
	for {
		_ddfec, _gaaec := d.Token()
		if _gaaec != nil {
			return _b.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0043\u0054\u005f\u0053\u006b\u0069\u0070\u003a\u0020\u0025\u0073", _gaaec)
		}
		if _feeef, _cdgd := _ddfec.(_e.EndElement); _cdgd && _feeef.Name == start.Name {
			break
		}
	}
	return nil
}
func (_fecc *CT_TickLblPos) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _fecc.ValAttr != ST_TickLblPosUnset {
		_dceae, _gbbg := _fecc.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
		if _gbbg != nil {
			return _gbbg
		}
		start.Attr = append(start.Attr, _dceae)
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}
func (_debd *CT_HoleSize) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _cged := range start.Attr {
		if _cged.Name.Local == "\u0076\u0061\u006c" {
			_bfagf, _bgfc := ParseUnionST_HoleSize(_cged.Value)
			if _bgfc != nil {
				return _bgfc
			}
			_debd.ValAttr = &_bfagf
			continue
		}
	}
	for {
		_facge, _eeeeg := d.Token()
		if _eeeeg != nil {
			return _b.Errorf("\u0070\u0061\u0072si\u006e\u0067\u0020\u0043\u0054\u005f\u0048\u006f\u006c\u0065\u0053\u0069\u007a\u0065\u003a\u0020\u0025\u0073", _eeeeg)
		}
		if _ecaa, _dgdec := _facge.(_e.EndElement); _dgdec && _ecaa.Name == start.Name {
			break
		}
	}
	return nil
}
func (_ebaa ST_ErrBarType) String() string {
	switch _ebaa {
	case 0:
		return ""
	case 1:
		return "\u0062\u006f\u0074\u0068"
	case 2:
		return "\u006d\u0069\u006eu\u0073"
	case 3:
		return "\u0070\u006c\u0075\u0073"
	}
	return ""
}

type CT_ExternalData struct {
	IdAttr     string
	AutoUpdate *CT_Boolean
}

func (_efcbd *CT_NumRef) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_bbccba:
	for {
		_ddgf, _bebdg := d.Token()
		if _bebdg != nil {
			return _bebdg
		}
		switch _bgbe := _ddgf.(type) {
		case _e.StartElement:
			switch _bgbe.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066"}:
				if _gddf := d.DecodeElement(&_efcbd.F, &_bgbe); _gddf != nil {
					return _gddf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0043\u0061\u0063\u0068\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0043\u0061\u0063\u0068\u0065"}:
				_efcbd.NumCache = NewCT_NumData()
				if _cdcc := d.DecodeElement(_efcbd.NumCache, &_bgbe); _cdcc != nil {
					return _cdcc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_efcbd.ExtLst = NewCT_ExtensionList()
				if _ecea := d.DecodeElement(_efcbd.ExtLst, &_bgbe); _ecea != nil {
					return _ecea
				}
			default:
				_a.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u004e\u0075\u006dR\u0065\u0066 \u0025\u0076", _bgbe.Name)
				if _dbgeb := d.Skip(); _dbgeb != nil {
					return _dbgeb
				}
			}
		case _e.EndElement:
			break _bbccba
		case _e.CharData:
		}
	}
	return nil
}

// Validate validates the CT_Order and its children
func (_dggf *CT_Order) Validate() error {
	return _dggf.ValidateWithPath("\u0043\u0054\u005f\u004f\u0072\u0064\u0065\u0072")
}
func (_gfecg *ST_ErrBarType) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_gfecg = 0
	case "\u0062\u006f\u0074\u0068":
		*_gfecg = 1
	case "\u006d\u0069\u006eu\u0073":
		*_gfecg = 2
	case "\u0070\u006c\u0075\u0073":
		*_gfecg = 3
	}
	return nil
}

// ValidateWithPath validates the CT_PageSetup and its children, prefixing error messages with path
func (_befcf *CT_PageSetup) ValidateWithPath(path string) error {
	if _befcf.PaperHeightAttr != nil {
		if !_ce.ST_PositiveUniversalMeasurePatternRe.MatchString(*_befcf.PaperHeightAttr) {
			return _b.Errorf("\u0025\u0073/\u006d\u002e\u0050\u0061\u0070\u0065\u0072\u0048\u0065\u0069\u0067\u0068\u0074\u0041\u0074\u0074\u0072\u0020\u006d\u0075\u0073\u0074\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0027\u0025\u0073\u0027\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025\u0076\u0029", path, _ce.ST_PositiveUniversalMeasurePatternRe, *_befcf.PaperHeightAttr)
		}
	}
	if _befcf.PaperHeightAttr != nil {
		if !_ce.ST_UniversalMeasurePatternRe.MatchString(*_befcf.PaperHeightAttr) {
			return _b.Errorf("\u0025\u0073/\u006d\u002e\u0050\u0061\u0070\u0065\u0072\u0048\u0065\u0069\u0067\u0068\u0074\u0041\u0074\u0074\u0072\u0020\u006d\u0075\u0073\u0074\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0027\u0025\u0073\u0027\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025\u0076\u0029", path, _ce.ST_UniversalMeasurePatternRe, *_befcf.PaperHeightAttr)
		}
	}
	if _befcf.PaperWidthAttr != nil {
		if !_ce.ST_PositiveUniversalMeasurePatternRe.MatchString(*_befcf.PaperWidthAttr) {
			return _b.Errorf("\u0025s\u002f\u006d.\u0050\u0061\u0070e\u0072\u0057\u0069\u0064\u0074\u0068\u0041t\u0074\u0072\u0020\u006d\u0075\u0073t\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0027\u0025\u0073\u0027 \u0028\u0068\u0061\u0076\u0065\u0020\u0025\u0076\u0029", path, _ce.ST_PositiveUniversalMeasurePatternRe, *_befcf.PaperWidthAttr)
		}
	}
	if _befcf.PaperWidthAttr != nil {
		if !_ce.ST_UniversalMeasurePatternRe.MatchString(*_befcf.PaperWidthAttr) {
			return _b.Errorf("\u0025s\u002f\u006d.\u0050\u0061\u0070e\u0072\u0057\u0069\u0064\u0074\u0068\u0041t\u0074\u0072\u0020\u006d\u0075\u0073t\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0027\u0025\u0073\u0027 \u0028\u0068\u0061\u0076\u0065\u0020\u0025\u0076\u0029", path, _ce.ST_UniversalMeasurePatternRe, *_befcf.PaperWidthAttr)
		}
	}
	if _cdbcc := _befcf.OrientationAttr.ValidateWithPath(path + "\u002f\u004fr\u0069\u0065\u006et\u0061\u0074\u0069\u006f\u006e\u0041\u0074\u0074\u0072"); _cdbcc != nil {
		return _cdbcc
	}
	return nil
}
func (_cddad ST_Orientation) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_cddad.String(), start)
}
func NewCT_Grouping() *CT_Grouping { _effb := &CT_Grouping{}; return _effb }
func (_faaa ST_RadarStyle) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_gedgf := _e.Attr{}
	_gedgf.Name = name
	switch _faaa {
	case ST_RadarStyleUnset:
		_gedgf.Value = ""
	case ST_RadarStyleStandard:
		_gedgf.Value = "\u0073\u0074\u0061\u006e\u0064\u0061\u0072\u0064"
	case ST_RadarStyleMarker:
		_gedgf.Value = "\u006d\u0061\u0072\u006b\u0065\u0072"
	case ST_RadarStyleFilled:
		_gedgf.Value = "\u0066\u0069\u006c\u006c\u0065\u0064"
	}
	return _gedgf, nil
}
func (_ccfb *CT_DispUnitsChoice) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _ccfb.CustUnit != nil {
		_afac := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0063\u0075\u0073\u0074\u0055\u006e\u0069\u0074"}}
		e.EncodeElement(_ccfb.CustUnit, _afac)
	}
	if _ccfb.BuiltInUnit != nil {
		_daag := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0062\u0075\u0069\u006c\u0074\u0049\u006e\u0055\u006e\u0069\u0074"}}
		e.EncodeElement(_ccfb.BuiltInUnit, _daag)
	}
	return nil
}
func ParseUnionST_HoleSize(s string) (ST_HoleSize, error) {
	if ST_HoleSizePercentPatternRe.MatchString(s) {
		return ST_HoleSize{ST_HoleSizePercent: &s}, nil
	}
	_gfgcc, _cbbdg := _c.ParseUint(s, 10, 8)
	if _cbbdg != nil {
		return ST_HoleSize{}, _cbbdg
	}
	_adbbc := uint8(_gfgcc)
	return ST_HoleSize{ST_HoleSizeUByte: &_adbbc}, nil
}

// Validate validates the CT_UnsignedInt and its children
func (_gfgee *CT_UnsignedInt) Validate() error {
	return _gfgee.ValidateWithPath("\u0043\u0054\u005f\u0055\u006e\u0073\u0069\u0067\u006ee\u0064\u0049\u006e\u0074")
}

type CT_DispUnits struct {
	Choice       *CT_DispUnitsChoice
	DispUnitsLbl *CT_DispUnitsLbl
	ExtLst       *CT_ExtensionList
}

func (_fabgg *CT_Trendline) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_fabgg.TrendlineType = NewCT_TrendlineType()
_gedcb:
	for {
		_cbcad, _egage := d.Token()
		if _egage != nil {
			return _egage
		}
		switch _gcgfg := _cbcad.(type) {
		case _e.StartElement:
			switch _gcgfg.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0061\u006d\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0061\u006d\u0065"}:
				_fabgg.Name = new(string)
				if _fggcb := d.DecodeElement(_fabgg.Name, &_gcgfg); _fggcb != nil {
					return _fggcb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_fabgg.SpPr = _f.NewCT_ShapeProperties()
				if _agdgc := d.DecodeElement(_fabgg.SpPr, &_gcgfg); _agdgc != nil {
					return _agdgc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0072\u0065\u006e\u0064\u006c\u0069\u006e\u0065\u0054\u0079\u0070\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0072\u0065\u006e\u0064\u006c\u0069\u006e\u0065\u0054\u0079\u0070\u0065"}:
				if _feeff := d.DecodeElement(_fabgg.TrendlineType, &_gcgfg); _feeff != nil {
					return _feeff
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}:
				_fabgg.Order = NewCT_Order()
				if _gaabb := d.DecodeElement(_fabgg.Order, &_gcgfg); _gaabb != nil {
					return _gaabb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0065\u0072\u0069\u006f\u0064"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0065\u0072\u0069\u006f\u0064"}:
				_fabgg.Period = NewCT_Period()
				if _daeca := d.DecodeElement(_fabgg.Period, &_gcgfg); _daeca != nil {
					return _daeca
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066o\u0072\u0077\u0061\u0072\u0064"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066o\u0072\u0077\u0061\u0072\u0064"}:
				_fabgg.Forward = NewCT_Double()
				if _aceda := d.DecodeElement(_fabgg.Forward, &_gcgfg); _aceda != nil {
					return _aceda
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0063\u006b\u0077\u0061\u0072\u0064"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0063\u006b\u0077\u0061\u0072\u0064"}:
				_fabgg.Backward = NewCT_Double()
				if _fcegf := d.DecodeElement(_fabgg.Backward, &_gcgfg); _fcegf != nil {
					return _fcegf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069n\u0074\u0065\u0072\u0063\u0065\u0070t"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069n\u0074\u0065\u0072\u0063\u0065\u0070t"}:
				_fabgg.Intercept = NewCT_Double()
				if _ecafg := d.DecodeElement(_fabgg.Intercept, &_gcgfg); _ecafg != nil {
					return _ecafg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0069\u0073\u0070\u0052\u0053\u0071\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0069\u0073\u0070\u0052\u0053\u0071\u0072"}:
				_fabgg.DispRSqr = NewCT_Boolean()
				if _cgccf := d.DecodeElement(_fabgg.DispRSqr, &_gcgfg); _cgccf != nil {
					return _cgccf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0069\u0073\u0070\u0045\u0071"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0069\u0073\u0070\u0045\u0071"}:
				_fabgg.DispEq = NewCT_Boolean()
				if _fgff := d.DecodeElement(_fabgg.DispEq, &_gcgfg); _fgff != nil {
					return _fgff
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0072\u0065n\u0064\u006c\u0069\u006e\u0065\u004c\u0062\u006c"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0072\u0065n\u0064\u006c\u0069\u006e\u0065\u004c\u0062\u006c"}:
				_fabgg.TrendlineLbl = NewCT_TrendlineLbl()
				if _aagg := d.DecodeElement(_fabgg.TrendlineLbl, &_gcgfg); _aagg != nil {
					return _aagg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_fabgg.ExtLst = NewCT_ExtensionList()
				if _fgbbf := d.DecodeElement(_fabgg.ExtLst, &_gcgfg); _fgbbf != nil {
					return _fgbbf
				}
			default:
				_a.Log.Debug("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075n\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054_T\u0072\u0065n\u0064\u006c\u0069\u006e\u0065\u0020\u0025\u0076", _gcgfg.Name)
				if _efafg := d.Skip(); _efafg != nil {
					return _efafg
				}
			}
		case _e.EndElement:
			break _gedcb
		case _e.CharData:
		}
	}
	return nil
}
func (_ecbbc ST_PageSetupOrientation) Validate() error { return _ecbbc.ValidateWithPath("") }

// ValidateWithPath validates the CT_Thickness and its children, prefixing error messages with path
func (_facfgg *CT_Thickness) ValidateWithPath(path string) error {
	if _eeecf := _facfgg.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _eeecf != nil {
		return _eeecf
	}
	return nil
}
func (_ebge ST_LblAlgn) String() string {
	switch _ebge {
	case 0:
		return ""
	case 1:
		return "\u0063\u0074\u0072"
	case 2:
		return "\u006c"
	case 3:
		return "\u0072"
	}
	return ""
}
func NewEG_DLblShared() *EG_DLblShared { _adcgd := &EG_DLblShared{}; return _adcgd }
func NewCT_Title() *CT_Title           { _dgff := &CT_Title{}; return _dgff }

// ST_Overlap is a union type
type ST_Overlap struct {
	ST_OverlapPercent *string
	ST_OverlapByte    *int8
}

func (_ddgcc ST_DLblPos) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_ddgcc.String(), start)
}
func (_bdggf ST_Crosses) String() string {
	switch _bdggf {
	case 0:
		return ""
	case 1:
		return "\u0061\u0075\u0074\u006f\u005a\u0065\u0072\u006f"
	case 2:
		return "\u006d\u0061\u0078"
	case 3:
		return "\u006d\u0069\u006e"
	}
	return ""
}
func (_bbaad ST_Thickness) String() string {
	if _bbaad.ST_ThicknessPercent != nil {
		return _b.Sprintf("\u0025\u0076", *_bbaad.ST_ThicknessPercent)
	}
	if _bbaad.Uint32 != nil {
		return _b.Sprintf("\u0025\u0076", *_bbaad.Uint32)
	}
	return ""
}
func (_acde *CT_AxDataSourceChoice) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _acde.MultiLvlStrRef != nil {
		_cea := _e.StartElement{Name: _e.Name{Local: "\u0063\u003am\u0075\u006c\u0074i\u004c\u0076\u006c\u0053\u0074\u0072\u0052\u0065\u0066"}}
		e.EncodeElement(_acde.MultiLvlStrRef, _cea)
	}
	if _acde.NumRef != nil {
		_cda := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u0052\u0065\u0066"}}
		e.EncodeElement(_acde.NumRef, _cda)
	}
	if _acde.NumLit != nil {
		_agg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u004c\u0069\u0074"}}
		e.EncodeElement(_acde.NumLit, _agg)
	}
	if _acde.StrRef != nil {
		_fegg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0074\u0072\u0052\u0065\u0066"}}
		e.EncodeElement(_acde.StrRef, _fegg)
	}
	if _acde.StrLit != nil {
		_bcd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0074\u0072\u004c\u0069\u0074"}}
		e.EncodeElement(_acde.StrLit, _bcd)
	}
	return nil
}
func (_gafd *CT_CatAx) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_bgde := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	e.EncodeElement(_gafd.AxId, _bgde)
	_eacc := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0073\u0063\u0061\u006c\u0069\u006eg"}}
	e.EncodeElement(_gafd.Scaling, _eacc)
	if _gafd.Delete != nil {
		_acgb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0064\u0065\u006c\u0065\u0074\u0065"}}
		e.EncodeElement(_gafd.Delete, _acgb)
	}
	_fbee := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0061\u0078\u0050\u006f\u0073"}}
	e.EncodeElement(_gafd.AxPos, _fbee)
	if _gafd.MajorGridlines != nil {
		_beggb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003am\u0061\u006a\u006fr\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_gafd.MajorGridlines, _beggb)
	}
	if _gafd.MinorGridlines != nil {
		_bcge := _e.StartElement{Name: _e.Name{Local: "\u0063\u003am\u0069\u006e\u006fr\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_gafd.MinorGridlines, _bcge)
	}
	if _gafd.Title != nil {
		_ceegc := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0074\u0069\u0074\u006c\u0065"}}
		e.EncodeElement(_gafd.Title, _ceegc)
	}
	if _gafd.NumFmt != nil {
		_bgc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u0046\u006d\u0074"}}
		e.EncodeElement(_gafd.NumFmt, _bgc)
	}
	if _gafd.MajorTickMark != nil {
		_bad := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006da\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}}
		e.EncodeElement(_gafd.MajorTickMark, _bad)
	}
	if _gafd.MinorTickMark != nil {
		_fdee := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006di\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}}
		e.EncodeElement(_gafd.MinorTickMark, _fdee)
	}
	if _gafd.TickLblPos != nil {
		_bga := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074i\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}}
		e.EncodeElement(_gafd.TickLblPos, _bga)
	}
	if _gafd.SpPr != nil {
		_cbae := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_gafd.SpPr, _cbae)
	}
	if _gafd.TxPr != nil {
		_fgca := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_gafd.TxPr, _fgca)
	}
	_gfed := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0063\u0072\u006f\u0073\u0073\u0041x"}}
	e.EncodeElement(_gafd.CrossAx, _gfed)
	if _gafd.Choice != nil {
		_gafd.Choice.MarshalXML(e, _e.StartElement{})
	}
	if _gafd.Auto != nil {
		_eegc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0061\u0075\u0074\u006f"}}
		e.EncodeElement(_gafd.Auto, _eegc)
	}
	if _gafd.LblAlgn != nil {
		_aag := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006c\u0062\u006c\u0041\u006c\u0067n"}}
		e.EncodeElement(_gafd.LblAlgn, _aag)
	}
	if _gafd.LblOffset != nil {
		_ffc := _e.StartElement{Name: _e.Name{Local: "c\u003a\u006c\u0062\u006c\u004f\u0066\u0066\u0073\u0065\u0074"}}
		e.EncodeElement(_gafd.LblOffset, _ffc)
	}
	if _gafd.TickLblSkip != nil {
		_bfcd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0069\u0063\u006b\u004c\u0062\u006c\u0053\u006b\u0069\u0070"}}
		e.EncodeElement(_gafd.TickLblSkip, _bfcd)
	}
	if _gafd.TickMarkSkip != nil {
		_cbgd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0069\u0063\u006b\u004d\u0061\u0072k\u0053\u006b\u0069\u0070"}}
		e.EncodeElement(_gafd.TickMarkSkip, _cbgd)
	}
	if _gafd.NoMultiLvlLbl != nil {
		_fcad := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006eo\u004d\u0075\u006c\u0074\u0069\u004c\u0076\u006c\u004c\u0062\u006c"}}
		e.EncodeElement(_gafd.NoMultiLvlLbl, _fcad)
	}
	if _gafd.ExtLst != nil {
		_ffb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_gafd.ExtLst, _ffb)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}
func (_bdcae *CT_OfPieType) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _bdcae.ValAttr != ST_OfPieTypeUnset {
		_gdfc, _cfbe := _bdcae.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
		if _cfbe != nil {
			return _cfbe
		}
		start.Attr = append(start.Attr, _gdfc)
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_MarkerStyle and its children
func (_bdgeg *CT_MarkerStyle) Validate() error {
	return _bdgeg.ValidateWithPath("\u0043\u0054\u005f\u004d\u0061\u0072\u006b\u0065\u0072S\u0074\u0079\u006c\u0065")
}

// ValidateWithPath validates the CT_CatAx and its children, prefixing error messages with path
func (_caa *CT_CatAx) ValidateWithPath(path string) error {
	if _gfef := _caa.AxId.ValidateWithPath(path + "\u002f\u0041\u0078I\u0064"); _gfef != nil {
		return _gfef
	}
	if _ffec := _caa.Scaling.ValidateWithPath(path + "\u002f\u0053\u0063\u0061\u006c\u0069\u006e\u0067"); _ffec != nil {
		return _ffec
	}
	if _caa.Delete != nil {
		if _ecgd := _caa.Delete.ValidateWithPath(path + "\u002fD\u0065\u006c\u0065\u0074\u0065"); _ecgd != nil {
			return _ecgd
		}
	}
	if _gfb := _caa.AxPos.ValidateWithPath(path + "\u002f\u0041\u0078\u0050\u006f\u0073"); _gfb != nil {
		return _gfb
	}
	if _caa.MajorGridlines != nil {
		if _gdff := _caa.MajorGridlines.ValidateWithPath(path + "\u002fM\u0061j\u006f\u0072\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"); _gdff != nil {
			return _gdff
		}
	}
	if _caa.MinorGridlines != nil {
		if _bcgd := _caa.MinorGridlines.ValidateWithPath(path + "\u002fM\u0069n\u006f\u0072\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"); _bcgd != nil {
			return _bcgd
		}
	}
	if _caa.Title != nil {
		if _acbcc := _caa.Title.ValidateWithPath(path + "\u002f\u0054\u0069\u0074\u006c\u0065"); _acbcc != nil {
			return _acbcc
		}
	}
	if _caa.NumFmt != nil {
		if _abe := _caa.NumFmt.ValidateWithPath(path + "\u002fN\u0075\u006d\u0046\u006d\u0074"); _abe != nil {
			return _abe
		}
	}
	if _caa.MajorTickMark != nil {
		if _ecdb := _caa.MajorTickMark.ValidateWithPath(path + "\u002f\u004d\u0061\u006a\u006f\u0072\u0054\u0069\u0063k\u004d\u0061\u0072\u006b"); _ecdb != nil {
			return _ecdb
		}
	}
	if _caa.MinorTickMark != nil {
		if _aebg := _caa.MinorTickMark.ValidateWithPath(path + "\u002f\u004d\u0069\u006e\u006f\u0072\u0054\u0069\u0063k\u004d\u0061\u0072\u006b"); _aebg != nil {
			return _aebg
		}
	}
	if _caa.TickLblPos != nil {
		if _aabg := _caa.TickLblPos.ValidateWithPath(path + "/\u0054\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"); _aabg != nil {
			return _aabg
		}
	}
	if _caa.SpPr != nil {
		if _ffgb := _caa.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _ffgb != nil {
			return _ffgb
		}
	}
	if _caa.TxPr != nil {
		if _bagd := _caa.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _bagd != nil {
			return _bagd
		}
	}
	if _cdfc := _caa.CrossAx.ValidateWithPath(path + "\u002f\u0043\u0072\u006f\u0073\u0073\u0041\u0078"); _cdfc != nil {
		return _cdfc
	}
	if _caa.Choice != nil {
		if _dgde := _caa.Choice.ValidateWithPath(path + "\u002fC\u0068\u006f\u0069\u0063\u0065"); _dgde != nil {
			return _dgde
		}
	}
	if _caa.Auto != nil {
		if _daga := _caa.Auto.ValidateWithPath(path + "\u002f\u0041\u0075t\u006f"); _daga != nil {
			return _daga
		}
	}
	if _caa.LblAlgn != nil {
		if _eeca := _caa.LblAlgn.ValidateWithPath(path + "\u002f\u004c\u0062\u006c\u0041\u006c\u0067\u006e"); _eeca != nil {
			return _eeca
		}
	}
	if _caa.LblOffset != nil {
		if _dgdgg := _caa.LblOffset.ValidateWithPath(path + "\u002f\u004c\u0062\u006c\u004f\u0066\u0066\u0073\u0065\u0074"); _dgdgg != nil {
			return _dgdgg
		}
	}
	if _caa.TickLblSkip != nil {
		if _bcgg := _caa.TickLblSkip.ValidateWithPath(path + "\u002f\u0054\u0069c\u006b\u004c\u0062\u006c\u0053\u006b\u0069\u0070"); _bcgg != nil {
			return _bcgg
		}
	}
	if _caa.TickMarkSkip != nil {
		if _feaa := _caa.TickMarkSkip.ValidateWithPath(path + "\u002f\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b\u0053\u006b\u0069\u0070"); _feaa != nil {
			return _feaa
		}
	}
	if _caa.NoMultiLvlLbl != nil {
		if _fded := _caa.NoMultiLvlLbl.ValidateWithPath(path + "\u002f\u004e\u006f\u004d\u0075\u006c\u0074\u0069\u004cv\u006c\u004c\u0062\u006c"); _fded != nil {
			return _fded
		}
	}
	if _caa.ExtLst != nil {
		if _ccge := _caa.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _ccge != nil {
			return _ccge
		}
	}
	return nil
}

// Validate validates the CT_UpDownBar and its children
func (_fabe *CT_UpDownBar) Validate() error {
	return _fabe.ValidateWithPath("\u0043\u0054\u005fU\u0070\u0044\u006f\u0077\u006e\u0042\u0061\u0072")
}
func (_bgacb *ST_TimeUnit) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_cgagf, _gbdgb := d.Token()
	if _gbdgb != nil {
		return _gbdgb
	}
	if _ecffe, _fbefg := _cgagf.(_e.EndElement); _fbefg && _ecffe.Name == start.Name {
		*_bgacb = 1
		return nil
	}
	if _eaag, _bbcca := _cgagf.(_e.CharData); !_bbcca {
		return _b.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _cgagf)
	} else {
		switch string(_eaag) {
		case "":
			*_bgacb = 0
		case "\u0064\u0061\u0079\u0073":
			*_bgacb = 1
		case "\u006d\u006f\u006e\u0074\u0068\u0073":
			*_bgacb = 2
		case "\u0079\u0065\u0061r\u0073":
			*_bgacb = 3
		}
	}
	_cgagf, _gbdgb = d.Token()
	if _gbdgb != nil {
		return _gbdgb
	}
	if _cgffef, _dadbe := _cgagf.(_e.EndElement); _dadbe && _cgffef.Name == start.Name {
		return nil
	}
	return _b.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _cgagf)
}

// Validate validates the CT_DispBlanksAs and its children
func (_abag *CT_DispBlanksAs) Validate() error {
	return _abag.ValidateWithPath("\u0043T\u005fD\u0069\u0073\u0070\u0042\u006c\u0061\u006e\u006b\u0073\u0041\u0073")
}

// Validate validates the CT_TimeUnit and its children
func (_eeeec *CT_TimeUnit) Validate() error {
	return _eeeec.ValidateWithPath("C\u0054\u005f\u0054\u0069\u006d\u0065\u0055\u006e\u0069\u0074")
}
func NewCT_TextLanguageID() *CT_TextLanguageID { _cbgda := &CT_TextLanguageID{}; return _cbgda }
func NewCT_PivotSource() *CT_PivotSource {
	_gacdf := &CT_PivotSource{}
	_gacdf.FmtId = NewCT_UnsignedInt()
	return _gacdf
}
func (_dgdg *CT_AxPos) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	_aec, _afe := _dgdg.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
	if _afe != nil {
		return _afe
	}
	start.Attr = append(start.Attr, _aec)
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}
func ParseUnionST_Overlap(s string) (ST_Overlap, error) {
	if ST_OverlapPercentPatternRe.MatchString(s) {
		return ST_Overlap{ST_OverlapPercent: &s}, nil
	}
	_gdgac, _abgca := _c.ParseInt(s, 10, 8)
	if _abgca != nil {
		return ST_Overlap{}, _abgca
	}
	_dbgf := int8(_gdgac)
	return ST_Overlap{ST_OverlapByte: &_dbgf}, nil
}
func (_fbebfd ST_BarDir) Validate() error { return _fbebfd.ValidateWithPath("") }

// ValidateWithPath validates the CT_DLbls and its children, prefixing error messages with path
func (_cgecb *CT_DLbls) ValidateWithPath(path string) error {
	for _dadf, _bcbe := range _cgecb.DLbl {
		if _ffcc := _bcbe.ValidateWithPath(_b.Sprintf("%\u0073\u002f\u0044\u004c\u0062\u006c\u005b\u0025\u0064\u005d", path, _dadf)); _ffcc != nil {
			return _ffcc
		}
	}
	if _cgecb.Choice != nil {
		if _ebcc := _cgecb.Choice.ValidateWithPath(path + "\u002fC\u0068\u006f\u0069\u0063\u0065"); _ebcc != nil {
			return _ebcc
		}
	}
	if _cgecb.ExtLst != nil {
		if _fcega := _cgecb.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _fcega != nil {
			return _fcega
		}
	}
	return nil
}
func NewCT_Surface() *CT_Surface { _edbg := &CT_Surface{}; return _edbg }

type CT_Surface struct {
	Thickness      *CT_Thickness
	SpPr           *_f.CT_ShapeProperties
	PictureOptions *CT_PictureOptions
	ExtLst         *CT_ExtensionList
}

func (_dbc *CT_PieChart) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_gfbgd:
	for {
		_addb, _ebaef := d.Token()
		if _ebaef != nil {
			return _ebaef
		}
		switch _bdafcb := _addb.(type) {
		case _e.StartElement:
			switch _bdafcb.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_dbc.VaryColors = NewCT_Boolean()
				if _afgba := d.DecodeElement(_dbc.VaryColors, &_bdafcb); _afgba != nil {
					return _afgba
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_cgacc := NewCT_PieSer()
				if _gacbe := d.DecodeElement(_cgacc, &_bdafcb); _gacbe != nil {
					return _gacbe
				}
				_dbc.Ser = append(_dbc.Ser, _cgacc)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_dbc.DLbls = NewCT_DLbls()
				if _cfaae := d.DecodeElement(_dbc.DLbls, &_bdafcb); _cfaae != nil {
					return _cfaae
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066\u0069\u0072\u0073\u0074\u0053\u006c\u0069\u0063\u0065\u0041\u006e\u0067"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066\u0069\u0072\u0073\u0074\u0053\u006c\u0069\u0063\u0065\u0041\u006e\u0067"}:
				_dbc.FirstSliceAng = NewCT_FirstSliceAng()
				if _dggcbc := d.DecodeElement(_dbc.FirstSliceAng, &_bdafcb); _dggcbc != nil {
					return _dggcbc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_dbc.ExtLst = NewCT_ExtensionList()
				if _gbeae := d.DecodeElement(_dbc.ExtLst, &_bdafcb); _gbeae != nil {
					return _gbeae
				}
			default:
				_a.Log.Debug("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074\u0020\u0025\u0076", _bdafcb.Name)
				if _bdba := d.Skip(); _bdba != nil {
					return _bdba
				}
			}
		case _e.EndElement:
			break _gfbgd
		case _e.CharData:
		}
	}
	return nil
}

var ST_ThicknessPercentPatternRe = _g.MustCompile(ST_ThicknessPercentPattern)

type CT_Grouping struct{ ValAttr ST_Grouping }

func (_adcaf *ST_LayoutMode) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_aeecg, _fedbg := d.Token()
	if _fedbg != nil {
		return _fedbg
	}
	if _ggfb, _edccgd := _aeecg.(_e.EndElement); _edccgd && _ggfb.Name == start.Name {
		*_adcaf = 1
		return nil
	}
	if _daeebg, _eedg := _aeecg.(_e.CharData); !_eedg {
		return _b.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _aeecg)
	} else {
		switch string(_daeebg) {
		case "":
			*_adcaf = 0
		case "\u0065\u0064\u0067\u0065":
			*_adcaf = 1
		case "\u0066\u0061\u0063\u0074\u006f\u0072":
			*_adcaf = 2
		}
	}
	_aeecg, _fedbg = d.Token()
	if _fedbg != nil {
		return _fedbg
	}
	if _cfgf, _cgef := _aeecg.(_e.EndElement); _cgef && _cfgf.Name == start.Name {
		return nil
	}
	return _b.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _aeecg)
}
func ParseUnionST_GapAmount(s string) (ST_GapAmount, error) {
	if ST_GapAmountPercentPatternRe.MatchString(s) {
		return ST_GapAmount{ST_GapAmountPercent: &s}, nil
	}
	_dgdbgd, _bfgfc := _c.ParseUint(s, 10, 16)
	if _bfgfc != nil {
		return ST_GapAmount{}, _bfgfc
	}
	_bgeec := uint16(_dgdbgd)
	return ST_GapAmount{ST_GapAmountUShort: &_bgeec}, nil
}

// ValidateWithPath validates the ChartSpace and its children, prefixing error messages with path
func (_aacba *ChartSpace) ValidateWithPath(path string) error {
	if _daff := _aacba.CT_ChartSpace.ValidateWithPath(path); _daff != nil {
		return _daff
	}
	return nil
}

// ValidateWithPath validates the CT_Area3DChart and its children, prefixing error messages with path
func (_acba *CT_Area3DChart) ValidateWithPath(path string) error {
	if _acba.Grouping != nil {
		if _bfc := _acba.Grouping.ValidateWithPath(path + "\u002fG\u0072\u006f\u0075\u0070\u0069\u006eg"); _bfc != nil {
			return _bfc
		}
	}
	if _acba.VaryColors != nil {
		if _dgd := _acba.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _dgd != nil {
			return _dgd
		}
	}
	for _bac, _cg := range _acba.Ser {
		if _cc := _cg.ValidateWithPath(_b.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _bac)); _cc != nil {
			return _cc
		}
	}
	if _acba.DLbls != nil {
		if _de := _acba.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _de != nil {
			return _de
		}
	}
	if _acba.DropLines != nil {
		if _acd := _acba.DropLines.ValidateWithPath(path + "\u002f\u0044\u0072\u006f\u0070\u004c\u0069\u006e\u0065\u0073"); _acd != nil {
			return _acd
		}
	}
	if _acba.GapDepth != nil {
		if _ag := _acba.GapDepth.ValidateWithPath(path + "\u002fG\u0061\u0070\u0044\u0065\u0070\u0074h"); _ag != nil {
			return _ag
		}
	}
	for _ee, _dfg := range _acba.AxId {
		if _bce := _dfg.ValidateWithPath(_b.Sprintf("%\u0073\u002f\u0041\u0078\u0049\u0064\u005b\u0025\u0064\u005d", path, _ee)); _bce != nil {
			return _bce
		}
	}
	if _acba.ExtLst != nil {
		if _bb := _acba.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _bb != nil {
			return _bb
		}
	}
	return nil
}
func (_efbd ST_HPercent) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _efbd.ST_HPercentWithSymbol != nil {
		e.EncodeToken(_e.CharData(*_efbd.ST_HPercentWithSymbol))
	}
	if _efbd.ST_HPercentUShort != nil {
		e.EncodeToken(_e.CharData(_b.Sprintf("\u0025\u0064", *_efbd.ST_HPercentUShort)))
	}
	return e.EncodeToken(_e.EndElement{Name: start.Name})
}
func (_bgbbg ST_RadarStyle) ValidateWithPath(path string) error {
	switch _bgbbg {
	case 0, 1, 2, 3:
	default:
		return _b.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_bgbbg))
	}
	return nil
}
func (_cdgdg *CT_ValAx) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_cdgdg.AxId = NewCT_UnsignedInt()
	_cdgdg.Scaling = NewCT_Scaling()
	_cdgdg.AxPos = NewCT_AxPos()
	_cdgdg.CrossAx = NewCT_UnsignedInt()
_ffbfc:
	for {
		_afffe, _cgacb := d.Token()
		if _cgacb != nil {
			return _cgacb
		}
		switch _gbfba := _afffe.(type) {
		case _e.StartElement:
			switch _gbfba.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				if _cffbf := d.DecodeElement(_cdgdg.AxId, &_gbfba); _cffbf != nil {
					return _cffbf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073c\u0061\u006c\u0069\u006e\u0067"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073c\u0061\u006c\u0069\u006e\u0067"}:
				if _adgcc := d.DecodeElement(_cdgdg.Scaling, &_gbfba); _adgcc != nil {
					return _adgcc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}:
				_cdgdg.Delete = NewCT_Boolean()
				if _bdecb := d.DecodeElement(_cdgdg.Delete, &_gbfba); _bdecb != nil {
					return _bdecb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0050o\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0050o\u0073"}:
				if _ebfcf := d.DecodeElement(_cdgdg.AxPos, &_gbfba); _ebfcf != nil {
					return _ebfcf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}:
				_cdgdg.MajorGridlines = NewCT_ChartLines()
				if _cfedd := d.DecodeElement(_cdgdg.MajorGridlines, &_gbfba); _cfedd != nil {
					return _cfedd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}:
				_cdgdg.MinorGridlines = NewCT_ChartLines()
				if _gbaee := d.DecodeElement(_cdgdg.MinorGridlines, &_gbfba); _gbaee != nil {
					return _gbaee
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0074l\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0074l\u0065"}:
				_cdgdg.Title = NewCT_Title()
				if _aceb := d.DecodeElement(_cdgdg.Title, &_gbfba); _aceb != nil {
					return _aceb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}:
				_cdgdg.NumFmt = NewCT_NumFmt()
				if _acdad := d.DecodeElement(_cdgdg.NumFmt, &_gbfba); _acdad != nil {
					return _acdad
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}:
				_cdgdg.MajorTickMark = NewCT_TickMark()
				if _debcd := d.DecodeElement(_cdgdg.MajorTickMark, &_gbfba); _debcd != nil {
					return _debcd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}:
				_cdgdg.MinorTickMark = NewCT_TickMark()
				if _affff := d.DecodeElement(_cdgdg.MinorTickMark, &_gbfba); _affff != nil {
					return _affff
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}:
				_cdgdg.TickLblPos = NewCT_TickLblPos()
				if _ebag := d.DecodeElement(_cdgdg.TickLblPos, &_gbfba); _ebag != nil {
					return _ebag
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_cdgdg.SpPr = _f.NewCT_ShapeProperties()
				if _gcafb := d.DecodeElement(_cdgdg.SpPr, &_gbfba); _gcafb != nil {
					return _gcafb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_cdgdg.TxPr = _f.NewCT_TextBody()
				if _fffd := d.DecodeElement(_cdgdg.TxPr, &_gbfba); _fffd != nil {
					return _fffd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0041\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0041\u0078"}:
				if _ecdc := d.DecodeElement(_cdgdg.CrossAx, &_gbfba); _ecdc != nil {
					return _ecdc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073"}:
				_cdgdg.Choice = NewEG_AxSharedChoice()
				if _ffca := d.DecodeElement(&_cdgdg.Choice.Crosses, &_gbfba); _ffca != nil {
					return _ffca
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073\u0041t"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073\u0041t"}:
				_cdgdg.Choice = NewEG_AxSharedChoice()
				if _cfeca := d.DecodeElement(&_cdgdg.Choice.CrossesAt, &_gbfba); _cfeca != nil {
					return _cfeca
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0072\u006fs\u0073\u0042\u0065\u0074\u0077\u0065\u0065\u006e"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0072\u006fs\u0073\u0042\u0065\u0074\u0077\u0065\u0065\u006e"}:
				_cdgdg.CrossBetween = NewCT_CrossBetween()
				if _fgeag := d.DecodeElement(_cdgdg.CrossBetween, &_gbfba); _fgeag != nil {
					return _fgeag
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006da\u006a\u006f\u0072\u0055\u006e\u0069t"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006da\u006a\u006f\u0072\u0055\u006e\u0069t"}:
				_cdgdg.MajorUnit = NewCT_AxisUnit()
				if _efgdf := d.DecodeElement(_cdgdg.MajorUnit, &_gbfba); _efgdf != nil {
					return _efgdf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006di\u006e\u006f\u0072\u0055\u006e\u0069t"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006di\u006e\u006f\u0072\u0055\u006e\u0069t"}:
				_cdgdg.MinorUnit = NewCT_AxisUnit()
				if _fcfd := d.DecodeElement(_cdgdg.MinorUnit, &_gbfba); _fcfd != nil {
					return _fcfd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064i\u0073\u0070\u0055\u006e\u0069\u0074s"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064i\u0073\u0070\u0055\u006e\u0069\u0074s"}:
				_cdgdg.DispUnits = NewCT_DispUnits()
				if _cece := d.DecodeElement(_cdgdg.DispUnits, &_gbfba); _cece != nil {
					return _cece
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_cdgdg.ExtLst = NewCT_ExtensionList()
				if _cfceb := d.DecodeElement(_cdgdg.ExtLst, &_gbfba); _cfceb != nil {
					return _cfceb
				}
			default:
				_a.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006eg\u0020\u0075\u006es\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0056\u0061\u006c\u0041\u0078\u0020\u0025\u0076", _gbfba.Name)
				if _feggc := d.Skip(); _feggc != nil {
					return _feggc
				}
			}
		case _e.EndElement:
			break _ffbfc
		case _e.CharData:
		}
	}
	return nil
}
func (_abgf *CT_DepthPercent) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _gebf := range start.Attr {
		if _gebf.Name.Local == "\u0076\u0061\u006c" {
			_fbbf, _cadec := ParseUnionST_DepthPercent(_gebf.Value)
			if _cadec != nil {
				return _cadec
			}
			_abgf.ValAttr = &_fbbf
			continue
		}
	}
	for {
		_cfcff, _gdef := d.Token()
		if _gdef != nil {
			return _b.Errorf("p\u0061\u0072\u0073\u0069\u006e\u0067 \u0043\u0054\u005f\u0044\u0065\u0070\u0074\u0068\u0050e\u0072\u0063\u0065n\u0074:\u0020\u0025\u0073", _gdef)
		}
		if _bbede, _dca := _cfcff.(_e.EndElement); _dca && _bbede.Name == start.Name {
			break
		}
	}
	return nil
}
func (_afabg ST_BuiltInUnit) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_aabad := _e.Attr{}
	_aabad.Name = name
	switch _afabg {
	case ST_BuiltInUnitUnset:
		_aabad.Value = ""
	case ST_BuiltInUnitHundreds:
		_aabad.Value = "\u0068\u0075\u006e\u0064\u0072\u0065\u0064\u0073"
	case ST_BuiltInUnitThousands:
		_aabad.Value = "\u0074h\u006f\u0075\u0073\u0061\u006e\u0064s"
	case ST_BuiltInUnitTenThousands:
		_aabad.Value = "\u0074\u0065\u006eT\u0068\u006f\u0075\u0073\u0061\u006e\u0064\u0073"
	case ST_BuiltInUnitHundredThousands:
		_aabad.Value = "\u0068\u0075n\u0064\u0072\u0065d\u0054\u0068\u006f\u0075\u0073\u0061\u006e\u0064\u0073"
	case ST_BuiltInUnitMillions:
		_aabad.Value = "\u006d\u0069\u006c\u006c\u0069\u006f\u006e\u0073"
	case ST_BuiltInUnitTenMillions:
		_aabad.Value = "t\u0065\u006e\u004d\u0069\u006c\u006c\u0069\u006f\u006e\u0073"
	case ST_BuiltInUnitHundredMillions:
		_aabad.Value = "\u0068u\u006ed\u0072\u0065\u0064\u004d\u0069\u006c\u006c\u0069\u006f\u006e\u0073"
	case ST_BuiltInUnitBillions:
		_aabad.Value = "\u0062\u0069\u006c\u006c\u0069\u006f\u006e\u0073"
	case ST_BuiltInUnitTrillions:
		_aabad.Value = "\u0074r\u0069\u006c\u006c\u0069\u006f\u006es"
	}
	return _aabad, nil
}

// Validate validates the CT_OfPieType and its children
func (_bbef *CT_OfPieType) Validate() error {
	return _bbef.ValidateWithPath("\u0043\u0054\u005fO\u0066\u0050\u0069\u0065\u0054\u0079\u0070\u0065")
}

// Validate validates the CT_DLbl and its children
func (_fcfe *CT_DLbl) Validate() error {
	return _fcfe.ValidateWithPath("\u0043T\u005f\u0044\u004c\u0062\u006c")
}
func (_dedc *CT_HoleSize) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _dedc.ValAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0076\u0061\u006c"}, Value: _b.Sprintf("\u0025\u0076", *_dedc.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// ST_DepthPercent is a union type
type ST_DepthPercent struct {
	ST_DepthPercentWithSymbol *string
	ST_DepthPercentUShort     *uint16
}

func (_ebcacd ST_Grouping) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_ebcacd.String(), start)
}
func (_bcee *CT_AreaSer) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_gcfe := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0069d\u0078"}}
	e.EncodeElement(_bcee.Idx, _gcfe)
	_bae := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006f\u0072\u0064\u0065\u0072"}}
	e.EncodeElement(_bcee.Order, _bae)
	if _bcee.Tx != nil {
		_aac := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078"}}
		e.EncodeElement(_bcee.Tx, _aac)
	}
	if _bcee.SpPr != nil {
		_cgd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_bcee.SpPr, _cgd)
	}
	if _bcee.PictureOptions != nil {
		_dfa := _e.StartElement{Name: _e.Name{Local: "\u0063\u003ap\u0069\u0063\u0074u\u0072\u0065\u004f\u0070\u0074\u0069\u006f\u006e\u0073"}}
		e.EncodeElement(_bcee.PictureOptions, _dfa)
	}
	if _bcee.DPt != nil {
		_afd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0064P\u0074"}}
		for _, _agd := range _bcee.DPt {
			e.EncodeElement(_agd, _afd)
		}
	}
	if _bcee.DLbls != nil {
		_dda := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_bcee.DLbls, _dda)
	}
	if _bcee.Trendline != nil {
		_ae := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0074\u0072\u0065\u006e\u0064\u006c\u0069\u006e\u0065"}}
		for _, _be := range _bcee.Trendline {
			e.EncodeElement(_be, _ae)
		}
	}
	if _bcee.ErrBars != nil {
		_bba := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0065\u0072\u0072\u0042\u0061\u0072s"}}
		for _, _adf := range _bcee.ErrBars {
			e.EncodeElement(_adf, _bba)
		}
	}
	if _bcee.Cat != nil {
		_fc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0063a\u0074"}}
		e.EncodeElement(_bcee.Cat, _fc)
	}
	if _bcee.Val != nil {
		_bef := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0076a\u006c"}}
		e.EncodeElement(_bcee.Val, _bef)
	}
	if _bcee.ExtLst != nil {
		_ebb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_bcee.ExtLst, _ebb)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}
func (_bbcag *EG_SurfaceChartShared) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_bfdgb:
	for {
		_gcdd, _ccecg := d.Token()
		if _ccecg != nil {
			return _ccecg
		}
		switch _cfgda := _gcdd.(type) {
		case _e.StartElement:
			switch _cfgda.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0077i\u0072\u0065\u0066\u0072\u0061\u006de"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0077i\u0072\u0065\u0066\u0072\u0061\u006de"}:
				_bbcag.Wireframe = NewCT_Boolean()
				if _acgda := d.DecodeElement(_bbcag.Wireframe, &_cfgda); _acgda != nil {
					return _acgda
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_cgeda := NewCT_SurfaceSer()
				if _cgccb := d.DecodeElement(_cgeda, &_cfgda); _cgccb != nil {
					return _cgccb
				}
				_bbcag.Ser = append(_bbcag.Ser, _cgeda)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u006e\u0064\u0046\u006d\u0074\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u006e\u0064\u0046\u006d\u0074\u0073"}:
				_bbcag.BandFmts = NewCT_BandFmts()
				if _ebadc := d.DecodeElement(_bbcag.BandFmts, &_cfgda); _ebadc != nil {
					return _ebadc
				}
			default:
				_a.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069n\u0067\u0020\u0075n\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006de\u006e\u0074\u0020\u006f\u006e E\u0047\u005f\u0053\u0075\u0072\u0066\u0061\u0063\u0065\u0043\u0068\u0061\u0072\u0074\u0053\u0068\u0061\u0072\u0065\u0064\u0020\u0025\u0076", _cfgda.Name)
				if _bcfafg := d.Skip(); _bcfafg != nil {
					return _bcfafg
				}
			}
		case _e.EndElement:
			break _bfdgb
		case _e.CharData:
		}
	}
	return nil
}
func (_fafda *CT_PivotFmt) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_bgefg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0069d\u0078"}}
	e.EncodeElement(_fafda.Idx, _bgefg)
	if _fafda.SpPr != nil {
		_becge := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_fafda.SpPr, _becge)
	}
	if _fafda.TxPr != nil {
		_addf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_fafda.TxPr, _addf)
	}
	if _fafda.Marker != nil {
		_ebfag := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006d\u0061\u0072\u006b\u0065\u0072"}}
		e.EncodeElement(_fafda.Marker, _ebfag)
	}
	if _fafda.DLbl != nil {
		_fbfde := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0064\u004c\u0062\u006c"}}
		e.EncodeElement(_fafda.DLbl, _fbfde)
	}
	if _fafda.ExtLst != nil {
		_gacg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_fafda.ExtLst, _gacg)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}
func (_dbcfb *CT_RadarChart) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_dbcfb.RadarStyle = NewCT_RadarStyle()
_dgcd:
	for {
		_befcc, _dafdgc := d.Token()
		if _dafdgc != nil {
			return _dafdgc
		}
		switch _aedead := _befcc.(type) {
		case _e.StartElement:
			switch _aedead.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u0061\u0064\u0061\u0072\u0053\u0074\u0079\u006c\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u0061\u0064\u0061\u0072\u0053\u0074\u0079\u006c\u0065"}:
				if _bedba := d.DecodeElement(_dbcfb.RadarStyle, &_aedead); _bedba != nil {
					return _bedba
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_dbcfb.VaryColors = NewCT_Boolean()
				if _fdgec := d.DecodeElement(_dbcfb.VaryColors, &_aedead); _fdgec != nil {
					return _fdgec
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_caced := NewCT_RadarSer()
				if _dbce := d.DecodeElement(_caced, &_aedead); _dbce != nil {
					return _dbce
				}
				_dbcfb.Ser = append(_dbcfb.Ser, _caced)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_dbcfb.DLbls = NewCT_DLbls()
				if _gdcf := d.DecodeElement(_dbcfb.DLbls, &_aedead); _gdcf != nil {
					return _gdcf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				_egbd := NewCT_UnsignedInt()
				if _cacc := d.DecodeElement(_egbd, &_aedead); _cacc != nil {
					return _cacc
				}
				_dbcfb.AxId = append(_dbcfb.AxId, _egbd)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_dbcfb.ExtLst = NewCT_ExtensionList()
				if _dgdae := d.DecodeElement(_dbcfb.ExtLst, &_aedead); _dgdae != nil {
					return _dgdae
				}
			default:
				_a.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0052a\u0064\u0061\u0072\u0043\u0068\u0061\u0072\u0074 \u0025\u0076", _aedead.Name)
				if _gcaa := d.Skip(); _gcaa != nil {
					return _gcaa
				}
			}
		case _e.EndElement:
			break _dgcd
		case _e.CharData:
		}
	}
	return nil
}

const (
	ST_AxPosUnset ST_AxPos = 0
	ST_AxPosB     ST_AxPos = 1
	ST_AxPosL     ST_AxPos = 2
	ST_AxPosR     ST_AxPos = 3
	ST_AxPosT     ST_AxPos = 4
)

// Validate validates the CT_RadarChart and its children
func (_fdcd *CT_RadarChart) Validate() error {
	return _fdcd.ValidateWithPath("\u0043\u0054\u005f\u0052\u0061\u0064\u0061\u0072\u0043\u0068\u0061\u0072\u0074")
}
func (_eggbc *CT_SerTx) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_eggbc.Choice.MarshalXML(e, _e.StartElement{})
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// ST_HoleSize is a union type
type ST_HoleSize struct {
	ST_HoleSizePercent *string
	ST_HoleSizeUByte   *uint8
}

// Validate validates the CT_Extension and its children
func (_fbbc *CT_Extension) Validate() error {
	return _fbbc.ValidateWithPath("\u0043\u0054\u005fE\u0078\u0074\u0065\u006e\u0073\u0069\u006f\u006e")
}

const (
	ST_BarGroupingUnset          ST_BarGrouping = 0
	ST_BarGroupingPercentStacked ST_BarGrouping = 1
	ST_BarGroupingClustered      ST_BarGrouping = 2
	ST_BarGroupingStandard       ST_BarGrouping = 3
	ST_BarGroupingStacked        ST_BarGrouping = 4
)

// Validate validates the CT_StockChart and its children
func (_dace *CT_StockChart) Validate() error {
	return _dace.ValidateWithPath("\u0043\u0054\u005f\u0053\u0074\u006f\u0063\u006b\u0043\u0068\u0061\u0072\u0074")
}
func NewCT_LineChart() *CT_LineChart {
	_faae := &CT_LineChart{}
	_faae.Grouping = NewCT_Grouping()
	return _faae
}
func (_beedf *CT_PlotAreaChoice1) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_bbcaa:
	for {
		_eecda, _cbfc := d.Token()
		if _cbfc != nil {
			return _cbfc
		}
		switch _fcea := _eecda.(type) {
		case _e.StartElement:
			switch _fcea.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006cA\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006cA\u0078"}:
				_geged := NewCT_ValAx()
				if _aggbg := d.DecodeElement(_geged, &_fcea); _aggbg != nil {
					return _aggbg
				}
				_beedf.ValAx = append(_beedf.ValAx, _geged)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074A\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074A\u0078"}:
				_fcggc := NewCT_CatAx()
				if _addeg := d.DecodeElement(_fcggc, &_fcea); _addeg != nil {
					return _addeg
				}
				_beedf.CatAx = append(_beedf.CatAx, _fcggc)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0061\u0074\u0065\u0041\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0061\u0074\u0065\u0041\u0078"}:
				_bgea := NewCT_DateAx()
				if _aafad := d.DecodeElement(_bgea, &_fcea); _aafad != nil {
					return _aafad
				}
				_beedf.DateAx = append(_beedf.DateAx, _bgea)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072A\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072A\u0078"}:
				_afgaf := NewCT_SerAx()
				if _adeef := d.DecodeElement(_afgaf, &_fcea); _adeef != nil {
					return _adeef
				}
				_beedf.SerAx = append(_beedf.SerAx, _afgaf)
			default:
				_a.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0065l\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0050\u006c\u006f\u0074\u0041\u0072e\u0061\u0043\u0068\u006f\u0069\u0063\u0065\u0031\u0020\u0025\u0076", _fcea.Name)
				if _eebed := d.Skip(); _eebed != nil {
					return _eebed
				}
			}
		case _e.EndElement:
			break _bbcaa
		case _e.CharData:
		}
	}
	return nil
}

// Validate validates the CT_Orientation and its children
func (_dfba *CT_Orientation) Validate() error {
	return _dfba.ValidateWithPath("\u0043\u0054\u005f\u004f\u0072\u0069\u0065\u006e\u0074a\u0074\u0069\u006f\u006e")
}

// Validate validates the CT_LegendPos and its children
func (_fdgc *CT_LegendPos) Validate() error {
	return _fdgc.ValidateWithPath("\u0043\u0054\u005fL\u0065\u0067\u0065\u006e\u0064\u0050\u006f\u0073")
}
func (_befd *CT_BarSer) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_ceaad := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0069d\u0078"}}
	e.EncodeElement(_befd.Idx, _ceaad)
	_fcaa := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006f\u0072\u0064\u0065\u0072"}}
	e.EncodeElement(_befd.Order, _fcaa)
	if _befd.Tx != nil {
		_gagg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078"}}
		e.EncodeElement(_befd.Tx, _gagg)
	}
	if _befd.SpPr != nil {
		_gea := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_befd.SpPr, _gea)
	}
	if _befd.InvertIfNegative != nil {
		_cgf := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0069n\u0076\u0065\u0072\u0074\u0049f\u004e\u0065g\u0061\u0074\u0069\u0076\u0065"}}
		e.EncodeElement(_befd.InvertIfNegative, _cgf)
	}
	if _befd.PictureOptions != nil {
		_cfef := _e.StartElement{Name: _e.Name{Local: "\u0063\u003ap\u0069\u0063\u0074u\u0072\u0065\u004f\u0070\u0074\u0069\u006f\u006e\u0073"}}
		e.EncodeElement(_befd.PictureOptions, _cfef)
	}
	if _befd.DPt != nil {
		_gbg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0064P\u0074"}}
		for _, _gaef := range _befd.DPt {
			e.EncodeElement(_gaef, _gbg)
		}
	}
	if _befd.DLbls != nil {
		_efee := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_befd.DLbls, _efee)
	}
	if _befd.Trendline != nil {
		_affb := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0074\u0072\u0065\u006e\u0064\u006c\u0069\u006e\u0065"}}
		for _, _bfbg := range _befd.Trendline {
			e.EncodeElement(_bfbg, _affb)
		}
	}
	if _befd.ErrBars != nil {
		_cega := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0065\u0072\u0072\u0042\u0061\u0072s"}}
		e.EncodeElement(_befd.ErrBars, _cega)
	}
	if _befd.Cat != nil {
		_cfadd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0063a\u0074"}}
		e.EncodeElement(_befd.Cat, _cfadd)
	}
	if _befd.Val != nil {
		_afgg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0076a\u006c"}}
		e.EncodeElement(_befd.Val, _afgg)
	}
	if _befd.Shape != nil {
		_gdb := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0073\u0068\u0061\u0070\u0065"}}
		e.EncodeElement(_befd.Shape, _gdb)
	}
	if _befd.ExtLst != nil {
		_dbg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_befd.ExtLst, _dbg)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_CatAx and its children
func (_dfgb *CT_CatAx) Validate() error {
	return _dfgb.ValidateWithPath("\u0043\u0054\u005f\u0043\u0061\u0074\u0041\u0078")
}

// ValidateWithPath validates the CT_Protection and its children, prefixing error messages with path
func (_bfgf *CT_Protection) ValidateWithPath(path string) error {
	if _bfgf.ChartObject != nil {
		if _fdcag := _bfgf.ChartObject.ValidateWithPath(path + "\u002f\u0043\u0068a\u0072\u0074\u004f\u0062\u006a\u0065\u0063\u0074"); _fdcag != nil {
			return _fdcag
		}
	}
	if _bfgf.Data != nil {
		if _bfacef := _bfgf.Data.ValidateWithPath(path + "\u002f\u0044\u0061t\u0061"); _bfacef != nil {
			return _bfacef
		}
	}
	if _bfgf.Formatting != nil {
		if _eafd := _bfgf.Formatting.ValidateWithPath(path + "/\u0046\u006f\u0072\u006d\u0061\u0074\u0074\u0069\u006e\u0067"); _eafd != nil {
			return _eafd
		}
	}
	if _bfgf.Selection != nil {
		if _fcdcg := _bfgf.Selection.ValidateWithPath(path + "\u002f\u0053\u0065\u006c\u0065\u0063\u0074\u0069\u006f\u006e"); _fcdcg != nil {
			return _fcdcg
		}
	}
	if _bfgf.UserInterface != nil {
		if _ceef := _bfgf.UserInterface.ValidateWithPath(path + "\u002f\u0055\u0073\u0065\u0072\u0049\u006e\u0074\u0065r\u0066\u0061\u0063\u0065"); _ceef != nil {
			return _ceef
		}
	}
	return nil
}
func (_fagab *CT_SerAx) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_fagab.AxId = NewCT_UnsignedInt()
	_fagab.Scaling = NewCT_Scaling()
	_fagab.AxPos = NewCT_AxPos()
	_fagab.CrossAx = NewCT_UnsignedInt()
_aedc:
	for {
		_cefga, _gcff := d.Token()
		if _gcff != nil {
			return _gcff
		}
		switch _adae := _cefga.(type) {
		case _e.StartElement:
			switch _adae.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				if _eegbc := d.DecodeElement(_fagab.AxId, &_adae); _eegbc != nil {
					return _eegbc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073c\u0061\u006c\u0069\u006e\u0067"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073c\u0061\u006c\u0069\u006e\u0067"}:
				if _afcae := d.DecodeElement(_fagab.Scaling, &_adae); _afcae != nil {
					return _afcae
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}:
				_fagab.Delete = NewCT_Boolean()
				if _fecdb := d.DecodeElement(_fagab.Delete, &_adae); _fecdb != nil {
					return _fecdb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0050o\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0050o\u0073"}:
				if _bgdeg := d.DecodeElement(_fagab.AxPos, &_adae); _bgdeg != nil {
					return _bgdeg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}:
				_fagab.MajorGridlines = NewCT_ChartLines()
				if _cadbg := d.DecodeElement(_fagab.MajorGridlines, &_adae); _cadbg != nil {
					return _cadbg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}:
				_fagab.MinorGridlines = NewCT_ChartLines()
				if _fgcaa := d.DecodeElement(_fagab.MinorGridlines, &_adae); _fgcaa != nil {
					return _fgcaa
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0074l\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0074l\u0065"}:
				_fagab.Title = NewCT_Title()
				if _fgfg := d.DecodeElement(_fagab.Title, &_adae); _fgfg != nil {
					return _fgfg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}:
				_fagab.NumFmt = NewCT_NumFmt()
				if _cdbfb := d.DecodeElement(_fagab.NumFmt, &_adae); _cdbfb != nil {
					return _cdbfb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}:
				_fagab.MajorTickMark = NewCT_TickMark()
				if _bfeaa := d.DecodeElement(_fagab.MajorTickMark, &_adae); _bfeaa != nil {
					return _bfeaa
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}:
				_fagab.MinorTickMark = NewCT_TickMark()
				if _dcegg := d.DecodeElement(_fagab.MinorTickMark, &_adae); _dcegg != nil {
					return _dcegg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}:
				_fagab.TickLblPos = NewCT_TickLblPos()
				if _ffba := d.DecodeElement(_fagab.TickLblPos, &_adae); _ffba != nil {
					return _ffba
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_fagab.SpPr = _f.NewCT_ShapeProperties()
				if _dbefd := d.DecodeElement(_fagab.SpPr, &_adae); _dbefd != nil {
					return _dbefd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_fagab.TxPr = _f.NewCT_TextBody()
				if _gadef := d.DecodeElement(_fagab.TxPr, &_adae); _gadef != nil {
					return _gadef
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0041\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0041\u0078"}:
				if _dfffe := d.DecodeElement(_fagab.CrossAx, &_adae); _dfffe != nil {
					return _dfffe
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073"}:
				_fagab.Choice = NewEG_AxSharedChoice()
				if _gefed := d.DecodeElement(&_fagab.Choice.Crosses, &_adae); _gefed != nil {
					return _gefed
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073\u0041t"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073\u0041t"}:
				_fagab.Choice = NewEG_AxSharedChoice()
				if _bbgbe := d.DecodeElement(&_fagab.Choice.CrossesAt, &_adae); _bbgbe != nil {
					return _bbgbe
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "t\u0069\u0063\u006b\u004c\u0062\u006c\u0053\u006b\u0069\u0070"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "t\u0069\u0063\u006b\u004c\u0062\u006c\u0053\u006b\u0069\u0070"}:
				_fagab.TickLblSkip = NewCT_Skip()
				if _dgeff := d.DecodeElement(_fagab.TickLblSkip, &_adae); _dgeff != nil {
					return _dgeff
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0063k\u004d\u0061\u0072\u006b\u0053\u006b\u0069\u0070"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0063k\u004d\u0061\u0072\u006b\u0053\u006b\u0069\u0070"}:
				_fagab.TickMarkSkip = NewCT_Skip()
				if _gegg := d.DecodeElement(_fagab.TickMarkSkip, &_adae); _gegg != nil {
					return _gegg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_fagab.ExtLst = NewCT_ExtensionList()
				if _gedc := d.DecodeElement(_fagab.ExtLst, &_adae); _gedc != nil {
					return _gedc
				}
			default:
				_a.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006eg\u0020\u0075\u006es\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0053\u0065\u0072\u0041\u0078\u0020\u0025\u0076", _adae.Name)
				if _afdf := d.Skip(); _afdf != nil {
					return _afdf
				}
			}
		case _e.EndElement:
			break _aedc
		case _e.CharData:
		}
	}
	return nil
}

type ST_LegendPos byte

func (_ccfbb ST_Orientation) String() string {
	switch _ccfbb {
	case 0:
		return ""
	case 1:
		return "\u006d\u0061\u0078\u004d\u0069\u006e"
	case 2:
		return "\u006d\u0069\u006e\u004d\u0061\u0078"
	}
	return ""
}
func (_gcac *CT_RelId) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _egfac := range start.Attr {
		if _egfac.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073" && _egfac.Name.Local == "\u0069\u0064" || _egfac.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f\u002fp\u0075\u0072\u006c.\u006f\u0063\u006cc\u002e\u006fr\u0067\u002f\u006f\u006f\u0078\u006dl\u002fof\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073" && _egfac.Name.Local == "\u0069\u0064" {
			_adege, _cedb := _egfac.Value, error(nil)
			if _cedb != nil {
				return _cedb
			}
			_gcac.IdAttr = _adege
			continue
		}
	}
	for {
		_acbgd, _agabg := d.Token()
		if _agabg != nil {
			return _b.Errorf("p\u0061r\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fR\u0065\u006c\u0049\u0064: \u0025\u0073", _agabg)
		}
		if _gddgd, _affc := _acbgd.(_e.EndElement); _affc && _gddgd.Name == start.Name {
			break
		}
	}
	return nil
}

type CT_Boolean struct{ ValAttr *bool }

func NewCT_DispUnits() *CT_DispUnits { _gcb := &CT_DispUnits{}; return _gcb }
func (_gfbacf *CT_StrData) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_fdbge:
	for {
		_fgged, _effff := d.Token()
		if _effff != nil {
			return _effff
		}
		switch _bccad := _fgged.(type) {
		case _e.StartElement:
			switch _bccad.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070t\u0043\u006f\u0075\u006e\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070t\u0043\u006f\u0075\u006e\u0074"}:
				_gfbacf.PtCount = NewCT_UnsignedInt()
				if _gdfdb := d.DecodeElement(_gfbacf.PtCount, &_bccad); _gdfdb != nil {
					return _gdfdb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0074"}:
				_gfdaf := NewCT_StrVal()
				if _bgcb := d.DecodeElement(_gfdaf, &_bccad); _bgcb != nil {
					return _bgcb
				}
				_gfbacf.Pt = append(_gfbacf.Pt, _gfdaf)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_gfbacf.ExtLst = NewCT_ExtensionList()
				if _cbfe := d.DecodeElement(_gfbacf.ExtLst, &_bccad); _cbfe != nil {
					return _cbfe
				}
			default:
				_a.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006ce\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005fS\u0074\u0072\u0044\u0061\u0074\u0061\u0020\u0025\u0076", _bccad.Name)
				if _dcab := d.Skip(); _dcab != nil {
					return _dcab
				}
			}
		case _e.EndElement:
			break _fdbge
		case _e.CharData:
		}
	}
	return nil
}
func (_ggd *CT_BandFmt) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_edad := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0069d\u0078"}}
	e.EncodeElement(_ggd.Idx, _edad)
	if _ggd.SpPr != nil {
		_cfg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_ggd.SpPr, _cfg)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}
func NewCT_RadarSer() *CT_RadarSer {
	_dfgceb := &CT_RadarSer{}
	_dfgceb.Idx = NewCT_UnsignedInt()
	_dfgceb.Order = NewCT_UnsignedInt()
	return _dfgceb
}
func (_acef *CT_StockChart) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_adeea:
	for {
		_ffdbg, _gceg := d.Token()
		if _gceg != nil {
			return _gceg
		}
		switch _cffef := _ffdbg.(type) {
		case _e.StartElement:
			switch _cffef.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_ebca := NewCT_LineSer()
				if _afce := d.DecodeElement(_ebca, &_cffef); _afce != nil {
					return _afce
				}
				_acef.Ser = append(_acef.Ser, _ebca)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_acef.DLbls = NewCT_DLbls()
				if _bbbb := d.DecodeElement(_acef.DLbls, &_cffef); _bbbb != nil {
					return _bbbb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064r\u006f\u0070\u004c\u0069\u006e\u0065s"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064r\u006f\u0070\u004c\u0069\u006e\u0065s"}:
				_acef.DropLines = NewCT_ChartLines()
				if _bdfa := d.DecodeElement(_acef.DropLines, &_cffef); _bdfa != nil {
					return _bdfa
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0068\u0069\u004c\u006f\u0077\u004c\u0069\u006e\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0068\u0069\u004c\u006f\u0077\u004c\u0069\u006e\u0065\u0073"}:
				_acef.HiLowLines = NewCT_ChartLines()
				if _gccdec := d.DecodeElement(_acef.HiLowLines, &_cffef); _gccdec != nil {
					return _gccdec
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0075\u0070\u0044\u006f\u0077\u006e\u0042\u0061\u0072\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0075\u0070\u0044\u006f\u0077\u006e\u0042\u0061\u0072\u0073"}:
				_acef.UpDownBars = NewCT_UpDownBars()
				if _gcfeg := d.DecodeElement(_acef.UpDownBars, &_cffef); _gcfeg != nil {
					return _gcfeg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				_gebgc := NewCT_UnsignedInt()
				if _dcbbg := d.DecodeElement(_gebgc, &_cffef); _dcbbg != nil {
					return _dcbbg
				}
				_acef.AxId = append(_acef.AxId, _gebgc)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_acef.ExtLst = NewCT_ExtensionList()
				if _effd := d.DecodeElement(_acef.ExtLst, &_cffef); _effd != nil {
					return _effd
				}
			default:
				_a.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0053t\u006f\u0063\u006b\u0043\u0068\u0061\u0072\u0074 \u0025\u0076", _cffef.Name)
				if _cegaeb := d.Skip(); _cegaeb != nil {
					return _cegaeb
				}
			}
		case _e.EndElement:
			break _adeea
		case _e.CharData:
		}
	}
	return nil
}
func (_ccba ST_SizeRepresents) ValidateWithPath(path string) error {
	switch _ccba {
	case 0, 1, 2:
	default:
		return _b.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_ccba))
	}
	return nil
}
func (_feefb *ST_OfPieType) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_fbceed, _gfaf := d.Token()
	if _gfaf != nil {
		return _gfaf
	}
	if _abfg, _cedbf := _fbceed.(_e.EndElement); _cedbf && _abfg.Name == start.Name {
		*_feefb = 1
		return nil
	}
	if _dfbfe, _gcefe := _fbceed.(_e.CharData); !_gcefe {
		return _b.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _fbceed)
	} else {
		switch string(_dfbfe) {
		case "":
			*_feefb = 0
		case "\u0070\u0069\u0065":
			*_feefb = 1
		case "\u0062\u0061\u0072":
			*_feefb = 2
		}
	}
	_fbceed, _gfaf = d.Token()
	if _gfaf != nil {
		return _gfaf
	}
	if _gdeeg, _acefg := _fbceed.(_e.EndElement); _acefg && _gdeeg.Name == start.Name {
		return nil
	}
	return _b.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _fbceed)
}
func ParseUnionST_Thickness(s string) (ST_Thickness, error) {
	if ST_ThicknessPercentPatternRe.MatchString(s) {
		return ST_Thickness{ST_ThicknessPercent: &s}, nil
	}
	_gggg, _eddc := _c.ParseUint(s, 10, 32)
	if _eddc != nil {
		return ST_Thickness{}, _eddc
	}
	_eefg := uint32(_gggg)
	return ST_Thickness{Uint32: &_eefg}, nil
}
func (_gdfaa *ST_Thickness) Validate() error { return _gdfaa.ValidateWithPath("") }
func (_gfab *CT_FirstSliceAng) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _gccf := range start.Attr {
		if _gccf.Name.Local == "\u0076\u0061\u006c" {
			_becg, _gffa := _c.ParseUint(_gccf.Value, 10, 16)
			if _gffa != nil {
				return _gffa
			}
			_bbee := uint16(_becg)
			_gfab.ValAttr = &_bbee
			continue
		}
	}
	for {
		_bcda, _gbgc := d.Token()
		if _gbgc != nil {
			return _b.Errorf("\u0070\u0061\u0072\u0073i\u006e\u0067\u0020\u0043\u0054\u005f\u0046\u0069\u0072\u0073t\u0053l\u0069\u0063\u0065\u0041\u006e\u0067\u003a \u0025\u0073", _gbgc)
		}
		if _agcb, _gbad := _bcda.(_e.EndElement); _gbad && _agcb.Name == start.Name {
			break
		}
	}
	return nil
}
func (_gcefg ST_TrendlineType) ValidateWithPath(path string) error {
	switch _gcefg {
	case 0, 1, 2, 3, 4, 5, 6:
	default:
		return _b.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_gcefg))
	}
	return nil
}
func (_edfcc ST_PictureFormat) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_edfcc.String(), start)
}

type ST_BarDir byte

const (
	ST_LayoutTargetUnset ST_LayoutTarget = 0
	ST_LayoutTargetInner ST_LayoutTarget = 1
	ST_LayoutTargetOuter ST_LayoutTarget = 2
)

// Validate validates the CT_PlotAreaChoice1 and its children
func (_fdafa *CT_PlotAreaChoice1) Validate() error {
	return _fdafa.ValidateWithPath("\u0043T\u005fP\u006c\u006f\u0074\u0041\u0072e\u0061\u0043h\u006f\u0069\u0063\u0065\u0031")
}
func (_egacf ST_DLblPos) Validate() error { return _egacf.ValidateWithPath("") }
func (_afgb *CT_BubbleScale) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _afgb.ValAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0076\u0061\u006c"}, Value: _b.Sprintf("\u0025\u0076", *_afgb.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_SecondPieSize and its children, prefixing error messages with path
func (_abcdag *CT_SecondPieSize) ValidateWithPath(path string) error {
	if _abcdag.ValAttr != nil {
		if _gafbc := _abcdag.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _gafbc != nil {
			return _gafbc
		}
	}
	return nil
}
func (_dagab *CT_PlotAreaChoice) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _dagab.AreaChart != nil {
		_cfdg := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0061\u0072\u0065\u0061\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_dagab.AreaChart, _cfdg)
	}
	if _dagab.Area3DChart != nil {
		_bebfg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0061\u0072\u0065\u0061\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_dagab.Area3DChart, _bebfg)
	}
	if _dagab.LineChart != nil {
		_gaffe := _e.StartElement{Name: _e.Name{Local: "c\u003a\u006c\u0069\u006e\u0065\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_dagab.LineChart, _gaffe)
	}
	if _dagab.Line3DChart != nil {
		_fgdfe := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006c\u0069\u006e\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_dagab.Line3DChart, _fgdfe)
	}
	if _dagab.StockChart != nil {
		_adagf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073t\u006f\u0063\u006b\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_dagab.StockChart, _adagf)
	}
	if _dagab.RadarChart != nil {
		_gbdf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0072a\u0064\u0061\u0072\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_dagab.RadarChart, _gbdf)
	}
	if _dagab.ScatterChart != nil {
		_afff := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0063\u0061\u0074\u0074\u0065\u0072C\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_dagab.ScatterChart, _afff)
	}
	if _dagab.PieChart != nil {
		_aaeed := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0070\u0069\u0065\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_dagab.PieChart, _aaeed)
	}
	if _dagab.Pie3DChart != nil {
		_acedb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0070i\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_dagab.Pie3DChart, _acedb)
	}
	if _dagab.DoughnutChart != nil {
		_bbceg := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064o\u0075\u0067\u0068\u006e\u0075\u0074\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_dagab.DoughnutChart, _bbceg)
	}
	if _dagab.BarChart != nil {
		_caae := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0062\u0061\u0072\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_dagab.BarChart, _caae)
	}
	if _dagab.Bar3DChart != nil {
		_dacca := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0062a\u0072\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_dagab.Bar3DChart, _dacca)
	}
	if _dagab.OfPieChart != nil {
		_fbcgc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006ff\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_dagab.OfPieChart, _fbcgc)
	}
	if _dagab.SurfaceChart != nil {
		_bbcb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0075\u0072\u0066\u0061\u0063\u0065C\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_dagab.SurfaceChart, _bbcb)
	}
	if _dagab.Surface3DChart != nil {
		_eaafd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003as\u0075\u0072\u0066a\u0063\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_dagab.Surface3DChart, _eaafd)
	}
	if _dagab.BubbleChart != nil {
		_edcbe := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0062\u0075\u0062\u0062\u006c\u0065\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_dagab.BubbleChart, _edcbe)
	}
	return nil
}

// Validate validates the CT_LblOffset and its children
func (_bddef *CT_LblOffset) Validate() error {
	return _bddef.ValidateWithPath("\u0043\u0054\u005fL\u0062\u006c\u004f\u0066\u0066\u0073\u0065\u0074")
}
func (_abbf *CT_LineChart) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_gaeac := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}}
	e.EncodeElement(_abbf.Grouping, _gaeac)
	if _abbf.VaryColors != nil {
		_adb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_abbf.VaryColors, _adb)
	}
	if _abbf.Ser != nil {
		_dbgc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _dbab := range _abbf.Ser {
			e.EncodeElement(_dbab, _dbgc)
		}
	}
	if _abbf.DLbls != nil {
		_faee := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_abbf.DLbls, _faee)
	}
	if _abbf.DropLines != nil {
		_bgdg := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0064\u0072\u006f\u0070\u004c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_abbf.DropLines, _bgdg)
	}
	if _abbf.HiLowLines != nil {
		_cegd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0068i\u004c\u006f\u0077\u004c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_abbf.HiLowLines, _cegd)
	}
	if _abbf.UpDownBars != nil {
		_cdeg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0075p\u0044\u006f\u0077\u006e\u0042\u0061\u0072\u0073"}}
		e.EncodeElement(_abbf.UpDownBars, _cdeg)
	}
	if _abbf.Marker != nil {
		_bbab := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006d\u0061\u0072\u006b\u0065\u0072"}}
		e.EncodeElement(_abbf.Marker, _bbab)
	}
	if _abbf.Smooth != nil {
		_debdg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u006d\u006f\u006f\u0074\u0068"}}
		e.EncodeElement(_abbf.Smooth, _debdg)
	}
	_fada := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	for _, _geaeg := range _abbf.AxId {
		e.EncodeElement(_geaeg, _fada)
	}
	if _abbf.ExtLst != nil {
		_affgf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_abbf.ExtLst, _affgf)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_SizeRepresents and its children, prefixing error messages with path
func (_ffdde *CT_SizeRepresents) ValidateWithPath(path string) error {
	if _edbf := _ffdde.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _edbf != nil {
		return _edbf
	}
	return nil
}

type CT_LayoutMode struct{ ValAttr ST_LayoutMode }

func (_fggf *CT_LegendPos) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _fbffb := range start.Attr {
		if _fbffb.Name.Local == "\u0076\u0061\u006c" {
			_fggf.ValAttr.UnmarshalXMLAttr(_fbffb)
			continue
		}
	}
	for {
		_dcbe, _eebg := d.Token()
		if _eebg != nil {
			return _b.Errorf("\u0070a\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005f\u004c\u0065g\u0065\u006e\u0064\u0050\u006f\u0073\u003a\u0020\u0025\u0073", _eebg)
		}
		if _eefde, _accff := _dcbe.(_e.EndElement); _accff && _eefde.Name == start.Name {
			break
		}
	}
	return nil
}
func (_egbc *ST_LegendPos) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_egbc = 0
	case "\u0062":
		*_egbc = 1
	case "\u0074\u0072":
		*_egbc = 2
	case "\u006c":
		*_egbc = 3
	case "\u0072":
		*_egbc = 4
	case "\u0074":
		*_egbc = 5
	}
	return nil
}
func (_bfa *CT_BubbleChart) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_befc:
	for {
		_cfgc, _cecd := d.Token()
		if _cecd != nil {
			return _cecd
		}
		switch _feee := _cfgc.(type) {
		case _e.StartElement:
			switch _feee.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_bfa.VaryColors = NewCT_Boolean()
				if _cfec := d.DecodeElement(_bfa.VaryColors, &_feee); _cfec != nil {
					return _cfec
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_ffee := NewCT_BubbleSer()
				if _dfc := d.DecodeElement(_ffee, &_feee); _dfc != nil {
					return _dfc
				}
				_bfa.Ser = append(_bfa.Ser, _ffee)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_bfa.DLbls = NewCT_DLbls()
				if _eadf := d.DecodeElement(_bfa.DLbls, &_feee); _eadf != nil {
					return _eadf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0075\u0062\u0062\u006c\u0065\u0033\u0044"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0075\u0062\u0062\u006c\u0065\u0033\u0044"}:
				_bfa.Bubble3D = NewCT_Boolean()
				if _edf := d.DecodeElement(_bfa.Bubble3D, &_feee); _edf != nil {
					return _edf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "b\u0075\u0062\u0062\u006c\u0065\u0053\u0063\u0061\u006c\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "b\u0075\u0062\u0062\u006c\u0065\u0053\u0063\u0061\u006c\u0065"}:
				_bfa.BubbleScale = NewCT_BubbleScale()
				if _decb := d.DecodeElement(_bfa.BubbleScale, &_feee); _decb != nil {
					return _decb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004e\u0065\u0067\u0042\u0075b\u0062\u006c\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004e\u0065\u0067\u0042\u0075b\u0062\u006c\u0065\u0073"}:
				_bfa.ShowNegBubbles = NewCT_Boolean()
				if _gafg := d.DecodeElement(_bfa.ShowNegBubbles, &_feee); _gafg != nil {
					return _gafg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0069\u007a\u0065\u0052\u0065\u0070\u0072\u0065s\u0065\u006e\u0074\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0069\u007a\u0065\u0052\u0065\u0070\u0072\u0065s\u0065\u006e\u0074\u0073"}:
				_bfa.SizeRepresents = NewCT_SizeRepresents()
				if _aaeb := d.DecodeElement(_bfa.SizeRepresents, &_feee); _aaeb != nil {
					return _aaeb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				_ecfed := NewCT_UnsignedInt()
				if _dgdc := d.DecodeElement(_ecfed, &_feee); _dgdc != nil {
					return _dgdc
				}
				_bfa.AxId = append(_bfa.AxId, _ecfed)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_bfa.ExtLst = NewCT_ExtensionList()
				if _effe := d.DecodeElement(_bfa.ExtLst, &_feee); _effe != nil {
					return _effe
				}
			default:
				_a.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069n\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006et\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0042\u0075\u0062\u0062\u006c\u0065\u0043h\u0061r\u0074\u0020\u0025\u0076", _feee.Name)
				if _acfc := d.Skip(); _acfc != nil {
					return _acfc
				}
			}
		case _e.EndElement:
			break _befc
		case _e.CharData:
		}
	}
	return nil
}
func (_bebab *CT_Double) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0076\u0061\u006c"}, Value: _b.Sprintf("\u0025\u0076", _bebab.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}
func (_debe *ST_ErrValType) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_debe = 0
	case "\u0063\u0075\u0073\u0074":
		*_debe = 1
	case "\u0066\u0069\u0078\u0065\u0064\u0056\u0061\u006c":
		*_debe = 2
	case "\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u0061\u0067\u0065":
		*_debe = 3
	case "\u0073\u0074\u0064\u0044\u0065\u0076":
		*_debe = 4
	case "\u0073\u0074\u0064\u0045\u0072\u0072":
		*_debe = 5
	}
	return nil
}
func (_ecege ST_LayoutTarget) ValidateWithPath(path string) error {
	switch _ecege {
	case 0, 1, 2:
	default:
		return _b.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_ecege))
	}
	return nil
}
func (_cbgbf ST_ErrValType) Validate() error { return _cbgbf.ValidateWithPath("") }

type CT_RadarChart struct {
	RadarStyle *CT_RadarStyle
	VaryColors *CT_Boolean
	Ser        []*CT_RadarSer
	DLbls      *CT_DLbls
	AxId       []*CT_UnsignedInt
	ExtLst     *CT_ExtensionList
}

func (_cfbaf ST_RadarStyle) Validate() error { return _cfbaf.ValidateWithPath("") }
func (_ebfc *CT_RotX) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _cffce := range start.Attr {
		if _cffce.Name.Local == "\u0076\u0061\u006c" {
			_agddc, _eabda := _c.ParseInt(_cffce.Value, 10, 8)
			if _eabda != nil {
				return _eabda
			}
			_abdbd := int8(_agddc)
			_ebfc.ValAttr = &_abdbd
			continue
		}
	}
	for {
		_ebgf, _dbdgc := d.Token()
		if _dbdgc != nil {
			return _b.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0043\u0054\u005f\u0052\u006f\u0074\u0058\u003a\u0020\u0025\u0073", _dbdgc)
		}
		if _dbfc, _bfeeb := _ebgf.(_e.EndElement); _bfeeb && _dbfc.Name == start.Name {
			break
		}
	}
	return nil
}
func (_dfbdg ST_ErrBarType) Validate() error { return _dfbdg.ValidateWithPath("") }
func NewCT_ErrBars() *CT_ErrBars {
	_ffaa := &CT_ErrBars{}
	_ffaa.ErrBarType = NewCT_ErrBarType()
	_ffaa.ErrValType = NewCT_ErrValType()
	return _ffaa
}

// Validate validates the CT_LayoutMode and its children
func (_dagca *CT_LayoutMode) Validate() error {
	return _dagca.ValidateWithPath("\u0043\u0054\u005f\u004c\u0061\u0079\u006f\u0075\u0074\u004d\u006f\u0064\u0065")
}
func (_dfedd *ST_Orientation) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_aeeg, _gbga := d.Token()
	if _gbga != nil {
		return _gbga
	}
	if _cafgf, _baagbg := _aeeg.(_e.EndElement); _baagbg && _cafgf.Name == start.Name {
		*_dfedd = 1
		return nil
	}
	if _adcab, _efgcd := _aeeg.(_e.CharData); !_efgcd {
		return _b.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _aeeg)
	} else {
		switch string(_adcab) {
		case "":
			*_dfedd = 0
		case "\u006d\u0061\u0078\u004d\u0069\u006e":
			*_dfedd = 1
		case "\u006d\u0069\u006e\u004d\u0061\u0078":
			*_dfedd = 2
		}
	}
	_aeeg, _gbga = d.Token()
	if _gbga != nil {
		return _gbga
	}
	if _geebe, _daccb := _aeeg.(_e.EndElement); _daccb && _geebe.Name == start.Name {
		return nil
	}
	return _b.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _aeeg)
}
func (_dffcf ST_OfPieType) ValidateWithPath(path string) error {
	switch _dffcf {
	case 0, 1, 2:
	default:
		return _b.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_dffcf))
	}
	return nil
}

type ST_PageSetupOrientation byte

func (_gfgbe ST_TimeUnit) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_gbedd := _e.Attr{}
	_gbedd.Name = name
	switch _gfgbe {
	case ST_TimeUnitUnset:
		_gbedd.Value = ""
	case ST_TimeUnitDays:
		_gbedd.Value = "\u0064\u0061\u0079\u0073"
	case ST_TimeUnitMonths:
		_gbedd.Value = "\u006d\u006f\u006e\u0074\u0068\u0073"
	case ST_TimeUnitYears:
		_gbedd.Value = "\u0079\u0065\u0061r\u0073"
	}
	return _gbedd, nil
}

const (
	ST_ErrBarTypeUnset ST_ErrBarType = 0
	ST_ErrBarTypeBoth  ST_ErrBarType = 1
	ST_ErrBarTypeMinus ST_ErrBarType = 2
	ST_ErrBarTypePlus  ST_ErrBarType = 3
)

type ST_Crosses byte

func (_dbead ST_BarDir) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_gbbgd := _e.Attr{}
	_gbbgd.Name = name
	switch _dbead {
	case ST_BarDirUnset:
		_gbbgd.Value = ""
	case ST_BarDirBar:
		_gbbgd.Value = "\u0062\u0061\u0072"
	case ST_BarDirCol:
		_gbbgd.Value = "\u0063\u006f\u006c"
	}
	return _gbbgd, nil
}
func (_geacf *CT_TrendlineLbl) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_acfdfc:
	for {
		_caccf, _bdda := d.Token()
		if _bdda != nil {
			return _bdda
		}
		switch _bdggd := _caccf.(type) {
		case _e.StartElement:
			switch _bdggd.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}:
				_geacf.Layout = NewCT_Layout()
				if _abfa := d.DecodeElement(_geacf.Layout, &_bdggd); _abfa != nil {
					return _abfa
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				_geacf.Tx = NewCT_Tx()
				if _cecgba := d.DecodeElement(_geacf.Tx, &_bdggd); _cecgba != nil {
					return _cecgba
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}:
				_geacf.NumFmt = NewCT_NumFmt()
				if _cgcca := d.DecodeElement(_geacf.NumFmt, &_bdggd); _cgcca != nil {
					return _cgcca
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_geacf.SpPr = _f.NewCT_ShapeProperties()
				if _fdfda := d.DecodeElement(_geacf.SpPr, &_bdggd); _fdfda != nil {
					return _fdfda
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_geacf.TxPr = _f.NewCT_TextBody()
				if _ecbc := d.DecodeElement(_geacf.TxPr, &_bdggd); _ecbc != nil {
					return _ecbc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_geacf.ExtLst = NewCT_ExtensionList()
				if _gfgc := d.DecodeElement(_geacf.ExtLst, &_bdggd); _gfgc != nil {
					return _gfgc
				}
			default:
				_a.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074e\u0064\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0054\u0072\u0065n\u0064\u006c\u0069\u006e\u0065\u004c\u0062\u006c\u0020\u0025\u0076", _bdggd.Name)
				if _caada := d.Skip(); _caada != nil {
					return _caada
				}
			}
		case _e.EndElement:
			break _acfdfc
		case _e.CharData:
		}
	}
	return nil
}
func (_eeaf *CT_Title) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _eeaf.Tx != nil {
		_cdaff := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078"}}
		e.EncodeElement(_eeaf.Tx, _cdaff)
	}
	if _eeaf.Layout != nil {
		_efggd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006c\u0061\u0079\u006f\u0075\u0074"}}
		e.EncodeElement(_eeaf.Layout, _efggd)
	}
	if _eeaf.Overlay != nil {
		_acgg := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006f\u0076\u0065\u0072\u006c\u0061y"}}
		e.EncodeElement(_eeaf.Overlay, _acgg)
	}
	if _eeaf.SpPr != nil {
		_begbd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_eeaf.SpPr, _begbd)
	}
	if _eeaf.TxPr != nil {
		_abaa := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_eeaf.TxPr, _abaa)
	}
	if _eeaf.ExtLst != nil {
		_cafcg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_eeaf.ExtLst, _cafcg)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}
func (_daagd *CT_MarkerStyle) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	_ddabc, _dafgde := _daagd.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
	if _dafgde != nil {
		return _dafgde
	}
	start.Attr = append(start.Attr, _ddabc)
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}
func NewCT_LblOffset() *CT_LblOffset { _becb := &CT_LblOffset{}; return _becb }
func (_dbfcb ST_HoleSize) String() string {
	if _dbfcb.ST_HoleSizePercent != nil {
		return _b.Sprintf("\u0025\u0076", *_dbfcb.ST_HoleSizePercent)
	}
	if _dbfcb.ST_HoleSizeUByte != nil {
		return _b.Sprintf("\u0025\u0076", *_dbfcb.ST_HoleSizeUByte)
	}
	return ""
}

// ValidateWithPath validates the EG_SerShared and its children, prefixing error messages with path
func (_bbff *EG_SerShared) ValidateWithPath(path string) error {
	if _ffdcb := _bbff.Idx.ValidateWithPath(path + "\u002f\u0049\u0064\u0078"); _ffdcb != nil {
		return _ffdcb
	}
	if _gccfbe := _bbff.Order.ValidateWithPath(path + "\u002f\u004f\u0072\u0064\u0065\u0072"); _gccfbe != nil {
		return _gccfbe
	}
	if _bbff.Tx != nil {
		if _dbceec := _bbff.Tx.ValidateWithPath(path + "\u002f\u0054\u0078"); _dbceec != nil {
			return _dbceec
		}
	}
	if _bbff.SpPr != nil {
		if _cfacbb := _bbff.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _cfacbb != nil {
			return _cfacbb
		}
	}
	return nil
}
func (_dgfbae ST_ErrValType) ValidateWithPath(path string) error {
	switch _dgfbae {
	case 0, 1, 2, 3, 4, 5:
	default:
		return _b.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_dgfbae))
	}
	return nil
}
func (_fffc *CT_Orientation) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _fdecc := range start.Attr {
		if _fdecc.Name.Local == "\u0076\u0061\u006c" {
			_fffc.ValAttr.UnmarshalXMLAttr(_fdecc)
			continue
		}
	}
	for {
		_agega, _dggbd := d.Token()
		if _dggbd != nil {
			return _b.Errorf("\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fO\u0072\u0069\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e:\u0020\u0025\u0073", _dggbd)
		}
		if _cfced, _eagf := _agega.(_e.EndElement); _eagf && _cfced.Name == start.Name {
			break
		}
	}
	return nil
}
func (_cabe *CT_DPt) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_cabe.Idx = NewCT_UnsignedInt()
_adgf:
	for {
		_cbgdb, _bdce := d.Token()
		if _bdce != nil {
			return _bdce
		}
		switch _eced := _cbgdb.(type) {
		case _e.StartElement:
			switch _eced.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}:
				if _gccc := d.DecodeElement(_cabe.Idx, &_eced); _gccc != nil {
					return _gccc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u006ev\u0065\u0072\u0074I\u0066\u004e\u0065\u0067\u0061\u0074\u0069\u0076\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u006ev\u0065\u0072\u0074I\u0066\u004e\u0065\u0067\u0061\u0074\u0069\u0076\u0065"}:
				_cabe.InvertIfNegative = NewCT_Boolean()
				if _fbbg := d.DecodeElement(_cabe.InvertIfNegative, &_eced); _fbbg != nil {
					return _fbbg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u0072\u006b\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u0072\u006b\u0065\u0072"}:
				_cabe.Marker = NewCT_Marker()
				if _cfcd := d.DecodeElement(_cabe.Marker, &_eced); _cfcd != nil {
					return _cfcd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0075\u0062\u0062\u006c\u0065\u0033\u0044"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0075\u0062\u0062\u006c\u0065\u0033\u0044"}:
				_cabe.Bubble3D = NewCT_Boolean()
				if _fgeeg := d.DecodeElement(_cabe.Bubble3D, &_eced); _fgeeg != nil {
					return _fgeeg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065x\u0070\u006c\u006f\u0073\u0069\u006fn"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065x\u0070\u006c\u006f\u0073\u0069\u006fn"}:
				_cabe.Explosion = NewCT_UnsignedInt()
				if _deca := d.DecodeElement(_cabe.Explosion, &_eced); _deca != nil {
					return _deca
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_cabe.SpPr = _f.NewCT_ShapeProperties()
				if _ecge := d.DecodeElement(_cabe.SpPr, &_eced); _ecge != nil {
					return _ecge
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0063\u0074\u0075\u0072\u0065\u004f\u0070t\u0069\u006f\u006e\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0063\u0074\u0075\u0072\u0065\u004f\u0070t\u0069\u006f\u006e\u0073"}:
				_cabe.PictureOptions = NewCT_PictureOptions()
				if _ebccc := d.DecodeElement(_cabe.PictureOptions, &_eced); _ebccc != nil {
					return _ebccc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_cabe.ExtLst = NewCT_ExtensionList()
				if _abba := d.DecodeElement(_cabe.ExtLst, &_eced); _abba != nil {
					return _abba
				}
			default:
				_a.Log.Debug("\u0073\u006b\u0069\u0070\u0070i\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0044\u0050\u0074\u0020\u0025\u0076", _eced.Name)
				if _dafg := d.Skip(); _dafg != nil {
					return _dafg
				}
			}
		case _e.EndElement:
			break _adgf
		case _e.CharData:
		}
	}
	return nil
}
func (_ccgfa ST_Overlap) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _ccgfa.ST_OverlapPercent != nil {
		e.EncodeToken(_e.CharData(*_ccgfa.ST_OverlapPercent))
	}
	if _ccgfa.ST_OverlapByte != nil {
		e.EncodeToken(_e.CharData(_b.Sprintf("\u0025\u0064", *_ccgfa.ST_OverlapByte)))
	}
	return e.EncodeToken(_e.EndElement{Name: start.Name})
}
func (_eeefc *CT_Overlap) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _dgafe := range start.Attr {
		if _dgafe.Name.Local == "\u0076\u0061\u006c" {
			_aafb, _dcbf := ParseUnionST_Overlap(_dgafe.Value)
			if _dcbf != nil {
				return _dcbf
			}
			_eeefc.ValAttr = &_aafb
			continue
		}
	}
	for {
		_dcga, _acedc := d.Token()
		if _acedc != nil {
			return _b.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0043\u0054\u005f\u004f\u0076\u0065\u0072\u006c\u0061\u0070\u003a\u0020%\u0073", _acedc)
		}
		if _dfbaf, _fgaa := _dcga.(_e.EndElement); _fgaa && _dfbaf.Name == start.Name {
			break
		}
	}
	return nil
}

// Validate validates the CT_BarGrouping and its children
func (_ccff *CT_BarGrouping) Validate() error {
	return _ccff.ValidateWithPath("\u0043\u0054\u005f\u0042\u0061\u0072\u0047\u0072\u006fu\u0070\u0069\u006e\u0067")
}
func (_dffeg *ST_GapAmount) Validate() error { return _dffeg.ValidateWithPath("") }
func (_ggaff *CT_DispUnits) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_bebb:
	for {
		_ddacc, _caaa := d.Token()
		if _caaa != nil {
			return _caaa
		}
		switch _gddb := _ddacc.(type) {
		case _e.StartElement:
			switch _gddb.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0075\u0073\u0074\u0055\u006e\u0069\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0075\u0073\u0074\u0055\u006e\u0069\u0074"}:
				_ggaff.Choice = NewCT_DispUnitsChoice()
				if _ebedd := d.DecodeElement(&_ggaff.Choice.CustUnit, &_gddb); _ebedd != nil {
					return _ebedd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "b\u0075\u0069\u006c\u0074\u0049\u006e\u0055\u006e\u0069\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "b\u0075\u0069\u006c\u0074\u0049\u006e\u0055\u006e\u0069\u0074"}:
				_ggaff.Choice = NewCT_DispUnitsChoice()
				if _ddg := d.DecodeElement(&_ggaff.Choice.BuiltInUnit, &_gddb); _ddg != nil {
					return _ddg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0069\u0073p\u0055\u006e\u0069\u0074\u0073\u004c\u0062\u006c"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0069\u0073p\u0055\u006e\u0069\u0074\u0073\u004c\u0062\u006c"}:
				_ggaff.DispUnitsLbl = NewCT_DispUnitsLbl()
				if _gdfg := d.DecodeElement(_ggaff.DispUnitsLbl, &_gddb); _gdfg != nil {
					return _gdfg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_ggaff.ExtLst = NewCT_ExtensionList()
				if _gfbd := d.DecodeElement(_ggaff.ExtLst, &_gddb); _gfbd != nil {
					return _gfbd
				}
			default:
				_a.Log.Debug("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075n\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054_D\u0069\u0073p\u0055\u006e\u0069\u0074\u0073\u0020\u0025\u0076", _gddb.Name)
				if _bbbd := d.Skip(); _bbbd != nil {
					return _bbbd
				}
			}
		case _e.EndElement:
			break _bebb
		case _e.CharData:
		}
	}
	return nil
}
func NewCT_ExternalData() *CT_ExternalData { _bead := &CT_ExternalData{}; return _bead }
func (_cgffe *CT_DateAx) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_fbbd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	e.EncodeElement(_cgffe.AxId, _fbbd)
	_cbfd := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0073\u0063\u0061\u006c\u0069\u006eg"}}
	e.EncodeElement(_cgffe.Scaling, _cbfd)
	if _cgffe.Delete != nil {
		_ddeb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0064\u0065\u006c\u0065\u0074\u0065"}}
		e.EncodeElement(_cgffe.Delete, _ddeb)
	}
	_gedd := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0061\u0078\u0050\u006f\u0073"}}
	e.EncodeElement(_cgffe.AxPos, _gedd)
	if _cgffe.MajorGridlines != nil {
		_acfe := _e.StartElement{Name: _e.Name{Local: "\u0063\u003am\u0061\u006a\u006fr\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_cgffe.MajorGridlines, _acfe)
	}
	if _cgffe.MinorGridlines != nil {
		_fbag := _e.StartElement{Name: _e.Name{Local: "\u0063\u003am\u0069\u006e\u006fr\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_cgffe.MinorGridlines, _fbag)
	}
	if _cgffe.Title != nil {
		_cefb := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0074\u0069\u0074\u006c\u0065"}}
		e.EncodeElement(_cgffe.Title, _cefb)
	}
	if _cgffe.NumFmt != nil {
		_bdbg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u0046\u006d\u0074"}}
		e.EncodeElement(_cgffe.NumFmt, _bdbg)
	}
	if _cgffe.MajorTickMark != nil {
		_eefd := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006da\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}}
		e.EncodeElement(_cgffe.MajorTickMark, _eefd)
	}
	if _cgffe.MinorTickMark != nil {
		_eedeg := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006di\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}}
		e.EncodeElement(_cgffe.MinorTickMark, _eedeg)
	}
	if _cgffe.TickLblPos != nil {
		_gabb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074i\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}}
		e.EncodeElement(_cgffe.TickLblPos, _gabb)
	}
	if _cgffe.SpPr != nil {
		_gace := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_cgffe.SpPr, _gace)
	}
	if _cgffe.TxPr != nil {
		_eafe := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_cgffe.TxPr, _eafe)
	}
	_gebd := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0063\u0072\u006f\u0073\u0073\u0041x"}}
	e.EncodeElement(_cgffe.CrossAx, _gebd)
	if _cgffe.Choice != nil {
		_cgffe.Choice.MarshalXML(e, _e.StartElement{})
	}
	if _cgffe.Auto != nil {
		_afdb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0061\u0075\u0074\u006f"}}
		e.EncodeElement(_cgffe.Auto, _afdb)
	}
	if _cgffe.LblOffset != nil {
		_afgbb := _e.StartElement{Name: _e.Name{Local: "c\u003a\u006c\u0062\u006c\u004f\u0066\u0066\u0073\u0065\u0074"}}
		e.EncodeElement(_cgffe.LblOffset, _afgbb)
	}
	if _cgffe.BaseTimeUnit != nil {
		_ecec := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0062\u0061\u0073\u0065\u0054\u0069\u006de\u0055\u006e\u0069\u0074"}}
		e.EncodeElement(_cgffe.BaseTimeUnit, _ecec)
	}
	if _cgffe.MajorUnit != nil {
		_cgcg := _e.StartElement{Name: _e.Name{Local: "c\u003a\u006d\u0061\u006a\u006f\u0072\u0055\u006e\u0069\u0074"}}
		e.EncodeElement(_cgffe.MajorUnit, _cgcg)
	}
	if _cgffe.MajorTimeUnit != nil {
		_gead := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006da\u006a\u006f\u0072\u0054\u0069\u006d\u0065\u0055\u006e\u0069\u0074"}}
		e.EncodeElement(_cgffe.MajorTimeUnit, _gead)
	}
	if _cgffe.MinorUnit != nil {
		_cfac := _e.StartElement{Name: _e.Name{Local: "c\u003a\u006d\u0069\u006e\u006f\u0072\u0055\u006e\u0069\u0074"}}
		e.EncodeElement(_cgffe.MinorUnit, _cfac)
	}
	if _cgffe.MinorTimeUnit != nil {
		_cacf := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006di\u006e\u006f\u0072\u0054\u0069\u006d\u0065\u0055\u006e\u0069\u0074"}}
		e.EncodeElement(_cgffe.MinorTimeUnit, _cacf)
	}
	if _cgffe.ExtLst != nil {
		_cbgdf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_cgffe.ExtLst, _cbgdf)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_Boolean and its children
func (_eef *CT_Boolean) Validate() error {
	return _eef.ValidateWithPath("\u0043\u0054\u005f\u0042\u006f\u006f\u006c\u0065\u0061\u006e")
}

type ST_SizeRepresents byte

func NewCT_LegendPos() *CT_LegendPos          { _fbeg := &CT_LegendPos{}; return _fbeg }
func (_ebgcg ST_BuiltInUnit) Validate() error { return _ebgcg.ValidateWithPath("") }
func NewCT_DLbls() *CT_DLbls                  { _adce := &CT_DLbls{}; return _adce }
func (_bfca *CT_TickMark) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _dfad := range start.Attr {
		if _dfad.Name.Local == "\u0076\u0061\u006c" {
			_bfca.ValAttr.UnmarshalXMLAttr(_dfad)
			continue
		}
	}
	for {
		_efbac, _fdff := d.Token()
		if _fdff != nil {
			return _b.Errorf("\u0070\u0061\u0072si\u006e\u0067\u0020\u0043\u0054\u005f\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b\u003a\u0020\u0025\u0073", _fdff)
		}
		if _gfdbg, _decee := _efbac.(_e.EndElement); _decee && _gfdbg.Name == start.Name {
			break
		}
	}
	return nil
}

type EG_BarChartShared struct {
	BarDir     *CT_BarDir
	Grouping   *CT_BarGrouping
	VaryColors *CT_Boolean
	Ser        []*CT_BarSer
	DLbls      *CT_DLbls
}

const (
	ST_PictureFormatUnset      ST_PictureFormat = 0
	ST_PictureFormatStretch    ST_PictureFormat = 1
	ST_PictureFormatStack      ST_PictureFormat = 2
	ST_PictureFormatStackScale ST_PictureFormat = 3
)

func (_cac *CT_AxisUnit) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_cac.ValAttr = 0 + 1
	for _, _gbe := range start.Attr {
		if _gbe.Name.Local == "\u0076\u0061\u006c" {
			_afbb, _fgea := _c.ParseFloat(_gbe.Value, 64)
			if _fgea != nil {
				return _fgea
			}
			_cac.ValAttr = _afbb
			continue
		}
	}
	for {
		_ebg, _ggbc := d.Token()
		if _ggbc != nil {
			return _b.Errorf("\u0070\u0061\u0072si\u006e\u0067\u0020\u0043\u0054\u005f\u0041\u0078\u0069\u0073\u0055\u006e\u0069\u0074\u003a\u0020\u0025\u0073", _ggbc)
		}
		if _fcee, _accf := _ebg.(_e.EndElement); _accf && _fcee.Name == start.Name {
			break
		}
	}
	return nil
}

type CT_BarGrouping struct{ ValAttr ST_BarGrouping }
type CT_SecondPieSize struct{ ValAttr *ST_SecondPieSize }

func (_acdee *CT_ErrBars) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_acdee.ErrBarType = NewCT_ErrBarType()
	_acdee.ErrValType = NewCT_ErrValType()
_bdebe:
	for {
		_ffdbd, _fcae := d.Token()
		if _fcae != nil {
			return _fcae
		}
		switch _dcdf := _ffdbd.(type) {
		case _e.StartElement:
			switch _dcdf.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0072\u0072\u0044\u0069\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0072\u0072\u0044\u0069\u0072"}:
				_acdee.ErrDir = NewCT_ErrDir()
				if _abeb := d.DecodeElement(_acdee.ErrDir, &_dcdf); _abeb != nil {
					return _abeb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0072\u0072\u0042\u0061\u0072\u0054\u0079\u0070\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0072\u0072\u0042\u0061\u0072\u0054\u0079\u0070\u0065"}:
				if _cddf := d.DecodeElement(_acdee.ErrBarType, &_dcdf); _cddf != nil {
					return _cddf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0072\u0072\u0056\u0061\u006c\u0054\u0079\u0070\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0072\u0072\u0056\u0061\u006c\u0054\u0079\u0070\u0065"}:
				if _gcbc := d.DecodeElement(_acdee.ErrValType, &_dcdf); _gcbc != nil {
					return _gcbc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u006f\u0045\u006e\u0064\u0043\u0061\u0070"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u006f\u0045\u006e\u0064\u0043\u0061\u0070"}:
				_acdee.NoEndCap = NewCT_Boolean()
				if _bedf := d.DecodeElement(_acdee.NoEndCap, &_dcdf); _bedf != nil {
					return _bedf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u006c\u0075\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u006c\u0075\u0073"}:
				_acdee.Plus = NewCT_NumDataSource()
				if _febae := d.DecodeElement(_acdee.Plus, &_dcdf); _febae != nil {
					return _febae
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006eu\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006eu\u0073"}:
				_acdee.Minus = NewCT_NumDataSource()
				if _fccff := d.DecodeElement(_acdee.Minus, &_dcdf); _fccff != nil {
					return _fccff
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006c"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006c"}:
				_acdee.Val = NewCT_Double()
				if _bfag := d.DecodeElement(_acdee.Val, &_dcdf); _bfag != nil {
					return _bfag
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_acdee.SpPr = _f.NewCT_ShapeProperties()
				if _egfc := d.DecodeElement(_acdee.SpPr, &_dcdf); _egfc != nil {
					return _egfc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_acdee.ExtLst = NewCT_ExtensionList()
				if _eabcc := d.DecodeElement(_acdee.ExtLst, &_dcdf); _eabcc != nil {
					return _eabcc
				}
			default:
				_a.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006ce\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005fE\u0072\u0072\u0042\u0061\u0072\u0073\u0020\u0025\u0076", _dcdf.Name)
				if _fdeca := d.Skip(); _fdeca != nil {
					return _fdeca
				}
			}
		case _e.EndElement:
			break _bdebe
		case _e.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the EG_BarChartShared and its children, prefixing error messages with path
func (_dacgf *EG_BarChartShared) ValidateWithPath(path string) error {
	if _ffge := _dacgf.BarDir.ValidateWithPath(path + "\u002fB\u0061\u0072\u0044\u0069\u0072"); _ffge != nil {
		return _ffge
	}
	if _dacgf.Grouping != nil {
		if _egfad := _dacgf.Grouping.ValidateWithPath(path + "\u002fG\u0072\u006f\u0075\u0070\u0069\u006eg"); _egfad != nil {
			return _egfad
		}
	}
	if _dacgf.VaryColors != nil {
		if _fcdd := _dacgf.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _fcdd != nil {
			return _fcdd
		}
	}
	for _dedfc, _egagc := range _dacgf.Ser {
		if _ccdg := _egagc.ValidateWithPath(_b.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _dedfc)); _ccdg != nil {
			return _ccdg
		}
	}
	if _dacgf.DLbls != nil {
		if _dbdee := _dacgf.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _dbdee != nil {
			return _dbdee
		}
	}
	return nil
}
func (_bcgaf *ST_PageSetupOrientation) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_bcgaf = 0
	case "\u0064e\u0066\u0061\u0075\u006c\u0074":
		*_bcgaf = 1
	case "\u0070\u006f\u0072\u0074\u0072\u0061\u0069\u0074":
		*_bcgaf = 2
	case "\u006ca\u006e\u0064\u0073\u0063\u0061\u0070e":
		*_bcgaf = 3
	}
	return nil
}

type ST_Grouping byte
type CT_StrData struct {
	PtCount *CT_UnsignedInt
	Pt      []*CT_StrVal
	ExtLst  *CT_ExtensionList
}
type CT_RadarStyle struct{ ValAttr ST_RadarStyle }
type CT_NumDataSource struct{ Choice *CT_NumDataSourceChoice }

func (_gacb *CT_Line3DChart) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_eeab := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}}
	e.EncodeElement(_gacb.Grouping, _eeab)
	if _gacb.VaryColors != nil {
		_bcffc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_gacb.VaryColors, _bcffc)
	}
	if _gacb.Ser != nil {
		_bfacg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _dffad := range _gacb.Ser {
			e.EncodeElement(_dffad, _bfacg)
		}
	}
	if _gacb.DLbls != nil {
		_bfbga := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_gacb.DLbls, _bfbga)
	}
	if _gacb.DropLines != nil {
		_cagb := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0064\u0072\u006f\u0070\u004c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_gacb.DropLines, _cagb)
	}
	if _gacb.GapDepth != nil {
		_fdde := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0067\u0061\u0070\u0044\u0065\u0070\u0074\u0068"}}
		e.EncodeElement(_gacb.GapDepth, _fdde)
	}
	_eeabb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	for _, _ecdbc := range _gacb.AxId {
		e.EncodeElement(_ecdbc, _eeabb)
	}
	if _gacb.ExtLst != nil {
		_ccega := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_gacb.ExtLst, _ccega)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}
func (_efaae *ST_Thickness) ValidateWithPath(path string) error {
	_deefb := []string{}
	if _efaae.ST_ThicknessPercent != nil {
		_deefb = append(_deefb, "\u0053\u0054\u005f\u0054hi\u0063\u006b\u006e\u0065\u0073\u0073\u0050\u0065\u0072\u0063\u0065\u006e\u0074")
	}
	if _efaae.Uint32 != nil {
		_deefb = append(_deefb, "\u0055\u0069\u006e\u0074\u0033\u0032")
	}
	if len(_deefb) > 1 {
		return _b.Errorf("%\u0073\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u006d\u0065\u006d\u0062\u0065r\u0073\u0020\u0073e\u0074:\u0020\u0025\u0076", path, _deefb)
	}
	return nil
}

type EG_LegendEntryData struct{ TxPr *_f.CT_TextBody }

func (_fabed *CT_UpDownBars) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _fabed.GapWidth != nil {
		_aceae := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0067\u0061\u0070\u0057\u0069\u0064\u0074\u0068"}}
		e.EncodeElement(_fabed.GapWidth, _aceae)
	}
	if _fabed.UpBars != nil {
		_edfe := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0075\u0070\u0042\u0061\u0072\u0073"}}
		e.EncodeElement(_fabed.UpBars, _edfe)
	}
	if _fabed.DownBars != nil {
		_fggac := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0064\u006f\u0077\u006e\u0042\u0061\u0072\u0073"}}
		e.EncodeElement(_fabed.DownBars, _fggac)
	}
	if _fabed.ExtLst != nil {
		_accfe := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_fabed.ExtLst, _accfe)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_PrintSettings and its children, prefixing error messages with path
func (_bbdde *CT_PrintSettings) ValidateWithPath(path string) error {
	if _bbdde.HeaderFooter != nil {
		if _edea := _bbdde.HeaderFooter.ValidateWithPath(path + "\u002f\u0048\u0065\u0061\u0064\u0065\u0072\u0046\u006f\u006f\u0074\u0065\u0072"); _edea != nil {
			return _edea
		}
	}
	if _bbdde.PageMargins != nil {
		if _ddebf := _bbdde.PageMargins.ValidateWithPath(path + "\u002f\u0050\u0061g\u0065\u004d\u0061\u0072\u0067\u0069\u006e\u0073"); _ddebf != nil {
			return _ddebf
		}
	}
	if _bbdde.PageSetup != nil {
		if _agbe := _bbdde.PageSetup.ValidateWithPath(path + "\u002f\u0050\u0061\u0067\u0065\u0053\u0065\u0074\u0075\u0070"); _agbe != nil {
			return _agbe
		}
	}
	if _bbdde.LegacyDrawingHF != nil {
		if _gcge := _bbdde.LegacyDrawingHF.ValidateWithPath(path + "\u002f\u004ce\u0067\u0061\u0063y\u0044\u0072\u0061\u0077\u0069\u006e\u0067\u0048\u0046"); _gcge != nil {
			return _gcge
		}
	}
	return nil
}
func ParseUnionST_HPercent(s string) (ST_HPercent, error) {
	if ST_HPercentWithSymbolPatternRe.MatchString(s) {
		return ST_HPercent{ST_HPercentWithSymbol: &s}, nil
	}
	_bacff, _bbcee := _c.ParseUint(s, 10, 16)
	if _bbcee != nil {
		return ST_HPercent{}, _bbcee
	}
	_bfegf := uint16(_bacff)
	return ST_HPercent{ST_HPercentUShort: &_bfegf}, nil
}

// ValidateWithPath validates the EG_AxShared and its children, prefixing error messages with path
func (_bgcf *EG_AxShared) ValidateWithPath(path string) error {
	if _aagc := _bgcf.AxId.ValidateWithPath(path + "\u002f\u0041\u0078I\u0064"); _aagc != nil {
		return _aagc
	}
	if _eagec := _bgcf.Scaling.ValidateWithPath(path + "\u002f\u0053\u0063\u0061\u006c\u0069\u006e\u0067"); _eagec != nil {
		return _eagec
	}
	if _bgcf.Delete != nil {
		if _abddb := _bgcf.Delete.ValidateWithPath(path + "\u002fD\u0065\u006c\u0065\u0074\u0065"); _abddb != nil {
			return _abddb
		}
	}
	if _gfgge := _bgcf.AxPos.ValidateWithPath(path + "\u002f\u0041\u0078\u0050\u006f\u0073"); _gfgge != nil {
		return _gfgge
	}
	if _bgcf.MajorGridlines != nil {
		if _fbccd := _bgcf.MajorGridlines.ValidateWithPath(path + "\u002fM\u0061j\u006f\u0072\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"); _fbccd != nil {
			return _fbccd
		}
	}
	if _bgcf.MinorGridlines != nil {
		if _dgge := _bgcf.MinorGridlines.ValidateWithPath(path + "\u002fM\u0069n\u006f\u0072\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"); _dgge != nil {
			return _dgge
		}
	}
	if _bgcf.Title != nil {
		if _ceca := _bgcf.Title.ValidateWithPath(path + "\u002f\u0054\u0069\u0074\u006c\u0065"); _ceca != nil {
			return _ceca
		}
	}
	if _bgcf.NumFmt != nil {
		if _geea := _bgcf.NumFmt.ValidateWithPath(path + "\u002fN\u0075\u006d\u0046\u006d\u0074"); _geea != nil {
			return _geea
		}
	}
	if _bgcf.MajorTickMark != nil {
		if _acgae := _bgcf.MajorTickMark.ValidateWithPath(path + "\u002f\u004d\u0061\u006a\u006f\u0072\u0054\u0069\u0063k\u004d\u0061\u0072\u006b"); _acgae != nil {
			return _acgae
		}
	}
	if _bgcf.MinorTickMark != nil {
		if _ffdbgg := _bgcf.MinorTickMark.ValidateWithPath(path + "\u002f\u004d\u0069\u006e\u006f\u0072\u0054\u0069\u0063k\u004d\u0061\u0072\u006b"); _ffdbgg != nil {
			return _ffdbgg
		}
	}
	if _bgcf.TickLblPos != nil {
		if _gbcb := _bgcf.TickLblPos.ValidateWithPath(path + "/\u0054\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"); _gbcb != nil {
			return _gbcb
		}
	}
	if _bgcf.SpPr != nil {
		if _afefdb := _bgcf.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _afefdb != nil {
			return _afefdb
		}
	}
	if _bgcf.TxPr != nil {
		if _abbb := _bgcf.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _abbb != nil {
			return _abbb
		}
	}
	if _fgffe := _bgcf.CrossAx.ValidateWithPath(path + "\u002f\u0043\u0072\u006f\u0073\u0073\u0041\u0078"); _fgffe != nil {
		return _fgffe
	}
	if _bgcf.Choice != nil {
		if _gdbaf := _bgcf.Choice.ValidateWithPath(path + "\u002fC\u0068\u006f\u0069\u0063\u0065"); _gdbaf != nil {
			return _gdbaf
		}
	}
	return nil
}
func NewCT_StrData() *CT_StrData { _bdgae := &CT_StrData{}; return _bdgae }
func (_gdced *CT_PictureStackUnit) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_gdced.ValAttr = 0 + 1
	for _, _aeagc := range start.Attr {
		if _aeagc.Name.Local == "\u0076\u0061\u006c" {
			_aegb, _cfcg := _c.ParseFloat(_aeagc.Value, 64)
			if _cfcg != nil {
				return _cfcg
			}
			_gdced.ValAttr = _aegb
			continue
		}
	}
	for {
		_dddac, _baagb := d.Token()
		if _baagb != nil {
			return _b.Errorf("\u0070\u0061\u0072s\u0069\u006e\u0067\u0020C\u0054\u005f\u0050\u0069\u0063\u0074\u0075r\u0065\u0053\u0074\u0061\u0063\u006b\u0055\u006e\u0069\u0074\u003a\u0020\u0025\u0073", _baagb)
		}
		if _egag, _cegg := _dddac.(_e.EndElement); _cegg && _egag.Name == start.Name {
			break
		}
	}
	return nil
}
func NewCT_ChartSpace() *CT_ChartSpace {
	_cceg := &CT_ChartSpace{}
	_cceg.Chart = NewCT_Chart()
	return _cceg
}

const (
	ST_ScatterStyleUnset        ST_ScatterStyle = 0
	ST_ScatterStyleNone         ST_ScatterStyle = 1
	ST_ScatterStyleLine         ST_ScatterStyle = 2
	ST_ScatterStyleLineMarker   ST_ScatterStyle = 3
	ST_ScatterStyleMarker       ST_ScatterStyle = 4
	ST_ScatterStyleSmooth       ST_ScatterStyle = 5
	ST_ScatterStyleSmoothMarker ST_ScatterStyle = 6
)

func (_ddbbd ST_DispBlanksAs) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_fcdfc := _e.Attr{}
	_fcdfc.Name = name
	switch _ddbbd {
	case ST_DispBlanksAsUnset:
		_fcdfc.Value = ""
	case ST_DispBlanksAsSpan:
		_fcdfc.Value = "\u0073\u0070\u0061\u006e"
	case ST_DispBlanksAsGap:
		_fcdfc.Value = "\u0067\u0061\u0070"
	case ST_DispBlanksAsZero:
		_fcdfc.Value = "\u007a\u0065\u0072\u006f"
	}
	return _fcdfc, nil
}
func (_fefbg *CT_PageSetup) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _fgaag := range start.Attr {
		if _fgaag.Name.Local == "\u0070a\u0070\u0065\u0072\u0053\u0069\u007ae" {
			_gabe, _ecee := _c.ParseUint(_fgaag.Value, 10, 32)
			if _ecee != nil {
				return _ecee
			}
			_ffed := uint32(_gabe)
			_fefbg.PaperSizeAttr = &_ffed
			continue
		}
		if _fgaag.Name.Local == "p\u0061\u0070\u0065\u0072\u0048\u0065\u0069\u0067\u0068\u0074" {
			_gcgba, _beda := _fgaag.Value, error(nil)
			if _beda != nil {
				return _beda
			}
			_fefbg.PaperHeightAttr = &_gcgba
			continue
		}
		if _fgaag.Name.Local == "\u0070\u0061\u0070\u0065\u0072\u0057\u0069\u0064\u0074\u0068" {
			_ddcff, _edgbc := _fgaag.Value, error(nil)
			if _edgbc != nil {
				return _edgbc
			}
			_fefbg.PaperWidthAttr = &_ddcff
			continue
		}
		if _fgaag.Name.Local == "\u0066i\u0072s\u0074\u0050\u0061\u0067\u0065\u004e\u0075\u006d\u0062\u0065\u0072" {
			_fdge, _cgbaa := _c.ParseUint(_fgaag.Value, 10, 32)
			if _cgbaa != nil {
				return _cgbaa
			}
			_cfgbd := uint32(_fdge)
			_fefbg.FirstPageNumberAttr = &_cfgbd
			continue
		}
		if _fgaag.Name.Local == "o\u0072\u0069\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e" {
			_fefbg.OrientationAttr.UnmarshalXMLAttr(_fgaag)
			continue
		}
		if _fgaag.Name.Local == "\u0062\u006c\u0061\u0063\u006b\u0041\u006e\u0064\u0057\u0068\u0069\u0074\u0065" {
			_ddaac, _adbb := _c.ParseBool(_fgaag.Value)
			if _adbb != nil {
				return _adbb
			}
			_fefbg.BlackAndWhiteAttr = &_ddaac
			continue
		}
		if _fgaag.Name.Local == "\u0064\u0072\u0061f\u0074" {
			_deaa, _dbeg := _c.ParseBool(_fgaag.Value)
			if _dbeg != nil {
				return _dbeg
			}
			_fefbg.DraftAttr = &_deaa
			continue
		}
		if _fgaag.Name.Local == "\u0075s\u0065F\u0069\u0072\u0073\u0074\u0050a\u0067\u0065N\u0075\u006d\u0062\u0065\u0072" {
			_ddfge, _degff := _c.ParseBool(_fgaag.Value)
			if _degff != nil {
				return _degff
			}
			_fefbg.UseFirstPageNumberAttr = &_ddfge
			continue
		}
		if _fgaag.Name.Local == "\u0068\u006f\u0072\u0069\u007a\u006f\u006e\u0074\u0061\u006c\u0044\u0070\u0069" {
			_accb, _dfgce := _c.ParseInt(_fgaag.Value, 10, 32)
			if _dfgce != nil {
				return _dfgce
			}
			_efda := int32(_accb)
			_fefbg.HorizontalDpiAttr = &_efda
			continue
		}
		if _fgaag.Name.Local == "v\u0065\u0072\u0074\u0069\u0063\u0061\u006c\u0044\u0070\u0069" {
			_bdcc, _bccac := _c.ParseInt(_fgaag.Value, 10, 32)
			if _bccac != nil {
				return _bccac
			}
			_bffd := int32(_bdcc)
			_fefbg.VerticalDpiAttr = &_bffd
			continue
		}
		if _fgaag.Name.Local == "\u0063\u006f\u0070\u0069\u0065\u0073" {
			_ffce, _aedb := _c.ParseUint(_fgaag.Value, 10, 32)
			if _aedb != nil {
				return _aedb
			}
			_aeebe := uint32(_ffce)
			_fefbg.CopiesAttr = &_aeebe
			continue
		}
	}
	for {
		_facc, _bbcg := d.Token()
		if _bbcg != nil {
			return _b.Errorf("\u0070a\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005f\u0050\u0061g\u0065\u0053\u0065\u0074\u0075\u0070\u003a\u0020\u0025\u0073", _bbcg)
		}
		if _cdaf, _gdafa := _facc.(_e.EndElement); _gdafa && _cdaf.Name == start.Name {
			break
		}
	}
	return nil
}

type CT_Perspective struct{ ValAttr *uint8 }
type CT_DepthPercent struct{ ValAttr *ST_DepthPercent }
type CT_Surface3DChart struct {
	Wireframe *CT_Boolean
	Ser       []*CT_SurfaceSer
	BandFmts  *CT_BandFmts
	AxId      []*CT_UnsignedInt
	ExtLst    *CT_ExtensionList
}

// ValidateWithPath validates the CT_Trendline and its children, prefixing error messages with path
func (_gdffb *CT_Trendline) ValidateWithPath(path string) error {
	if _gdffb.SpPr != nil {
		if _debf := _gdffb.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _debf != nil {
			return _debf
		}
	}
	if _eebec := _gdffb.TrendlineType.ValidateWithPath(path + "\u002f\u0054\u0072\u0065\u006e\u0064\u006c\u0069\u006ee\u0054\u0079\u0070\u0065"); _eebec != nil {
		return _eebec
	}
	if _gdffb.Order != nil {
		if _eaba := _gdffb.Order.ValidateWithPath(path + "\u002f\u004f\u0072\u0064\u0065\u0072"); _eaba != nil {
			return _eaba
		}
	}
	if _gdffb.Period != nil {
		if _ggef := _gdffb.Period.ValidateWithPath(path + "\u002fP\u0065\u0072\u0069\u006f\u0064"); _ggef != nil {
			return _ggef
		}
	}
	if _gdffb.Forward != nil {
		if _deea := _gdffb.Forward.ValidateWithPath(path + "\u002f\u0046\u006f\u0072\u0077\u0061\u0072\u0064"); _deea != nil {
			return _deea
		}
	}
	if _gdffb.Backward != nil {
		if _gbaba := _gdffb.Backward.ValidateWithPath(path + "\u002fB\u0061\u0063\u006b\u0077\u0061\u0072d"); _gbaba != nil {
			return _gbaba
		}
	}
	if _gdffb.Intercept != nil {
		if _ecfba := _gdffb.Intercept.ValidateWithPath(path + "\u002f\u0049\u006e\u0074\u0065\u0072\u0063\u0065\u0070\u0074"); _ecfba != nil {
			return _ecfba
		}
	}
	if _gdffb.DispRSqr != nil {
		if _cdaec := _gdffb.DispRSqr.ValidateWithPath(path + "\u002fD\u0069\u0073\u0070\u0052\u0053\u0071r"); _cdaec != nil {
			return _cdaec
		}
	}
	if _gdffb.DispEq != nil {
		if _cdbfbb := _gdffb.DispEq.ValidateWithPath(path + "\u002fD\u0069\u0073\u0070\u0045\u0071"); _cdbfbb != nil {
			return _cdbfbb
		}
	}
	if _gdffb.TrendlineLbl != nil {
		if _ecadc := _gdffb.TrendlineLbl.ValidateWithPath(path + "\u002f\u0054\u0072\u0065\u006e\u0064\u006c\u0069\u006e\u0065\u004c\u0062\u006c"); _ecadc != nil {
			return _ecadc
		}
	}
	if _gdffb.ExtLst != nil {
		if _bgfab := _gdffb.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _bgfab != nil {
			return _bgfab
		}
	}
	return nil
}

const (
	ST_OfPieTypeUnset ST_OfPieType = 0
	ST_OfPieTypePie   ST_OfPieType = 1
	ST_OfPieTypeBar   ST_OfPieType = 2
)

func (_fggcd ST_PictureFormat) Validate() error { return _fggcd.ValidateWithPath("") }

type CT_MultiLvlStrData struct {
	PtCount *CT_UnsignedInt
	Lvl     []*CT_Lvl
	ExtLst  *CT_ExtensionList
}

func NewCT_BarSer() *CT_BarSer {
	_bda := &CT_BarSer{}
	_bda.Idx = NewCT_UnsignedInt()
	_bda.Order = NewCT_UnsignedInt()
	return _bda
}
func NewCT_BarChart() *CT_BarChart { _ccg := &CT_BarChart{}; _ccg.BarDir = NewCT_BarDir(); return _ccg }

// Validate validates the CT_AxPos and its children
func (_bfg *CT_AxPos) Validate() error {
	return _bfg.ValidateWithPath("\u0043\u0054\u005f\u0041\u0078\u0050\u006f\u0073")
}
func (_ecad *CT_DTable) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _ecad.ShowHorzBorder != nil {
		_gagf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003as\u0068\u006f\u0077H\u006f\u0072\u007a\u0042\u006f\u0072\u0064\u0065\u0072"}}
		e.EncodeElement(_ecad.ShowHorzBorder, _gagf)
	}
	if _ecad.ShowVertBorder != nil {
		_bced := _e.StartElement{Name: _e.Name{Local: "\u0063\u003as\u0068\u006f\u0077V\u0065\u0072\u0074\u0042\u006f\u0072\u0064\u0065\u0072"}}
		e.EncodeElement(_ecad.ShowVertBorder, _bced)
	}
	if _ecad.ShowOutline != nil {
		_ggac := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u004f\u0075\u0074\u006c\u0069\u006e\u0065"}}
		e.EncodeElement(_ecad.ShowOutline, _ggac)
	}
	if _ecad.ShowKeys != nil {
		_bccc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u004b\u0065\u0079\u0073"}}
		e.EncodeElement(_ecad.ShowKeys, _bccc)
	}
	if _ecad.SpPr != nil {
		_ccgbc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_ecad.SpPr, _ccgbc)
	}
	if _ecad.TxPr != nil {
		_dae := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_ecad.TxPr, _dae)
	}
	if _ecad.ExtLst != nil {
		_cafe := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_ecad.ExtLst, _cafe)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_TickLblPos and its children, prefixing error messages with path
func (_egea *CT_TickLblPos) ValidateWithPath(path string) error {
	if _gaffb := _egea.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _gaffb != nil {
		return _gaffb
	}
	return nil
}

type CT_UpDownBars struct {
	GapWidth *CT_GapAmount
	UpBars   *CT_UpDownBar
	DownBars *CT_UpDownBar
	ExtLst   *CT_ExtensionList
}
type CT_SplitType struct{ ValAttr ST_SplitType }

func (_aeeed ST_Shape) ValidateWithPath(path string) error {
	switch _aeeed {
	case 0, 1, 2, 3, 4, 5, 6:
	default:
		return _b.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_aeeed))
	}
	return nil
}
func (_gededd ST_DispBlanksAs) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_gededd.String(), start)
}
func NewCT_SerTx() *CT_SerTx {
	_cagda := &CT_SerTx{}
	_cagda.Choice = NewCT_SerTxChoice()
	return _cagda
}

type CT_Scaling struct {
	LogBase     *CT_LogBase
	Orientation *CT_Orientation
	Max         *CT_Double
	Min         *CT_Double
	ExtLst      *CT_ExtensionList
}

func (_efdf *CT_PictureStackUnit) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0076\u0061\u006c"}, Value: _b.Sprintf("\u0025\u0076", _efdf.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}
func (_efbda *ST_TickLblPos) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_gefd, _accfeg := d.Token()
	if _accfeg != nil {
		return _accfeg
	}
	if _fbcgg, _ageege := _gefd.(_e.EndElement); _ageege && _fbcgg.Name == start.Name {
		*_efbda = 1
		return nil
	}
	if _fabbe, _fdabg := _gefd.(_e.CharData); !_fdabg {
		return _b.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _gefd)
	} else {
		switch string(_fabbe) {
		case "":
			*_efbda = 0
		case "\u0068\u0069\u0067\u0068":
			*_efbda = 1
		case "\u006c\u006f\u0077":
			*_efbda = 2
		case "\u006e\u0065\u0078\u0074\u0054\u006f":
			*_efbda = 3
		case "\u006e\u006f\u006e\u0065":
			*_efbda = 4
		}
	}
	_gefd, _accfeg = d.Token()
	if _accfeg != nil {
		return _accfeg
	}
	if _afdbe, _bgece := _gefd.(_e.EndElement); _bgece && _afdbe.Name == start.Name {
		return nil
	}
	return _b.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _gefd)
}
func (_gaece ST_MarkerStyle) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_dadbc := _e.Attr{}
	_dadbc.Name = name
	switch _gaece {
	case ST_MarkerStyleUnset:
		_dadbc.Value = ""
	case ST_MarkerStyleCircle:
		_dadbc.Value = "\u0063\u0069\u0072\u0063\u006c\u0065"
	case ST_MarkerStyleDash:
		_dadbc.Value = "\u0064\u0061\u0073\u0068"
	case ST_MarkerStyleDiamond:
		_dadbc.Value = "\u0064i\u0061\u006d\u006f\u006e\u0064"
	case ST_MarkerStyleDot:
		_dadbc.Value = "\u0064\u006f\u0074"
	case ST_MarkerStyleNone:
		_dadbc.Value = "\u006e\u006f\u006e\u0065"
	case ST_MarkerStylePicture:
		_dadbc.Value = "\u0070i\u0063\u0074\u0075\u0072\u0065"
	case ST_MarkerStylePlus:
		_dadbc.Value = "\u0070\u006c\u0075\u0073"
	case ST_MarkerStyleSquare:
		_dadbc.Value = "\u0073\u0071\u0075\u0061\u0072\u0065"
	case ST_MarkerStyleStar:
		_dadbc.Value = "\u0073\u0074\u0061\u0072"
	case ST_MarkerStyleTriangle:
		_dadbc.Value = "\u0074\u0072\u0069\u0061\u006e\u0067\u006c\u0065"
	case ST_MarkerStyleX:
		_dadbc.Value = "\u0078"
	case ST_MarkerStyleAuto:
		_dadbc.Value = "\u0061\u0075\u0074\u006f"
	}
	return _dadbc, nil
}
func (_eccb *CT_SizeRepresents) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _eccb.ValAttr != ST_SizeRepresentsUnset {
		_dbecd, _aeedb := _eccb.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
		if _aeedb != nil {
			return _aeedb
		}
		start.Attr = append(start.Attr, _dbecd)
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}
func (_fbcab ST_MarkerStyle) ValidateWithPath(path string) error {
	switch _fbcab {
	case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12:
	default:
		return _b.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_fbcab))
	}
	return nil
}
func (_fdfdcc ST_ErrValType) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_fdfdcc.String(), start)
}
func NewCT_BandFmts() *CT_BandFmts { _fdaa := &CT_BandFmts{}; return _fdaa }
func (_ffdaa ST_BarGrouping) ValidateWithPath(path string) error {
	switch _ffdaa {
	case 0, 1, 2, 3, 4:
	default:
		return _b.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_ffdaa))
	}
	return nil
}
func NewCT_FirstSliceAng() *CT_FirstSliceAng { _bdbe := &CT_FirstSliceAng{}; return _bdbe }
func (_agabb *EG_AxSharedChoice) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _agabb.Crosses != nil {
		_gbbfb := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0063\u0072\u006f\u0073\u0073\u0065s"}}
		e.EncodeElement(_agabb.Crosses, _gbbfb)
	}
	if _agabb.CrossesAt != nil {
		_cgdea := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0063\u0072\u006f\u0073\u0073\u0065\u0073\u0041\u0074"}}
		e.EncodeElement(_agabb.CrossesAt, _cgdea)
	}
	return nil
}

// ValidateWithPath validates the CT_PlotAreaChoice1 and its children, prefixing error messages with path
func (_cdbb *CT_PlotAreaChoice1) ValidateWithPath(path string) error {
	for _eggfg, _dgbd := range _cdbb.ValAx {
		if _cege := _dgbd.ValidateWithPath(_b.Sprintf("\u0025\u0073\u002fV\u0061\u006c\u0041\u0078\u005b\u0025\u0064\u005d", path, _eggfg)); _cege != nil {
			return _cege
		}
	}
	for _fgag, _ddcg := range _cdbb.CatAx {
		if _edgdf := _ddcg.ValidateWithPath(_b.Sprintf("\u0025\u0073\u002fC\u0061\u0074\u0041\u0078\u005b\u0025\u0064\u005d", path, _fgag)); _edgdf != nil {
			return _edgdf
		}
	}
	for _feac, _agfg := range _cdbb.DateAx {
		if _gdec := _agfg.ValidateWithPath(_b.Sprintf("\u0025\u0073\u002f\u0044\u0061\u0074\u0065\u0041\u0078\u005b\u0025\u0064\u005d", path, _feac)); _gdec != nil {
			return _gdec
		}
	}
	for _fbfe, _dfgcea := range _cdbb.SerAx {
		if _bdea := _dfgcea.ValidateWithPath(_b.Sprintf("\u0025\u0073\u002fS\u0065\u0072\u0041\u0078\u005b\u0025\u0064\u005d", path, _fbfe)); _bdea != nil {
			return _bdea
		}
	}
	return nil
}

// Validate validates the CT_PrintSettings and its children
func (_geadc *CT_PrintSettings) Validate() error {
	return _geadc.ValidateWithPath("\u0043\u0054_\u0050\u0072\u0069n\u0074\u0053\u0065\u0074\u0074\u0069\u006e\u0067\u0073")
}

const (
	ST_SplitTypeUnset   ST_SplitType = 0
	ST_SplitTypeAuto    ST_SplitType = 1
	ST_SplitTypeCust    ST_SplitType = 2
	ST_SplitTypePercent ST_SplitType = 3
	ST_SplitTypePos     ST_SplitType = 4
	ST_SplitTypeVal     ST_SplitType = 5
)

// Validate validates the CT_BandFmts and its children
func (_baea *CT_BandFmts) Validate() error {
	return _baea.ValidateWithPath("C\u0054\u005f\u0042\u0061\u006e\u0064\u0046\u006d\u0074\u0073")
}

const (
	ST_TickMarkUnset ST_TickMark = 0
	ST_TickMarkCross ST_TickMark = 1
	ST_TickMarkIn    ST_TickMark = 2
	ST_TickMarkNone  ST_TickMark = 3
	ST_TickMarkOut   ST_TickMark = 4
)

func (_fddge *ST_TrendlineType) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_aeedf, _cffbe := d.Token()
	if _cffbe != nil {
		return _cffbe
	}
	if _cgeg, _gbbba := _aeedf.(_e.EndElement); _gbbba && _cgeg.Name == start.Name {
		*_fddge = 1
		return nil
	}
	if _affec, _afedd := _aeedf.(_e.CharData); !_afedd {
		return _b.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _aeedf)
	} else {
		switch string(_affec) {
		case "":
			*_fddge = 0
		case "\u0065\u0078\u0070":
			*_fddge = 1
		case "\u006c\u0069\u006e\u0065\u0061\u0072":
			*_fddge = 2
		case "\u006c\u006f\u0067":
			*_fddge = 3
		case "\u006do\u0076\u0069\u006e\u0067\u0041\u0076g":
			*_fddge = 4
		case "\u0070\u006f\u006c\u0079":
			*_fddge = 5
		case "\u0070\u006f\u0077e\u0072":
			*_fddge = 6
		}
	}
	_aeedf, _cffbe = d.Token()
	if _cffbe != nil {
		return _cffbe
	}
	if _facef, _agggf := _aeedf.(_e.EndElement); _agggf && _facef.Name == start.Name {
		return nil
	}
	return _b.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _aeedf)
}
func (_dcadf ST_AxPos) String() string {
	switch _dcadf {
	case 0:
		return ""
	case 1:
		return "\u0062"
	case 2:
		return "\u006c"
	case 3:
		return "\u0072"
	case 4:
		return "\u0074"
	}
	return ""
}

type ST_BarGrouping byte

func (_dgdbg *EG_AxSharedChoice) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_dddgg:
	for {
		_ebdfd, _aabee := d.Token()
		if _aabee != nil {
			return _aabee
		}
		switch _cfcee := _ebdfd.(type) {
		case _e.StartElement:
			switch _cfcee.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073"}:
				_dgdbg.Crosses = NewCT_Crosses()
				if _dcbec := d.DecodeElement(_dgdbg.Crosses, &_cfcee); _dcbec != nil {
					return _dcbec
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073\u0041t"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073\u0041t"}:
				_dgdbg.CrossesAt = NewCT_Double()
				if _efad := d.DecodeElement(_dgdbg.CrossesAt, &_cfcee); _efad != nil {
					return _efad
				}
			default:
				_a.Log.Debug("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0045\u0047\u005f\u0041\u0078\u0053\u0068\u0061\u0072\u0065\u0064\u0043\u0068\u006f\u0069\u0063\u0065\u0020\u0025\u0076", _cfcee.Name)
				if _ffbcg := d.Skip(); _ffbcg != nil {
					return _ffbcg
				}
			}
		case _e.EndElement:
			break _dddgg
		case _e.CharData:
		}
	}
	return nil
}
func (_dadgd *CT_UnsignedInt) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0076\u0061\u006c"}, Value: _b.Sprintf("\u0025\u0076", _dadgd.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}
func (_adea *CT_Legend) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _adea.LegendPos != nil {
		_gcdf := _e.StartElement{Name: _e.Name{Local: "c\u003a\u006c\u0065\u0067\u0065\u006e\u0064\u0050\u006f\u0073"}}
		e.EncodeElement(_adea.LegendPos, _gcdf)
	}
	if _adea.LegendEntry != nil {
		_eeaea := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006c\u0065\u0067\u0065\u006e\u0064\u0045\u006e\u0074\u0072\u0079"}}
		for _, _gebc := range _adea.LegendEntry {
			e.EncodeElement(_gebc, _eeaea)
		}
	}
	if _adea.Layout != nil {
		_dcccc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006c\u0061\u0079\u006f\u0075\u0074"}}
		e.EncodeElement(_adea.Layout, _dcccc)
	}
	if _adea.Overlay != nil {
		_efgd := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006f\u0076\u0065\u0072\u006c\u0061y"}}
		e.EncodeElement(_adea.Overlay, _efgd)
	}
	if _adea.SpPr != nil {
		_adda := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_adea.SpPr, _adda)
	}
	if _adea.TxPr != nil {
		_bfeg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_adea.TxPr, _bfeg)
	}
	if _adea.ExtLst != nil {
		_gfad := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_adea.ExtLst, _gfad)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_Pie3DChart and its children, prefixing error messages with path
func (_bdbee *CT_Pie3DChart) ValidateWithPath(path string) error {
	if _bdbee.VaryColors != nil {
		if _bded := _bdbee.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _bded != nil {
			return _bded
		}
	}
	for _dcdbd, _deef := range _bdbee.Ser {
		if _fbfa := _deef.ValidateWithPath(_b.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _dcdbd)); _fbfa != nil {
			return _fbfa
		}
	}
	if _bdbee.DLbls != nil {
		if _fbgbc := _bdbee.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _fbgbc != nil {
			return _fbgbc
		}
	}
	if _bdbee.ExtLst != nil {
		if _fggbe := _bdbee.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _fggbe != nil {
			return _fggbe
		}
	}
	return nil
}
func (_aebgg *CT_DateAx) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_aebgg.AxId = NewCT_UnsignedInt()
	_aebgg.Scaling = NewCT_Scaling()
	_aebgg.AxPos = NewCT_AxPos()
	_aebgg.CrossAx = NewCT_UnsignedInt()
_fgfb:
	for {
		_dbff, _gbbb := d.Token()
		if _gbbb != nil {
			return _gbbb
		}
		switch _acea := _dbff.(type) {
		case _e.StartElement:
			switch _acea.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				if _ccde := d.DecodeElement(_aebgg.AxId, &_acea); _ccde != nil {
					return _ccde
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073c\u0061\u006c\u0069\u006e\u0067"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073c\u0061\u006c\u0069\u006e\u0067"}:
				if _fdcga := d.DecodeElement(_aebgg.Scaling, &_acea); _fdcga != nil {
					return _fdcga
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}:
				_aebgg.Delete = NewCT_Boolean()
				if _bgfe := d.DecodeElement(_aebgg.Delete, &_acea); _bgfe != nil {
					return _bgfe
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0050o\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0050o\u0073"}:
				if _bcde := d.DecodeElement(_aebgg.AxPos, &_acea); _bcde != nil {
					return _bcde
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}:
				_aebgg.MajorGridlines = NewCT_ChartLines()
				if _cbcg := d.DecodeElement(_aebgg.MajorGridlines, &_acea); _cbcg != nil {
					return _cbcg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}:
				_aebgg.MinorGridlines = NewCT_ChartLines()
				if _acab := d.DecodeElement(_aebgg.MinorGridlines, &_acea); _acab != nil {
					return _acab
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0074l\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0074l\u0065"}:
				_aebgg.Title = NewCT_Title()
				if _eaea := d.DecodeElement(_aebgg.Title, &_acea); _eaea != nil {
					return _eaea
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}:
				_aebgg.NumFmt = NewCT_NumFmt()
				if _abgg := d.DecodeElement(_aebgg.NumFmt, &_acea); _abgg != nil {
					return _abgg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}:
				_aebgg.MajorTickMark = NewCT_TickMark()
				if _gfbg := d.DecodeElement(_aebgg.MajorTickMark, &_acea); _gfbg != nil {
					return _gfbg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}:
				_aebgg.MinorTickMark = NewCT_TickMark()
				if _fbda := d.DecodeElement(_aebgg.MinorTickMark, &_acea); _fbda != nil {
					return _fbda
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}:
				_aebgg.TickLblPos = NewCT_TickLblPos()
				if _fadg := d.DecodeElement(_aebgg.TickLblPos, &_acea); _fadg != nil {
					return _fadg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_aebgg.SpPr = _f.NewCT_ShapeProperties()
				if _ccgg := d.DecodeElement(_aebgg.SpPr, &_acea); _ccgg != nil {
					return _ccgg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_aebgg.TxPr = _f.NewCT_TextBody()
				if _gbbf := d.DecodeElement(_aebgg.TxPr, &_acea); _gbbf != nil {
					return _gbbf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0041\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0041\u0078"}:
				if _faad := d.DecodeElement(_aebgg.CrossAx, &_acea); _faad != nil {
					return _faad
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073"}:
				_aebgg.Choice = NewEG_AxSharedChoice()
				if _fbeb := d.DecodeElement(&_aebgg.Choice.Crosses, &_acea); _fbeb != nil {
					return _fbeb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073\u0041t"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073\u0041t"}:
				_aebgg.Choice = NewEG_AxSharedChoice()
				if _baacc := d.DecodeElement(&_aebgg.Choice.CrossesAt, &_acea); _baacc != nil {
					return _baacc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0075\u0074\u006f"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0075\u0074\u006f"}:
				_aebgg.Auto = NewCT_Boolean()
				if _dagc := d.DecodeElement(_aebgg.Auto, &_acea); _dagc != nil {
					return _dagc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006cb\u006c\u004f\u0066\u0066\u0073\u0065t"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006cb\u006c\u004f\u0066\u0066\u0073\u0065t"}:
				_aebgg.LblOffset = NewCT_LblOffset()
				if _cegae := d.DecodeElement(_aebgg.LblOffset, &_acea); _cegae != nil {
					return _cegae
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0073e\u0054\u0069\u006d\u0065\u0055\u006e\u0069\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0073e\u0054\u0069\u006d\u0065\u0055\u006e\u0069\u0074"}:
				_aebgg.BaseTimeUnit = NewCT_TimeUnit()
				if _bgeg := d.DecodeElement(_aebgg.BaseTimeUnit, &_acea); _bgeg != nil {
					return _bgeg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006da\u006a\u006f\u0072\u0055\u006e\u0069t"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006da\u006a\u006f\u0072\u0055\u006e\u0069t"}:
				_aebgg.MajorUnit = NewCT_AxisUnit()
				if _ddb := d.DecodeElement(_aebgg.MajorUnit, &_acea); _ddb != nil {
					return _ddb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0054\u0069\u006d\u0065\u0055\u006e\u0069\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0054\u0069\u006d\u0065\u0055\u006e\u0069\u0074"}:
				_aebgg.MajorTimeUnit = NewCT_TimeUnit()
				if _dfgc := d.DecodeElement(_aebgg.MajorTimeUnit, &_acea); _dfgc != nil {
					return _dfgc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006di\u006e\u006f\u0072\u0055\u006e\u0069t"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006di\u006e\u006f\u0072\u0055\u006e\u0069t"}:
				_aebgg.MinorUnit = NewCT_AxisUnit()
				if _gcccc := d.DecodeElement(_aebgg.MinorUnit, &_acea); _gcccc != nil {
					return _gcccc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0054\u0069\u006d\u0065\u0055\u006e\u0069\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0054\u0069\u006d\u0065\u0055\u006e\u0069\u0074"}:
				_aebgg.MinorTimeUnit = NewCT_TimeUnit()
				if _ebeb := d.DecodeElement(_aebgg.MinorTimeUnit, &_acea); _ebeb != nil {
					return _ebeb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_aebgg.ExtLst = NewCT_ExtensionList()
				if _dffa := d.DecodeElement(_aebgg.ExtLst, &_acea); _dffa != nil {
					return _dffa
				}
			default:
				_a.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u0044\u0061\u0074e\u0041\u0078 \u0025\u0076", _acea.Name)
				if _eadg := d.Skip(); _eadg != nil {
					return _eadg
				}
			}
		case _e.EndElement:
			break _fgfb
		case _e.CharData:
		}
	}
	return nil
}

type CT_ScatterChart struct {
	ScatterStyle *CT_ScatterStyle
	VaryColors   *CT_Boolean
	Ser          []*CT_ScatterSer
	DLbls        *CT_DLbls
	AxId         []*CT_UnsignedInt
	ExtLst       *CT_ExtensionList
}
type ST_PictureFormat byte

func (_ebdd *CT_RadarChart) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_bgddf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0072a\u0064\u0061\u0072\u0053\u0074\u0079\u006c\u0065"}}
	e.EncodeElement(_ebdd.RadarStyle, _bgddf)
	if _ebdd.VaryColors != nil {
		_eaef := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_ebdd.VaryColors, _eaef)
	}
	if _ebdd.Ser != nil {
		_bbdcd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _gcgbe := range _ebdd.Ser {
			e.EncodeElement(_gcgbe, _bbdcd)
		}
	}
	if _ebdd.DLbls != nil {
		_dfda := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_ebdd.DLbls, _dfda)
	}
	_adgb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	for _, _abcfb := range _ebdd.AxId {
		e.EncodeElement(_abcfb, _adgb)
	}
	if _ebdd.ExtLst != nil {
		_gdfgb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_ebdd.ExtLst, _gdfgb)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_DPt and its children
func (_ffbc *CT_DPt) Validate() error {
	return _ffbc.ValidateWithPath("\u0043\u0054\u005f\u0044\u0050\u0074")
}

var ST_LblOffsetPercentPatternRe = _g.MustCompile(ST_LblOffsetPercentPattern)

func (_cbaa ST_LblAlgn) Validate() error { return _cbaa.ValidateWithPath("") }
func (_acfd *CT_PageSetup) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _acfd.PaperSizeAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0070a\u0070\u0065\u0072\u0053\u0069\u007ae"}, Value: _b.Sprintf("\u0025\u0076", *_acfd.PaperSizeAttr)})
	}
	if _acfd.PaperHeightAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "p\u0061\u0070\u0065\u0072\u0048\u0065\u0069\u0067\u0068\u0074"}, Value: _b.Sprintf("\u0025\u0076", *_acfd.PaperHeightAttr)})
	}
	if _acfd.PaperWidthAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0070\u0061\u0070\u0065\u0072\u0057\u0069\u0064\u0074\u0068"}, Value: _b.Sprintf("\u0025\u0076", *_acfd.PaperWidthAttr)})
	}
	if _acfd.FirstPageNumberAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0066i\u0072s\u0074\u0050\u0061\u0067\u0065\u004e\u0075\u006d\u0062\u0065\u0072"}, Value: _b.Sprintf("\u0025\u0076", *_acfd.FirstPageNumberAttr)})
	}
	if _acfd.OrientationAttr != ST_PageSetupOrientationUnset {
		_acaag, _dfcdg := _acfd.OrientationAttr.MarshalXMLAttr(_e.Name{Local: "o\u0072\u0069\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e"})
		if _dfcdg != nil {
			return _dfcdg
		}
		start.Attr = append(start.Attr, _acaag)
	}
	if _acfd.BlackAndWhiteAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0062\u006c\u0061\u0063\u006b\u0041\u006e\u0064\u0057\u0068\u0069\u0074\u0065"}, Value: _b.Sprintf("\u0025\u0064", _cfcbe(*_acfd.BlackAndWhiteAttr))})
	}
	if _acfd.DraftAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0064\u0072\u0061f\u0074"}, Value: _b.Sprintf("\u0025\u0064", _cfcbe(*_acfd.DraftAttr))})
	}
	if _acfd.UseFirstPageNumberAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0075s\u0065F\u0069\u0072\u0073\u0074\u0050a\u0067\u0065N\u0075\u006d\u0062\u0065\u0072"}, Value: _b.Sprintf("\u0025\u0064", _cfcbe(*_acfd.UseFirstPageNumberAttr))})
	}
	if _acfd.HorizontalDpiAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0068\u006f\u0072\u0069\u007a\u006f\u006e\u0074\u0061\u006c\u0044\u0070\u0069"}, Value: _b.Sprintf("\u0025\u0076", *_acfd.HorizontalDpiAttr)})
	}
	if _acfd.VerticalDpiAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "v\u0065\u0072\u0074\u0069\u0063\u0061\u006c\u0044\u0070\u0069"}, Value: _b.Sprintf("\u0025\u0076", *_acfd.VerticalDpiAttr)})
	}
	if _acfd.CopiesAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0063\u006f\u0070\u0069\u0065\u0073"}, Value: _b.Sprintf("\u0025\u0076", *_acfd.CopiesAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}
func (_bbcd *CT_StrData) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _bbcd.PtCount != nil {
		_bdecd := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0070\u0074\u0043\u006f\u0075\u006et"}}
		e.EncodeElement(_bbcd.PtCount, _bdecd)
	}
	if _bbcd.Pt != nil {
		_aagfa := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0070\u0074"}}
		for _, _fgaf := range _bbcd.Pt {
			e.EncodeElement(_fgaf, _aagfa)
		}
	}
	if _bbcd.ExtLst != nil {
		_ebgbf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_bbcd.ExtLst, _ebgbf)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_UpDownBars and its children
func (_daaec *CT_UpDownBars) Validate() error {
	return _daaec.ValidateWithPath("\u0043\u0054\u005f\u0055\u0070\u0044\u006f\u0077\u006e\u0042\u0061\u0072\u0073")
}
func (_dacf *Chart) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0078\u006d\u006cn\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074"})
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0061"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e"})
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0063"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074"})
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0072"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073"})
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a/\u002f\u0073\u0063\u0068\u0065m\u0061s\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067/\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002f\u0073\u0068\u0061\u0072e\u0064\u0054\u0079\u0070\u0065\u0073"})
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"}, Value: "\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"})
	start.Name.Local = "\u0063:\u0063\u0068\u0061\u0072\u0074"
	return _dacf.CT_RelId.MarshalXML(e, start)
}

// Validate validates the CT_ManualLayout and its children
func (_cafc *CT_ManualLayout) Validate() error {
	return _cafc.ValidateWithPath("\u0043T\u005fM\u0061\u006e\u0075\u0061\u006c\u004c\u0061\u0079\u006f\u0075\u0074")
}

type CT_BarDir struct{ ValAttr ST_BarDir }

func (_dfbda ST_TickLblPos) String() string {
	switch _dfbda {
	case 0:
		return ""
	case 1:
		return "\u0068\u0069\u0067\u0068"
	case 2:
		return "\u006c\u006f\u0077"
	case 3:
		return "\u006e\u0065\u0078\u0074\u0054\u006f"
	case 4:
		return "\u006e\u006f\u006e\u0065"
	}
	return ""
}
func (_bcbec *ST_LblOffset) Validate() error { return _bcbec.ValidateWithPath("") }
func NewCT_LayoutTarget() *CT_LayoutTarget   { _eceb := &CT_LayoutTarget{}; return _eceb }

// ValidateWithPath validates the CT_DPt and its children, prefixing error messages with path
func (_aebf *CT_DPt) ValidateWithPath(path string) error {
	if _fgfa := _aebf.Idx.ValidateWithPath(path + "\u002f\u0049\u0064\u0078"); _fgfa != nil {
		return _fgfa
	}
	if _aebf.InvertIfNegative != nil {
		if _fced := _aebf.InvertIfNegative.ValidateWithPath(path + "\u002f\u0049\u006e\u0076\u0065\u0072\u0074\u0049\u0066\u004e\u0065\u0067a\u0074\u0069\u0076\u0065"); _fced != nil {
			return _fced
		}
	}
	if _aebf.Marker != nil {
		if _cbgc := _aebf.Marker.ValidateWithPath(path + "\u002fM\u0061\u0072\u006b\u0065\u0072"); _cbgc != nil {
			return _cbgc
		}
	}
	if _aebf.Bubble3D != nil {
		if _ggab := _aebf.Bubble3D.ValidateWithPath(path + "\u002fB\u0075\u0062\u0062\u006c\u0065\u0033D"); _ggab != nil {
			return _ggab
		}
	}
	if _aebf.Explosion != nil {
		if _abcf := _aebf.Explosion.ValidateWithPath(path + "\u002f\u0045\u0078\u0070\u006c\u006f\u0073\u0069\u006f\u006e"); _abcf != nil {
			return _abcf
		}
	}
	if _aebf.SpPr != nil {
		if _bdca := _aebf.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _bdca != nil {
			return _bdca
		}
	}
	if _aebf.PictureOptions != nil {
		if _dgba := _aebf.PictureOptions.ValidateWithPath(path + "\u002fP\u0069c\u0074\u0075\u0072\u0065\u004f\u0070\u0074\u0069\u006f\u006e\u0073"); _dgba != nil {
			return _dgba
		}
	}
	if _aebf.ExtLst != nil {
		if _cfgg := _aebf.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _cfgg != nil {
			return _cfgg
		}
	}
	return nil
}

// ValidateWithPath validates the CT_ScatterStyle and its children, prefixing error messages with path
func (_ecfd *CT_ScatterStyle) ValidateWithPath(path string) error {
	if _dfdba := _ecfd.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _dfdba != nil {
		return _dfdba
	}
	return nil
}

// Validate validates the CT_ScatterSer and its children
func (_baaf *CT_ScatterSer) Validate() error {
	return _baaf.ValidateWithPath("\u0043\u0054\u005f\u0053\u0063\u0061\u0074\u0074\u0065\u0072\u0053\u0065\u0072")
}

// ValidateWithPath validates the CT_TxChoice and its children, prefixing error messages with path
func (_bbad *CT_TxChoice) ValidateWithPath(path string) error {
	if _bbad.StrRef != nil {
		if _dbbg := _bbad.StrRef.ValidateWithPath(path + "\u002fS\u0074\u0072\u0052\u0065\u0066"); _dbbg != nil {
			return _dbbg
		}
	}
	if _bbad.Rich != nil {
		if _dceec := _bbad.Rich.ValidateWithPath(path + "\u002f\u0052\u0069c\u0068"); _dceec != nil {
			return _dceec
		}
	}
	return nil
}
func (_dgebad *CT_RotY) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _dgebad.ValAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0076\u0061\u006c"}, Value: _b.Sprintf("\u0025\u0076", *_dgebad.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_TickMark and its children
func (_dgbc *CT_TickMark) Validate() error {
	return _dgbc.ValidateWithPath("C\u0054\u005f\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b")
}

// ValidateWithPath validates the CT_Double and its children, prefixing error messages with path
func (_bfda *CT_Double) ValidateWithPath(path string) error { return nil }

type CT_NumVal struct {
	IdxAttr        uint32
	FormatCodeAttr *string
	V              string
}

// Validate validates the CT_PivotFmts and its children
func (_gaedb *CT_PivotFmts) Validate() error {
	return _gaedb.ValidateWithPath("\u0043\u0054\u005fP\u0069\u0076\u006f\u0074\u0046\u006d\u0074\u0073")
}

// ST_LblOffset is a union type
type ST_LblOffset struct {
	ST_LblOffsetPercent *string
	ST_LblOffsetUShort  *uint16
}

// ValidateWithPath validates the CT_LegendPos and its children, prefixing error messages with path
func (_eecd *CT_LegendPos) ValidateWithPath(path string) error {
	if _cgdee := _eecd.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _cgdee != nil {
		return _cgdee
	}
	return nil
}
func (_bgcfg ST_Shape) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_bgcfg.String(), start)
}

type ST_LayoutMode byte

func (_decdb *CT_ErrBarType) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _decdb.ValAttr != ST_ErrBarTypeUnset {
		_bbcc, _eadc := _decdb.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
		if _eadc != nil {
			return _eadc
		}
		start.Attr = append(start.Attr, _bbcc)
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}
func (_adcff ST_SplitType) String() string {
	switch _adcff {
	case 0:
		return ""
	case 1:
		return "\u0061\u0075\u0074\u006f"
	case 2:
		return "\u0063\u0075\u0073\u0074"
	case 3:
		return "\u0070e\u0072\u0063\u0065\u006e\u0074"
	case 4:
		return "\u0070\u006f\u0073"
	case 5:
		return "\u0076\u0061\u006c"
	}
	return ""
}

type ChartSpace struct{ CT_ChartSpace }

// ValidateWithPath validates the CT_Bar3DChart and its children, prefixing error messages with path
func (_faa *CT_Bar3DChart) ValidateWithPath(path string) error {
	if _afa := _faa.BarDir.ValidateWithPath(path + "\u002fB\u0061\u0072\u0044\u0069\u0072"); _afa != nil {
		return _afa
	}
	if _faa.Grouping != nil {
		if _fbec := _faa.Grouping.ValidateWithPath(path + "\u002fG\u0072\u006f\u0075\u0070\u0069\u006eg"); _fbec != nil {
			return _fbec
		}
	}
	if _faa.VaryColors != nil {
		if _dggb := _faa.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _dggb != nil {
			return _dggb
		}
	}
	for _fdfa, _ddfb := range _faa.Ser {
		if _bbdc := _ddfb.ValidateWithPath(_b.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _fdfa)); _bbdc != nil {
			return _bbdc
		}
	}
	if _faa.DLbls != nil {
		if _adg := _faa.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _adg != nil {
			return _adg
		}
	}
	if _faa.GapWidth != nil {
		if _dgb := _faa.GapWidth.ValidateWithPath(path + "\u002fG\u0061\u0070\u0057\u0069\u0064\u0074h"); _dgb != nil {
			return _dgb
		}
	}
	if _faa.GapDepth != nil {
		if _ced := _faa.GapDepth.ValidateWithPath(path + "\u002fG\u0061\u0070\u0044\u0065\u0070\u0074h"); _ced != nil {
			return _ced
		}
	}
	if _faa.Shape != nil {
		if _cggc := _faa.Shape.ValidateWithPath(path + "\u002f\u0053\u0068\u0061\u0070\u0065"); _cggc != nil {
			return _cggc
		}
	}
	for _ecc, _aca := range _faa.AxId {
		if _cfgd := _aca.ValidateWithPath(_b.Sprintf("%\u0073\u002f\u0041\u0078\u0049\u0064\u005b\u0025\u0064\u005d", path, _ecc)); _cfgd != nil {
			return _cfgd
		}
	}
	if _faa.ExtLst != nil {
		if _gaa := _faa.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _gaa != nil {
			return _gaa
		}
	}
	return nil
}
func NewCT_NumFmt() *CT_NumFmt { _edda := &CT_NumFmt{}; return _edda }

// Validate validates the CT_RotY and its children
func (_bdfb *CT_RotY) Validate() error {
	return _bdfb.ValidateWithPath("\u0043T\u005f\u0052\u006f\u0074\u0059")
}
func (_befff *ST_AxPos) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_befff = 0
	case "\u0062":
		*_befff = 1
	case "\u006c":
		*_befff = 2
	case "\u0072":
		*_befff = 3
	case "\u0074":
		*_befff = 4
	}
	return nil
}

// ValidateWithPath validates the EG_PieChartShared and its children, prefixing error messages with path
func (_ecgce *EG_PieChartShared) ValidateWithPath(path string) error {
	if _ecgce.VaryColors != nil {
		if _fggff := _ecgce.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _fggff != nil {
			return _fggff
		}
	}
	for _bcabe, _gbdbff := range _ecgce.Ser {
		if _abge := _gbdbff.ValidateWithPath(_b.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _bcabe)); _abge != nil {
			return _abge
		}
	}
	if _ecgce.DLbls != nil {
		if _febbgd := _ecgce.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _febbgd != nil {
			return _febbgd
		}
	}
	return nil
}

// ValidateWithPath validates the CT_PivotFmts and its children, prefixing error messages with path
func (_gfae *CT_PivotFmts) ValidateWithPath(path string) error {
	for _abae, _gcgfc := range _gfae.PivotFmt {
		if _bdec := _gcgfc.ValidateWithPath(_b.Sprintf("\u0025s\u002fP\u0069\u0076\u006f\u0074\u0046\u006d\u0074\u005b\u0025\u0064\u005d", path, _abae)); _bdec != nil {
			return _bdec
		}
	}
	return nil
}

type ST_LblAlgn byte

const ST_SecondPieSizePercentPattern = "\u0030\u002a\u0028\u0028\u005b\u0035\u002d9\u005d\u0029\u007c(\u005b\u0031\u002d\u0039]\u005b\u0030\u002d\u0039\u005d\u0029\u007c\u0028\u0031\u005b\u0030\u002d\u0039\u005d\u005b\u0030\u002d\u0039\u005d\u0029\u007c\u0032\u0030\u0030\u0029\u0025"

func (_gdcdc ST_ScatterStyle) ValidateWithPath(path string) error {
	switch _gdcdc {
	case 0, 1, 2, 3, 4, 5, 6:
	default:
		return _b.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_gdcdc))
	}
	return nil
}
func (_baacd *Chart) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_baacd.CT_RelId = *NewCT_RelId()
	for _, _dfgfd := range start.Attr {
		if _dfgfd.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073" && _dfgfd.Name.Local == "\u0069\u0064" || _dfgfd.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f\u002fp\u0075\u0072\u006c.\u006f\u0063\u006cc\u002e\u006fr\u0067\u002f\u006f\u006f\u0078\u006dl\u002fof\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073" && _dfgfd.Name.Local == "\u0069\u0064" {
			_dagfe, _abceg := _dfgfd.Value, error(nil)
			if _abceg != nil {
				return _abceg
			}
			_baacd.IdAttr = _dagfe
			continue
		}
	}
	for {
		_gcaea, _ggafc := d.Token()
		if _ggafc != nil {
			return _b.Errorf("\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0068\u0061\u0072t\u003a\u0020\u0025\u0073", _ggafc)
		}
		if _begdb, _afbca := _gcaea.(_e.EndElement); _afbca && _begdb.Name == start.Name {
			break
		}
	}
	return nil
}
func (_bbfb ST_LegendPos) Validate() error { return _bbfb.ValidateWithPath("") }

// Validate validates the CT_AreaChart and its children
func (_dfd *CT_AreaChart) Validate() error {
	return _dfd.ValidateWithPath("\u0043\u0054\u005fA\u0072\u0065\u0061\u0043\u0068\u0061\u0072\u0074")
}
func (_fdegb *ST_BubbleScale) ValidateWithPath(path string) error {
	_edeag := []string{}
	if _fdegb.ST_BubbleScalePercent != nil {
		_edeag = append(_edeag, "S\u0054\u005f\u0042\u0075bb\u006ce\u0053\u0063\u0061\u006c\u0065P\u0065\u0072\u0063\u0065\u006e\u0074")
	}
	if _fdegb.ST_BubbleScaleUInt != nil {
		_edeag = append(_edeag, "\u0053T\u005fB\u0075\u0062\u0062\u006c\u0065S\u0063\u0061l\u0065\u0055\u0049\u006e\u0074")
	}
	if len(_edeag) > 1 {
		return _b.Errorf("%\u0073\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u006d\u0065\u006d\u0062\u0065r\u0073\u0020\u0073e\u0074:\u0020\u0025\u0076", path, _edeag)
	}
	return nil
}

// ValidateWithPath validates the CT_Legend and its children, prefixing error messages with path
func (_ebdc *CT_Legend) ValidateWithPath(path string) error {
	if _ebdc.LegendPos != nil {
		if _bfgg := _ebdc.LegendPos.ValidateWithPath(path + "\u002f\u004c\u0065\u0067\u0065\u006e\u0064\u0050\u006f\u0073"); _bfgg != nil {
			return _bfgg
		}
	}
	for _agbc, _efdd := range _ebdc.LegendEntry {
		if _bcba := _efdd.ValidateWithPath(_b.Sprintf("\u0025s\u002fL\u0065\u0067\u0065\u006e\u0064E\u006e\u0074r\u0079\u005b\u0025\u0064\u005d", path, _agbc)); _bcba != nil {
			return _bcba
		}
	}
	if _ebdc.Layout != nil {
		if _aaab := _ebdc.Layout.ValidateWithPath(path + "\u002fL\u0061\u0079\u006f\u0075\u0074"); _aaab != nil {
			return _aaab
		}
	}
	if _ebdc.Overlay != nil {
		if _fbeca := _ebdc.Overlay.ValidateWithPath(path + "\u002f\u004f\u0076\u0065\u0072\u006c\u0061\u0079"); _fbeca != nil {
			return _fbeca
		}
	}
	if _ebdc.SpPr != nil {
		if _gfba := _ebdc.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _gfba != nil {
			return _gfba
		}
	}
	if _ebdc.TxPr != nil {
		if _fdef := _ebdc.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _fdef != nil {
			return _fdef
		}
	}
	if _ebdc.ExtLst != nil {
		if _dadg := _ebdc.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _dadg != nil {
			return _dadg
		}
	}
	return nil
}

// ValidateWithPath validates the CT_Extension and its children, prefixing error messages with path
func (_dfef *CT_Extension) ValidateWithPath(path string) error { return nil }

// ValidateWithPath validates the CT_RelId and its children, prefixing error messages with path
func (_bdegf *CT_RelId) ValidateWithPath(path string) error { return nil }
func NewCT_Thickness() *CT_Thickness                        { _ecfdb := &CT_Thickness{}; return _ecfdb }

// Validate validates the CT_ScatterChart and its children
func (_gdcb *CT_ScatterChart) Validate() error {
	return _gdcb.ValidateWithPath("\u0043T\u005fS\u0063\u0061\u0074\u0074\u0065\u0072\u0043\u0068\u0061\u0072\u0074")
}
func (_geaf *CT_DLblChoice) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_bbaf:
	for {
		_ebdg, _bcff := d.Token()
		if _bcff != nil {
			return _bcff
		}
		switch _cabg := _ebdg.(type) {
		case _e.StartElement:
			switch _cabg.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}:
				_geaf.Delete = NewCT_Boolean()
				if _gccg := d.DecodeElement(_geaf.Delete, &_cabg); _gccg != nil {
					return _gccg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}:
				_geaf.Layout = NewCT_Layout()
				if _aeg := d.DecodeElement(_geaf.Layout, &_cabg); _aeg != nil {
					return _aeg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				_geaf.Tx = NewCT_Tx()
				if _abga := d.DecodeElement(_geaf.Tx, &_cabg); _abga != nil {
					return _abga
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}:
				_geaf.NumFmt = NewCT_NumFmt()
				if _bcdgg := d.DecodeElement(_geaf.NumFmt, &_cabg); _bcdgg != nil {
					return _bcdgg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_geaf.SpPr = _f.NewCT_ShapeProperties()
				if _bcdd := d.DecodeElement(_geaf.SpPr, &_cabg); _bcdd != nil {
					return _bcdd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_geaf.TxPr = _f.NewCT_TextBody()
				if _egdb := d.DecodeElement(_geaf.TxPr, &_cabg); _egdb != nil {
					return _egdb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064L\u0062\u006c\u0050\u006f\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064L\u0062\u006c\u0050\u006f\u0073"}:
				_geaf.DLblPos = NewCT_DLblPos()
				if _bfdg := d.DecodeElement(_geaf.DLblPos, &_cabg); _bfdg != nil {
					return _bfdg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}:
				_geaf.ShowLegendKey = NewCT_Boolean()
				if _gcfa := d.DecodeElement(_geaf.ShowLegendKey, &_cabg); _gcfa != nil {
					return _gcfa
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006f\u0077\u0056\u0061\u006c"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006f\u0077\u0056\u0061\u006c"}:
				_geaf.ShowVal = NewCT_Boolean()
				if _gee := d.DecodeElement(_geaf.ShowVal, &_cabg); _gee != nil {
					return _gee
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}:
				_geaf.ShowCatName = NewCT_Boolean()
				if _decbc := d.DecodeElement(_geaf.ShowCatName, &_cabg); _decbc != nil {
					return _decbc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}:
				_geaf.ShowSerName = NewCT_Boolean()
				if _fgcg := d.DecodeElement(_geaf.ShowSerName, &_cabg); _fgcg != nil {
					return _fgcg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}:
				_geaf.ShowPercent = NewCT_Boolean()
				if _gadf := d.DecodeElement(_geaf.ShowPercent, &_cabg); _gadf != nil {
					return _gadf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0042\u0075\u0062\u0062\u006ce\u0053\u0069\u007a\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0042\u0075\u0062\u0062\u006ce\u0053\u0069\u007a\u0065"}:
				_geaf.ShowBubbleSize = NewCT_Boolean()
				if _egg := d.DecodeElement(_geaf.ShowBubbleSize, &_cabg); _egg != nil {
					return _egg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u0070\u0061\u0072\u0061\u0074\u006fr"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u0070\u0061\u0072\u0061\u0074\u006fr"}:
				_geaf.Separator = new(string)
				if _efde := d.DecodeElement(_geaf.Separator, &_cabg); _efde != nil {
					return _efde
				}
			default:
				_a.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0044L\u0062\u006c\u0043\u0068\u006f\u0069\u0063\u0065 \u0025\u0076", _cabg.Name)
				if _aeda := d.Skip(); _aeda != nil {
					return _aeda
				}
			}
		case _e.EndElement:
			break _bbaf
		case _e.CharData:
		}
	}
	return nil
}
func NewCT_MultiLvlStrRef() *CT_MultiLvlStrRef { _bgbg := &CT_MultiLvlStrRef{}; return _bgbg }
func (_agegc ST_OfPieType) Validate() error    { return _agegc.ValidateWithPath("") }
func (_cebaf *Group_DLbl) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_becbcf:
	for {
		_acdcfe, _gbed := d.Token()
		if _gbed != nil {
			return _gbed
		}
		switch _bdgafg := _acdcfe.(type) {
		case _e.StartElement:
			switch _bdgafg.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}:
				_cebaf.Layout = NewCT_Layout()
				if _ccedb := d.DecodeElement(_cebaf.Layout, &_bdgafg); _ccedb != nil {
					return _ccedb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				_cebaf.Tx = NewCT_Tx()
				if _bacbe := d.DecodeElement(_cebaf.Tx, &_bdgafg); _bacbe != nil {
					return _bacbe
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}:
				_cebaf.NumFmt = NewCT_NumFmt()
				if _bgcbb := d.DecodeElement(_cebaf.NumFmt, &_bdgafg); _bgcbb != nil {
					return _bgcbb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_cebaf.SpPr = _f.NewCT_ShapeProperties()
				if _fceba := d.DecodeElement(_cebaf.SpPr, &_bdgafg); _fceba != nil {
					return _fceba
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_cebaf.TxPr = _f.NewCT_TextBody()
				if _fegec := d.DecodeElement(_cebaf.TxPr, &_bdgafg); _fegec != nil {
					return _fegec
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064L\u0062\u006c\u0050\u006f\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064L\u0062\u006c\u0050\u006f\u0073"}:
				_cebaf.DLblPos = NewCT_DLblPos()
				if _eecddd := d.DecodeElement(_cebaf.DLblPos, &_bdgafg); _eecddd != nil {
					return _eecddd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}:
				_cebaf.ShowLegendKey = NewCT_Boolean()
				if _gfdf := d.DecodeElement(_cebaf.ShowLegendKey, &_bdgafg); _gfdf != nil {
					return _gfdf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006f\u0077\u0056\u0061\u006c"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006f\u0077\u0056\u0061\u006c"}:
				_cebaf.ShowVal = NewCT_Boolean()
				if _cdgag := d.DecodeElement(_cebaf.ShowVal, &_bdgafg); _cdgag != nil {
					return _cdgag
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}:
				_cebaf.ShowCatName = NewCT_Boolean()
				if _ccbd := d.DecodeElement(_cebaf.ShowCatName, &_bdgafg); _ccbd != nil {
					return _ccbd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}:
				_cebaf.ShowSerName = NewCT_Boolean()
				if _fadb := d.DecodeElement(_cebaf.ShowSerName, &_bdgafg); _fadb != nil {
					return _fadb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}:
				_cebaf.ShowPercent = NewCT_Boolean()
				if _dedgg := d.DecodeElement(_cebaf.ShowPercent, &_bdgafg); _dedgg != nil {
					return _dedgg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0042\u0075\u0062\u0062\u006ce\u0053\u0069\u007a\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0042\u0075\u0062\u0062\u006ce\u0053\u0069\u007a\u0065"}:
				_cebaf.ShowBubbleSize = NewCT_Boolean()
				if _fdgee := d.DecodeElement(_cebaf.ShowBubbleSize, &_bdgafg); _fdgee != nil {
					return _fdgee
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u0070\u0061\u0072\u0061\u0074\u006fr"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u0070\u0061\u0072\u0061\u0074\u006fr"}:
				_cebaf.Separator = new(string)
				if _ggff := d.DecodeElement(_cebaf.Separator, &_bdgafg); _ggff != nil {
					return _ggff
				}
			default:
				_a.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006ce\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0047\u0072\u006fu\u0070\u005f\u0044\u004c\u0062\u006c\u0020\u0025\u0076", _bdgafg.Name)
				if _caeg := d.Skip(); _caeg != nil {
					return _caeg
				}
			}
		case _e.EndElement:
			break _becbcf
		case _e.CharData:
		}
	}
	return nil
}
func NewCT_MultiLvlStrData() *CT_MultiLvlStrData { _fdeb := &CT_MultiLvlStrData{}; return _fdeb }

// ValidateWithPath validates the CT_RadarStyle and its children, prefixing error messages with path
func (_aefgb *CT_RadarStyle) ValidateWithPath(path string) error {
	if _ffabg := _aefgb.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _ffabg != nil {
		return _ffabg
	}
	return nil
}
func NewChartSpace() *ChartSpace {
	_ffcd := &ChartSpace{}
	_ffcd.CT_ChartSpace = *NewCT_ChartSpace()
	return _ffcd
}

// Validate validates the CT_AxDataSourceChoice and its children
func (_eff *CT_AxDataSourceChoice) Validate() error {
	return _eff.ValidateWithPath("C\u0054\u005f\u0041\u0078Da\u0074a\u0053\u006f\u0075\u0072\u0063e\u0043\u0068\u006f\u0069\u0063\u0065")
}

// ValidateWithPath validates the CT_RotY and its children, prefixing error messages with path
func (_ddfa *CT_RotY) ValidateWithPath(path string) error {
	if _ddfa.ValAttr != nil {
		if *_ddfa.ValAttr < 0 {
			return _b.Errorf("%\u0073\u002f\u006d\u002e\u0056\u0061l\u0041\u0074\u0074\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u003e=\u0020\u0030\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, *_ddfa.ValAttr)
		}
		if *_ddfa.ValAttr > 360 {
			return _b.Errorf("\u0025\u0073/\u006d\u002e\u0056\u0061l\u0041\u0074t\u0072\u0020\u006d\u0075\u0073\u0074\u0020\u0062e\u0020\u003c\u003d\u0020\u0033\u0036\u0030\u0020\u0028\u0068\u0061\u0076e\u0020\u0025\u0076\u0029", path, *_ddfa.ValAttr)
		}
	}
	return nil
}

// ValidateWithPath validates the CT_PlotAreaChoice and its children, prefixing error messages with path
func (_gagfg *CT_PlotAreaChoice) ValidateWithPath(path string) error {
	if _gagfg.AreaChart != nil {
		if _afea := _gagfg.AreaChart.ValidateWithPath(path + "\u002f\u0041\u0072\u0065\u0061\u0043\u0068\u0061\u0072\u0074"); _afea != nil {
			return _afea
		}
	}
	if _gagfg.Area3DChart != nil {
		if _babfc := _gagfg.Area3DChart.ValidateWithPath(path + "\u002f\u0041\u0072e\u0061\u0033\u0044\u0043\u0068\u0061\u0072\u0074"); _babfc != nil {
			return _babfc
		}
	}
	if _gagfg.LineChart != nil {
		if _gfea := _gagfg.LineChart.ValidateWithPath(path + "\u002f\u004c\u0069\u006e\u0065\u0043\u0068\u0061\u0072\u0074"); _gfea != nil {
			return _gfea
		}
	}
	if _gagfg.Line3DChart != nil {
		if _cegaa := _gagfg.Line3DChart.ValidateWithPath(path + "\u002f\u004c\u0069n\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074"); _cegaa != nil {
			return _cegaa
		}
	}
	if _gagfg.StockChart != nil {
		if _cbgb := _gagfg.StockChart.ValidateWithPath(path + "/\u0053\u0074\u006f\u0063\u006b\u0043\u0068\u0061\u0072\u0074"); _cbgb != nil {
			return _cbgb
		}
	}
	if _gagfg.RadarChart != nil {
		if _eebd := _gagfg.RadarChart.ValidateWithPath(path + "/\u0052\u0061\u0064\u0061\u0072\u0043\u0068\u0061\u0072\u0074"); _eebd != nil {
			return _eebd
		}
	}
	if _gagfg.ScatterChart != nil {
		if _egdg := _gagfg.ScatterChart.ValidateWithPath(path + "\u002f\u0053\u0063\u0061\u0074\u0074\u0065\u0072\u0043\u0068\u0061\u0072\u0074"); _egdg != nil {
			return _egdg
		}
	}
	if _gagfg.PieChart != nil {
		if _afdac := _gagfg.PieChart.ValidateWithPath(path + "\u002fP\u0069\u0065\u0043\u0068\u0061\u0072t"); _afdac != nil {
			return _afdac
		}
	}
	if _gagfg.Pie3DChart != nil {
		if _gaaee := _gagfg.Pie3DChart.ValidateWithPath(path + "/\u0050\u0069\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074"); _gaaee != nil {
			return _gaaee
		}
	}
	if _gagfg.DoughnutChart != nil {
		if _ddcef := _gagfg.DoughnutChart.ValidateWithPath(path + "\u002f\u0044\u006f\u0075\u0067\u0068\u006e\u0075\u0074C\u0068\u0061\u0072\u0074"); _ddcef != nil {
			return _ddcef
		}
	}
	if _gagfg.BarChart != nil {
		if _eefdb := _gagfg.BarChart.ValidateWithPath(path + "\u002fB\u0061\u0072\u0043\u0068\u0061\u0072t"); _eefdb != nil {
			return _eefdb
		}
	}
	if _gagfg.Bar3DChart != nil {
		if _bbgbd := _gagfg.Bar3DChart.ValidateWithPath(path + "/\u0042\u0061\u0072\u0033\u0044\u0043\u0068\u0061\u0072\u0074"); _bbgbd != nil {
			return _bbgbd
		}
	}
	if _gagfg.OfPieChart != nil {
		if _ebceg := _gagfg.OfPieChart.ValidateWithPath(path + "/\u004f\u0066\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074"); _ebceg != nil {
			return _ebceg
		}
	}
	if _gagfg.SurfaceChart != nil {
		if _bgede := _gagfg.SurfaceChart.ValidateWithPath(path + "\u002f\u0053\u0075\u0072\u0066\u0061\u0063\u0065\u0043\u0068\u0061\u0072\u0074"); _bgede != nil {
			return _bgede
		}
	}
	if _gagfg.Surface3DChart != nil {
		if _bedb := _gagfg.Surface3DChart.ValidateWithPath(path + "\u002fS\u0075r\u0066\u0061\u0063\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074"); _bedb != nil {
			return _bedb
		}
	}
	if _gagfg.BubbleChart != nil {
		if _bbfe := _gagfg.BubbleChart.ValidateWithPath(path + "\u002f\u0042\u0075b\u0062\u006c\u0065\u0043\u0068\u0061\u0072\u0074"); _bbfe != nil {
			return _bbfe
		}
	}
	return nil
}
func (_agae *ST_DLblPos) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_agae = 0
	case "\u0062e\u0073\u0074\u0046\u0069\u0074":
		*_agae = 1
	case "\u0062":
		*_agae = 2
	case "\u0063\u0074\u0072":
		*_agae = 3
	case "\u0069\u006e\u0042\u0061\u0073\u0065":
		*_agae = 4
	case "\u0069\u006e\u0045n\u0064":
		*_agae = 5
	case "\u006c":
		*_agae = 6
	case "\u006f\u0075\u0074\u0045\u006e\u0064":
		*_agae = 7
	case "\u0072":
		*_agae = 8
	case "\u0074":
		*_agae = 9
	}
	return nil
}

// ValidateWithPath validates the CT_LineChart and its children, prefixing error messages with path
func (_fdaf *CT_LineChart) ValidateWithPath(path string) error {
	if _bbgdc := _fdaf.Grouping.ValidateWithPath(path + "\u002fG\u0072\u006f\u0075\u0070\u0069\u006eg"); _bbgdc != nil {
		return _bbgdc
	}
	if _fdaf.VaryColors != nil {
		if _feaac := _fdaf.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _feaac != nil {
			return _feaac
		}
	}
	for _gaff, _ggdf := range _fdaf.Ser {
		if _gaba := _ggdf.ValidateWithPath(_b.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _gaff)); _gaba != nil {
			return _gaba
		}
	}
	if _fdaf.DLbls != nil {
		if _daac := _fdaf.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _daac != nil {
			return _daac
		}
	}
	if _fdaf.DropLines != nil {
		if _efdbd := _fdaf.DropLines.ValidateWithPath(path + "\u002f\u0044\u0072\u006f\u0070\u004c\u0069\u006e\u0065\u0073"); _efdbd != nil {
			return _efdbd
		}
	}
	if _fdaf.HiLowLines != nil {
		if _eggb := _fdaf.HiLowLines.ValidateWithPath(path + "/\u0048\u0069\u004c\u006f\u0077\u004c\u0069\u006e\u0065\u0073"); _eggb != nil {
			return _eggb
		}
	}
	if _fdaf.UpDownBars != nil {
		if _afcd := _fdaf.UpDownBars.ValidateWithPath(path + "/\u0055\u0070\u0044\u006f\u0077\u006e\u0042\u0061\u0072\u0073"); _afcd != nil {
			return _afcd
		}
	}
	if _fdaf.Marker != nil {
		if _bbag := _fdaf.Marker.ValidateWithPath(path + "\u002fM\u0061\u0072\u006b\u0065\u0072"); _bbag != nil {
			return _bbag
		}
	}
	if _fdaf.Smooth != nil {
		if _bbaff := _fdaf.Smooth.ValidateWithPath(path + "\u002fS\u006d\u006f\u006f\u0074\u0068"); _bbaff != nil {
			return _bbaff
		}
	}
	for _ccegb, _cbec := range _fdaf.AxId {
		if _gbbe := _cbec.ValidateWithPath(_b.Sprintf("%\u0073\u002f\u0041\u0078\u0049\u0064\u005b\u0025\u0064\u005d", path, _ccegb)); _gbbe != nil {
			return _gbbe
		}
	}
	if _fdaf.ExtLst != nil {
		if _ecedb := _fdaf.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _ecedb != nil {
			return _ecedb
		}
	}
	return nil
}
func (_bdee *ST_Crosses) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_bdee = 0
	case "\u0061\u0075\u0074\u006f\u005a\u0065\u0072\u006f":
		*_bdee = 1
	case "\u006d\u0061\u0078":
		*_bdee = 2
	case "\u006d\u0069\u006e":
		*_bdee = 3
	}
	return nil
}
func (_cecgbg ST_HPercent) String() string {
	if _cecgbg.ST_HPercentWithSymbol != nil {
		return _b.Sprintf("\u0025\u0076", *_cecgbg.ST_HPercentWithSymbol)
	}
	if _cecgbg.ST_HPercentUShort != nil {
		return _b.Sprintf("\u0025\u0076", *_cecgbg.ST_HPercentUShort)
	}
	return ""
}
func NewCT_ChartLines() *CT_ChartLines { _bbgd := &CT_ChartLines{}; return _bbgd }

// ValidateWithPath validates the CT_MultiLvlStrRef and its children, prefixing error messages with path
func (_dfbd *CT_MultiLvlStrRef) ValidateWithPath(path string) error {
	if _dfbd.MultiLvlStrCache != nil {
		if _gdgbb := _dfbd.MultiLvlStrCache.ValidateWithPath(path + "\u002f\u004d\u0075\u006c\u0074\u0069\u004c\u0076\u006c\u0053\u0074\u0072C\u0061\u0063\u0068\u0065"); _gdgbb != nil {
			return _gdgbb
		}
	}
	if _dfbd.ExtLst != nil {
		if _gcbf := _dfbd.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _gcbf != nil {
			return _gcbf
		}
	}
	return nil
}

// ValidateWithPath validates the Chart and its children, prefixing error messages with path
func (_dfbfc *Chart) ValidateWithPath(path string) error {
	if _dceed := _dfbfc.CT_RelId.ValidateWithPath(path); _dceed != nil {
		return _dceed
	}
	return nil
}
func (_baebd ST_Thickness) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _baebd.ST_ThicknessPercent != nil {
		e.EncodeToken(_e.CharData(*_baebd.ST_ThicknessPercent))
	}
	if _baebd.Uint32 != nil {
		e.EncodeToken(_e.CharData(_b.Sprintf("\u0025\u0064", *_baebd.Uint32)))
	}
	return e.EncodeToken(_e.EndElement{Name: start.Name})
}

type CT_HPercent struct{ ValAttr *ST_HPercent }

// ValidateWithPath validates the CT_Skip and its children, prefixing error messages with path
func (_cdab *CT_Skip) ValidateWithPath(path string) error {
	if _cdab.ValAttr < 1 {
		return _b.Errorf("%\u0073\u002f\u006d\u002e\u0056\u0061l\u0041\u0074\u0074\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u003e=\u0020\u0031\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, _cdab.ValAttr)
	}
	return nil
}

// Validate validates the CT_BubbleSer and its children
func (_ded *CT_BubbleSer) Validate() error {
	return _ded.ValidateWithPath("\u0043\u0054\u005fB\u0075\u0062\u0062\u006c\u0065\u0053\u0065\u0072")
}

// Validate validates the EG_SurfaceChartShared and its children
func (_bgae *EG_SurfaceChartShared) Validate() error {
	return _bgae.ValidateWithPath("E\u0047\u005f\u0053\u0075rf\u0061c\u0065\u0043\u0068\u0061\u0072t\u0053\u0068\u0061\u0072\u0065\u0064")
}
func (_adgca *CT_SurfaceSer) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_cfefe := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0069d\u0078"}}
	e.EncodeElement(_adgca.Idx, _cfefe)
	_cbeg := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006f\u0072\u0064\u0065\u0072"}}
	e.EncodeElement(_adgca.Order, _cbeg)
	if _adgca.Tx != nil {
		_aaebc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078"}}
		e.EncodeElement(_adgca.Tx, _aaebc)
	}
	if _adgca.SpPr != nil {
		_bcfdf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_adgca.SpPr, _bcfdf)
	}
	if _adgca.Cat != nil {
		_faed := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0063a\u0074"}}
		e.EncodeElement(_adgca.Cat, _faed)
	}
	if _adgca.Val != nil {
		_eeede := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0076a\u006c"}}
		e.EncodeElement(_adgca.Val, _eeede)
	}
	if _adgca.ExtLst != nil {
		_bdbgd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_adgca.ExtLst, _bdbgd)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

type CT_LblOffset struct{ ValAttr *ST_LblOffset }

func (_aggdd *ST_SizeRepresents) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_fdacb, _eddd := d.Token()
	if _eddd != nil {
		return _eddd
	}
	if _gbcfe, _aeadf := _fdacb.(_e.EndElement); _aeadf && _gbcfe.Name == start.Name {
		*_aggdd = 1
		return nil
	}
	if _edbd, _beafa := _fdacb.(_e.CharData); !_beafa {
		return _b.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _fdacb)
	} else {
		switch string(_edbd) {
		case "":
			*_aggdd = 0
		case "\u0061\u0072\u0065\u0061":
			*_aggdd = 1
		case "\u0077":
			*_aggdd = 2
		}
	}
	_fdacb, _eddd = d.Token()
	if _eddd != nil {
		return _eddd
	}
	if _fddcd, _adcac := _fdacb.(_e.EndElement); _adcac && _fddcd.Name == start.Name {
		return nil
	}
	return _b.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _fdacb)
}

// Validate validates the CT_Shape and its children
func (_bfbbf *CT_Shape) Validate() error {
	return _bfbbf.ValidateWithPath("\u0043\u0054\u005f\u0053\u0068\u0061\u0070\u0065")
}

// ValidateWithPath validates the EG_SurfaceChartShared and its children, prefixing error messages with path
func (_cfdce *EG_SurfaceChartShared) ValidateWithPath(path string) error {
	if _cfdce.Wireframe != nil {
		if _eaebf := _cfdce.Wireframe.ValidateWithPath(path + "\u002f\u0057\u0069\u0072\u0065\u0066\u0072\u0061\u006d\u0065"); _eaebf != nil {
			return _eaebf
		}
	}
	for _eeaff, _fgdae := range _cfdce.Ser {
		if _fbcaa := _fgdae.ValidateWithPath(_b.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _eeaff)); _fbcaa != nil {
			return _fbcaa
		}
	}
	if _cfdce.BandFmts != nil {
		if _ddfbbe := _cfdce.BandFmts.ValidateWithPath(path + "\u002fB\u0061\u006e\u0064\u0046\u006d\u0074s"); _ddfbbe != nil {
			return _ddfbbe
		}
	}
	return nil
}
func (_bbeg *CT_DepthPercent) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _bbeg.ValAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0076\u0061\u006c"}, Value: _b.Sprintf("\u0025\u0076", *_bbeg.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}
func (_bcf *CT_BuiltInUnit) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _cecg := range start.Attr {
		if _cecg.Name.Local == "\u0076\u0061\u006c" {
			_bcf.ValAttr.UnmarshalXMLAttr(_cecg)
			continue
		}
	}
	for {
		_bag, _fecb := d.Token()
		if _fecb != nil {
			return _b.Errorf("\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fB\u0075\u0069\u006c\u0074\u0049\u006e\u0055\u006e\u0069\u0074:\u0020\u0025\u0073", _fecb)
		}
		if _gfdb, _cagg := _bag.(_e.EndElement); _cagg && _gfdb.Name == start.Name {
			break
		}
	}
	return nil
}

type EG_LineChartShared struct {
	Grouping   *CT_Grouping
	VaryColors *CT_Boolean
	Ser        []*CT_LineSer
	DLbls      *CT_DLbls
	DropLines  *CT_ChartLines
}

func (_cecdd *EG_LegendEntryData) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _cecdd.TxPr != nil {
		_befgca := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_cecdd.TxPr, _befgca)
	}
	return nil
}

const (
	ST_ErrDirUnset ST_ErrDir = 0
	ST_ErrDirX     ST_ErrDir = 1
	ST_ErrDirY     ST_ErrDir = 2
)

// Validate validates the CT_Marker and its children
func (_efaf *CT_Marker) Validate() error {
	return _efaf.ValidateWithPath("\u0043T\u005f\u004d\u0061\u0072\u006b\u0065r")
}
func (_cdbfg *CT_MultiLvlStrRef) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_dbaee:
	for {
		_acfb, _gcbaf := d.Token()
		if _gcbaf != nil {
			return _gcbaf
		}
		switch _dafdg := _acfb.(type) {
		case _e.StartElement:
			switch _dafdg.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066"}:
				if _degfe := d.DecodeElement(&_cdbfg.F, &_dafdg); _degfe != nil {
					return _degfe
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0075l\u0074\u0069\u004cv\u006c\u0053\u0074\u0072\u0043\u0061\u0063\u0068\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0075l\u0074\u0069\u004cv\u006c\u0053\u0074\u0072\u0043\u0061\u0063\u0068\u0065"}:
				_cdbfg.MultiLvlStrCache = NewCT_MultiLvlStrData()
				if _aefga := d.DecodeElement(_cdbfg.MultiLvlStrCache, &_dafdg); _aefga != nil {
					return _aefga
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_cdbfg.ExtLst = NewCT_ExtensionList()
				if _eecdf := d.DecodeElement(_cdbfg.ExtLst, &_dafdg); _eecdf != nil {
					return _eecdf
				}
			default:
				_a.Log.Debug("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u004d\u0075\u006c\u0074\u0069\u004c\u0076\u006c\u0053\u0074\u0072\u0052\u0065\u0066\u0020\u0025\u0076", _dafdg.Name)
				if _eecg := d.Skip(); _eecg != nil {
					return _eecg
				}
			}
		case _e.EndElement:
			break _dbaee
		case _e.CharData:
		}
	}
	return nil
}

type ST_DispBlanksAs byte

func NewCT_TrendlineType() *CT_TrendlineType { _ebbad := &CT_TrendlineType{}; return _ebbad }
func (_bbe *CT_Boolean) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _bbe.ValAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0076\u0061\u006c"}, Value: _b.Sprintf("\u0025\u0064", _cfcbe(*_bbe.ValAttr))})
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

const (
	ST_TimeUnitUnset  ST_TimeUnit = 0
	ST_TimeUnitDays   ST_TimeUnit = 1
	ST_TimeUnitMonths ST_TimeUnit = 2
	ST_TimeUnitYears  ST_TimeUnit = 3
)

// ValidateWithPath validates the CT_LineSer and its children, prefixing error messages with path
func (_gfbga *CT_LineSer) ValidateWithPath(path string) error {
	if _ggbea := _gfbga.Idx.ValidateWithPath(path + "\u002f\u0049\u0064\u0078"); _ggbea != nil {
		return _ggbea
	}
	if _gggde := _gfbga.Order.ValidateWithPath(path + "\u002f\u004f\u0072\u0064\u0065\u0072"); _gggde != nil {
		return _gggde
	}
	if _gfbga.Tx != nil {
		if _dafda := _gfbga.Tx.ValidateWithPath(path + "\u002f\u0054\u0078"); _dafda != nil {
			return _dafda
		}
	}
	if _gfbga.SpPr != nil {
		if _acdcf := _gfbga.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _acdcf != nil {
			return _acdcf
		}
	}
	if _gfbga.Marker != nil {
		if _cdfg := _gfbga.Marker.ValidateWithPath(path + "\u002fM\u0061\u0072\u006b\u0065\u0072"); _cdfg != nil {
			return _cdfg
		}
	}
	for _daea, _gbcf := range _gfbga.DPt {
		if _fbfc := _gbcf.ValidateWithPath(_b.Sprintf("\u0025\u0073\u002f\u0044\u0050\u0074\u005b\u0025\u0064\u005d", path, _daea)); _fbfc != nil {
			return _fbfc
		}
	}
	if _gfbga.DLbls != nil {
		if _bdcaf := _gfbga.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _bdcaf != nil {
			return _bdcaf
		}
	}
	for _ccfc, _gabgd := range _gfbga.Trendline {
		if _cgede := _gabgd.ValidateWithPath(_b.Sprintf("\u0025\u0073/\u0054\u0072\u0065n\u0064\u006c\u0069\u006e\u0065\u005b\u0025\u0064\u005d", path, _ccfc)); _cgede != nil {
			return _cgede
		}
	}
	if _gfbga.ErrBars != nil {
		if _aedf := _gfbga.ErrBars.ValidateWithPath(path + "\u002f\u0045\u0072\u0072\u0042\u0061\u0072\u0073"); _aedf != nil {
			return _aedf
		}
	}
	if _gfbga.Cat != nil {
		if _bfbbc := _gfbga.Cat.ValidateWithPath(path + "\u002f\u0043\u0061\u0074"); _bfbbc != nil {
			return _bfbbc
		}
	}
	if _gfbga.Val != nil {
		if _fcfgd := _gfbga.Val.ValidateWithPath(path + "\u002f\u0056\u0061\u006c"); _fcfgd != nil {
			return _fcfgd
		}
	}
	if _gfbga.Smooth != nil {
		if _gbdc := _gfbga.Smooth.ValidateWithPath(path + "\u002fS\u006d\u006f\u006f\u0074\u0068"); _gbdc != nil {
			return _gbdc
		}
	}
	if _gfbga.ExtLst != nil {
		if _bcedbc := _gfbga.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _bcedbc != nil {
			return _bcedbc
		}
	}
	return nil
}
func (_bfefb ST_LayoutMode) String() string {
	switch _bfefb {
	case 0:
		return ""
	case 1:
		return "\u0065\u0064\u0067\u0065"
	case 2:
		return "\u0066\u0061\u0063\u0074\u006f\u0072"
	}
	return ""
}

// ValidateWithPath validates the EG_LegendEntryData and its children, prefixing error messages with path
func (_bafad *EG_LegendEntryData) ValidateWithPath(path string) error {
	if _bafad.TxPr != nil {
		if _adebe := _bafad.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _adebe != nil {
			return _adebe
		}
	}
	return nil
}
func NewCT_DateAx() *CT_DateAx {
	_edae := &CT_DateAx{}
	_edae.AxId = NewCT_UnsignedInt()
	_edae.Scaling = NewCT_Scaling()
	_edae.AxPos = NewCT_AxPos()
	_edae.CrossAx = NewCT_UnsignedInt()
	return _edae
}
func (_begcb ST_LayoutMode) Validate() error { return _begcb.ValidateWithPath("") }

type CT_SerTx struct{ Choice *CT_SerTxChoice }

func NewCT_DPt() *CT_DPt   { _fffb := &CT_DPt{}; _fffb.Idx = NewCT_UnsignedInt(); return _fffb }
func NewCT_Skip() *CT_Skip { _gddaf := &CT_Skip{}; _gddaf.ValAttr = 1; return _gddaf }
func (_eade *CT_DLbls) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_ffgg:
	for {
		_ecfg, _eeae := d.Token()
		if _eeae != nil {
			return _eeae
		}
		switch _degc := _ecfg.(type) {
		case _e.StartElement:
			switch _degc.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062\u006c"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062\u006c"}:
				_becd := NewCT_DLbl()
				if _baabg := d.DecodeElement(_becd, &_degc); _baabg != nil {
					return _baabg
				}
				_eade.DLbl = append(_eade.DLbl, _becd)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}:
				if _eade.Choice == nil {
					_eade.Choice = NewCT_DLblsChoice()
				}
				if _ceba := d.DecodeElement(&_eade.Choice.Delete, &_degc); _ceba != nil {
					return _ceba
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}:
				if _eade.Choice == nil {
					_eade.Choice = NewCT_DLblsChoice()
				}
				if _ceee := d.DecodeElement(&_eade.Choice.NumFmt, &_degc); _ceee != nil {
					return _ceee
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				if _eade.Choice == nil {
					_eade.Choice = NewCT_DLblsChoice()
				}
				if _afeb := d.DecodeElement(&_eade.Choice.SpPr, &_degc); _afeb != nil {
					return _afeb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				if _eade.Choice == nil {
					_eade.Choice = NewCT_DLblsChoice()
				}
				if _faga := d.DecodeElement(&_eade.Choice.TxPr, &_degc); _faga != nil {
					return _faga
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064L\u0062\u006c\u0050\u006f\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064L\u0062\u006c\u0050\u006f\u0073"}:
				if _eade.Choice == nil {
					_eade.Choice = NewCT_DLblsChoice()
				}
				if _cbac := d.DecodeElement(&_eade.Choice.DLblPos, &_degc); _cbac != nil {
					return _cbac
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}:
				if _eade.Choice == nil {
					_eade.Choice = NewCT_DLblsChoice()
				}
				if _fbad := d.DecodeElement(&_eade.Choice.ShowLegendKey, &_degc); _fbad != nil {
					return _fbad
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006f\u0077\u0056\u0061\u006c"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006f\u0077\u0056\u0061\u006c"}:
				if _eade.Choice == nil {
					_eade.Choice = NewCT_DLblsChoice()
				}
				if _ccgb := d.DecodeElement(&_eade.Choice.ShowVal, &_degc); _ccgb != nil {
					return _ccgb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}:
				if _eade.Choice == nil {
					_eade.Choice = NewCT_DLblsChoice()
				}
				if _ggdac := d.DecodeElement(&_eade.Choice.ShowCatName, &_degc); _ggdac != nil {
					return _ggdac
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}:
				if _eade.Choice == nil {
					_eade.Choice = NewCT_DLblsChoice()
				}
				if _gefb := d.DecodeElement(&_eade.Choice.ShowSerName, &_degc); _gefb != nil {
					return _gefb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}:
				if _eade.Choice == nil {
					_eade.Choice = NewCT_DLblsChoice()
				}
				if _fdeef := d.DecodeElement(&_eade.Choice.ShowPercent, &_degc); _fdeef != nil {
					return _fdeef
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0042\u0075\u0062\u0062\u006ce\u0053\u0069\u007a\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0042\u0075\u0062\u0062\u006ce\u0053\u0069\u007a\u0065"}:
				if _eade.Choice == nil {
					_eade.Choice = NewCT_DLblsChoice()
				}
				if _adee := d.DecodeElement(&_eade.Choice.ShowBubbleSize, &_degc); _adee != nil {
					return _adee
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u0070\u0061\u0072\u0061\u0074\u006fr"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u0070\u0061\u0072\u0061\u0074\u006fr"}:
				if _eade.Choice == nil {
					_eade.Choice = NewCT_DLblsChoice()
				}
				if _ddcf := d.DecodeElement(&_eade.Choice.Separator, &_degc); _ddcf != nil {
					return _ddcf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006fw\u004c\u0065\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006fw\u004c\u0065\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}:
				if _eade.Choice == nil {
					_eade.Choice = NewCT_DLblsChoice()
				}
				if _adcgc := d.DecodeElement(&_eade.Choice.ShowLeaderLines, &_degc); _adcgc != nil {
					return _adcgc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "l\u0065\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "l\u0065\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}:
				if _eade.Choice == nil {
					_eade.Choice = NewCT_DLblsChoice()
				}
				if _gegca := d.DecodeElement(&_eade.Choice.LeaderLines, &_degc); _gegca != nil {
					return _gegca
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_eade.ExtLst = NewCT_ExtensionList()
				if _ebae := d.DecodeElement(_eade.ExtLst, &_degc); _ebae != nil {
					return _ebae
				}
			default:
				_a.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006eg\u0020\u0075\u006es\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0044\u004c\u0062\u006c\u0073\u0020\u0025\u0076", _degc.Name)
				if _gdd := d.Skip(); _gdd != nil {
					return _gdd
				}
			}
		case _e.EndElement:
			break _ffgg
		case _e.CharData:
		}
	}
	return nil
}
func (_dgfdf *CT_SerTxChoice) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_eegfc:
	for {
		_dcfb, _dcgbe := d.Token()
		if _dcgbe != nil {
			return _dcgbe
		}
		switch _efega := _dcfb.(type) {
		case _e.StartElement:
			switch _efega.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u0052\u0065\u0066"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u0052\u0065\u0066"}:
				_dgfdf.StrRef = NewCT_StrRef()
				if _dbcee := d.DecodeElement(_dgfdf.StrRef, &_efega); _dbcee != nil {
					return _dbcee
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076"}:
				_dgfdf.V = new(string)
				if _eegde := d.DecodeElement(_dgfdf.V, &_efega); _eegde != nil {
					return _eegde
				}
			default:
				_a.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069n\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006et\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0053\u0065\u0072\u0054\u0078\u0043\u0068o\u0069c\u0065\u0020\u0025\u0076", _efega.Name)
				if _ccgc := d.Skip(); _ccgc != nil {
					return _ccgc
				}
			}
		case _e.EndElement:
			break _eegfc
		case _e.CharData:
		}
	}
	return nil
}
func (_dbcg *CT_PrintSettings) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _dbcg.HeaderFooter != nil {
		_facce := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0068\u0065\u0061\u0064\u0065\u0072\u0046o\u006f\u0074\u0065\u0072"}}
		e.EncodeElement(_dbcg.HeaderFooter, _facce)
	}
	if _dbcg.PageMargins != nil {
		_ffdaf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0070\u0061\u0067\u0065\u004d\u0061\u0072\u0067\u0069\u006e\u0073"}}
		e.EncodeElement(_dbcg.PageMargins, _ffdaf)
	}
	if _dbcg.PageSetup != nil {
		_cfbb := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0070\u0061\u0067\u0065\u0053\u0065\u0074\u0075\u0070"}}
		e.EncodeElement(_dbcg.PageSetup, _cfbb)
	}
	if _dbcg.LegacyDrawingHF != nil {
		_gcbd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006c\u0065\u0067\u0061\u0063\u0079\u0044\u0072\u0061\u0077i\u006e\u0067\u0048\u0046"}}
		e.EncodeElement(_dbcg.LegacyDrawingHF, _gcbd)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

type CT_Tx struct{ Choice *CT_TxChoice }

// Validate validates the CT_GapAmount and its children
func (_bcbb *CT_GapAmount) Validate() error {
	return _bcbb.ValidateWithPath("\u0043\u0054\u005fG\u0061\u0070\u0041\u006d\u006f\u0075\u006e\u0074")
}
func NewCT_PlotArea() *CT_PlotArea { _eggg := &CT_PlotArea{}; return _eggg }

type CT_PieSer struct {
	Idx       *CT_UnsignedInt
	Order     *CT_UnsignedInt
	Tx        *CT_SerTx
	SpPr      *_f.CT_ShapeProperties
	Explosion *CT_UnsignedInt
	DPt       []*CT_DPt
	DLbls     *CT_DLbls
	Cat       *CT_AxDataSource
	Val       *CT_NumDataSource
	ExtLst    *CT_ExtensionList
}

func (_cefbb *EG_LegendEntryData) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_dcfbd:
	for {
		_bcegdc, _efeff := d.Token()
		if _efeff != nil {
			return _efeff
		}
		switch _dgddc := _bcegdc.(type) {
		case _e.StartElement:
			switch _dgddc.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_cefbb.TxPr = _f.NewCT_TextBody()
				if _ecbca := d.DecodeElement(_cefbb.TxPr, &_dgddc); _ecbca != nil {
					return _ecbca
				}
			default:
				_a.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0065l\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0045\u0047\u005f\u004c\u0065\u0067\u0065\u006e\u0064E\u006e\u0074\u0072\u0079\u0044\u0061\u0074\u0061\u0020\u0025\u0076", _dgddc.Name)
				if _dfcee := d.Skip(); _dfcee != nil {
					return _dfcee
				}
			}
		case _e.EndElement:
			break _dcfbd
		case _e.CharData:
		}
	}
	return nil
}
func (_bcaa ST_ScatterStyle) Validate() error { return _bcaa.ValidateWithPath("") }

type CT_Crosses struct{ ValAttr ST_Crosses }

func NewEG_AreaChartShared() *EG_AreaChartShared { _ebdbc := &EG_AreaChartShared{}; return _ebdbc }

// Validate validates the CT_PivotSource and its children
func (_aece *CT_PivotSource) Validate() error {
	return _aece.ValidateWithPath("\u0043\u0054\u005f\u0050\u0069\u0076\u006f\u0074\u0053o\u0075\u0072\u0063\u0065")
}

// Validate validates the CT_ChartSpace and its children
func (_eae *CT_ChartSpace) Validate() error {
	return _eae.ValidateWithPath("\u0043\u0054\u005f\u0043\u0068\u0061\u0072\u0074\u0053\u0070\u0061\u0063\u0065")
}

type ST_ErrDir byte

func (_bgff *CT_CatAx) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_bgff.AxId = NewCT_UnsignedInt()
	_bgff.Scaling = NewCT_Scaling()
	_bgff.AxPos = NewCT_AxPos()
	_bgff.CrossAx = NewCT_UnsignedInt()
_effa:
	for {
		_cccc, _dfee := d.Token()
		if _dfee != nil {
			return _dfee
		}
		switch _faf := _cccc.(type) {
		case _e.StartElement:
			switch _faf.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				if _fdea := d.DecodeElement(_bgff.AxId, &_faf); _fdea != nil {
					return _fdea
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073c\u0061\u006c\u0069\u006e\u0067"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073c\u0061\u006c\u0069\u006e\u0067"}:
				if _eca := d.DecodeElement(_bgff.Scaling, &_faf); _eca != nil {
					return _eca
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}:
				_bgff.Delete = NewCT_Boolean()
				if _acgf := d.DecodeElement(_bgff.Delete, &_faf); _acgf != nil {
					return _acgf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0050o\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0050o\u0073"}:
				if _ega := d.DecodeElement(_bgff.AxPos, &_faf); _ega != nil {
					return _ega
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}:
				_bgff.MajorGridlines = NewCT_ChartLines()
				if _cbf := d.DecodeElement(_bgff.MajorGridlines, &_faf); _cbf != nil {
					return _cbf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}:
				_bgff.MinorGridlines = NewCT_ChartLines()
				if _dad := d.DecodeElement(_bgff.MinorGridlines, &_faf); _dad != nil {
					return _dad
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0074l\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0074l\u0065"}:
				_bgff.Title = NewCT_Title()
				if _fefc := d.DecodeElement(_bgff.Title, &_faf); _fefc != nil {
					return _fefc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}:
				_bgff.NumFmt = NewCT_NumFmt()
				if _gccb := d.DecodeElement(_bgff.NumFmt, &_faf); _gccb != nil {
					return _gccb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}:
				_bgff.MajorTickMark = NewCT_TickMark()
				if _cefa := d.DecodeElement(_bgff.MajorTickMark, &_faf); _cefa != nil {
					return _cefa
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}:
				_bgff.MinorTickMark = NewCT_TickMark()
				if _fbf := d.DecodeElement(_bgff.MinorTickMark, &_faf); _fbf != nil {
					return _fbf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}:
				_bgff.TickLblPos = NewCT_TickLblPos()
				if _bgb := d.DecodeElement(_bgff.TickLblPos, &_faf); _bgb != nil {
					return _bgb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_bgff.SpPr = _f.NewCT_ShapeProperties()
				if _ddfd := d.DecodeElement(_bgff.SpPr, &_faf); _ddfd != nil {
					return _ddfd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_bgff.TxPr = _f.NewCT_TextBody()
				if _dafd := d.DecodeElement(_bgff.TxPr, &_faf); _dafd != nil {
					return _dafd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0041\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0041\u0078"}:
				if _gdfd := d.DecodeElement(_bgff.CrossAx, &_faf); _gdfd != nil {
					return _gdfd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073"}:
				_bgff.Choice = NewEG_AxSharedChoice()
				if _edag := d.DecodeElement(&_bgff.Choice.Crosses, &_faf); _edag != nil {
					return _edag
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073\u0041t"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073\u0041t"}:
				_bgff.Choice = NewEG_AxSharedChoice()
				if _cgfd := d.DecodeElement(&_bgff.Choice.CrossesAt, &_faf); _cgfd != nil {
					return _cgfd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0075\u0074\u006f"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0075\u0074\u006f"}:
				_bgff.Auto = NewCT_Boolean()
				if _agac := d.DecodeElement(_bgff.Auto, &_faf); _agac != nil {
					return _agac
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006cb\u006c\u0041\u006c\u0067\u006e"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006cb\u006c\u0041\u006c\u0067\u006e"}:
				_bgff.LblAlgn = NewCT_LblAlgn()
				if _fagc := d.DecodeElement(_bgff.LblAlgn, &_faf); _fagc != nil {
					return _fagc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006cb\u006c\u004f\u0066\u0066\u0073\u0065t"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006cb\u006c\u004f\u0066\u0066\u0073\u0065t"}:
				_bgff.LblOffset = NewCT_LblOffset()
				if _dbeee := d.DecodeElement(_bgff.LblOffset, &_faf); _dbeee != nil {
					return _dbeee
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "t\u0069\u0063\u006b\u004c\u0062\u006c\u0053\u006b\u0069\u0070"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "t\u0069\u0063\u006b\u004c\u0062\u006c\u0053\u006b\u0069\u0070"}:
				_bgff.TickLblSkip = NewCT_Skip()
				if _fba := d.DecodeElement(_bgff.TickLblSkip, &_faf); _fba != nil {
					return _fba
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0063k\u004d\u0061\u0072\u006b\u0053\u006b\u0069\u0070"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0063k\u004d\u0061\u0072\u006b\u0053\u006b\u0069\u0070"}:
				_bgff.TickMarkSkip = NewCT_Skip()
				if _cbgde := d.DecodeElement(_bgff.TickMarkSkip, &_faf); _cbgde != nil {
					return _cbgde
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u006f\u004d\u0075\u006c\u0074\u0069\u004c\u0076\u006c\u004c\u0062\u006c"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u006f\u004d\u0075\u006c\u0074\u0069\u004c\u0076\u006c\u004c\u0062\u006c"}:
				_bgff.NoMultiLvlLbl = NewCT_Boolean()
				if _dgeg := d.DecodeElement(_bgff.NoMultiLvlLbl, &_faf); _dgeg != nil {
					return _dgeg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_bgff.ExtLst = NewCT_ExtensionList()
				if _ebda := d.DecodeElement(_bgff.ExtLst, &_faf); _ebda != nil {
					return _ebda
				}
			default:
				_a.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006eg\u0020\u0075\u006es\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0043\u0061\u0074\u0041\u0078\u0020\u0025\u0076", _faf.Name)
				if _bgce := d.Skip(); _bgce != nil {
					return _bgce
				}
			}
		case _e.EndElement:
			break _effa
		case _e.CharData:
		}
	}
	return nil
}
func (_gbba *CT_Overlap) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _gbba.ValAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0076\u0061\u006c"}, Value: _b.Sprintf("\u0025\u0076", *_gbba.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

type CT_StrVal struct {
	IdxAttr uint32
	V       string
}

func (_bfedd *ST_LblAlgn) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_bfedd = 0
	case "\u0063\u0074\u0072":
		*_bfedd = 1
	case "\u006c":
		*_bfedd = 2
	case "\u0072":
		*_bfedd = 3
	}
	return nil
}

type CT_View3D struct {
	RotX         *CT_RotX
	HPercent     *CT_HPercent
	RotY         *CT_RotY
	DepthPercent *CT_DepthPercent
	RAngAx       *CT_Boolean
	Perspective  *CT_Perspective
	ExtLst       *CT_ExtensionList
}

func (_bdaef *ST_CrossBetween) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_bdaef = 0
	case "\u0062e\u0074\u0077\u0065\u0065\u006e":
		*_bdaef = 1
	case "\u006d\u0069\u0064\u0043\u0061\u0074":
		*_bdaef = 2
	}
	return nil
}
func (_gbac *CT_Lvl) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _gbac.Pt != nil {
		_bbggd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0070\u0074"}}
		for _, _gcab := range _gbac.Pt {
			e.EncodeElement(_gcab, _bbggd)
		}
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}
func (_dcac *CT_LblAlgn) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	_baeae, _cage := _dcac.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
	if _cage != nil {
		return _cage
	}
	start.Attr = append(start.Attr, _baeae)
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}
func NewCT_View3D() *CT_View3D { _bdceef := &CT_View3D{}; return _bdceef }
func (_abdad *CT_TxChoice) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_dffd:
	for {
		_cecdc, _cdga := d.Token()
		if _cdga != nil {
			return _cdga
		}
		switch _dfefa := _cecdc.(type) {
		case _e.StartElement:
			switch _dfefa.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u0052\u0065\u0066"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u0052\u0065\u0066"}:
				_abdad.StrRef = NewCT_StrRef()
				if _bcagd := d.DecodeElement(_abdad.StrRef, &_dfefa); _bcagd != nil {
					return _bcagd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u0069\u0063\u0068"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u0069\u0063\u0068"}:
				_abdad.Rich = _f.NewCT_TextBody()
				if _aeacbg := d.DecodeElement(_abdad.Rich, &_dfefa); _aeacbg != nil {
					return _aeacbg
				}
			default:
				_a.Log.Debug("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0054\u0078\u0043\u0068\u006f\u0069\u0063\u0065\u0020\u0025\u0076", _dfefa.Name)
				if _abdfg := d.Skip(); _abdfg != nil {
					return _abdfg
				}
			}
		case _e.EndElement:
			break _dffd
		case _e.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_AxDataSource and its children, prefixing error messages with path
func (_cfae *CT_AxDataSource) ValidateWithPath(path string) error {
	if _ddaa := _cfae.Choice.ValidateWithPath(path + "\u002fC\u0068\u006f\u0069\u0063\u0065"); _ddaa != nil {
		return _ddaa
	}
	return nil
}

const ST_BubbleScalePercentPattern = "0\u002a\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029|\u0028\u005b\u0031\u002d\u0039\u005d\u005b0-\u0039\u005d\u0029\u007c(\u005b\u0031\u002d\u0032\u005d\u005b\u0030\u002d\u0039][\u0030\u002d9\u005d\u0029\u007c\u0033\u0030\u0030\u0029\u0025"

var ST_GapAmountPercentPatternRe = _g.MustCompile(ST_GapAmountPercentPattern)

// Validate validates the CT_LineSer and its children
func (_cfee *CT_LineSer) Validate() error {
	return _cfee.ValidateWithPath("\u0043\u0054\u005f\u004c\u0069\u006e\u0065\u0053\u0065\u0072")
}

// Validate validates the CT_PictureOptions and its children
func (_daeb *CT_PictureOptions) Validate() error {
	return _daeb.ValidateWithPath("\u0043\u0054\u005f\u0050\u0069\u0063\u0074\u0075\u0072\u0065\u004f\u0070t\u0069\u006f\u006e\u0073")
}
func NewCT_DTable() *CT_DTable { _gagdb := &CT_DTable{}; return _gagdb }
func (_beffc *ST_BarDir) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_abadb, _debed := d.Token()
	if _debed != nil {
		return _debed
	}
	if _cabbg, _cggfd := _abadb.(_e.EndElement); _cggfd && _cabbg.Name == start.Name {
		*_beffc = 1
		return nil
	}
	if _dcdbf, _beccd := _abadb.(_e.CharData); !_beccd {
		return _b.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _abadb)
	} else {
		switch string(_dcdbf) {
		case "":
			*_beffc = 0
		case "\u0062\u0061\u0072":
			*_beffc = 1
		case "\u0063\u006f\u006c":
			*_beffc = 2
		}
	}
	_abadb, _debed = d.Token()
	if _debed != nil {
		return _debed
	}
	if _bfcg, _aedbb := _abadb.(_e.EndElement); _aedbb && _bfcg.Name == start.Name {
		return nil
	}
	return _b.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _abadb)
}
func (_eadaa *ST_MarkerStyle) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_dgege, _fffbg := d.Token()
	if _fffbg != nil {
		return _fffbg
	}
	if _dfae, _eagaf := _dgege.(_e.EndElement); _eagaf && _dfae.Name == start.Name {
		*_eadaa = 1
		return nil
	}
	if _ggee, _geebd := _dgege.(_e.CharData); !_geebd {
		return _b.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _dgege)
	} else {
		switch string(_ggee) {
		case "":
			*_eadaa = 0
		case "\u0063\u0069\u0072\u0063\u006c\u0065":
			*_eadaa = 1
		case "\u0064\u0061\u0073\u0068":
			*_eadaa = 2
		case "\u0064i\u0061\u006d\u006f\u006e\u0064":
			*_eadaa = 3
		case "\u0064\u006f\u0074":
			*_eadaa = 4
		case "\u006e\u006f\u006e\u0065":
			*_eadaa = 5
		case "\u0070i\u0063\u0074\u0075\u0072\u0065":
			*_eadaa = 6
		case "\u0070\u006c\u0075\u0073":
			*_eadaa = 7
		case "\u0073\u0071\u0075\u0061\u0072\u0065":
			*_eadaa = 8
		case "\u0073\u0074\u0061\u0072":
			*_eadaa = 9
		case "\u0074\u0072\u0069\u0061\u006e\u0067\u006c\u0065":
			*_eadaa = 10
		case "\u0078":
			*_eadaa = 11
		case "\u0061\u0075\u0074\u006f":
			*_eadaa = 12
		}
	}
	_dgege, _fffbg = d.Token()
	if _fffbg != nil {
		return _fffbg
	}
	if _cdacca, _dddda := _dgege.(_e.EndElement); _dddda && _cdacca.Name == start.Name {
		return nil
	}
	return _b.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _dgege)
}

type Chart struct{ CT_RelId }
type ST_DLblPos byte

func NewCT_AxPos() *CT_AxPos { _ecde := &CT_AxPos{}; _ecde.ValAttr = ST_AxPos(1); return _ecde }

// ValidateWithPath validates the CT_MarkerSize and its children, prefixing error messages with path
func (_dgdd *CT_MarkerSize) ValidateWithPath(path string) error {
	if _dgdd.ValAttr != nil {
		if *_dgdd.ValAttr < 2 {
			return _b.Errorf("%\u0073\u002f\u006d\u002e\u0056\u0061l\u0041\u0074\u0074\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u003e=\u0020\u0032\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, *_dgdd.ValAttr)
		}
		if *_dgdd.ValAttr > 72 {
			return _b.Errorf("\u0025\u0073/m\u002e\u0056\u0061l\u0041\u0074\u0074\u0072 mu\u0073t \u0062\u0065\u0020\u003c\u003d\u0020\u00372 \u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, *_dgdd.ValAttr)
		}
	}
	return nil
}

// Validate validates the EG_PieChartShared and its children
func (_dbbab *EG_PieChartShared) Validate() error {
	return _dbbab.ValidateWithPath("\u0045\u0047\u005f\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074\u0053h\u0061\u0072\u0065\u0064")
}
func (_cbda *CT_Bar3DChart) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_cbda.BarDir = NewCT_BarDir()
_dab:
	for {
		_ddef, _cbg := d.Token()
		if _cbg != nil {
			return _cbg
		}
		switch _eeb := _ddef.(type) {
		case _e.StartElement:
			switch _eeb.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0072\u0044\u0069\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0072\u0044\u0069\u0072"}:
				if _cbb := d.DecodeElement(_cbda.BarDir, &_eeb); _cbb != nil {
					return _cbb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}:
				_cbda.Grouping = NewCT_BarGrouping()
				if _dfb := d.DecodeElement(_cbda.Grouping, &_eeb); _dfb != nil {
					return _dfb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_cbda.VaryColors = NewCT_Boolean()
				if _baa := d.DecodeElement(_cbda.VaryColors, &_eeb); _baa != nil {
					return _baa
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_agc := NewCT_BarSer()
				if _fac := d.DecodeElement(_agc, &_eeb); _fac != nil {
					return _fac
				}
				_cbda.Ser = append(_cbda.Ser, _agc)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_cbda.DLbls = NewCT_DLbls()
				if _bcdg := d.DecodeElement(_cbda.DLbls, &_eeb); _bcdg != nil {
					return _bcdg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0061\u0070\u0057\u0069\u0064\u0074\u0068"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0061\u0070\u0057\u0069\u0064\u0074\u0068"}:
				_cbda.GapWidth = NewCT_GapAmount()
				if _faca := d.DecodeElement(_cbda.GapWidth, &_eeb); _faca != nil {
					return _faca
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0061\u0070\u0044\u0065\u0070\u0074\u0068"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0061\u0070\u0044\u0065\u0070\u0074\u0068"}:
				_cbda.GapDepth = NewCT_GapAmount()
				if _bddb := d.DecodeElement(_cbda.GapDepth, &_eeb); _bddb != nil {
					return _bddb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u0061p\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u0061p\u0065"}:
				_cbda.Shape = NewCT_Shape()
				if _cfad := d.DecodeElement(_cbda.Shape, &_eeb); _cfad != nil {
					return _cfad
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				_aad := NewCT_UnsignedInt()
				if _gafb := d.DecodeElement(_aad, &_eeb); _gafb != nil {
					return _gafb
				}
				_cbda.AxId = append(_cbda.AxId, _aad)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_cbda.ExtLst = NewCT_ExtensionList()
				if _bca := d.DecodeElement(_cbda.ExtLst, &_eeb); _bca != nil {
					return _bca
				}
			default:
				_a.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0042a\u0072\u0033\u0044\u0043\u0068\u0061\u0072\u0074 \u0025\u0076", _eeb.Name)
				if _ebf := d.Skip(); _ebf != nil {
					return _ebf
				}
			}
		case _e.EndElement:
			break _dab
		case _e.CharData:
		}
	}
	return nil
}
func (_fgfaf *ST_Overlap) Validate() error { return _fgfaf.ValidateWithPath("") }
func (_ebdb *CT_ExternalData) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0072\u003a\u0069\u0064"}, Value: _b.Sprintf("\u0025\u0076", _ebdb.IdAttr)})
	e.EncodeToken(start)
	if _ebdb.AutoUpdate != nil {
		_baag := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0061u\u0074\u006f\u0055\u0070\u0064\u0061\u0074\u0065"}}
		e.EncodeElement(_ebdb.AutoUpdate, _baag)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

const (
	ST_ErrValTypeUnset      ST_ErrValType = 0
	ST_ErrValTypeCust       ST_ErrValType = 1
	ST_ErrValTypeFixedVal   ST_ErrValType = 2
	ST_ErrValTypePercentage ST_ErrValType = 3
	ST_ErrValTypeStdDev     ST_ErrValType = 4
	ST_ErrValTypeStdErr     ST_ErrValType = 5
)

func (_cfeaf *ST_Orientation) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_cfeaf = 0
	case "\u006d\u0061\u0078\u004d\u0069\u006e":
		*_cfeaf = 1
	case "\u006d\u0069\u006e\u004d\u0061\u0078":
		*_cfeaf = 2
	}
	return nil
}
func (_fedcca *ST_Overlap) ValidateWithPath(path string) error {
	_cedae := []string{}
	if _fedcca.ST_OverlapPercent != nil {
		_cedae = append(_cedae, "\u0053\u0054\u005f\u004f\u0076\u0065\u0072\u006c\u0061\u0070\u0050\u0065r\u0063\u0065\u006e\u0074")
	}
	if _fedcca.ST_OverlapByte != nil {
		_cedae = append(_cedae, "\u0053\u0054\u005f\u004f\u0076\u0065\u0072\u006c\u0061p\u0042\u0079\u0074\u0065")
	}
	if len(_cedae) > 1 {
		return _b.Errorf("%\u0073\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u006d\u0065\u006d\u0062\u0065r\u0073\u0020\u0073e\u0074:\u0020\u0025\u0076", path, _cedae)
	}
	return nil
}
func (_cbedd *CT_Style) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_cbedd.ValAttr = 1
	for _, _fgebd := range start.Attr {
		if _fgebd.Name.Local == "\u0076\u0061\u006c" {
			_bddc, _daeeb := _c.ParseUint(_fgebd.Value, 10, 8)
			if _daeeb != nil {
				return _daeeb
			}
			_cbedd.ValAttr = uint8(_bddc)
			continue
		}
	}
	for {
		_dgbeb, _adaf := d.Token()
		if _adaf != nil {
			return _b.Errorf("p\u0061r\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fS\u0074\u0079\u006c\u0065: \u0025\u0073", _adaf)
		}
		if _edfg, _aebgc := _dgbeb.(_e.EndElement); _aebgc && _edfg.Name == start.Name {
			break
		}
	}
	return nil
}
func (_egdga ST_ErrBarType) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_defgf := _e.Attr{}
	_defgf.Name = name
	switch _egdga {
	case ST_ErrBarTypeUnset:
		_defgf.Value = ""
	case ST_ErrBarTypeBoth:
		_defgf.Value = "\u0062\u006f\u0074\u0068"
	case ST_ErrBarTypeMinus:
		_defgf.Value = "\u006d\u0069\u006eu\u0073"
	case ST_ErrBarTypePlus:
		_defgf.Value = "\u0070\u006c\u0075\u0073"
	}
	return _defgf, nil
}
func (_dcaac ST_SplitType) ValidateWithPath(path string) error {
	switch _dcaac {
	case 0, 1, 2, 3, 4, 5:
	default:
		return _b.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_dcaac))
	}
	return nil
}

type CT_Title struct {
	Tx      *CT_Tx
	Layout  *CT_Layout
	Overlay *CT_Boolean
	SpPr    *_f.CT_ShapeProperties
	TxPr    *_f.CT_TextBody
	ExtLst  *CT_ExtensionList
}

func (_gfeg *CT_OfPieChart) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_gcdg := _e.StartElement{Name: _e.Name{Local: "c\u003a\u006f\u0066\u0050\u0069\u0065\u0054\u0079\u0070\u0065"}}
	e.EncodeElement(_gfeg.OfPieType, _gcdg)
	if _gfeg.VaryColors != nil {
		_dgga := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_gfeg.VaryColors, _dgga)
	}
	if _gfeg.Ser != nil {
		_dadfg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _becbd := range _gfeg.Ser {
			e.EncodeElement(_becbd, _dadfg)
		}
	}
	if _gfeg.DLbls != nil {
		_gbgef := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_gfeg.DLbls, _gbgef)
	}
	if _gfeg.GapWidth != nil {
		_cgcaa := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0067\u0061\u0070\u0057\u0069\u0064\u0074\u0068"}}
		e.EncodeElement(_gfeg.GapWidth, _cgcaa)
	}
	if _gfeg.SplitType != nil {
		_cbfg := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0073\u0070\u006c\u0069\u0074\u0054\u0079\u0070\u0065"}}
		e.EncodeElement(_gfeg.SplitType, _cbfg)
	}
	if _gfeg.SplitPos != nil {
		_ebebf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u006c\u0069\u0074\u0050\u006f\u0073"}}
		e.EncodeElement(_gfeg.SplitPos, _ebebf)
	}
	if _gfeg.CustSplit != nil {
		_aggca := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0063\u0075\u0073\u0074\u0053\u0070\u006c\u0069\u0074"}}
		e.EncodeElement(_gfeg.CustSplit, _aggca)
	}
	if _gfeg.SecondPieSize != nil {
		_ffda := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0073e\u0063\u006f\u006e\u0064\u0050\u0069\u0065\u0053\u0069\u007a\u0065"}}
		e.EncodeElement(_gfeg.SecondPieSize, _ffda)
	}
	if _gfeg.SerLines != nil {
		_agaaf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}}
		for _, _ebgd := range _gfeg.SerLines {
			e.EncodeElement(_ebgd, _agaaf)
		}
	}
	if _gfeg.ExtLst != nil {
		_cfbgc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_gfeg.ExtLst, _cfbgc)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}
func (_babab *CT_ScatterStyle) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _babab.ValAttr != ST_ScatterStyleUnset {
		_daagb, _eggd := _babab.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
		if _eggd != nil {
			return _eggd
		}
		start.Attr = append(start.Attr, _daagb)
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}
func (_fbbcga *CT_LegendEntryChoice) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_baaea:
	for {
		_bcddc, _cdca := d.Token()
		if _cdca != nil {
			return _cdca
		}
		switch _agdgg := _bcddc.(type) {
		case _e.StartElement:
			switch _agdgg.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}:
				_fbbcga.Delete = NewCT_Boolean()
				if _abcda := d.DecodeElement(_fbbcga.Delete, &_agdgg); _abcda != nil {
					return _abcda
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_fbbcga.TxPr = _f.NewCT_TextBody()
				if _ebga := d.DecodeElement(_fbbcga.TxPr, &_agdgg); _ebga != nil {
					return _ebga
				}
			default:
				_a.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006eg\u0020\u0075\u006es\u0075\u0070\u0070o\u0072\u0074e\u0064\u0020\u0065\u006c\u0065\u006de\u006et \u006f\u006e\u0020\u0043\u0054\u005f\u004c\u0065\u0067\u0065\u006e\u0064\u0045\u006e\u0074\u0072\u0079\u0043\u0068\u006f\u0069\u0063\u0065\u0020\u0025\u0076", _agdgg.Name)
				if _babeb := d.Skip(); _babeb != nil {
					return _babeb
				}
			}
		case _e.EndElement:
			break _baaea
		case _e.CharData:
		}
	}
	return nil
}
func (_cdbf *CT_Grouping) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _bede := range start.Attr {
		if _bede.Name.Local == "\u0076\u0061\u006c" {
			_cdbf.ValAttr.UnmarshalXMLAttr(_bede)
			continue
		}
	}
	for {
		_fbea, _cgbfd := d.Token()
		if _cgbfd != nil {
			return _b.Errorf("\u0070\u0061\u0072si\u006e\u0067\u0020\u0043\u0054\u005f\u0047\u0072\u006f\u0075\u0070\u0069\u006e\u0067\u003a\u0020\u0025\u0073", _cgbfd)
		}
		if _ggbb, _gdda := _fbea.(_e.EndElement); _gdda && _ggbb.Name == start.Name {
			break
		}
	}
	return nil
}
func (_befgc *CT_GapAmount) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _befgc.ValAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0076\u0061\u006c"}, Value: _b.Sprintf("\u0025\u0076", *_befgc.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

type CT_NumData struct {
	FormatCode *string
	PtCount    *CT_UnsignedInt
	Pt         []*CT_NumVal
	ExtLst     *CT_ExtensionList
}

func (_egbaa ST_PictureFormat) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_cdggd := _e.Attr{}
	_cdggd.Name = name
	switch _egbaa {
	case ST_PictureFormatUnset:
		_cdggd.Value = ""
	case ST_PictureFormatStretch:
		_cdggd.Value = "\u0073t\u0072\u0065\u0074\u0063\u0068"
	case ST_PictureFormatStack:
		_cdggd.Value = "\u0073\u0074\u0061c\u006b"
	case ST_PictureFormatStackScale:
		_cdggd.Value = "\u0073\u0074\u0061\u0063\u006b\u0053\u0063\u0061\u006c\u0065"
	}
	return _cdggd, nil
}
func (_eefbb *ST_DepthPercent) ValidateWithPath(path string) error {
	_bafb := []string{}
	if _eefbb.ST_DepthPercentWithSymbol != nil {
		_bafb = append(_bafb, "\u0053T\u005f\u0044\u0065\u0070t\u0068\u0050\u0065\u0072\u0063e\u006et\u0057i\u0074\u0068\u0053\u0079\u006d\u0062\u006fl")
	}
	if _eefbb.ST_DepthPercentUShort != nil {
		_bafb = append(_bafb, "S\u0054\u005f\u0044\u0065pt\u0068P\u0065\u0072\u0063\u0065\u006et\u0055\u0053\u0068\u006f\u0072\u0074")
	}
	if len(_bafb) > 1 {
		return _b.Errorf("%\u0073\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u006d\u0065\u006d\u0062\u0065r\u0073\u0020\u0073e\u0074:\u0020\u0025\u0076", path, _bafb)
	}
	return nil
}
func NewCT_PictureStackUnit() *CT_PictureStackUnit {
	_dgedc := &CT_PictureStackUnit{}
	_dgedc.ValAttr = 0 + 1
	return _dgedc
}

type CT_ExtensionList struct{ Ext []*CT_Extension }
type CT_Thickness struct{ ValAttr ST_Thickness }

func NewCT_DoughnutChart() *CT_DoughnutChart { _fagea := &CT_DoughnutChart{}; return _fagea }
func (_acecg ST_Orientation) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_dffbe := _e.Attr{}
	_dffbe.Name = name
	switch _acecg {
	case ST_OrientationUnset:
		_dffbe.Value = ""
	case ST_OrientationMaxMin:
		_dffbe.Value = "\u006d\u0061\u0078\u004d\u0069\u006e"
	case ST_OrientationMinMax:
		_dffbe.Value = "\u006d\u0069\u006e\u004d\u0061\u0078"
	}
	return _dffbe, nil
}
func (_bacda *CT_PivotFmt) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_bacda.Idx = NewCT_UnsignedInt()
_dfgd:
	for {
		_gfcd, _ebggb := d.Token()
		if _ebggb != nil {
			return _ebggb
		}
		switch _cgcge := _gfcd.(type) {
		case _e.StartElement:
			switch _cgcge.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}:
				if _gfbac := d.DecodeElement(_bacda.Idx, &_cgcge); _gfbac != nil {
					return _gfbac
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_bacda.SpPr = _f.NewCT_ShapeProperties()
				if _adcef := d.DecodeElement(_bacda.SpPr, &_cgcge); _adcef != nil {
					return _adcef
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_bacda.TxPr = _f.NewCT_TextBody()
				if _dbba := d.DecodeElement(_bacda.TxPr, &_cgcge); _dbba != nil {
					return _dbba
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u0072\u006b\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u0072\u006b\u0065\u0072"}:
				_bacda.Marker = NewCT_Marker()
				if _fdba := d.DecodeElement(_bacda.Marker, &_cgcge); _fdba != nil {
					return _fdba
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062\u006c"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062\u006c"}:
				_bacda.DLbl = NewCT_DLbl()
				if _ggbed := d.DecodeElement(_bacda.DLbl, &_cgcge); _ggbed != nil {
					return _ggbed
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_bacda.ExtLst = NewCT_ExtensionList()
				if _daeaf := d.DecodeElement(_bacda.ExtLst, &_cgcge); _daeaf != nil {
					return _daeaf
				}
			default:
				_a.Log.Debug("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0050\u0069\u0076\u006f\u0074\u0046\u006d\u0074\u0020\u0025\u0076", _cgcge.Name)
				if _gfebb := d.Skip(); _gfebb != nil {
					return _gfebb
				}
			}
		case _e.EndElement:
			break _dfgd
		case _e.CharData:
		}
	}
	return nil
}
func NewCT_BarGrouping() *CT_BarGrouping { _acbg := &CT_BarGrouping{}; return _acbg }

type CT_TextLanguageID struct{ ValAttr string }

// ValidateWithPath validates the CT_OfPieChart and its children, prefixing error messages with path
func (_feeba *CT_OfPieChart) ValidateWithPath(path string) error {
	if _bcffa := _feeba.OfPieType.ValidateWithPath(path + "\u002f\u004f\u0066\u0050\u0069\u0065\u0054\u0079\u0070\u0065"); _bcffa != nil {
		return _bcffa
	}
	if _feeba.VaryColors != nil {
		if _fgade := _feeba.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _fgade != nil {
			return _fgade
		}
	}
	for _eabgf, _efgg := range _feeba.Ser {
		if _agcda := _efgg.ValidateWithPath(_b.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _eabgf)); _agcda != nil {
			return _agcda
		}
	}
	if _feeba.DLbls != nil {
		if _gfde := _feeba.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _gfde != nil {
			return _gfde
		}
	}
	if _feeba.GapWidth != nil {
		if _gdac := _feeba.GapWidth.ValidateWithPath(path + "\u002fG\u0061\u0070\u0057\u0069\u0064\u0074h"); _gdac != nil {
			return _gdac
		}
	}
	if _feeba.SplitType != nil {
		if _bcbbd := _feeba.SplitType.ValidateWithPath(path + "\u002f\u0053\u0070\u006c\u0069\u0074\u0054\u0079\u0070\u0065"); _bcbbd != nil {
			return _bcbbd
		}
	}
	if _feeba.SplitPos != nil {
		if _edgeg := _feeba.SplitPos.ValidateWithPath(path + "\u002fS\u0070\u006c\u0069\u0074\u0050\u006fs"); _edgeg != nil {
			return _edgeg
		}
	}
	if _feeba.CustSplit != nil {
		if _dcgb := _feeba.CustSplit.ValidateWithPath(path + "\u002f\u0043\u0075\u0073\u0074\u0053\u0070\u006c\u0069\u0074"); _dcgb != nil {
			return _dcgb
		}
	}
	if _feeba.SecondPieSize != nil {
		if _dgbf := _feeba.SecondPieSize.ValidateWithPath(path + "\u002f\u0053\u0065\u0063\u006f\u006e\u0064\u0050\u0069e\u0053\u0069\u007a\u0065"); _dgbf != nil {
			return _dgbf
		}
	}
	for _ecag, _gaffc := range _feeba.SerLines {
		if _bdgegc := _gaffc.ValidateWithPath(_b.Sprintf("\u0025s\u002fS\u0065\u0072\u004c\u0069\u006e\u0065\u0073\u005b\u0025\u0064\u005d", path, _ecag)); _bdgegc != nil {
			return _bdgegc
		}
	}
	if _feeba.ExtLst != nil {
		if _gddg := _feeba.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _gddg != nil {
			return _gddg
		}
	}
	return nil
}

// ValidateWithPath validates the CT_SerAx and its children, prefixing error messages with path
func (_gfcfb *CT_SerAx) ValidateWithPath(path string) error {
	if _aagdf := _gfcfb.AxId.ValidateWithPath(path + "\u002f\u0041\u0078I\u0064"); _aagdf != nil {
		return _aagdf
	}
	if _ffdca := _gfcfb.Scaling.ValidateWithPath(path + "\u002f\u0053\u0063\u0061\u006c\u0069\u006e\u0067"); _ffdca != nil {
		return _ffdca
	}
	if _gfcfb.Delete != nil {
		if _abcfc := _gfcfb.Delete.ValidateWithPath(path + "\u002fD\u0065\u006c\u0065\u0074\u0065"); _abcfc != nil {
			return _abcfc
		}
	}
	if _fafa := _gfcfb.AxPos.ValidateWithPath(path + "\u002f\u0041\u0078\u0050\u006f\u0073"); _fafa != nil {
		return _fafa
	}
	if _gfcfb.MajorGridlines != nil {
		if _afdc := _gfcfb.MajorGridlines.ValidateWithPath(path + "\u002fM\u0061j\u006f\u0072\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"); _afdc != nil {
			return _afdc
		}
	}
	if _gfcfb.MinorGridlines != nil {
		if _acfef := _gfcfb.MinorGridlines.ValidateWithPath(path + "\u002fM\u0069n\u006f\u0072\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"); _acfef != nil {
			return _acfef
		}
	}
	if _gfcfb.Title != nil {
		if _cgae := _gfcfb.Title.ValidateWithPath(path + "\u002f\u0054\u0069\u0074\u006c\u0065"); _cgae != nil {
			return _cgae
		}
	}
	if _gfcfb.NumFmt != nil {
		if _gfbaa := _gfcfb.NumFmt.ValidateWithPath(path + "\u002fN\u0075\u006d\u0046\u006d\u0074"); _gfbaa != nil {
			return _gfbaa
		}
	}
	if _gfcfb.MajorTickMark != nil {
		if _bcgfe := _gfcfb.MajorTickMark.ValidateWithPath(path + "\u002f\u004d\u0061\u006a\u006f\u0072\u0054\u0069\u0063k\u004d\u0061\u0072\u006b"); _bcgfe != nil {
			return _bcgfe
		}
	}
	if _gfcfb.MinorTickMark != nil {
		if _dadca := _gfcfb.MinorTickMark.ValidateWithPath(path + "\u002f\u004d\u0069\u006e\u006f\u0072\u0054\u0069\u0063k\u004d\u0061\u0072\u006b"); _dadca != nil {
			return _dadca
		}
	}
	if _gfcfb.TickLblPos != nil {
		if _deda := _gfcfb.TickLblPos.ValidateWithPath(path + "/\u0054\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"); _deda != nil {
			return _deda
		}
	}
	if _gfcfb.SpPr != nil {
		if _gdcfd := _gfcfb.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _gdcfd != nil {
			return _gdcfd
		}
	}
	if _gfcfb.TxPr != nil {
		if _ebdbb := _gfcfb.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _ebdbb != nil {
			return _ebdbb
		}
	}
	if _ffff := _gfcfb.CrossAx.ValidateWithPath(path + "\u002f\u0043\u0072\u006f\u0073\u0073\u0041\u0078"); _ffff != nil {
		return _ffff
	}
	if _gfcfb.Choice != nil {
		if _abbac := _gfcfb.Choice.ValidateWithPath(path + "\u002fC\u0068\u006f\u0069\u0063\u0065"); _abbac != nil {
			return _abbac
		}
	}
	if _gfcfb.TickLblSkip != nil {
		if _gcbfb := _gfcfb.TickLblSkip.ValidateWithPath(path + "\u002f\u0054\u0069c\u006b\u004c\u0062\u006c\u0053\u006b\u0069\u0070"); _gcbfb != nil {
			return _gcbfb
		}
	}
	if _gfcfb.TickMarkSkip != nil {
		if _gadfe := _gfcfb.TickMarkSkip.ValidateWithPath(path + "\u002f\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b\u0053\u006b\u0069\u0070"); _gadfe != nil {
			return _gadfe
		}
	}
	if _gfcfb.ExtLst != nil {
		if _cggbgc := _gfcfb.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _cggbgc != nil {
			return _cggbgc
		}
	}
	return nil
}
func NewCT_PrintSettings() *CT_PrintSettings     { _affgd := &CT_PrintSettings{}; return _affgd }
func NewCT_Layout() *CT_Layout                   { _bcfa := &CT_Layout{}; return _bcfa }
func (_gdcaf ST_SizeRepresents) Validate() error { return _gdcaf.ValidateWithPath("") }
func NewGroup_DLbl() *Group_DLbl                 { _cbfcg := &Group_DLbl{}; return _cbfcg }
func (_ddeda ST_LegendPos) String() string {
	switch _ddeda {
	case 0:
		return ""
	case 1:
		return "\u0062"
	case 2:
		return "\u0074\u0072"
	case 3:
		return "\u006c"
	case 4:
		return "\u0072"
	case 5:
		return "\u0074"
	}
	return ""
}
func init() {
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0042\u006f\u006f\u006c\u0065\u0061\u006e", NewCT_Boolean)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0044\u006f\u0075\u0062\u006ce", NewCT_Double)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0055\u006e\u0073\u0069\u0067\u006ee\u0064\u0049\u006e\u0074", NewCT_UnsignedInt)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0052\u0065\u006c\u0049\u0064", NewCT_RelId)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fE\u0078\u0074\u0065\u006e\u0073\u0069\u006f\u006e", NewCT_Extension)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054_\u0045\u0078\u0074e\u006e\u0073\u0069\u006f\u006e\u004c\u0069\u0073\u0074", NewCT_ExtensionList)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u004e\u0075\u006d\u0056\u0061l", NewCT_NumVal)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004e\u0075\u006d\u0044\u0061\u0074\u0061", NewCT_NumData)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u004e\u0075\u006d\u0052\u0065f", NewCT_NumRef)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054_\u004e\u0075\u006dD\u0061\u0074\u0061\u0053\u006f\u0075\u0072\u0063\u0065", NewCT_NumDataSource)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0053\u0074\u0072\u0056\u0061l", NewCT_StrVal)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0053\u0074\u0072\u0044\u0061\u0074\u0061", NewCT_StrData)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0053\u0074\u0072\u0052\u0065f", NewCT_StrRef)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fT\u0078", NewCT_Tx)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0054\u0065\u0078\u0074\u004c\u0061\u006e\u0067\u0075a\u0067\u0065\u0049\u0044", NewCT_TextLanguageID)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004c\u0076\u006c", NewCT_Lvl)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005fM\u0075\u006c\u0074\u0069\u004cv\u006c\u0053t\u0072\u0044\u0061\u0074\u0061", NewCT_MultiLvlStrData)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004d\u0075\u006c\u0074\u0069\u004c\u0076\u006c\u0053t\u0072\u0052\u0065\u0066", NewCT_MultiLvlStrRef)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005fA\u0078\u0044\u0061\u0074\u0061\u0053\u006f\u0075\u0072\u0063\u0065", NewCT_AxDataSource)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0053\u0065\u0072\u0054\u0078", NewCT_SerTx)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005fL\u0061\u0079\u006f\u0075\u0074\u0054\u0061\u0072\u0067\u0065\u0074", NewCT_LayoutTarget)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004c\u0061\u0079\u006f\u0075\u0074\u004d\u006f\u0064\u0065", NewCT_LayoutMode)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005fM\u0061\u006e\u0075\u0061\u006c\u004c\u0061\u0079\u006f\u0075\u0074", NewCT_ManualLayout)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u004c\u0061\u0079\u006f\u0075t", NewCT_Layout)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0054\u0069\u0074\u006c\u0065", NewCT_Title)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0052\u006f\u0074\u0058", NewCT_RotX)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "C\u0054\u005f\u0048\u0050\u0065\u0072\u0063\u0065\u006e\u0074", NewCT_HPercent)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0052\u006f\u0074\u0059", NewCT_RotY)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005fD\u0065\u0070\u0074\u0068\u0050\u0065\u0072\u0063\u0065\u006e\u0074", NewCT_DepthPercent)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0050\u0065\u0072\u0073\u0070\u0065c\u0074\u0069\u0076\u0065", NewCT_Perspective)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0056\u0069\u0065\u0077\u0033D", NewCT_View3D)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0053\u0075\u0072\u0066\u0061\u0063\u0065", NewCT_Surface)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fT\u0068\u0069\u0063\u006b\u006e\u0065\u0073\u0073", NewCT_Thickness)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0044\u0054\u0061\u0062\u006ce", NewCT_DTable)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fG\u0061\u0070\u0041\u006d\u006f\u0075\u006e\u0074", NewCT_GapAmount)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004f\u0076\u0065\u0072\u006c\u0061\u0070", NewCT_Overlap)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0042\u0075\u0062\u0062\u006c\u0065S\u0063\u0061\u006c\u0065", NewCT_BubbleScale)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0053\u0069\u007a\u0065\u0052\u0065\u0070\u0072\u0065s\u0065\u006e\u0074\u0073", NewCT_SizeRepresents)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054_\u0046\u0069\u0072s\u0074\u0053\u006c\u0069\u0063\u0065\u0041\u006e\u0067", NewCT_FirstSliceAng)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "C\u0054\u005f\u0048\u006f\u006c\u0065\u0053\u0069\u007a\u0065", NewCT_HoleSize)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fS\u0070\u006c\u0069\u0074\u0054\u0079\u0070\u0065", NewCT_SplitType)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fC\u0075\u0073\u0074\u0053\u0070\u006c\u0069\u0074", NewCT_CustSplit)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054_\u0053\u0065\u0063o\u006e\u0064\u0050\u0069\u0065\u0053\u0069\u007a\u0065", NewCT_SecondPieSize)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u004e\u0075\u006d\u0046\u006dt", NewCT_NumFmt)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004c\u0062\u006c\u0041\u006c\u0067\u006e", NewCT_LblAlgn)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0044\u004c\u0062\u006c\u0050\u006f\u0073", NewCT_DLblPos)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0044\u004c\u0062\u006c", NewCT_DLbl)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0044\u004c\u0062\u006c\u0073", NewCT_DLbls)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004d\u0061\u0072\u006b\u0065\u0072S\u0074\u0079\u006c\u0065", NewCT_MarkerStyle)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004d\u0061\u0072\u006b\u0065\u0072\u0053\u0069\u007a\u0065", NewCT_MarkerSize)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u004d\u0061\u0072\u006b\u0065r", NewCT_Marker)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0044\u0050\u0074", NewCT_DPt)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054_\u0054\u0072\u0065n\u0064\u006c\u0069\u006e\u0065\u0054\u0079\u0070\u0065", NewCT_TrendlineType)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004f\u0072\u0064\u0065\u0072", NewCT_Order)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0050\u0065\u0072\u0069\u006fd", NewCT_Period)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005fT\u0072\u0065\u006e\u0064\u006c\u0069\u006e\u0065\u004c\u0062\u006c", NewCT_TrendlineLbl)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fT\u0072\u0065\u006e\u0064\u006c\u0069\u006e\u0065", NewCT_Trendline)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0045\u0072\u0072\u0044\u0069r", NewCT_ErrDir)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0045\u0072\u0072\u0042\u0061\u0072\u0054\u0079\u0070\u0065", NewCT_ErrBarType)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0045\u0072\u0072\u0056\u0061\u006c\u0054\u0079\u0070\u0065", NewCT_ErrValType)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0045\u0072\u0072\u0042\u0061\u0072\u0073", NewCT_ErrBars)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fU\u0070\u0044\u006f\u0077\u006e\u0042\u0061\u0072", NewCT_UpDownBar)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0055\u0070\u0044\u006f\u0077\u006e\u0042\u0061\u0072\u0073", NewCT_UpDownBars)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004c\u0069\u006e\u0065\u0053\u0065\u0072", NewCT_LineSer)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0053\u0063\u0061\u0074\u0074\u0065\u0072\u0053\u0065\u0072", NewCT_ScatterSer)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "C\u0054\u005f\u0052\u0061\u0064\u0061\u0072\u0053\u0065\u0072", NewCT_RadarSer)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0042\u0061\u0072\u0053\u0065r", NewCT_BarSer)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0041\u0072\u0065\u0061\u0053\u0065\u0072", NewCT_AreaSer)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0050\u0069\u0065\u0053\u0065r", NewCT_PieSer)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fB\u0075\u0062\u0062\u006c\u0065\u0053\u0065\u0072", NewCT_BubbleSer)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0053\u0075\u0072\u0066\u0061\u0063\u0065\u0053\u0065\u0072", NewCT_SurfaceSer)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "C\u0054\u005f\u0047\u0072\u006f\u0075\u0070\u0069\u006e\u0067", NewCT_Grouping)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0043\u0068\u0061\u0072\u0074\u004c\u0069\u006e\u0065\u0073", NewCT_ChartLines)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fL\u0069\u006e\u0065\u0043\u0068\u0061\u0072\u0074", NewCT_LineChart)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004c\u0069\u006e\u0065\u0033\u0044C\u0068\u0061\u0072\u0074", NewCT_Line3DChart)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0053\u0074\u006f\u0063\u006b\u0043\u0068\u0061\u0072\u0074", NewCT_StockChart)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005fS\u0063\u0061\u0074\u0074\u0065\u0072\u0053\u0074\u0079\u006c\u0065", NewCT_ScatterStyle)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005fS\u0063\u0061\u0074\u0074\u0065\u0072\u0043\u0068\u0061\u0072\u0074", NewCT_ScatterChart)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0052\u0061\u0064\u0061\u0072\u0053\u0074\u0079\u006c\u0065", NewCT_RadarStyle)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0052\u0061\u0064\u0061\u0072\u0043\u0068\u0061\u0072\u0074", NewCT_RadarChart)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0042\u0061\u0072\u0047\u0072\u006fu\u0070\u0069\u006e\u0067", NewCT_BarGrouping)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0042\u0061\u0072\u0044\u0069r", NewCT_BarDir)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0053\u0068\u0061\u0070\u0065", NewCT_Shape)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "C\u0054\u005f\u0042\u0061\u0072\u0043\u0068\u0061\u0072\u0074", NewCT_BarChart)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0042\u0061\u0072\u0033\u0044\u0043\u0068\u0061\u0072\u0074", NewCT_Bar3DChart)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fA\u0072\u0065\u0061\u0043\u0068\u0061\u0072\u0074", NewCT_AreaChart)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0041\u0072\u0065\u0061\u0033\u0044C\u0068\u0061\u0072\u0074", NewCT_Area3DChart)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "C\u0054\u005f\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074", NewCT_PieChart)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0050\u0069\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074", NewCT_Pie3DChart)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054_\u0044\u006f\u0075g\u0068\u006e\u0075\u0074\u0043\u0068\u0061\u0072\u0074", NewCT_DoughnutChart)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fO\u0066\u0050\u0069\u0065\u0054\u0079\u0070\u0065", NewCT_OfPieType)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004f\u0066\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074", NewCT_OfPieChart)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0042\u0075\u0062\u0062\u006c\u0065C\u0068\u0061\u0072\u0074", NewCT_BubbleChart)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0042\u0061\u006e\u0064\u0046\u006d\u0074", NewCT_BandFmt)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "C\u0054\u005f\u0042\u0061\u006e\u0064\u0046\u006d\u0074\u0073", NewCT_BandFmts)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005fS\u0075\u0072\u0066\u0061\u0063\u0065\u0043\u0068\u0061\u0072\u0074", NewCT_SurfaceChart)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0053\u0075\u0072\u0066\u0061\u0063\u0065\u0033\u0044C\u0068\u0061\u0072\u0074", NewCT_Surface3DChart)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0041\u0078\u0050\u006f\u0073", NewCT_AxPos)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0043\u0072\u006f\u0073\u0073\u0065\u0073", NewCT_Crosses)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005fC\u0072\u006f\u0073\u0073\u0042\u0065\u0074\u0077\u0065\u0065\u006e", NewCT_CrossBetween)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "C\u0054\u005f\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b", NewCT_TickMark)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0054\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073", NewCT_TickLblPos)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0053\u006b\u0069\u0070", NewCT_Skip)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "C\u0054\u005f\u0054\u0069\u006d\u0065\u0055\u006e\u0069\u0074", NewCT_TimeUnit)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "C\u0054\u005f\u0041\u0078\u0069\u0073\u0055\u006e\u0069\u0074", NewCT_AxisUnit)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0042\u0075\u0069\u006c\u0074\u0049n\u0055\u006e\u0069\u0074", NewCT_BuiltInUnit)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054_\u0050\u0069\u0063t\u0075\u0072\u0065\u0046\u006f\u0072\u006d\u0061\u0074", NewCT_PictureFormat)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0050ic\u0074\u0075\u0072\u0065\u0053\u0074\u0061\u0063\u006b\u0055\u006e\u0069\u0074", NewCT_PictureStackUnit)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0050\u0069\u0063\u0074\u0075\u0072\u0065\u004f\u0070t\u0069\u006f\u006e\u0073", NewCT_PictureOptions)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005fD\u0069\u0073\u0070\u0055\u006e\u0069\u0074\u0073\u004c\u0062\u006c", NewCT_DispUnitsLbl)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fD\u0069\u0073\u0070\u0055\u006e\u0069\u0074\u0073", NewCT_DispUnits)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004f\u0072\u0069\u0065\u006e\u0074a\u0074\u0069\u006f\u006e", NewCT_Orientation)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004c\u006f\u0067\u0042\u0061\u0073\u0065", NewCT_LogBase)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0053\u0063\u0061\u006c\u0069\u006e\u0067", NewCT_Scaling)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fL\u0062\u006c\u004f\u0066\u0066\u0073\u0065\u0074", NewCT_LblOffset)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0043\u0061\u0074\u0041\u0078", NewCT_CatAx)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0044\u0061\u0074\u0065\u0041x", NewCT_DateAx)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0053\u0065\u0072\u0041\u0078", NewCT_SerAx)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0056\u0061\u006c\u0041\u0078", NewCT_ValAx)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "C\u0054\u005f\u0050\u006c\u006f\u0074\u0041\u0072\u0065\u0061", NewCT_PlotArea)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "C\u0054\u005f\u0050\u0069\u0076\u006f\u0074\u0046\u006d\u0074", NewCT_PivotFmt)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fP\u0069\u0076\u006f\u0074\u0046\u006d\u0074\u0073", NewCT_PivotFmts)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fL\u0065\u0067\u0065\u006e\u0064\u0050\u006f\u0073", NewCT_LegendPos)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004c\u0065\u0067\u0065\u006e\u0064E\u006e\u0074\u0072\u0079", NewCT_LegendEntry)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u004c\u0065\u0067\u0065\u006ed", NewCT_Legend)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005fD\u0069\u0073\u0070\u0042\u006c\u0061\u006e\u006b\u0073\u0041\u0073", NewCT_DispBlanksAs)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0043\u0068\u0061\u0072\u0074", NewCT_Chart)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0053\u0074\u0079\u006c\u0065", NewCT_Style)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0050\u0069\u0076\u006f\u0074\u0053o\u0075\u0072\u0063\u0065", NewCT_PivotSource)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0050\u0072\u006f\u0074\u0065\u0063\u0074\u0069\u006f\u006e", NewCT_Protection)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005fH\u0065\u0061\u0064\u0065\u0072\u0046\u006f\u006f\u0074\u0065\u0072", NewCT_HeaderFooter)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0050\u0061\u0067\u0065\u004d\u0061r\u0067\u0069\u006e\u0073", NewCT_PageMargins)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005fE\u0078\u0074\u0065\u0072\u006e\u0061\u006c\u0044\u0061\u0074\u0061", NewCT_ExternalData)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fP\u0061\u0067\u0065\u0053\u0065\u0074\u0075\u0070", NewCT_PageSetup)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054_\u0050\u0072\u0069n\u0074\u0053\u0065\u0074\u0074\u0069\u006e\u0067\u0073", NewCT_PrintSettings)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0043\u0068\u0061\u0072\u0074\u0053\u0070\u0061\u0063\u0065", NewCT_ChartSpace)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0063\u0068\u0061\u0072\u0074\u0053\u0070\u0061\u0063\u0065", NewChartSpace)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0075\u0073\u0065\u0072\u0053\u0068\u0061\u0070\u0065\u0073", NewUserShapes)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0063\u0068\u0061r\u0074", NewChart)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0045\u0047\u005f\u0044\u004c\u0062\u006c\u0053\u0068\u0061\u0072\u0065\u0064", NewEG_DLblShared)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0047\u0072\u006f\u0075\u0070\u005f\u0044\u004c\u0062\u006c", NewGroup_DLbl)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "G\u0072\u006f\u0075\u0070\u005f\u0044\u004c\u0062\u006c\u0073", NewGroup_DLbls)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0045\u0047\u005fS\u0065\u0072\u0053\u0068\u0061\u0072\u0065\u0064", NewEG_SerShared)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0045G\u005fL\u0069\u006e\u0065\u0043\u0068a\u0072\u0074S\u0068\u0061\u0072\u0065\u0064", NewEG_LineChartShared)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0045\u0047\u005f\u0042\u0061\u0072\u0043\u0068\u0061\u0072\u0074\u0053h\u0061\u0072\u0065\u0064", NewEG_BarChartShared)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0045G\u005fA\u0072\u0065\u0061\u0043\u0068a\u0072\u0074S\u0068\u0061\u0072\u0065\u0064", NewEG_AreaChartShared)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0045\u0047\u005f\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074\u0053h\u0061\u0072\u0065\u0064", NewEG_PieChartShared)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "E\u0047\u005f\u0053\u0075rf\u0061c\u0065\u0043\u0068\u0061\u0072t\u0053\u0068\u0061\u0072\u0065\u0064", NewEG_SurfaceChartShared)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "E\u0047\u005f\u0041\u0078\u0053\u0068\u0061\u0072\u0065\u0064", NewEG_AxShared)
	_gb.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0045G\u005fL\u0065\u0067\u0065\u006e\u0064E\u006e\u0074r\u0079\u0044\u0061\u0074\u0061", NewEG_LegendEntryData)
}
