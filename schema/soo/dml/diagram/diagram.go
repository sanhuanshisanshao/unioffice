//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package diagram

import (
	_d "encoding/xml"
	_f "fmt"
	_e "github.com/sanhuanshisanshao/unioffice"
	_b "github.com/sanhuanshisanshao/unioffice/common/logger"
	_bc "github.com/sanhuanshisanshao/unioffice/schema/soo/dml"
	_gb "strconv"
)

func (_ffggbe ST_CenterShapeMapping) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_ffggbe.String(), start)
}
func (_beag *CT_ChildPref) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _ccae := range start.Attr {
		if _ccae.Name.Local == "\u0076\u0061\u006c" {
			_cfg, _cfbe := _gb.ParseInt(_ccae.Value, 10, 32)
			if _cfbe != nil {
				return _cfbe
			}
			_eede := int32(_cfg)
			_beag.ValAttr = &_eede
			continue
		}
	}
	for {
		_abd, _gfeg := d.Token()
		if _gfeg != nil {
			return _f.Errorf("\u0070a\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005f\u0043\u0068i\u006c\u0064\u0050\u0072\u0065\u0066\u003a\u0020\u0025\u0073", _gfeg)
		}
		if _ded, _egba := _abd.(_d.EndElement); _egba && _ded.Name == start.Name {
			break
		}
	}
	return nil
}

type CT_Description struct {
	LangAttr *string
	ValAttr  string
}
type ST_BoolOperator byte
type AG_ConstraintAttributes struct {
	TypeAttr    ST_ConstraintType
	ForAttr     ST_ConstraintRelationship
	ForNameAttr *string
	PtTypeAttr  ST_ElementType
}

func ParseUnionST_FunctionValue(s string) (ST_FunctionValue, error) { return ST_FunctionValue{}, nil }
func NewCT_Rules() *CT_Rules                                        { _abce := &CT_Rules{}; return _abce }

const (
	ST_ConnectorDimensionUnset ST_ConnectorDimension = 0
	ST_ConnectorDimension1D    ST_ConnectorDimension = 1
	ST_ConnectorDimension2D    ST_ConnectorDimension = 2
	ST_ConnectorDimensionCust  ST_ConnectorDimension = 3
)

type CT_PtList struct{ Pt []*CT_Pt }

func (_fgdad *ST_ContinueDirection) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_fgdad = 0
	case "\u0072\u0065\u0076\u0044\u0069\u0072":
		*_fgdad = 1
	case "\u0073a\u006d\u0065\u0044\u0069\u0072":
		*_fgdad = 2
	}
	return nil
}

// ValidateWithPath validates the CT_Categories and its children, prefixing error messages with path
func (_fdb *CT_Categories) ValidateWithPath(path string) error {
	for _ffbf, _cbf := range _fdb.Cat {
		if _dcea := _cbf.ValidateWithPath(_f.Sprintf("\u0025\u0073\u002f\u0043\u0061\u0074\u005b\u0025\u0064\u005d", path, _ffbf)); _dcea != nil {
			return _dcea
		}
	}
	return nil
}

// Validate validates the CT_HierBranchStyle and its children
func (_cgfc *CT_HierBranchStyle) Validate() error {
	return _cgfc.ValidateWithPath("\u0043T\u005fH\u0069\u0065\u0072\u0042\u0072a\u006e\u0063h\u0053\u0074\u0079\u006c\u0065")
}

type ST_Ints []int32

// ST_FunctionArgument is a union type
type ST_FunctionArgument struct{ ST_VariableType ST_VariableType }

func (_dgcd ST_DiagramHorizontalAlignment) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_dgcd.String(), start)
}

// Validate validates the CT_PtList and its children
func (_fbab *CT_PtList) Validate() error {
	return _fbab.ValidateWithPath("\u0043T\u005f\u0050\u0074\u004c\u0069\u0073t")
}

// Validate validates the CT_AnimOne and its children
func (_abe *CT_AnimOne) Validate() error {
	return _abe.ValidateWithPath("\u0043\u0054\u005f\u0041\u006e\u0069\u006d\u004f\u006e\u0065")
}
func (_efcb ST_NodeHorizontalAlignment) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_efcb.String(), start)
}

type ST_ElementTypes []ST_ElementType

func (_cagda *CT_Shape) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _cagda.RotAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0072\u006f\u0074"}, Value: _f.Sprintf("\u0025\u0076", *_cagda.RotAttr)})
	}
	if _cagda.TypeAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0074\u0079\u0070\u0065"}, Value: _f.Sprintf("\u0025\u0076", *_cagda.TypeAttr)})
	}
	if _cagda.BlipAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0072\u003a\u0062\u006c\u0069\u0070"}, Value: _f.Sprintf("\u0025\u0076", *_cagda.BlipAttr)})
	}
	if _cagda.ZOrderOffAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u007aO\u0072\u0064\u0065\u0072\u004f\u0066f"}, Value: _f.Sprintf("\u0025\u0076", *_cagda.ZOrderOffAttr)})
	}
	if _cagda.HideGeomAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0068\u0069\u0064\u0065\u0047\u0065\u006f\u006d"}, Value: _f.Sprintf("\u0025\u0064", _bbcdb(*_cagda.HideGeomAttr))})
	}
	if _cagda.LkTxEntryAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u006ck\u0054\u0078\u0045\u006e\u0074\u0072y"}, Value: _f.Sprintf("\u0025\u0064", _bbcdb(*_cagda.LkTxEntryAttr))})
	}
	if _cagda.BlipPhldrAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0062l\u0069\u0070\u0050\u0068\u006c\u0064r"}, Value: _f.Sprintf("\u0025\u0064", _bbcdb(*_cagda.BlipPhldrAttr))})
	}
	e.EncodeToken(start)
	if _cagda.AdjLst != nil {
		_ggcga := _d.StartElement{Name: _d.Name{Local: "\u0061\u0064\u006a\u004c\u0073\u0074"}}
		e.EncodeElement(_cagda.AdjLst, _ggcga)
	}
	if _cagda.ExtLst != nil {
		_agdc := _d.StartElement{Name: _d.Name{Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_cagda.ExtLst, _agdc)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

type CT_When struct {
	NameAttr          *string
	FuncAttr          ST_FunctionType
	ArgAttr           *ST_FunctionArgument
	OpAttr            ST_FunctionOperator
	ValAttr           ST_FunctionValue
	Alg               []*CT_Algorithm
	Shape             []*CT_Shape
	PresOf            []*CT_PresentationOf
	ConstrLst         []*CT_Constraints
	RuleLst           []*CT_Rules
	ForEach           []*CT_ForEach
	LayoutNode        []*CT_LayoutNode
	Choose            []*CT_Choose
	ExtLst            []*_bc.CT_OfficeArtExtensionList
	AxisAttr          *ST_AxisTypes
	PtTypeAttr        *ST_ElementTypes
	HideLastTransAttr *ST_Booleans
	StAttr            *ST_Ints
	CntAttr           *ST_UnsignedInts
	StepAttr          *ST_Ints
}

func (_febb *ST_Direction) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_febb = 0
	case "\u006e\u006f\u0072\u006d":
		*_febb = 1
	case "\u0072\u0065\u0076":
		*_febb = 2
	}
	return nil
}
func (_acbfc *CT_SDName) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _afegc := range start.Attr {
		if _afegc.Name.Local == "\u006c\u0061\u006e\u0067" {
			_gbdbg, _cdfdf := _afegc.Value, error(nil)
			if _cdfdf != nil {
				return _cdfdf
			}
			_acbfc.LangAttr = &_gbdbg
			continue
		}
		if _afegc.Name.Local == "\u0076\u0061\u006c" {
			_dbged, _dedee := _afegc.Value, error(nil)
			if _dedee != nil {
				return _dedee
			}
			_acbfc.ValAttr = _dbged
			continue
		}
	}
	for {
		_afaaf, _dfeb := d.Token()
		if _dfeb != nil {
			return _f.Errorf("p\u0061\u0072\u0073\u0069ng\u0020C\u0054\u005f\u0053\u0044\u004ea\u006d\u0065\u003a\u0020\u0025\u0073", _dfeb)
		}
		if _eeacf, _dgfdd := _afaaf.(_d.EndElement); _dgfdd && _eeacf.Name == start.Name {
			break
		}
	}
	return nil
}

// Validate validates the CT_ForEach and its children
func (_cebf *CT_ForEach) Validate() error {
	return _cebf.ValidateWithPath("\u0043\u0054\u005f\u0046\u006f\u0072\u0045\u0061\u0063\u0068")
}
func NewCT_Parameter() *CT_Parameter {
	_gbcdg := &CT_Parameter{}
	_gbcdg.TypeAttr = ST_ParameterId(1)
	return _gbcdg
}
func ParseSliceST_AxisTypes(s string) (ST_AxisTypes, error) { return ST_AxisTypes{}, nil }
func NewDataModel() *DataModel {
	_eaac := &DataModel{}
	_eaac.CT_DataModel = *NewCT_DataModel()
	return _eaac
}
func (_fgge *StyleDefHdrLst) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_fgge.CT_StyleDefinitionHeaderLst = *NewCT_StyleDefinitionHeaderLst()
_aebb:
	for {
		_ebbgg, _ceebf := d.Token()
		if _ceebf != nil {
			return _ceebf
		}
		switch _dbff := _ebbgg.(type) {
		case _d.StartElement:
			switch _dbff.Name {
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "s\u0074\u0079\u006c\u0065\u0044\u0065\u0066\u0048\u0064\u0072"}:
				_dadad := NewCT_StyleDefinitionHeader()
				if _deece := d.DecodeElement(_dadad, &_dbff); _deece != nil {
					return _deece
				}
				_fgge.StyleDefHdr = append(_fgge.StyleDefHdr, _dadad)
			default:
				_b.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069n\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006et\u0020\u006f\u006e\u0020\u0053\u0074\u0079\u006c\u0065\u0044\u0065\u0066\u0048\u0064r\u004cs\u0074\u0020\u0025\u0076", _dbff.Name)
				if _dceg := d.Skip(); _dceg != nil {
					return _dceg
				}
			}
		case _d.EndElement:
			break _aebb
		case _d.CharData:
		}
	}
	return nil
}

type CT_DiagramDefinition struct {
	UniqueIdAttr *string
	MinVerAttr   *string
	DefStyleAttr *string
	Title        []*CT_Name
	Desc         []*CT_Description
	CatLst       *CT_Categories
	SampData     *CT_SampleData
	StyleData    *CT_SampleData
	ClrData      *CT_SampleData
	LayoutNode   *CT_LayoutNode
	ExtLst       *_bc.CT_OfficeArtExtensionList
}
type ST_Booleans []bool

func (_ffcde ST_PtType) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_eddbg := _d.Attr{}
	_eddbg.Name = name
	switch _ffcde {
	case ST_PtTypeUnset:
		_eddbg.Value = ""
	case ST_PtTypeNode:
		_eddbg.Value = "\u006e\u006f\u0064\u0065"
	case ST_PtTypeAsst:
		_eddbg.Value = "\u0061\u0073\u0073\u0074"
	case ST_PtTypeDoc:
		_eddbg.Value = "\u0064\u006f\u0063"
	case ST_PtTypePres:
		_eddbg.Value = "\u0070\u0072\u0065\u0073"
	case ST_PtTypeParTrans:
		_eddbg.Value = "\u0070\u0061\u0072\u0054\u0072\u0061\u006e\u0073"
	case ST_PtTypeSibTrans:
		_eddbg.Value = "\u0073\u0069\u0062\u0054\u0072\u0061\u006e\u0073"
	}
	return _eddbg, nil
}

type CT_NumericRule struct {
	ValAttr     *float64
	FactAttr    *float64
	MaxAttr     *float64
	ExtLst      *_bc.CT_OfficeArtExtensionList
	TypeAttr    ST_ConstraintType
	ForAttr     ST_ConstraintRelationship
	ForNameAttr *string
	PtTypeAttr  ST_ElementType
}

// Validate validates the CT_ColorTransformHeaderLst and its children
func (_eeacd *CT_ColorTransformHeaderLst) Validate() error {
	return _eeacd.ValidateWithPath("\u0043\u0054\u005f\u0043\u006f\u006c\u006f\u0072\u0054\u0072\u0061n\u0073\u0066\u006f\u0072\u006d\u0048\u0065\u0061\u0064\u0065r\u004c\u0073\u0074")
}

// ST_PrSetCustVal is a union type
type ST_PrSetCustVal struct {
	ST_Percentage *string
	Int32         *int32
}

func (_gffc *CT_Otherwise) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _gffc.NameAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u006e\u0061\u006d\u0065"}, Value: _f.Sprintf("\u0025\u0076", *_gffc.NameAttr)})
	}
	e.EncodeToken(start)
	if _gffc.Alg != nil {
		_ddag := _d.StartElement{Name: _d.Name{Local: "\u0061\u006c\u0067"}}
		for _, _aagg := range _gffc.Alg {
			e.EncodeElement(_aagg, _ddag)
		}
	}
	if _gffc.Shape != nil {
		_fbc := _d.StartElement{Name: _d.Name{Local: "\u0073\u0068\u0061p\u0065"}}
		for _, _cfeb := range _gffc.Shape {
			e.EncodeElement(_cfeb, _fbc)
		}
	}
	if _gffc.PresOf != nil {
		_fead := _d.StartElement{Name: _d.Name{Local: "\u0070\u0072\u0065\u0073\u004f\u0066"}}
		for _, _cagc := range _gffc.PresOf {
			e.EncodeElement(_cagc, _fead)
		}
	}
	if _gffc.ConstrLst != nil {
		_accf := _d.StartElement{Name: _d.Name{Local: "\u0063o\u006e\u0073\u0074\u0072\u004c\u0073t"}}
		for _, _dbdg := range _gffc.ConstrLst {
			e.EncodeElement(_dbdg, _accf)
		}
	}
	if _gffc.RuleLst != nil {
		_fbbaf := _d.StartElement{Name: _d.Name{Local: "\u0072u\u006c\u0065\u004c\u0073\u0074"}}
		for _, _deec := range _gffc.RuleLst {
			e.EncodeElement(_deec, _fbbaf)
		}
	}
	if _gffc.ForEach != nil {
		_ecda := _d.StartElement{Name: _d.Name{Local: "\u0066o\u0072\u0045\u0061\u0063\u0068"}}
		for _, _bbcgg := range _gffc.ForEach {
			e.EncodeElement(_bbcgg, _ecda)
		}
	}
	if _gffc.LayoutNode != nil {
		_fgcc := _d.StartElement{Name: _d.Name{Local: "\u006c\u0061\u0079\u006f\u0075\u0074\u004e\u006f\u0064\u0065"}}
		for _, _febd := range _gffc.LayoutNode {
			e.EncodeElement(_febd, _fgcc)
		}
	}
	if _gffc.Choose != nil {
		_ggdc := _d.StartElement{Name: _d.Name{Local: "\u0063\u0068\u006f\u006f\u0073\u0065"}}
		for _, _ecaf := range _gffc.Choose {
			e.EncodeElement(_ecaf, _ggdc)
		}
	}
	if _gffc.ExtLst != nil {
		_afff := _d.StartElement{Name: _d.Name{Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}}
		for _, _eadb := range _gffc.ExtLst {
			e.EncodeElement(_eadb, _afff)
		}
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

// Validate validates the LayoutDefHdrLst and its children
func (_ecba *LayoutDefHdrLst) Validate() error {
	return _ecba.ValidateWithPath("\u004ca\u0079o\u0075\u0074\u0044\u0065\u0066\u0048\u0064\u0072\u004c\u0073\u0074")
}
func (_cffb *CT_OrgChart) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _fggf := range start.Attr {
		if _fggf.Name.Local == "\u0076\u0061\u006c" {
			_gdcc, _fdgd := _gb.ParseBool(_fggf.Value)
			if _fdgd != nil {
				return _fdgd
			}
			_cffb.ValAttr = &_gdcc
			continue
		}
	}
	for {
		_dfce, _fgda := d.Token()
		if _fgda != nil {
			return _f.Errorf("\u0070\u0061\u0072si\u006e\u0067\u0020\u0043\u0054\u005f\u004f\u0072\u0067\u0043\u0068\u0061\u0072\u0074\u003a\u0020\u0025\u0073", _fgda)
		}
		if _gcda, _cefc := _dfce.(_d.EndElement); _cefc && _gcda.Name == start.Name {
			break
		}
	}
	return nil
}
func (_begge ST_VariableType) String() string {
	switch _begge {
	case 0:
		return ""
	case 1:
		return "\u006e\u006f\u006e\u0065"
	case 2:
		return "\u006f\u0072\u0067\u0043\u0068\u0061\u0072\u0074"
	case 3:
		return "\u0063\u0068\u004da\u0078"
	case 4:
		return "\u0063\u0068\u0050\u0072\u0065\u0066"
	case 5:
		return "\u0062\u0075\u006c\u0045\u006e\u0061\u0062\u006c\u0065\u0064"
	case 6:
		return "\u0064\u0069\u0072"
	case 7:
		return "\u0068\u0069\u0065\u0072\u0042\u0072\u0061\u006e\u0063\u0068"
	case 8:
		return "\u0061n\u0069\u006d\u004f\u006e\u0065"
	case 9:
		return "\u0061n\u0069\u006d\u004c\u0076\u006c"
	case 10:
		return "\u0072\u0065\u0073\u0069\u007a\u0065\u0048\u0061\u006e\u0064\u006c\u0065\u0073"
	}
	return ""
}
func NewCT_PtList() *CT_PtList { _gcbf := &CT_PtList{}; return _gcbf }
func (_bdgf *CT_Cxn) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _gaac := range start.Attr {
		if _gaac.Name.Local == "\u006do\u0064\u0065\u006c\u0049\u0064" {
			_dag, _aded := ParseUnionST_ModelId(_gaac.Value)
			if _aded != nil {
				return _aded
			}
			_bdgf.ModelIdAttr = _dag
			continue
		}
		if _gaac.Name.Local == "\u0074\u0079\u0070\u0065" {
			_bdgf.TypeAttr.UnmarshalXMLAttr(_gaac)
			continue
		}
		if _gaac.Name.Local == "\u0073\u0072\u0063I\u0064" {
			_dbdd, _adfaf := ParseUnionST_ModelId(_gaac.Value)
			if _adfaf != nil {
				return _adfaf
			}
			_bdgf.SrcIdAttr = _dbdd
			continue
		}
		if _gaac.Name.Local == "\u0064\u0065\u0073\u0074\u0049\u0064" {
			_ffbc, _eafd := ParseUnionST_ModelId(_gaac.Value)
			if _eafd != nil {
				return _eafd
			}
			_bdgf.DestIdAttr = _ffbc
			continue
		}
		if _gaac.Name.Local == "\u0073\u0072\u0063\u004f\u0072\u0064" {
			_cbabf, _bebc := _gb.ParseUint(_gaac.Value, 10, 32)
			if _bebc != nil {
				return _bebc
			}
			_bdgf.SrcOrdAttr = uint32(_cbabf)
			continue
		}
		if _gaac.Name.Local == "\u0064e\u0073\u0074\u004f\u0072\u0064" {
			_eda, _ceag := _gb.ParseUint(_gaac.Value, 10, 32)
			if _ceag != nil {
				return _ceag
			}
			_bdgf.DestOrdAttr = uint32(_eda)
			continue
		}
		if _gaac.Name.Local == "\u0070\u0061\u0072\u0054\u0072\u0061\u006e\u0073\u0049\u0064" {
			_ecc, _bce := ParseUnionST_ModelId(_gaac.Value)
			if _bce != nil {
				return _bce
			}
			_bdgf.ParTransIdAttr = &_ecc
			continue
		}
		if _gaac.Name.Local == "\u0073\u0069\u0062\u0054\u0072\u0061\u006e\u0073\u0049\u0064" {
			_cdec, _bae := ParseUnionST_ModelId(_gaac.Value)
			if _bae != nil {
				return _bae
			}
			_bdgf.SibTransIdAttr = &_cdec
			continue
		}
		if _gaac.Name.Local == "\u0070\u0072\u0065\u0073\u0049\u0064" {
			_agaf, _cbdb := _gaac.Value, error(nil)
			if _cbdb != nil {
				return _cbdb
			}
			_bdgf.PresIdAttr = &_agaf
			continue
		}
	}
_ccgd:
	for {
		_acfa, _edeb := d.Token()
		if _edeb != nil {
			return _edeb
		}
		switch _eaaac := _acfa.(type) {
		case _d.StartElement:
			switch _eaaac.Name {
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_bdgf.ExtLst = _bc.NewCT_OfficeArtExtensionList()
				if _feee := d.DecodeElement(_bdgf.ExtLst, &_eaaac); _feee != nil {
					return _feee
				}
			default:
				_b.Log.Debug("\u0073\u006b\u0069\u0070\u0070i\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0043\u0078\u006e\u0020\u0025\u0076", _eaaac.Name)
				if _aede := d.Skip(); _aede != nil {
					return _aede
				}
			}
		case _d.EndElement:
			break _ccgd
		case _d.CharData:
		}
	}
	return nil
}
func (_eeaa *CT_CxnList) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_eeb:
	for {
		_cceg, _gfbgg := d.Token()
		if _gfbgg != nil {
			return _gfbgg
		}
		switch _fadbf := _cceg.(type) {
		case _d.StartElement:
			switch _fadbf.Name {
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0078\u006e"}:
				_agccd := NewCT_Cxn()
				if _agadd := d.DecodeElement(_agccd, &_fadbf); _agadd != nil {
					return _agadd
				}
				_eeaa.Cxn = append(_eeaa.Cxn, _agccd)
			default:
				_b.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006ce\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005fC\u0078\u006e\u004c\u0069\u0073\u0074\u0020\u0025\u0076", _fadbf.Name)
				if _aedc := d.Skip(); _aedc != nil {
					return _aedc
				}
			}
		case _d.EndElement:
			break _eeb
		case _d.CharData:
		}
	}
	return nil
}
func (_efde *ST_ElementType) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_efde = 0
	case "\u0061\u006c\u006c":
		*_efde = 1
	case "\u0064\u006f\u0063":
		*_efde = 2
	case "\u006e\u006f\u0064\u0065":
		*_efde = 3
	case "\u006e\u006f\u0072\u006d":
		*_efde = 4
	case "\u006eo\u006e\u004e\u006f\u0072\u006d":
		*_efde = 5
	case "\u0061\u0073\u0073\u0074":
		*_efde = 6
	case "\u006eo\u006e\u0041\u0073\u0073\u0074":
		*_efde = 7
	case "\u0070\u0061\u0072\u0054\u0072\u0061\u006e\u0073":
		*_efde = 8
	case "\u0070\u0072\u0065\u0073":
		*_efde = 9
	case "\u0073\u0069\u0062\u0054\u0072\u0061\u006e\u0073":
		*_efde = 10
	}
	return nil
}
func (_ac *AG_IteratorAttributes) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _ge := range start.Attr {
		if _ge.Name.Local == "\u0061\u0078\u0069\u0073" {
			_dbg, _egg := ParseSliceST_AxisTypes(_ge.Value)
			if _egg != nil {
				return _egg
			}
			_ac.AxisAttr = &_dbg
			continue
		}
		if _ge.Name.Local == "\u0070\u0074\u0054\u0079\u0070\u0065" {
			_fba, _aga := ParseSliceST_ElementTypes(_ge.Value)
			if _aga != nil {
				return _aga
			}
			_ac.PtTypeAttr = &_fba
			continue
		}
		if _ge.Name.Local == "\u0068\u0069\u0064\u0065\u004c\u0061\u0073\u0074\u0054\u0072\u0061\u006e\u0073" {
			_eb, _aed := ParseSliceST_Booleans(_ge.Value)
			if _aed != nil {
				return _aed
			}
			_ac.HideLastTransAttr = &_eb
			continue
		}
		if _ge.Name.Local == "\u0073\u0074" {
			_ged, _ccce := ParseSliceST_Ints(_ge.Value)
			if _ccce != nil {
				return _ccce
			}
			_ac.StAttr = &_ged
			continue
		}
		if _ge.Name.Local == "\u0063\u006e\u0074" {
			_ade, _agdd := ParseSliceST_UnsignedInts(_ge.Value)
			if _agdd != nil {
				return _agdd
			}
			_ac.CntAttr = &_ade
			continue
		}
		if _ge.Name.Local == "\u0073\u0074\u0065\u0070" {
			_ffg, _cdc := ParseSliceST_Ints(_ge.Value)
			if _cdc != nil {
				return _cdc
			}
			_ac.StepAttr = &_ffg
			continue
		}
	}
	for {
		_gef, _ebd := d.Token()
		if _ebd != nil {
			return _f.Errorf("\u0070\u0061\u0072\u0073\u0069\u006eg\u0020\u0041\u0047\u005f\u0049\u0074\u0065\u0072\u0061\u0074\u006f\u0072\u0041t\u0074\u0072\u0069\u0062\u0075\u0074\u0065s\u003a\u0020\u0025\u0073", _ebd)
		}
		if _efd, _fcc := _gef.(_d.EndElement); _fcc && _efd.Name == start.Name {
			break
		}
	}
	return nil
}
func NewCT_StyleLabel() *CT_StyleLabel { _gcba := &CT_StyleLabel{}; return _gcba }
func (_bdbdd ST_NodeHorizontalAlignment) ValidateWithPath(path string) error {
	switch _bdbdd {
	case 0, 1, 2, 3:
	default:
		return _f.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_bdbdd))
	}
	return nil
}

type ST_SecondaryLinearDirection byte
type ST_SecondaryChildAlignment byte

func (_eab *CT_AdjLst) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_age:
	for {
		_dga, _adc := d.Token()
		if _adc != nil {
			return _adc
		}
		switch _aee := _dga.(type) {
		case _d.StartElement:
			switch _aee.Name {
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0061\u0064\u006a"}:
				_ga := NewCT_Adj()
				if _dcf := d.DecodeElement(_ga, &_aee); _dcf != nil {
					return _dcf
				}
				_eab.Adj = append(_eab.Adj, _ga)
			default:
				_b.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u0041\u0064\u006aL\u0073\u0074 \u0025\u0076", _aee.Name)
				if _fbfg := d.Skip(); _fbfg != nil {
					return _fbfg
				}
			}
		case _d.EndElement:
			break _age
		case _d.CharData:
		}
	}
	return nil
}
func (_efacb ST_ConstraintType) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_bedc := _d.Attr{}
	_bedc.Name = name
	switch _efacb {
	case ST_ConstraintTypeUnset:
		_bedc.Value = ""
	case ST_ConstraintTypeNone:
		_bedc.Value = "\u006e\u006f\u006e\u0065"
	case ST_ConstraintTypeAlignOff:
		_bedc.Value = "\u0061\u006c\u0069\u0067\u006e\u004f\u0066\u0066"
	case ST_ConstraintTypeBegMarg:
		_bedc.Value = "\u0062e\u0067\u004d\u0061\u0072\u0067"
	case ST_ConstraintTypeBendDist:
		_bedc.Value = "\u0062\u0065\u006e\u0064\u0044\u0069\u0073\u0074"
	case ST_ConstraintTypeBegPad:
		_bedc.Value = "\u0062\u0065\u0067\u0050\u0061\u0064"
	case ST_ConstraintTypeB:
		_bedc.Value = "\u0062"
	case ST_ConstraintTypeBMarg:
		_bedc.Value = "\u0062\u004d\u0061r\u0067"
	case ST_ConstraintTypeBOff:
		_bedc.Value = "\u0062\u004f\u0066\u0066"
	case ST_ConstraintTypeCtrX:
		_bedc.Value = "\u0063\u0074\u0072\u0058"
	case ST_ConstraintTypeCtrXOff:
		_bedc.Value = "\u0063t\u0072\u0058\u004f\u0066\u0066"
	case ST_ConstraintTypeCtrY:
		_bedc.Value = "\u0063\u0074\u0072\u0059"
	case ST_ConstraintTypeCtrYOff:
		_bedc.Value = "\u0063t\u0072\u0059\u004f\u0066\u0066"
	case ST_ConstraintTypeConnDist:
		_bedc.Value = "\u0063\u006f\u006e\u006e\u0044\u0069\u0073\u0074"
	case ST_ConstraintTypeDiam:
		_bedc.Value = "\u0064\u0069\u0061\u006d"
	case ST_ConstraintTypeEndMarg:
		_bedc.Value = "\u0065n\u0064\u004d\u0061\u0072\u0067"
	case ST_ConstraintTypeEndPad:
		_bedc.Value = "\u0065\u006e\u0064\u0050\u0061\u0064"
	case ST_ConstraintTypeH:
		_bedc.Value = "\u0068"
	case ST_ConstraintTypeHArH:
		_bedc.Value = "\u0068\u0041\u0072\u0048"
	case ST_ConstraintTypeHOff:
		_bedc.Value = "\u0068\u004f\u0066\u0066"
	case ST_ConstraintTypeL:
		_bedc.Value = "\u006c"
	case ST_ConstraintTypeLMarg:
		_bedc.Value = "\u006c\u004d\u0061r\u0067"
	case ST_ConstraintTypeLOff:
		_bedc.Value = "\u006c\u004f\u0066\u0066"
	case ST_ConstraintTypeR:
		_bedc.Value = "\u0072"
	case ST_ConstraintTypeRMarg:
		_bedc.Value = "\u0072\u004d\u0061r\u0067"
	case ST_ConstraintTypeROff:
		_bedc.Value = "\u0072\u004f\u0066\u0066"
	case ST_ConstraintTypePrimFontSz:
		_bedc.Value = "\u0070\u0072\u0069\u006d\u0046\u006f\u006e\u0074\u0053\u007a"
	case ST_ConstraintTypePyraAcctRatio:
		_bedc.Value = "\u0070\u0079\u0072\u0061\u0041\u0063\u0063\u0074\u0052\u0061\u0074\u0069\u006f"
	case ST_ConstraintTypeSecFontSz:
		_bedc.Value = "\u0073e\u0063\u0046\u006f\u006e\u0074\u0053z"
	case ST_ConstraintTypeSibSp:
		_bedc.Value = "\u0073\u0069\u0062S\u0070"
	case ST_ConstraintTypeSecSibSp:
		_bedc.Value = "\u0073\u0065\u0063\u0053\u0069\u0062\u0053\u0070"
	case ST_ConstraintTypeSp:
		_bedc.Value = "\u0073\u0070"
	case ST_ConstraintTypeStemThick:
		_bedc.Value = "\u0073t\u0065\u006d\u0054\u0068\u0069\u0063k"
	case ST_ConstraintTypeT:
		_bedc.Value = "\u0074"
	case ST_ConstraintTypeTMarg:
		_bedc.Value = "\u0074\u004d\u0061r\u0067"
	case ST_ConstraintTypeTOff:
		_bedc.Value = "\u0074\u004f\u0066\u0066"
	case ST_ConstraintTypeUserA:
		_bedc.Value = "\u0075\u0073\u0065r\u0041"
	case ST_ConstraintTypeUserB:
		_bedc.Value = "\u0075\u0073\u0065r\u0042"
	case ST_ConstraintTypeUserC:
		_bedc.Value = "\u0075\u0073\u0065r\u0043"
	case ST_ConstraintTypeUserD:
		_bedc.Value = "\u0075\u0073\u0065r\u0044"
	case ST_ConstraintTypeUserE:
		_bedc.Value = "\u0075\u0073\u0065r\u0045"
	case ST_ConstraintTypeUserF:
		_bedc.Value = "\u0075\u0073\u0065r\u0046"
	case ST_ConstraintTypeUserG:
		_bedc.Value = "\u0075\u0073\u0065r\u0047"
	case ST_ConstraintTypeUserH:
		_bedc.Value = "\u0075\u0073\u0065r\u0048"
	case ST_ConstraintTypeUserI:
		_bedc.Value = "\u0075\u0073\u0065r\u0049"
	case ST_ConstraintTypeUserJ:
		_bedc.Value = "\u0075\u0073\u0065r\u004a"
	case ST_ConstraintTypeUserK:
		_bedc.Value = "\u0075\u0073\u0065r\u004b"
	case ST_ConstraintTypeUserL:
		_bedc.Value = "\u0075\u0073\u0065r\u004c"
	case ST_ConstraintTypeUserM:
		_bedc.Value = "\u0075\u0073\u0065r\u004d"
	case ST_ConstraintTypeUserN:
		_bedc.Value = "\u0075\u0073\u0065r\u004e"
	case ST_ConstraintTypeUserO:
		_bedc.Value = "\u0075\u0073\u0065r\u004f"
	case ST_ConstraintTypeUserP:
		_bedc.Value = "\u0075\u0073\u0065r\u0050"
	case ST_ConstraintTypeUserQ:
		_bedc.Value = "\u0075\u0073\u0065r\u0051"
	case ST_ConstraintTypeUserR:
		_bedc.Value = "\u0075\u0073\u0065r\u0052"
	case ST_ConstraintTypeUserS:
		_bedc.Value = "\u0075\u0073\u0065r\u0053"
	case ST_ConstraintTypeUserT:
		_bedc.Value = "\u0075\u0073\u0065r\u0054"
	case ST_ConstraintTypeUserU:
		_bedc.Value = "\u0075\u0073\u0065r\u0055"
	case ST_ConstraintTypeUserV:
		_bedc.Value = "\u0075\u0073\u0065r\u0056"
	case ST_ConstraintTypeUserW:
		_bedc.Value = "\u0075\u0073\u0065r\u0057"
	case ST_ConstraintTypeUserX:
		_bedc.Value = "\u0075\u0073\u0065r\u0058"
	case ST_ConstraintTypeUserY:
		_bedc.Value = "\u0075\u0073\u0065r\u0059"
	case ST_ConstraintTypeUserZ:
		_bedc.Value = "\u0075\u0073\u0065r\u005a"
	case ST_ConstraintTypeW:
		_bedc.Value = "\u0077"
	case ST_ConstraintTypeWArH:
		_bedc.Value = "\u0077\u0041\u0072\u0048"
	case ST_ConstraintTypeWOff:
		_bedc.Value = "\u0077\u004f\u0066\u0066"
	}
	return _bedc, nil
}
func (_debff ST_ElementType) String() string {
	switch _debff {
	case 0:
		return ""
	case 1:
		return "\u0061\u006c\u006c"
	case 2:
		return "\u0064\u006f\u0063"
	case 3:
		return "\u006e\u006f\u0064\u0065"
	case 4:
		return "\u006e\u006f\u0072\u006d"
	case 5:
		return "\u006eo\u006e\u004e\u006f\u0072\u006d"
	case 6:
		return "\u0061\u0073\u0073\u0074"
	case 7:
		return "\u006eo\u006e\u0041\u0073\u0073\u0074"
	case 8:
		return "\u0070\u0061\u0072\u0054\u0072\u0061\u006e\u0073"
	case 9:
		return "\u0070\u0072\u0065\u0073"
	case 10:
		return "\u0073\u0069\u0062\u0054\u0072\u0061\u006e\u0073"
	}
	return ""
}
func (_cdba *ST_HueDir) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_gfgfc, _feff := d.Token()
	if _feff != nil {
		return _feff
	}
	if _ddfgf, _bdcg := _gfgfc.(_d.EndElement); _bdcg && _ddfgf.Name == start.Name {
		*_cdba = 1
		return nil
	}
	if _dedae, _dedc := _gfgfc.(_d.CharData); !_dedc {
		return _f.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _gfgfc)
	} else {
		switch string(_dedae) {
		case "":
			*_cdba = 0
		case "\u0063\u0077":
			*_cdba = 1
		case "\u0063\u0063\u0077":
			*_cdba = 2
		}
	}
	_gfgfc, _feff = d.Token()
	if _feff != nil {
		return _feff
	}
	if _ecfd, _gcded := _gfgfc.(_d.EndElement); _gcded && _ecfd.Name == start.Name {
		return nil
	}
	return _f.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _gfgfc)
}
func NewCT_LayoutNode() *CT_LayoutNode { _cfdbf := &CT_LayoutNode{}; return _cfdbf }
func NewLayoutDef() *LayoutDef {
	_bfae := &LayoutDef{}
	_bfae.CT_DiagramDefinition = *NewCT_DiagramDefinition()
	return _bfae
}

type CT_Otherwise struct {
	NameAttr   *string
	Alg        []*CT_Algorithm
	Shape      []*CT_Shape
	PresOf     []*CT_PresentationOf
	ConstrLst  []*CT_Constraints
	RuleLst    []*CT_Rules
	ForEach    []*CT_ForEach
	LayoutNode []*CT_LayoutNode
	Choose     []*CT_Choose
	ExtLst     []*_bc.CT_OfficeArtExtensionList
}

// Validate validates the CT_Description and its children
func (_gdafd *CT_Description) Validate() error {
	return _gdafd.ValidateWithPath("\u0043\u0054\u005f\u0044\u0065\u0073\u0063\u0072\u0069p\u0074\u0069\u006f\u006e")
}
func (_dbda *CT_DiagramDefinitionHeaderLst) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_acde:
	for {
		_eecg, _dfccd := d.Token()
		if _dfccd != nil {
			return _dfccd
		}
		switch _fadg := _eecg.(type) {
		case _d.StartElement:
			switch _fadg.Name {
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u006c\u0061\u0079o\u0075\u0074\u0044\u0065\u0066\u0048\u0064\u0072"}:
				_dade := NewCT_DiagramDefinitionHeader()
				if _cada := d.DecodeElement(_dade, &_fadg); _cada != nil {
					return _cada
				}
				_dbda.LayoutDefHdr = append(_dbda.LayoutDefHdr, _dade)
			default:
				_b.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072t\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074 \u006f\u006e\u0020\u0043\u0054\u005f\u0044\u0069\u0061\u0067\u0072\u0061\u006d\u0044\u0065\u0066\u0069\u006ei\u0074\u0069\u006f\u006e\u0048\u0065a\u0064\u0065r\u004c\u0073t\u0020%\u0076", _fadg.Name)
				if _eef := d.Skip(); _eef != nil {
					return _eef
				}
			}
		case _d.EndElement:
			break _acde
		case _d.CharData:
		}
	}
	return nil
}
func (_acbgb ST_TextAnchorVertical) String() string {
	switch _acbgb {
	case 0:
		return ""
	case 1:
		return "\u0074"
	case 2:
		return "\u006d\u0069\u0064"
	case 3:
		return "\u0062"
	}
	return ""
}
func NewCT_Cxn() *CT_Cxn { _eac := &CT_Cxn{}; return _eac }
func (_bbag *ST_FunctionType) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_ffecg, _dged := d.Token()
	if _dged != nil {
		return _dged
	}
	if _fbfgg, _fffa := _ffecg.(_d.EndElement); _fffa && _fbfgg.Name == start.Name {
		*_bbag = 1
		return nil
	}
	if _dfaa, _gdcd := _ffecg.(_d.CharData); !_gdcd {
		return _f.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _ffecg)
	} else {
		switch string(_dfaa) {
		case "":
			*_bbag = 0
		case "\u0063\u006e\u0074":
			*_bbag = 1
		case "\u0070\u006f\u0073":
			*_bbag = 2
		case "\u0072\u0065\u0076\u0050\u006f\u0073":
			*_bbag = 3
		case "\u0070o\u0073\u0045\u0076\u0065\u006e":
			*_bbag = 4
		case "\u0070\u006f\u0073\u004f\u0064\u0064":
			*_bbag = 5
		case "\u0076\u0061\u0072":
			*_bbag = 6
		case "\u0064\u0065\u0070t\u0068":
			*_bbag = 7
		case "\u006d\u0061\u0078\u0044\u0065\u0070\u0074\u0068":
			*_bbag = 8
		}
	}
	_ffecg, _dged = d.Token()
	if _dged != nil {
		return _dged
	}
	if _affag, _egcfe := _ffecg.(_d.EndElement); _egcfe && _affag.Name == start.Name {
		return nil
	}
	return _f.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _ffecg)
}
func (_dab *CT_ChildPref) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _dab.ValAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0076\u0061\u006c"}, Value: _f.Sprintf("\u0025\u0076", *_dab.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_deea *CT_Rules) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _deea.Rule != nil {
		_gefb := _d.StartElement{Name: _d.Name{Local: "\u0072\u0075\u006c\u0065"}}
		for _, _becb := range _deea.Rule {
			e.EncodeElement(_becb, _gefb)
		}
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_SampleData and its children, prefixing error messages with path
func (_dcgff *CT_SampleData) ValidateWithPath(path string) error {
	if _dcgff.DataModel != nil {
		if _cgaf := _dcgff.DataModel.ValidateWithPath(path + "\u002f\u0044\u0061\u0074\u0061\u004d\u006f\u0064\u0065\u006c"); _cgaf != nil {
			return _cgaf
		}
	}
	return nil
}

type CT_CTStyleLabel struct {
	NameAttr       string
	FillClrLst     *CT_Colors
	LinClrLst      *CT_Colors
	EffectClrLst   *CT_Colors
	TxLinClrLst    *CT_Colors
	TxFillClrLst   *CT_Colors
	TxEffectClrLst *CT_Colors
	ExtLst         *_bc.CT_OfficeArtExtensionList
}

const (
	ST_AxisTypeUnset       ST_AxisType = 0
	ST_AxisTypeSelf        ST_AxisType = 1
	ST_AxisTypeCh          ST_AxisType = 2
	ST_AxisTypeDes         ST_AxisType = 3
	ST_AxisTypeDesOrSelf   ST_AxisType = 4
	ST_AxisTypePar         ST_AxisType = 5
	ST_AxisTypeAncst       ST_AxisType = 6
	ST_AxisTypeAncstOrSelf ST_AxisType = 7
	ST_AxisTypeFollowSib   ST_AxisType = 8
	ST_AxisTypePrecedSib   ST_AxisType = 9
	ST_AxisTypeFollow      ST_AxisType = 10
	ST_AxisTypePreced      ST_AxisType = 11
	ST_AxisTypeRoot        ST_AxisType = 12
	ST_AxisTypeNone        ST_AxisType = 13
)

func (_edbge *ColorsDefHdr) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_edbge.CT_ColorTransformHeader = *NewCT_ColorTransformHeader()
	for _, _ggcce := range start.Attr {
		if _ggcce.Name.Local == "\u0075\u006e\u0069\u0071\u0075\u0065\u0049\u0064" {
			_ffec, _ebce := _ggcce.Value, error(nil)
			if _ebce != nil {
				return _ebce
			}
			_edbge.UniqueIdAttr = _ffec
			continue
		}
		if _ggcce.Name.Local == "\u006d\u0069\u006e\u0056\u0065\u0072" {
			_effb, _fdfgb := _ggcce.Value, error(nil)
			if _fdfgb != nil {
				return _fdfgb
			}
			_edbge.MinVerAttr = &_effb
			continue
		}
		if _ggcce.Name.Local == "\u0072\u0065\u0073I\u0064" {
			_efea, _gbccd := _gb.ParseInt(_ggcce.Value, 10, 32)
			if _gbccd != nil {
				return _gbccd
			}
			_cfgbf := int32(_efea)
			_edbge.ResIdAttr = &_cfgbf
			continue
		}
	}
_fbdc:
	for {
		_gbead, _fbea := d.Token()
		if _fbea != nil {
			return _fbea
		}
		switch _gfba := _gbead.(type) {
		case _d.StartElement:
			switch _gfba.Name {
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0074\u0069\u0074l\u0065"}:
				_gdba := NewCT_CTName()
				if _fgdba := d.DecodeElement(_gdba, &_gfba); _fgdba != nil {
					return _fgdba
				}
				_edbge.Title = append(_edbge.Title, _gdba)
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0064\u0065\u0073\u0063"}:
				_dedbf := NewCT_CTDescription()
				if _adaf := d.DecodeElement(_dedbf, &_gfba); _adaf != nil {
					return _adaf
				}
				_edbge.Desc = append(_edbge.Desc, _dedbf)
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0061\u0074\u004c\u0073\u0074"}:
				_edbge.CatLst = NewCT_CTCategories()
				if _edbb := d.DecodeElement(_edbge.CatLst, &_gfba); _edbb != nil {
					return _edbb
				}
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_edbge.ExtLst = _bc.NewCT_OfficeArtExtensionList()
				if _gfef := d.DecodeElement(_edbge.ExtLst, &_gfba); _gfef != nil {
					return _gfef
				}
			default:
				_b.Log.Debug("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075n\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u006flo\u0072\u0073D\u0065\u0066\u0048\u0064\u0072\u0020\u0025\u0076", _gfba.Name)
				if _agcfd := d.Skip(); _agcfd != nil {
					return _agcfd
				}
			}
		case _d.EndElement:
			break _fbdc
		case _d.CharData:
		}
	}
	return nil
}

type CT_Categories struct{ Cat []*CT_Category }

func (_cacb *DataModel) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_cacb.CT_DataModel = *NewCT_DataModel()
_befa:
	for {
		_bbfe, _dccf := d.Token()
		if _dccf != nil {
			return _dccf
		}
		switch _bfbc := _bbfe.(type) {
		case _d.StartElement:
			switch _bfbc.Name {
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0070\u0074\u004cs\u0074"}:
				if _fcded := d.DecodeElement(_cacb.PtLst, &_bfbc); _fcded != nil {
					return _fcded
				}
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0078\u006e\u004c\u0073\u0074"}:
				_cacb.CxnLst = NewCT_CxnList()
				if _dbbgg := d.DecodeElement(_cacb.CxnLst, &_bfbc); _dbbgg != nil {
					return _dbbgg
				}
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0062\u0067"}:
				_cacb.Bg = _bc.NewCT_BackgroundFormatting()
				if _cdceg := d.DecodeElement(_cacb.Bg, &_bfbc); _cdceg != nil {
					return _cdceg
				}
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0077\u0068\u006fl\u0065"}:
				_cacb.Whole = _bc.NewCT_WholeE2oFormatting()
				if _gcbd := d.DecodeElement(_cacb.Whole, &_bfbc); _gcbd != nil {
					return _gcbd
				}
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_cacb.ExtLst = _bc.NewCT_OfficeArtExtensionList()
				if _cgae := d.DecodeElement(_cacb.ExtLst, &_bfbc); _cgae != nil {
					return _cgae
				}
			default:
				_b.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0044\u0061\u0074\u0061\u004d\u006fd\u0065\u006c \u0025\u0076", _bfbc.Name)
				if _gbcg := d.Skip(); _gbcg != nil {
					return _gbcg
				}
			}
		case _d.EndElement:
			break _befa
		case _d.CharData:
		}
	}
	return nil
}
func (_bgaeg ST_FunctionOperator) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_decbe := _d.Attr{}
	_decbe.Name = name
	switch _bgaeg {
	case ST_FunctionOperatorUnset:
		_decbe.Value = ""
	case ST_FunctionOperatorEqu:
		_decbe.Value = "\u0065\u0071\u0075"
	case ST_FunctionOperatorNeq:
		_decbe.Value = "\u006e\u0065\u0071"
	case ST_FunctionOperatorGt:
		_decbe.Value = "\u0067\u0074"
	case ST_FunctionOperatorLt:
		_decbe.Value = "\u006c\u0074"
	case ST_FunctionOperatorGte:
		_decbe.Value = "\u0067\u0074\u0065"
	case ST_FunctionOperatorLte:
		_decbe.Value = "\u006c\u0074\u0065"
	}
	return _decbe, nil
}
func (_afgfg ST_CxnType) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_fffc := _d.Attr{}
	_fffc.Name = name
	switch _afgfg {
	case ST_CxnTypeUnset:
		_fffc.Value = ""
	case ST_CxnTypeParOf:
		_fffc.Value = "\u0070\u0061\u0072O\u0066"
	case ST_CxnTypePresOf:
		_fffc.Value = "\u0070\u0072\u0065\u0073\u004f\u0066"
	case ST_CxnTypePresParOf:
		_fffc.Value = "\u0070r\u0065\u0073\u0050\u0061\u0072\u004ff"
	case ST_CxnTypeUnknownRelationship:
		_fffc.Value = "\u0075\u006e\u006b\u006eow\u006e\u0052\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070"
	}
	return _fffc, nil
}
func (_bgbfb *ColorsDefHdrLst) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0078\u006d\u006cn\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0061"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0078\u006d\u006c\u006e\u0073\u003a\u0064\u0069"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0072"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"}, Value: "\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"})
	start.Name.Local = "\u0063o\u006co\u0072\u0073\u0044\u0065\u0066\u0048\u0064\u0072\u004c\u0073\u0074"
	return _bgbfb.CT_ColorTransformHeaderLst.MarshalXML(e, start)
}
func (_eefe *CT_SampleData) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _eefe.UseDefAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0075\u0073\u0065\u0044\u0065\u0066"}, Value: _f.Sprintf("\u0025\u0064", _bbcdb(*_eefe.UseDefAttr))})
	}
	e.EncodeToken(start)
	if _eefe.DataModel != nil {
		_fddc := _d.StartElement{Name: _d.Name{Local: "\u0064a\u0074\u0061\u004d\u006f\u0064\u0065l"}}
		e.EncodeElement(_eefe.DataModel, _fddc)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_dacfe *ST_ModelId) ValidateWithPath(path string) error {
	_ddgg := []string{}
	if _dacfe.Int32 != nil {
		_ddgg = append(_ddgg, "\u0049\u006e\u00743\u0032")
	}
	if _dacfe.ST_Guid != nil {
		_ddgg = append(_ddgg, "\u0053T\u005f\u0047\u0075\u0069\u0064")
	}
	if len(_ddgg) > 1 {
		return _f.Errorf("%\u0073\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u006d\u0065\u006d\u0062\u0065r\u0073\u0020\u0073e\u0074:\u0020\u0025\u0076", path, _ddgg)
	}
	return nil
}

type ColorsDefHdr struct{ CT_ColorTransformHeader }

// Validate validates the CT_Parameter and its children
func (_fefe *CT_Parameter) Validate() error {
	return _fefe.ValidateWithPath("\u0043\u0054\u005fP\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072")
}
func (_caab ST_VerticalAlignment) ValidateWithPath(path string) error {
	switch _caab {
	case 0, 1, 2, 3, 4:
	default:
		return _f.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_caab))
	}
	return nil
}

// Validate validates the DataModel and its children
func (_cgffc *DataModel) Validate() error {
	return _cgffc.ValidateWithPath("\u0044a\u0074\u0061\u004d\u006f\u0064\u0065l")
}

const (
	ST_PyramidAccentTextMarginUnset ST_PyramidAccentTextMargin = 0
	ST_PyramidAccentTextMarginStep  ST_PyramidAccentTextMargin = 1
	ST_PyramidAccentTextMarginStack ST_PyramidAccentTextMargin = 2
)

// Validate validates the CT_SDCategory and its children
func (_bfcdg *CT_SDCategory) Validate() error {
	return _bfcdg.ValidateWithPath("\u0043\u0054\u005f\u0053\u0044\u0043\u0061\u0074\u0065\u0067\u006f\u0072\u0079")
}

// Validate validates the CT_Otherwise and its children
func (_ccfe *CT_Otherwise) Validate() error {
	return _ccfe.ValidateWithPath("\u0043\u0054\u005fO\u0074\u0068\u0065\u0072\u0077\u0069\u0073\u0065")
}
func (_bgcbd ST_DiagramHorizontalAlignment) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_dcecf := _d.Attr{}
	_dcecf.Name = name
	switch _bgcbd {
	case ST_DiagramHorizontalAlignmentUnset:
		_dcecf.Value = ""
	case ST_DiagramHorizontalAlignmentL:
		_dcecf.Value = "\u006c"
	case ST_DiagramHorizontalAlignmentCtr:
		_dcecf.Value = "\u0063\u0074\u0072"
	case ST_DiagramHorizontalAlignmentR:
		_dcecf.Value = "\u0072"
	case ST_DiagramHorizontalAlignmentNone:
		_dcecf.Value = "\u006e\u006f\u006e\u0065"
	}
	return _dcecf, nil
}

// ValidateWithPath validates the CT_LayoutNode and its children, prefixing error messages with path
func (_fgcg *CT_LayoutNode) ValidateWithPath(path string) error {
	if _cbdd := _fgcg.ChOrderAttr.ValidateWithPath(path + "\u002f\u0043\u0068O\u0072\u0064\u0065\u0072\u0041\u0074\u0074\u0072"); _cbdd != nil {
		return _cbdd
	}
	for _cebc, _eddca := range _fgcg.Alg {
		if _ebef := _eddca.ValidateWithPath(_f.Sprintf("\u0025\u0073\u002f\u0041\u006c\u0067\u005b\u0025\u0064\u005d", path, _cebc)); _ebef != nil {
			return _ebef
		}
	}
	for _bedg, _cfbg := range _fgcg.Shape {
		if _fgbe := _cfbg.ValidateWithPath(_f.Sprintf("\u0025\u0073\u002fS\u0068\u0061\u0070\u0065\u005b\u0025\u0064\u005d", path, _bedg)); _fgbe != nil {
			return _fgbe
		}
	}
	for _eeca, _cfad := range _fgcg.PresOf {
		if _cgdg := _cfad.ValidateWithPath(_f.Sprintf("\u0025\u0073\u002f\u0050\u0072\u0065\u0073\u004f\u0066\u005b\u0025\u0064\u005d", path, _eeca)); _cgdg != nil {
			return _cgdg
		}
	}
	for _ccbc, _abfa := range _fgcg.ConstrLst {
		if _eabd := _abfa.ValidateWithPath(_f.Sprintf("\u0025\u0073/\u0043\u006f\u006es\u0074\u0072\u004c\u0073\u0074\u005b\u0025\u0064\u005d", path, _ccbc)); _eabd != nil {
			return _eabd
		}
	}
	for _adfb, _cbea := range _fgcg.RuleLst {
		if _dfgc := _cbea.ValidateWithPath(_f.Sprintf("\u0025\u0073\u002f\u0052\u0075\u006c\u0065\u004c\u0073t\u005b\u0025\u0064\u005d", path, _adfb)); _dfgc != nil {
			return _dfgc
		}
	}
	for _cfce, _cfabg := range _fgcg.VarLst {
		if _becd := _cfabg.ValidateWithPath(_f.Sprintf("\u0025\u0073\u002f\u0056\u0061\u0072\u004c\u0073\u0074\u005b\u0025\u0064\u005d", path, _cfce)); _becd != nil {
			return _becd
		}
	}
	for _gebb, _cabc := range _fgcg.ForEach {
		if _ccee := _cabc.ValidateWithPath(_f.Sprintf("\u0025\u0073\u002f\u0046\u006f\u0072\u0045\u0061\u0063h\u005b\u0025\u0064\u005d", path, _gebb)); _ccee != nil {
			return _ccee
		}
	}
	for _bgde, _edff := range _fgcg.LayoutNode {
		if _eeef := _edff.ValidateWithPath(_f.Sprintf("\u0025\u0073\u002f\u004c\u0061\u0079\u006f\u0075\u0074\u004e\u006f\u0064e\u005b\u0025\u0064\u005d", path, _bgde)); _eeef != nil {
			return _eeef
		}
	}
	for _gbaee, _efccf := range _fgcg.Choose {
		if _adda := _efccf.ValidateWithPath(_f.Sprintf("\u0025\u0073\u002f\u0043\u0068\u006f\u006f\u0073\u0065\u005b\u0025\u0064\u005d", path, _gbaee)); _adda != nil {
			return _adda
		}
	}
	for _agfb, _faabb := range _fgcg.ExtLst {
		if _fcfbe := _faabb.ValidateWithPath(_f.Sprintf("\u0025\u0073\u002f\u0045\u0078\u0074\u004c\u0073\u0074\u005b\u0025\u0064\u005d", path, _agfb)); _fcfbe != nil {
			return _fcfbe
		}
	}
	return nil
}
func (_ddda *CT_ColorTransform) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _cabe := range start.Attr {
		if _cabe.Name.Local == "\u0075\u006e\u0069\u0071\u0075\u0065\u0049\u0064" {
			_gdbd, _cdbe := _cabe.Value, error(nil)
			if _cdbe != nil {
				return _cdbe
			}
			_ddda.UniqueIdAttr = &_gdbd
			continue
		}
		if _cabe.Name.Local == "\u006d\u0069\u006e\u0056\u0065\u0072" {
			_eadd, _beb := _cabe.Value, error(nil)
			if _beb != nil {
				return _beb
			}
			_ddda.MinVerAttr = &_eadd
			continue
		}
	}
_cfdb:
	for {
		_caa, _ggff := d.Token()
		if _ggff != nil {
			return _ggff
		}
		switch _fce := _caa.(type) {
		case _d.StartElement:
			switch _fce.Name {
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0074\u0069\u0074l\u0065"}:
				_acaf := NewCT_CTName()
				if _cfbc := d.DecodeElement(_acaf, &_fce); _cfbc != nil {
					return _cfbc
				}
				_ddda.Title = append(_ddda.Title, _acaf)
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0064\u0065\u0073\u0063"}:
				_cgff := NewCT_CTDescription()
				if _gede := d.DecodeElement(_cgff, &_fce); _gede != nil {
					return _gede
				}
				_ddda.Desc = append(_ddda.Desc, _cgff)
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0061\u0074\u004c\u0073\u0074"}:
				_ddda.CatLst = NewCT_CTCategories()
				if _cbg := d.DecodeElement(_ddda.CatLst, &_fce); _cbg != nil {
					return _cbg
				}
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0073\u0074\u0079\u006c\u0065\u004c\u0062\u006c"}:
				_cad := NewCT_CTStyleLabel()
				if _afef := d.DecodeElement(_cad, &_fce); _afef != nil {
					return _afef
				}
				_ddda.StyleLbl = append(_ddda.StyleLbl, _cad)
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_ddda.ExtLst = _bc.NewCT_OfficeArtExtensionList()
				if _aafg := d.DecodeElement(_ddda.ExtLst, &_fce); _aafg != nil {
					return _aafg
				}
			default:
				_b.Log.Debug("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0043\u006f\u006c\u006f\u0072\u0054\u0072\u0061\u006e\u0073\u0066\u006f\u0072\u006d\u0020\u0025\u0076", _fce.Name)
				if _fcf := d.Skip(); _fcf != nil {
					return _fcf
				}
			}
		case _d.EndElement:
			break _cfdb
		case _d.CharData:
		}
	}
	return nil
}

const (
	ST_PyramidAccentPositionUnset ST_PyramidAccentPosition = 0
	ST_PyramidAccentPositionBef   ST_PyramidAccentPosition = 1
	ST_PyramidAccentPositionAft   ST_PyramidAccentPosition = 2
)

func (_bgfd ST_ElementType) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_adafc := _d.Attr{}
	_adafc.Name = name
	switch _bgfd {
	case ST_ElementTypeUnset:
		_adafc.Value = ""
	case ST_ElementTypeAll:
		_adafc.Value = "\u0061\u006c\u006c"
	case ST_ElementTypeDoc:
		_adafc.Value = "\u0064\u006f\u0063"
	case ST_ElementTypeNode:
		_adafc.Value = "\u006e\u006f\u0064\u0065"
	case ST_ElementTypeNorm:
		_adafc.Value = "\u006e\u006f\u0072\u006d"
	case ST_ElementTypeNonNorm:
		_adafc.Value = "\u006eo\u006e\u004e\u006f\u0072\u006d"
	case ST_ElementTypeAsst:
		_adafc.Value = "\u0061\u0073\u0073\u0074"
	case ST_ElementTypeNonAsst:
		_adafc.Value = "\u006eo\u006e\u0041\u0073\u0073\u0074"
	case ST_ElementTypeParTrans:
		_adafc.Value = "\u0070\u0061\u0072\u0054\u0072\u0061\u006e\u0073"
	case ST_ElementTypePres:
		_adafc.Value = "\u0070\u0072\u0065\u0073"
	case ST_ElementTypeSibTrans:
		_adafc.Value = "\u0073\u0069\u0062\u0054\u0072\u0061\u006e\u0073"
	}
	return _adafc, nil
}
func (_bbcdc *ST_ClrAppMethod) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_bbcdc = 0
	case "\u0073\u0070\u0061\u006e":
		*_bbcdc = 1
	case "\u0063\u0079\u0063l\u0065":
		*_bbcdc = 2
	case "\u0072\u0065\u0070\u0065\u0061\u0074":
		*_bbcdc = 3
	}
	return nil
}

type CT_RelIds struct {
	DmAttr string
	LoAttr string
	QsAttr string
	CsAttr string
}

func (_ceebd *ST_ConstraintRelationship) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_ceebd = 0
	case "\u0073\u0065\u006c\u0066":
		*_ceebd = 1
	case "\u0063\u0068":
		*_ceebd = 2
	case "\u0064\u0065\u0073":
		*_ceebd = 3
	}
	return nil
}

// Validate validates the CT_AdjLst and its children
func (_gaa *CT_AdjLst) Validate() error {
	return _gaa.ValidateWithPath("\u0043T\u005f\u0041\u0064\u006a\u004c\u0073t")
}
func (_ceaeea ST_OutputShapeType) Validate() error { return _ceaeea.ValidateWithPath("") }

// ValidateWithPath validates the CT_ColorTransformHeaderLst and its children, prefixing error messages with path
func (_cdbd *CT_ColorTransformHeaderLst) ValidateWithPath(path string) error {
	for _dgb, _gbfg := range _cdbd.ColorsDefHdr {
		if _dgd := _gbfg.ValidateWithPath(_f.Sprintf("\u0025\u0073\u002f\u0043ol\u006f\u0072\u0073\u0044\u0065\u0066\u0048\u0064\u0072\u005b\u0025\u0064\u005d", path, _dgb)); _dgd != nil {
			return _dgd
		}
	}
	return nil
}
func (_daga ST_HueDir) Validate() error { return _daga.ValidateWithPath("") }
func (_daegg ST_ConstraintType) ValidateWithPath(path string) error {
	switch _daegg {
	case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64:
	default:
		return _f.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_daegg))
	}
	return nil
}
func (_egcb ST_AnimLvlStr) String() string {
	switch _egcb {
	case 0:
		return ""
	case 1:
		return "\u006e\u006f\u006e\u0065"
	case 2:
		return "\u006c\u0076\u006c"
	case 3:
		return "\u0063\u0074\u0072"
	}
	return ""
}

// ValidateWithPath validates the CT_CTCategories and its children, prefixing error messages with path
func (_bccb *CT_CTCategories) ValidateWithPath(path string) error {
	for _cgc, _def := range _bccb.Cat {
		if _aeb := _def.ValidateWithPath(_f.Sprintf("\u0025\u0073\u002f\u0043\u0061\u0074\u005b\u0025\u0064\u005d", path, _cgc)); _aeb != nil {
			return _aeb
		}
	}
	return nil
}
func (_gdgg ST_FlowDirection) ValidateWithPath(path string) error {
	switch _gdgg {
	case 0, 1, 2:
	default:
		return _f.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_gdgg))
	}
	return nil
}
func (_dagfc *ST_RotationPath) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_gfbgd, _ffbcg := d.Token()
	if _ffbcg != nil {
		return _ffbcg
	}
	if _ffdbf, _fddec := _gfbgd.(_d.EndElement); _fddec && _ffdbf.Name == start.Name {
		*_dagfc = 1
		return nil
	}
	if _bbef, _fcbc := _gfbgd.(_d.CharData); !_fcbc {
		return _f.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _gfbgd)
	} else {
		switch string(_bbef) {
		case "":
			*_dagfc = 0
		case "\u006e\u006f\u006e\u0065":
			*_dagfc = 1
		case "\u0061l\u006f\u006e\u0067\u0050\u0061\u0074h":
			*_dagfc = 2
		}
	}
	_gfbgd, _ffbcg = d.Token()
	if _ffbcg != nil {
		return _ffbcg
	}
	if _gaebd, _fbfgge := _gfbgd.(_d.EndElement); _fbfgge && _gaebd.Name == start.Name {
		return nil
	}
	return _f.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _gfbgd)
}
func (_aeffc *CT_LayoutVariablePropertySet) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_ggdd:
	for {
		_aege, _abfb := d.Token()
		if _abfb != nil {
			return _abfb
		}
		switch _gbfd := _aege.(type) {
		case _d.StartElement:
			switch _gbfd.Name {
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u006f\u0072\u0067\u0043\u0068\u0061\u0072\u0074"}:
				_aeffc.OrgChart = NewCT_OrgChart()
				if _ccdb := d.DecodeElement(_aeffc.OrgChart, &_gbfd); _ccdb != nil {
					return _ccdb
				}
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0068\u004da\u0078"}:
				_aeffc.ChMax = NewCT_ChildMax()
				if _efee := d.DecodeElement(_aeffc.ChMax, &_gbfd); _efee != nil {
					return _efee
				}
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0068\u0050\u0072\u0065\u0066"}:
				_aeffc.ChPref = NewCT_ChildPref()
				if _acgf := d.DecodeElement(_aeffc.ChPref, &_gbfd); _acgf != nil {
					return _acgf
				}
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0062\u0075\u006c\u006c\u0065\u0074\u0045\u006e\u0061\u0062\u006c\u0065\u0064"}:
				_aeffc.BulletEnabled = NewCT_BulletEnabled()
				if _bccg := d.DecodeElement(_aeffc.BulletEnabled, &_gbfd); _bccg != nil {
					return _bccg
				}
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0064\u0069\u0072"}:
				_aeffc.Dir = NewCT_Direction()
				if _bbde := d.DecodeElement(_aeffc.Dir, &_gbfd); _bbde != nil {
					return _bbde
				}
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0068\u0069\u0065\u0072\u0042\u0072\u0061\u006e\u0063\u0068"}:
				_aeffc.HierBranch = NewCT_HierBranchStyle()
				if _febc := d.DecodeElement(_aeffc.HierBranch, &_gbfd); _febc != nil {
					return _febc
				}
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0061n\u0069\u006d\u004f\u006e\u0065"}:
				_aeffc.AnimOne = NewCT_AnimOne()
				if _cecf := d.DecodeElement(_aeffc.AnimOne, &_gbfd); _cecf != nil {
					return _cecf
				}
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0061n\u0069\u006d\u004c\u0076\u006c"}:
				_aeffc.AnimLvl = NewCT_AnimLvl()
				if _aade := d.DecodeElement(_aeffc.AnimLvl, &_gbfd); _aade != nil {
					return _aade
				}
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0072\u0065\u0073\u0069\u007a\u0065\u0048\u0061\u006e\u0064\u006c\u0065\u0073"}:
				_aeffc.ResizeHandles = NewCT_ResizeHandles()
				if _bbgd := d.DecodeElement(_aeffc.ResizeHandles, &_gbfd); _bbgd != nil {
					return _bbgd
				}
			default:
				_b.Log.Debug("\u0073k\u0069\u0070\u0070\u0069\u006e\u0067\u0020un\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006de\u006e\u0074 \u006f\u006e\u0020C\u0054\u005f\u004c\u0061\u0079\u006f\u0075\u0074\u0056\u0061\u0072\u0069\u0061\u0062\u006c\u0065P\u0072\u006fpe\u0072\u0074\u0079S\u0065\u0074\u0020\u0025\u0076", _gbfd.Name)
				if _eaee := d.Skip(); _eaee != nil {
					return _eaee
				}
			}
		case _d.EndElement:
			break _ggdd
		case _d.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_Cxn and its children, prefixing error messages with path
func (_gccb *CT_Cxn) ValidateWithPath(path string) error {
	if _dgfdb := _gccb.ModelIdAttr.ValidateWithPath(path + "\u002f\u004d\u006fd\u0065\u006c\u0049\u0064\u0041\u0074\u0074\u0072"); _dgfdb != nil {
		return _dgfdb
	}
	if _acg := _gccb.TypeAttr.ValidateWithPath(path + "\u002fT\u0079\u0070\u0065\u0041\u0074\u0074r"); _acg != nil {
		return _acg
	}
	if _dgga := _gccb.SrcIdAttr.ValidateWithPath(path + "\u002f\u0053\u0072\u0063\u0049\u0064\u0041\u0074\u0074\u0072"); _dgga != nil {
		return _dgga
	}
	if _eceg := _gccb.DestIdAttr.ValidateWithPath(path + "/\u0044\u0065\u0073\u0074\u0049\u0064\u0041\u0074\u0074\u0072"); _eceg != nil {
		return _eceg
	}
	if _gccb.ParTransIdAttr != nil {
		if _bad := _gccb.ParTransIdAttr.ValidateWithPath(path + "\u002fP\u0061r\u0054\u0072\u0061\u006e\u0073\u0049\u0064\u0041\u0074\u0074\u0072"); _bad != nil {
			return _bad
		}
	}
	if _gccb.SibTransIdAttr != nil {
		if _ebcb := _gccb.SibTransIdAttr.ValidateWithPath(path + "\u002fS\u0069b\u0054\u0072\u0061\u006e\u0073\u0049\u0064\u0041\u0074\u0074\u0072"); _ebcb != nil {
			return _ebcb
		}
	}
	if _gccb.ExtLst != nil {
		if _egfge := _gccb.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _egfge != nil {
			return _egfge
		}
	}
	return nil
}

const (
	ST_TextDirectionUnset ST_TextDirection = 0
	ST_TextDirectionFromT ST_TextDirection = 1
	ST_TextDirectionFromB ST_TextDirection = 2
)

// Validate validates the CT_Colors and its children
func (_agdbd *CT_Colors) Validate() error {
	return _agdbd.ValidateWithPath("\u0043T\u005f\u0043\u006f\u006c\u006f\u0072s")
}

type CT_LayoutNode struct {
	NameAttr     *string
	StyleLblAttr *string
	ChOrderAttr  ST_ChildOrderType
	MoveWithAttr *string
	Alg          []*CT_Algorithm
	Shape        []*CT_Shape
	PresOf       []*CT_PresentationOf
	ConstrLst    []*CT_Constraints
	RuleLst      []*CT_Rules
	VarLst       []*CT_LayoutVariablePropertySet
	ForEach      []*CT_ForEach
	LayoutNode   []*CT_LayoutNode
	Choose       []*CT_Choose
	ExtLst       []*_bc.CT_OfficeArtExtensionList
}

// ST_LayoutShapeType is a union type
type ST_LayoutShapeType struct {
	ST_ShapeType       _bc.ST_ShapeType
	ST_OutputShapeType ST_OutputShapeType
}

func (_dgbgd ST_FunctionOperator) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_dgbgd.String(), start)
}
func NewCT_Constraints() *CT_Constraints { _cbcf := &CT_Constraints{}; return _cbcf }
func (_gffea ST_PyramidAccentPosition) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_gffea.String(), start)
}
func (_ggeg ST_ParameterId) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_aggcb := _d.Attr{}
	_aggcb.Name = name
	switch _ggeg {
	case ST_ParameterIdUnset:
		_aggcb.Value = ""
	case ST_ParameterIdHorzAlign:
		_aggcb.Value = "\u0068o\u0072\u007a\u0041\u006c\u0069\u0067n"
	case ST_ParameterIdVertAlign:
		_aggcb.Value = "\u0076e\u0072\u0074\u0041\u006c\u0069\u0067n"
	case ST_ParameterIdChDir:
		_aggcb.Value = "\u0063\u0068\u0044i\u0072"
	case ST_ParameterIdChAlign:
		_aggcb.Value = "\u0063h\u0041\u006c\u0069\u0067\u006e"
	case ST_ParameterIdSecChAlign:
		_aggcb.Value = "\u0073\u0065\u0063\u0043\u0068\u0041\u006c\u0069\u0067\u006e"
	case ST_ParameterIdLinDir:
		_aggcb.Value = "\u006c\u0069\u006e\u0044\u0069\u0072"
	case ST_ParameterIdSecLinDir:
		_aggcb.Value = "\u0073e\u0063\u004c\u0069\u006e\u0044\u0069r"
	case ST_ParameterIdStElem:
		_aggcb.Value = "\u0073\u0074\u0045\u006c\u0065\u006d"
	case ST_ParameterIdBendPt:
		_aggcb.Value = "\u0062\u0065\u006e\u0064\u0050\u0074"
	case ST_ParameterIdConnRout:
		_aggcb.Value = "\u0063\u006f\u006e\u006e\u0052\u006f\u0075\u0074"
	case ST_ParameterIdBegSty:
		_aggcb.Value = "\u0062\u0065\u0067\u0053\u0074\u0079"
	case ST_ParameterIdEndSty:
		_aggcb.Value = "\u0065\u006e\u0064\u0053\u0074\u0079"
	case ST_ParameterIdDim:
		_aggcb.Value = "\u0064\u0069\u006d"
	case ST_ParameterIdRotPath:
		_aggcb.Value = "\u0072o\u0074\u0050\u0061\u0074\u0068"
	case ST_ParameterIdCtrShpMap:
		_aggcb.Value = "\u0063t\u0072\u0053\u0068\u0070\u004d\u0061p"
	case ST_ParameterIdNodeHorzAlign:
		_aggcb.Value = "\u006e\u006f\u0064\u0065\u0048\u006f\u0072\u007a\u0041\u006c\u0069\u0067\u006e"
	case ST_ParameterIdNodeVertAlign:
		_aggcb.Value = "\u006e\u006f\u0064\u0065\u0056\u0065\u0072\u0074\u0041\u006c\u0069\u0067\u006e"
	case ST_ParameterIdFallback:
		_aggcb.Value = "\u0066\u0061\u006c\u006c\u0062\u0061\u0063\u006b"
	case ST_ParameterIdTxDir:
		_aggcb.Value = "\u0074\u0078\u0044i\u0072"
	case ST_ParameterIdPyraAcctPos:
		_aggcb.Value = "p\u0079\u0072\u0061\u0041\u0063\u0063\u0074\u0050\u006f\u0073"
	case ST_ParameterIdPyraAcctTxMar:
		_aggcb.Value = "\u0070\u0079\u0072\u0061\u0041\u0063\u0063\u0074\u0054\u0078\u004d\u0061\u0072"
	case ST_ParameterIdTxBlDir:
		_aggcb.Value = "\u0074x\u0042\u006c\u0044\u0069\u0072"
	case ST_ParameterIdTxAnchorHorz:
		_aggcb.Value = "\u0074\u0078\u0041n\u0063\u0068\u006f\u0072\u0048\u006f\u0072\u007a"
	case ST_ParameterIdTxAnchorVert:
		_aggcb.Value = "\u0074\u0078\u0041n\u0063\u0068\u006f\u0072\u0056\u0065\u0072\u0074"
	case ST_ParameterIdTxAnchorHorzCh:
		_aggcb.Value = "\u0074\u0078\u0041\u006e\u0063\u0068\u006f\u0072\u0048o\u0072\u007a\u0043\u0068"
	case ST_ParameterIdTxAnchorVertCh:
		_aggcb.Value = "\u0074\u0078\u0041\u006e\u0063\u0068\u006f\u0072\u0056e\u0072\u0074\u0043\u0068"
	case ST_ParameterIdParTxLTRAlign:
		_aggcb.Value = "\u0070\u0061\u0072\u0054\u0078\u004c\u0054\u0052\u0041\u006c\u0069\u0067\u006e"
	case ST_ParameterIdParTxRTLAlign:
		_aggcb.Value = "\u0070\u0061\u0072\u0054\u0078\u0052\u0054\u004c\u0041\u006c\u0069\u0067\u006e"
	case ST_ParameterIdShpTxLTRAlignCh:
		_aggcb.Value = "\u0073h\u0070T\u0078\u004c\u0054\u0052\u0041\u006c\u0069\u0067\u006e\u0043\u0068"
	case ST_ParameterIdShpTxRTLAlignCh:
		_aggcb.Value = "\u0073h\u0070T\u0078\u0052\u0054\u004c\u0041\u006c\u0069\u0067\u006e\u0043\u0068"
	case ST_ParameterIdAutoTxRot:
		_aggcb.Value = "\u0061u\u0074\u006f\u0054\u0078\u0052\u006ft"
	case ST_ParameterIdGrDir:
		_aggcb.Value = "\u0067\u0072\u0044i\u0072"
	case ST_ParameterIdFlowDir:
		_aggcb.Value = "\u0066l\u006f\u0077\u0044\u0069\u0072"
	case ST_ParameterIdContDir:
		_aggcb.Value = "\u0063o\u006e\u0074\u0044\u0069\u0072"
	case ST_ParameterIdBkpt:
		_aggcb.Value = "\u0062\u006b\u0070\u0074"
	case ST_ParameterIdOff:
		_aggcb.Value = "\u006f\u0066\u0066"
	case ST_ParameterIdHierAlign:
		_aggcb.Value = "\u0068i\u0065\u0072\u0041\u006c\u0069\u0067n"
	case ST_ParameterIdBkPtFixedVal:
		_aggcb.Value = "\u0062\u006b\u0050t\u0046\u0069\u0078\u0065\u0064\u0056\u0061\u006c"
	case ST_ParameterIdStBulletLvl:
		_aggcb.Value = "s\u0074\u0042\u0075\u006c\u006c\u0065\u0074\u004c\u0076\u006c"
	case ST_ParameterIdStAng:
		_aggcb.Value = "\u0073\u0074\u0041n\u0067"
	case ST_ParameterIdSpanAng:
		_aggcb.Value = "\u0073p\u0061\u006e\u0041\u006e\u0067"
	case ST_ParameterIdAr:
		_aggcb.Value = "\u0061\u0072"
	case ST_ParameterIdLnSpPar:
		_aggcb.Value = "\u006cn\u0053\u0070\u0050\u0061\u0072"
	case ST_ParameterIdLnSpAfParP:
		_aggcb.Value = "\u006c\u006e\u0053\u0070\u0041\u0066\u0050\u0061\u0072\u0050"
	case ST_ParameterIdLnSpCh:
		_aggcb.Value = "\u006c\u006e\u0053\u0070\u0043\u0068"
	case ST_ParameterIdLnSpAfChP:
		_aggcb.Value = "\u006cn\u0053\u0070\u0041\u0066\u0043\u0068P"
	case ST_ParameterIdRtShortDist:
		_aggcb.Value = "r\u0074\u0053\u0068\u006f\u0072\u0074\u0044\u0069\u0073\u0074"
	case ST_ParameterIdAlignTx:
		_aggcb.Value = "\u0061l\u0069\u0067\u006e\u0054\u0078"
	case ST_ParameterIdPyraLvlNode:
		_aggcb.Value = "p\u0079\u0072\u0061\u004c\u0076\u006c\u004e\u006f\u0064\u0065"
	case ST_ParameterIdPyraAcctBkgdNode:
		_aggcb.Value = "\u0070\u0079r\u0061\u0041\u0063c\u0074\u0042\u006b\u0067\u0064\u004e\u006f\u0064\u0065"
	case ST_ParameterIdPyraAcctTxNode:
		_aggcb.Value = "\u0070\u0079\u0072\u0061\u0041\u0063\u0063\u0074\u0054x\u004e\u006f\u0064\u0065"
	case ST_ParameterIdSrcNode:
		_aggcb.Value = "\u0073r\u0063\u004e\u006f\u0064\u0065"
	case ST_ParameterIdDstNode:
		_aggcb.Value = "\u0064s\u0074\u004e\u006f\u0064\u0065"
	case ST_ParameterIdBegPts:
		_aggcb.Value = "\u0062\u0065\u0067\u0050\u0074\u0073"
	case ST_ParameterIdEndPts:
		_aggcb.Value = "\u0065\u006e\u0064\u0050\u0074\u0073"
	}
	return _aggcb, nil
}
func NewCT_Name() *CT_Name { _bfba := &CT_Name{}; return _bfba }

// Validate validates the CT_When and its children
func (_cbdf *CT_When) Validate() error {
	return _cbdf.ValidateWithPath("\u0043T\u005f\u0057\u0068\u0065\u006e")
}
func NewCT_ResizeHandles() *CT_ResizeHandles { _fdab := &CT_ResizeHandles{}; return _fdab }

type CT_Constraints struct{ Constr []*CT_Constraint }

func NewLayoutDefHdrLst() *LayoutDefHdrLst {
	_ffdbe := &LayoutDefHdrLst{}
	_ffdbe.CT_DiagramDefinitionHeaderLst = *NewCT_DiagramDefinitionHeaderLst()
	return _ffdbe
}

// Validate validates the CT_Name and its children
func (_cega *CT_Name) Validate() error {
	return _cega.ValidateWithPath("\u0043T\u005f\u004e\u0061\u006d\u0065")
}
func (_bcba ST_FunctionArgument) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _bcba.ST_VariableType != ST_VariableTypeUnset {
		e.EncodeToken(_d.CharData(_bcba.ST_VariableType.String()))
	}
	return e.EncodeToken(_d.EndElement{Name: start.Name})
}

type LayoutDefHdr struct{ CT_DiagramDefinitionHeader }

func (_bbga ST_SecondaryLinearDirection) Validate() error { return _bbga.ValidateWithPath("") }

type ST_ChildOrderType byte

func (_cbcd ST_VerticalAlignment) Validate() error { return _cbcd.ValidateWithPath("") }
func (_aab *CT_Algorithm) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_aab.TypeAttr = ST_AlgorithmType(1)
	for _, _dec := range start.Attr {
		if _dec.Name.Local == "\u0074\u0079\u0070\u0065" {
			_aab.TypeAttr.UnmarshalXMLAttr(_dec)
			continue
		}
		if _dec.Name.Local == "\u0072\u0065\u0076" {
			_cdb, _be := _gb.ParseUint(_dec.Value, 10, 32)
			if _be != nil {
				return _be
			}
			_aad := uint32(_cdb)
			_aab.RevAttr = &_aad
			continue
		}
	}
_gbc:
	for {
		_fbe, _aba := d.Token()
		if _aba != nil {
			return _aba
		}
		switch _dbd := _fbe.(type) {
		case _d.StartElement:
			switch _dbd.Name {
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0070\u0061\u0072a\u006d"}:
				_gce := NewCT_Parameter()
				if _agad := d.DecodeElement(_gce, &_dbd); _agad != nil {
					return _agad
				}
				_aab.Param = append(_aab.Param, _gce)
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_aab.ExtLst = _bc.NewCT_OfficeArtExtensionList()
				if _aaaf := d.DecodeElement(_aab.ExtLst, &_dbd); _aaaf != nil {
					return _aaaf
				}
			default:
				_b.Log.Debug("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075n\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054_A\u006c\u0067o\u0072\u0069\u0074\u0068\u006d\u0020\u0025\u0076", _dbd.Name)
				if _edg := d.Skip(); _edg != nil {
					return _edg
				}
			}
		case _d.EndElement:
			break _gbc
		case _d.CharData:
		}
	}
	return nil
}
func (_beaf ST_ChildAlignment) Validate() error { return _beaf.ValidateWithPath("") }

const (
	ST_TextBlockDirectionUnset ST_TextBlockDirection = 0
	ST_TextBlockDirectionHorz  ST_TextBlockDirection = 1
	ST_TextBlockDirectionVert  ST_TextBlockDirection = 2
)

func (_ecfe ST_LinearDirection) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_ecfe.String(), start)
}
func (_bbfb ST_ConstraintRelationship) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_bbfb.String(), start)
}
func ParseSliceST_Booleans(s string) (ST_Booleans, error) { return ST_Booleans{}, nil }
func (_df *CT_Adj) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_df.IdxAttr = 1
	for _, _fbf := range start.Attr {
		if _fbf.Name.Local == "\u0069\u0064\u0078" {
			_gbg, _gfb := _gb.ParseUint(_fbf.Value, 10, 32)
			if _gfb != nil {
				return _gfb
			}
			_df.IdxAttr = uint32(_gbg)
			continue
		}
		if _fbf.Name.Local == "\u0076\u0061\u006c" {
			_af, _adea := _gb.ParseFloat(_fbf.Value, 64)
			if _adea != nil {
				return _adea
			}
			_df.ValAttr = _af
			continue
		}
	}
	for {
		_cff, _fa := d.Token()
		if _fa != nil {
			return _f.Errorf("\u0070a\u0072s\u0069\u006e\u0067\u0020\u0043T\u005f\u0041d\u006a\u003a\u0020\u0025\u0073", _fa)
		}
		if _ea, _egf := _cff.(_d.EndElement); _egf && _ea.Name == start.Name {
			break
		}
	}
	return nil
}
func (_gfeda ST_AnimLvlStr) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_gfeda.String(), start)
}

type CT_BulletEnabled struct{ ValAttr *bool }

func NewCT_DiagramDefinitionHeader() *CT_DiagramDefinitionHeader {
	_abgb := &CT_DiagramDefinitionHeader{}
	return _abgb
}
func (_fddg *ST_FunctionValue) Validate() error { return _fddg.ValidateWithPath("") }
func (_bgca *CT_DiagramDefinition) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _bgca.UniqueIdAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0075\u006e\u0069\u0071\u0075\u0065\u0049\u0064"}, Value: _f.Sprintf("\u0025\u0076", *_bgca.UniqueIdAttr)})
	}
	if _bgca.MinVerAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u006d\u0069\u006e\u0056\u0065\u0072"}, Value: _f.Sprintf("\u0025\u0076", *_bgca.MinVerAttr)})
	}
	if _bgca.DefStyleAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0064\u0065\u0066\u0053\u0074\u0079\u006c\u0065"}, Value: _f.Sprintf("\u0025\u0076", *_bgca.DefStyleAttr)})
	}
	e.EncodeToken(start)
	if _bgca.Title != nil {
		_affc := _d.StartElement{Name: _d.Name{Local: "\u0074\u0069\u0074l\u0065"}}
		for _, _ddcg := range _bgca.Title {
			e.EncodeElement(_ddcg, _affc)
		}
	}
	if _bgca.Desc != nil {
		_gcd := _d.StartElement{Name: _d.Name{Local: "\u0064\u0065\u0073\u0063"}}
		for _, _bfe := range _bgca.Desc {
			e.EncodeElement(_bfe, _gcd)
		}
	}
	if _bgca.CatLst != nil {
		_bfff := _d.StartElement{Name: _d.Name{Local: "\u0063\u0061\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_bgca.CatLst, _bfff)
	}
	if _bgca.SampData != nil {
		_fcad := _d.StartElement{Name: _d.Name{Local: "\u0073\u0061\u006d\u0070\u0044\u0061\u0074\u0061"}}
		e.EncodeElement(_bgca.SampData, _fcad)
	}
	if _bgca.StyleData != nil {
		_afgd := _d.StartElement{Name: _d.Name{Local: "\u0073t\u0079\u006c\u0065\u0044\u0061\u0074a"}}
		e.EncodeElement(_bgca.StyleData, _afgd)
	}
	if _bgca.ClrData != nil {
		_efe := _d.StartElement{Name: _d.Name{Local: "\u0063l\u0072\u0044\u0061\u0074\u0061"}}
		e.EncodeElement(_bgca.ClrData, _efe)
	}
	_ddec := _d.StartElement{Name: _d.Name{Local: "\u006c\u0061\u0079\u006f\u0075\u0074\u004e\u006f\u0064\u0065"}}
	e.EncodeElement(_bgca.LayoutNode, _ddec)
	if _bgca.ExtLst != nil {
		_cfc := _d.StartElement{Name: _d.Name{Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_bgca.ExtLst, _cfc)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_adgd ST_ClrAppMethod) ValidateWithPath(path string) error {
	switch _adgd {
	case 0, 1, 2, 3:
	default:
		return _f.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_adgd))
	}
	return nil
}

// ValidateWithPath validates the CT_ChildMax and its children, prefixing error messages with path
func (_fca *CT_ChildMax) ValidateWithPath(path string) error {
	if _fca.ValAttr != nil {
		if *_fca.ValAttr < -1 {
			return _f.Errorf("\u0025\u0073/m\u002e\u0056\u0061l\u0041\u0074\u0074\u0072 mu\u0073t \u0062\u0065\u0020\u003e\u003d\u0020\u002d1 \u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, *_fca.ValAttr)
		}
	}
	return nil
}
func NewColorsDefHdrLst() *ColorsDefHdrLst {
	_dcff := &ColorsDefHdrLst{}
	_dcff.CT_ColorTransformHeaderLst = *NewCT_ColorTransformHeaderLst()
	return _dcff
}
func (_gcff ST_BoolOperator) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_ccdfc := _d.Attr{}
	_ccdfc.Name = name
	switch _gcff {
	case ST_BoolOperatorUnset:
		_ccdfc.Value = ""
	case ST_BoolOperatorNone:
		_ccdfc.Value = "\u006e\u006f\u006e\u0065"
	case ST_BoolOperatorEqu:
		_ccdfc.Value = "\u0065\u0071\u0075"
	case ST_BoolOperatorGte:
		_ccdfc.Value = "\u0067\u0074\u0065"
	case ST_BoolOperatorLte:
		_ccdfc.Value = "\u006c\u0074\u0065"
	}
	return _ccdfc, nil
}
func (_babb *CT_Direction) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _babb.ValAttr != ST_DirectionUnset {
		_efgd, _ddbc := _babb.ValAttr.MarshalXMLAttr(_d.Name{Local: "\u0076\u0061\u006c"})
		if _ddbc != nil {
			return _ddbc
		}
		start.Attr = append(start.Attr, _efgd)
	}
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_bfbcd ST_AutoTextRotation) ValidateWithPath(path string) error {
	switch _bfbcd {
	case 0, 1, 2, 3:
	default:
		return _f.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_bfbcd))
	}
	return nil
}
func (_ffdg *ST_OutputShapeType) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_ddbed, _gaffb := d.Token()
	if _gaffb != nil {
		return _gaffb
	}
	if _fbec, _fgggg := _ddbed.(_d.EndElement); _fgggg && _fbec.Name == start.Name {
		*_ffdg = 1
		return nil
	}
	if _febca, _bgcdg := _ddbed.(_d.CharData); !_bgcdg {
		return _f.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _ddbed)
	} else {
		switch string(_febca) {
		case "":
			*_ffdg = 0
		case "\u006e\u006f\u006e\u0065":
			*_ffdg = 1
		case "\u0063\u006f\u006e\u006e":
			*_ffdg = 2
		}
	}
	_ddbed, _gaffb = d.Token()
	if _gaffb != nil {
		return _gaffb
	}
	if _fbcb, _adga := _ddbed.(_d.EndElement); _adga && _fbcb.Name == start.Name {
		return nil
	}
	return _f.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _ddbed)
}
func (_fgaf *ST_FunctionType) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_fgaf = 0
	case "\u0063\u006e\u0074":
		*_fgaf = 1
	case "\u0070\u006f\u0073":
		*_fgaf = 2
	case "\u0072\u0065\u0076\u0050\u006f\u0073":
		*_fgaf = 3
	case "\u0070o\u0073\u0045\u0076\u0065\u006e":
		*_fgaf = 4
	case "\u0070\u006f\u0073\u004f\u0064\u0064":
		*_fgaf = 5
	case "\u0076\u0061\u0072":
		*_fgaf = 6
	case "\u0064\u0065\u0070t\u0068":
		*_fgaf = 7
	case "\u006d\u0061\u0078\u0044\u0065\u0070\u0074\u0068":
		*_fgaf = 8
	}
	return nil
}
func (_caeg *CT_Description) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _eaddg := range start.Attr {
		if _eaddg.Name.Local == "\u006c\u0061\u006e\u0067" {
			_gdg, _cag := _eaddg.Value, error(nil)
			if _cag != nil {
				return _cag
			}
			_caeg.LangAttr = &_gdg
			continue
		}
		if _eaddg.Name.Local == "\u0076\u0061\u006c" {
			_abeb, _gcfa := _eaddg.Value, error(nil)
			if _gcfa != nil {
				return _gcfa
			}
			_caeg.ValAttr = _abeb
			continue
		}
	}
	for {
		_ffag, _bfbf := d.Token()
		if _bfbf != nil {
			return _f.Errorf("\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fD\u0065\u0073\u0063\u0072\u0069\u0070\u0074\u0069\u006f\u006e:\u0020\u0025\u0073", _bfbf)
		}
		if _edba, _gccda := _ffag.(_d.EndElement); _gccda && _edba.Name == start.Name {
			break
		}
	}
	return nil
}
func (_fbaeb *ST_GrowDirection) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_fbaeb = 0
	case "\u0074\u004c":
		*_fbaeb = 1
	case "\u0074\u0052":
		*_fbaeb = 2
	case "\u0062\u004c":
		*_fbaeb = 3
	case "\u0062\u0052":
		*_fbaeb = 4
	}
	return nil
}
func (_bfegf ST_PtType) String() string {
	switch _bfegf {
	case 0:
		return ""
	case 1:
		return "\u006e\u006f\u0064\u0065"
	case 2:
		return "\u0061\u0073\u0073\u0074"
	case 3:
		return "\u0064\u006f\u0063"
	case 4:
		return "\u0070\u0072\u0065\u0073"
	case 5:
		return "\u0070\u0061\u0072\u0054\u0072\u0061\u006e\u0073"
	case 6:
		return "\u0073\u0069\u0062\u0054\u0072\u0061\u006e\u0073"
	}
	return ""
}
func (_gaggf ST_SecondaryChildAlignment) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_gaggf.String(), start)
}

type CT_SDName struct {
	LangAttr *string
	ValAttr  string
}

func (_feefc ST_LinearDirection) ValidateWithPath(path string) error {
	switch _feefc {
	case 0, 1, 2, 3, 4:
	default:
		return _f.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_feefc))
	}
	return nil
}

type ColorsDefHdrLst struct{ CT_ColorTransformHeaderLst }

func (_ggde ST_DiagramHorizontalAlignment) Validate() error { return _ggde.ValidateWithPath("") }
func (_aacac ST_ConnectorRouting) Validate() error          { return _aacac.ValidateWithPath("") }

// Validate validates the CT_ColorTransform and its children
func (_dede *CT_ColorTransform) Validate() error {
	return _dede.ValidateWithPath("\u0043\u0054\u005f\u0043\u006f\u006c\u006f\u0072\u0054\u0072\u0061\u006es\u0066\u006f\u0072\u006d")
}

const (
	ST_ResizeHandlesStrUnset ST_ResizeHandlesStr = 0
	ST_ResizeHandlesStrExact ST_ResizeHandlesStr = 1
	ST_ResizeHandlesStrRel   ST_ResizeHandlesStr = 2
)

func (_eegd ST_ElementType) ValidateWithPath(path string) error {
	switch _eegd {
	case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10:
	default:
		return _f.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_eegd))
	}
	return nil
}

// Validate validates the StyleDefHdr and its children
func (_bade *StyleDefHdr) Validate() error {
	return _bade.ValidateWithPath("S\u0074\u0079\u006c\u0065\u0044\u0065\u0066\u0048\u0064\u0072")
}
func (_cafed *CT_SDCategories) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _cafed.Cat != nil {
		_aagb := _d.StartElement{Name: _d.Name{Local: "\u0063\u0061\u0074"}}
		for _, _eeagd := range _cafed.Cat {
			e.EncodeElement(_eeagd, _aagb)
		}
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_dfee *CT_Pt) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u006do\u0064\u0065\u006c\u0049\u0064"}, Value: _f.Sprintf("\u0025\u0076", _dfee.ModelIdAttr)})
	if _dfee.TypeAttr != ST_PtTypeUnset {
		_fccde, _geded := _dfee.TypeAttr.MarshalXMLAttr(_d.Name{Local: "\u0074\u0079\u0070\u0065"})
		if _geded != nil {
			return _geded
		}
		start.Attr = append(start.Attr, _fccde)
	}
	if _dfee.CxnIdAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0063\u0078\u006eI\u0064"}, Value: _f.Sprintf("\u0025\u0076", *_dfee.CxnIdAttr)})
	}
	e.EncodeToken(start)
	if _dfee.PrSet != nil {
		_cfea := _d.StartElement{Name: _d.Name{Local: "\u0070\u0072\u0053e\u0074"}}
		e.EncodeElement(_dfee.PrSet, _cfea)
	}
	if _dfee.SpPr != nil {
		_dagc := _d.StartElement{Name: _d.Name{Local: "\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_dfee.SpPr, _dagc)
	}
	if _dfee.T != nil {
		_eabef := _d.StartElement{Name: _d.Name{Local: "\u0074"}}
		e.EncodeElement(_dfee.T, _eabef)
	}
	if _dfee.ExtLst != nil {
		_fdfg := _d.StartElement{Name: _d.Name{Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_dfee.ExtLst, _fdfg)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_aadb *CT_SDName) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _aadb.LangAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u006c\u0061\u006e\u0067"}, Value: _f.Sprintf("\u0025\u0076", *_aadb.LangAttr)})
	}
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0076\u0061\u006c"}, Value: _f.Sprintf("\u0025\u0076", _aadb.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_cdg *CT_CTCategories) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_ddd:
	for {
		_edfgf, _gga := d.Token()
		if _gga != nil {
			return _gga
		}
		switch _gab := _edfgf.(type) {
		case _d.StartElement:
			switch _gab.Name {
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0061\u0074"}:
				_gbe := NewCT_CTCategory()
				if _dbb := d.DecodeElement(_gbe, &_gab); _dbb != nil {
					return _dbb
				}
				_cdg.Cat = append(_cdg.Cat, _gbe)
			default:
				_b.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074e\u0064\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0043\u0054\u0043a\u0074\u0065\u0067\u006f\u0072\u0069\u0065\u0073\u0020\u0025\u0076", _gab.Name)
				if _efa := d.Skip(); _efa != nil {
					return _efa
				}
			}
		case _d.EndElement:
			break _ddd
		case _d.CharData:
		}
	}
	return nil
}
func (_fbd *CT_Constraints) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_eaagg:
	for {
		_bbdf, _afg := d.Token()
		if _afg != nil {
			return _afg
		}
		switch _edbc := _bbdf.(type) {
		case _d.StartElement:
			switch _edbc.Name {
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u006f\u006e\u0073\u0074\u0072"}:
				_efgf := NewCT_Constraint()
				if _cda := d.DecodeElement(_efgf, &_edbc); _cda != nil {
					return _cda
				}
				_fbd.Constr = append(_fbd.Constr, _efgf)
			default:
				_b.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069n\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006et\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0043\u006f\u006e\u0073\u0074\u0072\u0061i\u006et\u0073\u0020\u0025\u0076", _edbc.Name)
				if _edgb := d.Skip(); _edgb != nil {
					return _edgb
				}
			}
		case _d.EndElement:
			break _eaagg
		case _d.CharData:
		}
	}
	return nil
}
func NewCT_AnimOne() *CT_AnimOne { _fe := &CT_AnimOne{}; return _fe }
func (_feed *CT_LayoutVariablePropertySet) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _feed.OrgChart != nil {
		_caba := _d.StartElement{Name: _d.Name{Local: "\u006f\u0072\u0067\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_feed.OrgChart, _caba)
	}
	if _feed.ChMax != nil {
		_edgg := _d.StartElement{Name: _d.Name{Local: "\u0063\u0068\u004da\u0078"}}
		e.EncodeElement(_feed.ChMax, _edgg)
	}
	if _feed.ChPref != nil {
		_febad := _d.StartElement{Name: _d.Name{Local: "\u0063\u0068\u0050\u0072\u0065\u0066"}}
		e.EncodeElement(_feed.ChPref, _febad)
	}
	if _feed.BulletEnabled != nil {
		_fbgfb := _d.StartElement{Name: _d.Name{Local: "\u0062\u0075\u006c\u006c\u0065\u0074\u0045\u006e\u0061\u0062\u006c\u0065\u0064"}}
		e.EncodeElement(_feed.BulletEnabled, _fbgfb)
	}
	if _feed.Dir != nil {
		_acbf := _d.StartElement{Name: _d.Name{Local: "\u0064\u0069\u0072"}}
		e.EncodeElement(_feed.Dir, _acbf)
	}
	if _feed.HierBranch != nil {
		_bfagb := _d.StartElement{Name: _d.Name{Local: "\u0068\u0069\u0065\u0072\u0042\u0072\u0061\u006e\u0063\u0068"}}
		e.EncodeElement(_feed.HierBranch, _bfagb)
	}
	if _feed.AnimOne != nil {
		_bcadd := _d.StartElement{Name: _d.Name{Local: "\u0061n\u0069\u006d\u004f\u006e\u0065"}}
		e.EncodeElement(_feed.AnimOne, _bcadd)
	}
	if _feed.AnimLvl != nil {
		_gcec := _d.StartElement{Name: _d.Name{Local: "\u0061n\u0069\u006d\u004c\u0076\u006c"}}
		e.EncodeElement(_feed.AnimLvl, _gcec)
	}
	if _feed.ResizeHandles != nil {
		_ffcdc := _d.StartElement{Name: _d.Name{Local: "\u0072\u0065\u0073\u0069\u007a\u0065\u0048\u0061\u006e\u0064\u006c\u0065\u0073"}}
		e.EncodeElement(_feed.ResizeHandles, _ffcdc)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_ResizeHandles and its children
func (_agge *CT_ResizeHandles) Validate() error {
	return _agge.ValidateWithPath("\u0043\u0054_\u0052\u0065\u0073i\u007a\u0065\u0048\u0061\u006e\u0064\u006c\u0065\u0073")
}
func (_acfca ST_NodeHorizontalAlignment) String() string {
	switch _acfca {
	case 0:
		return ""
	case 1:
		return "\u006c"
	case 2:
		return "\u0063\u0074\u0072"
	case 3:
		return "\u0072"
	}
	return ""
}
func (_ggad *CT_HierBranchStyle) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _ggad.ValAttr != ST_HierBranchStyleUnset {
		_abfg, _dcgb := _ggad.ValAttr.MarshalXMLAttr(_d.Name{Local: "\u0076\u0061\u006c"})
		if _dcgb != nil {
			return _dcgb
		}
		start.Attr = append(start.Attr, _abfg)
	}
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

type ST_ConstraintRelationship byte

func (_fcgge ST_GrowDirection) Validate() error { return _fcgge.ValidateWithPath("") }
func (_bgce *ST_AnimLvlStr) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_bgce = 0
	case "\u006e\u006f\u006e\u0065":
		*_bgce = 1
	case "\u006c\u0076\u006c":
		*_bgce = 2
	case "\u0063\u0074\u0072":
		*_bgce = 3
	}
	return nil
}
func (_ad *AG_ConstraintRefAttributes) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _bca := range start.Attr {
		if _bca.Name.Local == "\u0072e\u0066\u0054\u0079\u0070\u0065" {
			_ad.RefTypeAttr.UnmarshalXMLAttr(_bca)
			continue
		}
		if _bca.Name.Local == "\u0072\u0065\u0066\u0046\u006f\u0072" {
			_ad.RefForAttr.UnmarshalXMLAttr(_bca)
			continue
		}
		if _bca.Name.Local == "\u0072\u0065\u0066\u0046\u006f\u0072\u004e\u0061\u006d\u0065" {
			_gfd, _aa := _bca.Value, error(nil)
			if _aa != nil {
				return _aa
			}
			_ad.RefForNameAttr = &_gfd
			continue
		}
		if _bca.Name.Local == "\u0072e\u0066\u0050\u0074\u0054\u0079\u0070e" {
			_ad.RefPtTypeAttr.UnmarshalXMLAttr(_bca)
			continue
		}
	}
	for {
		_edc, _dc := d.Token()
		if _dc != nil {
			return _f.Errorf("\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0041\u0047\u005f\u0043\u006f\u006e\u0073\u0074\u0072\u0061\u0069\u006e\u0074\u0052\u0065\u0066A\u0074\u0074\u0072\u0069\u0062u\u0074\u0065s\u003a\u0020\u0025\u0073", _dc)
		}
		if _cd, _da := _edc.(_d.EndElement); _da && _cd.Name == start.Name {
			break
		}
	}
	return nil
}

type CT_ChildMax struct{ ValAttr *int32 }
type ST_HierBranchStyle byte

func (_abdc *CT_StyleDefinitionHeaderLst) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _abdc.StyleDefHdr != nil {
		_edceb := _d.StartElement{Name: _d.Name{Local: "s\u0074\u0079\u006c\u0065\u0044\u0065\u0066\u0048\u0064\u0072"}}
		for _, _aeba := range _abdc.StyleDefHdr {
			e.EncodeElement(_aeba, _edceb)
		}
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_cdgdd *ST_ConnectorPoint) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_fbeg, _deeeg := d.Token()
	if _deeeg != nil {
		return _deeeg
	}
	if _aaeb, _baea := _fbeg.(_d.EndElement); _baea && _aaeb.Name == start.Name {
		*_cdgdd = 1
		return nil
	}
	if _ggccg, _baead := _fbeg.(_d.CharData); !_baead {
		return _f.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _fbeg)
	} else {
		switch string(_ggccg) {
		case "":
			*_cdgdd = 0
		case "\u0061\u0075\u0074\u006f":
			*_cdgdd = 1
		case "\u0062\u0043\u0074\u0072":
			*_cdgdd = 2
		case "\u0063\u0074\u0072":
			*_cdgdd = 3
		case "\u006d\u0069\u0064\u004c":
			*_cdgdd = 4
		case "\u006d\u0069\u0064\u0052":
			*_cdgdd = 5
		case "\u0074\u0043\u0074\u0072":
			*_cdgdd = 6
		case "\u0062\u004c":
			*_cdgdd = 7
		case "\u0062\u0052":
			*_cdgdd = 8
		case "\u0074\u004c":
			*_cdgdd = 9
		case "\u0074\u0052":
			*_cdgdd = 10
		case "\u0072\u0061\u0064\u0069\u0061\u006c":
			*_cdgdd = 11
		}
	}
	_fbeg, _deeeg = d.Token()
	if _deeeg != nil {
		return _deeeg
	}
	if _fcbbc, _gdfc := _fbeg.(_d.EndElement); _gdfc && _fcbbc.Name == start.Name {
		return nil
	}
	return _f.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _fbeg)
}

// Validate validates the CT_DiagramDefinition and its children
func (_aaag *CT_DiagramDefinition) Validate() error {
	return _aaag.ValidateWithPath("C\u0054_\u0044\u0069\u0061\u0067\u0072\u0061\u006d\u0044e\u0066\u0069\u006e\u0069ti\u006f\u006e")
}
func (_eebb ST_NodeVerticalAlignment) ValidateWithPath(path string) error {
	switch _eebb {
	case 0, 1, 2, 3:
	default:
		return _f.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_eebb))
	}
	return nil
}
func (_eaab *ST_CenterShapeMapping) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_eaab = 0
	case "\u006e\u006f\u006e\u0065":
		*_eaab = 1
	case "\u0066\u004e\u006fd\u0065":
		*_eaab = 2
	}
	return nil
}
func NewCT_SDCategory() *CT_SDCategory { _fcfa := &CT_SDCategory{}; return _fcfa }

// Validate validates the CT_Rules and its children
func (_dgbc *CT_Rules) Validate() error {
	return _dgbc.ValidateWithPath("\u0043\u0054\u005f\u0052\u0075\u006c\u0065\u0073")
}

type LayoutDef struct{ CT_DiagramDefinition }

func (_gebd ST_ConnectorPoint) ValidateWithPath(path string) error {
	switch _gebd {
	case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11:
	default:
		return _f.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_gebd))
	}
	return nil
}

type CT_AnimOne struct{ ValAttr ST_AnimOneStr }

const (
	ST_OffsetUnset ST_Offset = 0
	ST_OffsetCtr   ST_Offset = 1
	ST_OffsetOff   ST_Offset = 2
)

func (_fbffa *ST_ArrowheadStyle) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_gbee, _bdcf := d.Token()
	if _bdcf != nil {
		return _bdcf
	}
	if _eedce, _cecbb := _gbee.(_d.EndElement); _cecbb && _eedce.Name == start.Name {
		*_fbffa = 1
		return nil
	}
	if _gcfb, _gbgc := _gbee.(_d.CharData); !_gbgc {
		return _f.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _gbee)
	} else {
		switch string(_gcfb) {
		case "":
			*_fbffa = 0
		case "\u0061\u0075\u0074\u006f":
			*_fbffa = 1
		case "\u0061\u0072\u0072":
			*_fbffa = 2
		case "\u006e\u006f\u0041r\u0072":
			*_fbffa = 3
		}
	}
	_gbee, _bdcf = d.Token()
	if _bdcf != nil {
		return _bdcf
	}
	if _gedd, _gdfb := _gbee.(_d.EndElement); _gdfb && _gedd.Name == start.Name {
		return nil
	}
	return _f.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _gbee)
}
func (_dace *CT_Shape) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _dafg := range start.Attr {
		if _dafg.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073" && _dafg.Name.Local == "\u0062\u006c\u0069\u0070" || _dafg.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f\u002fp\u0075\u0072\u006c.\u006f\u0063\u006cc\u002e\u006fr\u0067\u002f\u006f\u006f\u0078\u006dl\u002fof\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073" && _dafg.Name.Local == "\u0062\u006c\u0069\u0070" {
			_caaef, _debe := _dafg.Value, error(nil)
			if _debe != nil {
				return _debe
			}
			_dace.BlipAttr = &_caaef
			continue
		}
		if _dafg.Name.Local == "\u0072\u006f\u0074" {
			_dbea, _cceec := _gb.ParseFloat(_dafg.Value, 64)
			if _cceec != nil {
				return _cceec
			}
			_dace.RotAttr = &_dbea
			continue
		}
		if _dafg.Name.Local == "\u0074\u0079\u0070\u0065" {
			_ecgd, _agca := ParseUnionST_LayoutShapeType(_dafg.Value)
			if _agca != nil {
				return _agca
			}
			_dace.TypeAttr = &_ecgd
			continue
		}
		if _dafg.Name.Local == "\u007aO\u0072\u0064\u0065\u0072\u004f\u0066f" {
			_gade, _eeea := _gb.ParseInt(_dafg.Value, 10, 32)
			if _eeea != nil {
				return _eeea
			}
			_cegg := int32(_gade)
			_dace.ZOrderOffAttr = &_cegg
			continue
		}
		if _dafg.Name.Local == "\u0068\u0069\u0064\u0065\u0047\u0065\u006f\u006d" {
			_dffb, _bafe := _gb.ParseBool(_dafg.Value)
			if _bafe != nil {
				return _bafe
			}
			_dace.HideGeomAttr = &_dffb
			continue
		}
		if _dafg.Name.Local == "\u006ck\u0054\u0078\u0045\u006e\u0074\u0072y" {
			_bbcf, _aeca := _gb.ParseBool(_dafg.Value)
			if _aeca != nil {
				return _aeca
			}
			_dace.LkTxEntryAttr = &_bbcf
			continue
		}
		if _dafg.Name.Local == "\u0062l\u0069\u0070\u0050\u0068\u006c\u0064r" {
			_baac, _edcd := _gb.ParseBool(_dafg.Value)
			if _edcd != nil {
				return _edcd
			}
			_dace.BlipPhldrAttr = &_baac
			continue
		}
	}
_fcea:
	for {
		_cdaf, _cfbce := d.Token()
		if _cfbce != nil {
			return _cfbce
		}
		switch _abge := _cdaf.(type) {
		case _d.StartElement:
			switch _abge.Name {
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0061\u0064\u006a\u004c\u0073\u0074"}:
				_dace.AdjLst = NewCT_AdjLst()
				if _abee := d.DecodeElement(_dace.AdjLst, &_abge); _abee != nil {
					return _abee
				}
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_dace.ExtLst = _bc.NewCT_OfficeArtExtensionList()
				if _dacfd := d.DecodeElement(_dace.ExtLst, &_abge); _dacfd != nil {
					return _dacfd
				}
			default:
				_b.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006eg\u0020\u0075\u006es\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0053\u0068\u0061\u0070\u0065\u0020\u0025\u0076", _abge.Name)
				if _ccefb := d.Skip(); _ccefb != nil {
					return _ccefb
				}
			}
		case _d.EndElement:
			break _fcea
		case _d.CharData:
		}
	}
	return nil
}
func (_gbcge ST_TextAnchorHorizontal) ValidateWithPath(path string) error {
	switch _gbcge {
	case 0, 1, 2:
	default:
		return _f.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_gbcge))
	}
	return nil
}

type CT_Direction struct{ ValAttr ST_Direction }

func (_aegg *CT_DiagramDefinitionHeader) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _degdg := range start.Attr {
		if _degdg.Name.Local == "\u0075\u006e\u0069\u0071\u0075\u0065\u0049\u0064" {
			_adcd, _badg := _degdg.Value, error(nil)
			if _badg != nil {
				return _badg
			}
			_aegg.UniqueIdAttr = _adcd
			continue
		}
		if _degdg.Name.Local == "\u006d\u0069\u006e\u0056\u0065\u0072" {
			_gdbb, _ebaf := _degdg.Value, error(nil)
			if _ebaf != nil {
				return _ebaf
			}
			_aegg.MinVerAttr = &_gdbb
			continue
		}
		if _degdg.Name.Local == "\u0064\u0065\u0066\u0053\u0074\u0079\u006c\u0065" {
			_dbbe, _cfcc := _degdg.Value, error(nil)
			if _cfcc != nil {
				return _cfcc
			}
			_aegg.DefStyleAttr = &_dbbe
			continue
		}
		if _degdg.Name.Local == "\u0072\u0065\u0073I\u0064" {
			_abfe, _aggde := _gb.ParseInt(_degdg.Value, 10, 32)
			if _aggde != nil {
				return _aggde
			}
			_beab := int32(_abfe)
			_aegg.ResIdAttr = &_beab
			continue
		}
	}
_gcge:
	for {
		_dfgbg, _badd := d.Token()
		if _badd != nil {
			return _badd
		}
		switch _babf := _dfgbg.(type) {
		case _d.StartElement:
			switch _babf.Name {
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0074\u0069\u0074l\u0065"}:
				_fbgg := NewCT_Name()
				if _cge := d.DecodeElement(_fbgg, &_babf); _cge != nil {
					return _cge
				}
				_aegg.Title = append(_aegg.Title, _fbgg)
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0064\u0065\u0073\u0063"}:
				_gfa := NewCT_Description()
				if _ceab := d.DecodeElement(_gfa, &_babf); _ceab != nil {
					return _ceab
				}
				_aegg.Desc = append(_aegg.Desc, _gfa)
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0061\u0074\u004c\u0073\u0074"}:
				_aegg.CatLst = NewCT_Categories()
				if _ebb := d.DecodeElement(_aegg.CatLst, &_babf); _ebb != nil {
					return _ebb
				}
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_aegg.ExtLst = _bc.NewCT_OfficeArtExtensionList()
				if _ddge := d.DecodeElement(_aegg.ExtLst, &_babf); _ddge != nil {
					return _ddge
				}
			default:
				_b.Log.Debug("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006et\u0020o\u006e\u0020\u0043\u0054_\u0044\u0069a\u0067\u0072\u0061\u006d\u0044\u0065\u0066\u0069\u006e\u0069\u0074\u0069\u006f\u006e\u0048\u0065\u0061\u0064\u0065\u0072\u0020\u0025\u0076", _babf.Name)
				if _edcef := d.Skip(); _edcef != nil {
					return _edcef
				}
			}
		case _d.EndElement:
			break _gcge
		case _d.CharData:
		}
	}
	return nil
}
func NewCT_StyleDefinitionHeaderLst() *CT_StyleDefinitionHeaderLst {
	_fcgd := &CT_StyleDefinitionHeaderLst{}
	return _fcgd
}
func (_edcdc ST_PtType) ValidateWithPath(path string) error {
	switch _edcdc {
	case 0, 1, 2, 3, 4, 5, 6:
	default:
		return _f.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_edcdc))
	}
	return nil
}
func (_adfda *ST_VerticalAlignment) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_adfda = 0
	case "\u0074":
		*_adfda = 1
	case "\u006d\u0069\u0064":
		*_adfda = 2
	case "\u0062":
		*_adfda = 3
	case "\u006e\u006f\u006e\u0065":
		*_adfda = 4
	}
	return nil
}
func (_egggde *ST_NodeVerticalAlignment) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_egggde = 0
	case "\u0074":
		*_egggde = 1
	case "\u006d\u0069\u0064":
		*_egggde = 2
	case "\u0062":
		*_egggde = 3
	}
	return nil
}
func (_degeg ST_PtType) Validate() error                          { return _degeg.ValidateWithPath("") }
func ParseSliceST_UnsignedInts(s string) (ST_UnsignedInts, error) { return ST_UnsignedInts{}, nil }

type CT_CTCategory struct {
	TypeAttr string
	PriAttr  uint32
}

func (_daa *CT_Category) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _ced := range start.Attr {
		if _ced.Name.Local == "\u0074\u0079\u0070\u0065" {
			_adbe, _deb := _ced.Value, error(nil)
			if _deb != nil {
				return _deb
			}
			_daa.TypeAttr = _adbe
			continue
		}
		if _ced.Name.Local == "\u0070\u0072\u0069" {
			_cffe, _cdgdg := _gb.ParseUint(_ced.Value, 10, 32)
			if _cdgdg != nil {
				return _cdgdg
			}
			_daa.PriAttr = uint32(_cffe)
			continue
		}
	}
	for {
		_aafa, _dfc := d.Token()
		if _dfc != nil {
			return _f.Errorf("\u0070\u0061\u0072si\u006e\u0067\u0020\u0043\u0054\u005f\u0043\u0061\u0074\u0065\u0067\u006f\u0072\u0079\u003a\u0020\u0025\u0073", _dfc)
		}
		if _bbe, _bfa := _aafa.(_d.EndElement); _bfa && _bbe.Name == start.Name {
			break
		}
	}
	return nil
}

// ValidateWithPath validates the CT_DiagramDefinitionHeader and its children, prefixing error messages with path
func (_gddc *CT_DiagramDefinitionHeader) ValidateWithPath(path string) error {
	for _baab, _cafc := range _gddc.Title {
		if _ecga := _cafc.ValidateWithPath(_f.Sprintf("\u0025\u0073\u002fT\u0069\u0074\u006c\u0065\u005b\u0025\u0064\u005d", path, _baab)); _ecga != nil {
			return _ecga
		}
	}
	for _gcce, _dgcaf := range _gddc.Desc {
		if _ebcg := _dgcaf.ValidateWithPath(_f.Sprintf("%\u0073\u002f\u0044\u0065\u0073\u0063\u005b\u0025\u0064\u005d", path, _gcce)); _ebcg != nil {
			return _ebcg
		}
	}
	if _gddc.CatLst != nil {
		if _efgb := _gddc.CatLst.ValidateWithPath(path + "\u002fC\u0061\u0074\u004c\u0073\u0074"); _efgb != nil {
			return _efgb
		}
	}
	if _gddc.ExtLst != nil {
		if _aaafd := _gddc.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _aaafd != nil {
			return _aaafd
		}
	}
	return nil
}

type ST_ConstraintType byte

// ValidateWithPath validates the ColorsDef and its children, prefixing error messages with path
func (_fgaee *ColorsDef) ValidateWithPath(path string) error {
	if _debfc := _fgaee.CT_ColorTransform.ValidateWithPath(path); _debfc != nil {
		return _debfc
	}
	return nil
}
func _bbcdb(_dcgfb bool) uint8 {
	if _dcgfb {
		return 1
	}
	return 0
}

// Validate validates the CT_StyleLabel and its children
func (_gbab *CT_StyleLabel) Validate() error {
	return _gbab.ValidateWithPath("\u0043\u0054\u005f\u0053\u0074\u0079\u006c\u0065\u004c\u0061\u0062\u0065\u006c")
}

// ValidateWithPath validates the CT_ElemPropSet and its children, prefixing error messages with path
func (_ddeb *CT_ElemPropSet) ValidateWithPath(path string) error {
	if _ddeb.PresAssocIDAttr != nil {
		if _dgfe := _ddeb.PresAssocIDAttr.ValidateWithPath(path + "\u002f\u0050r\u0065\u0073\u0041s\u0073\u006f\u0063\u0049\u0044\u0041\u0074\u0074\u0072"); _dgfe != nil {
			return _dgfe
		}
	}
	if _ddeb.CustScaleXAttr != nil {
		if _cdeg := _ddeb.CustScaleXAttr.ValidateWithPath(path + "\u002fC\u0075s\u0074\u0053\u0063\u0061\u006c\u0065\u0058\u0041\u0074\u0074\u0072"); _cdeg != nil {
			return _cdeg
		}
	}
	if _ddeb.CustScaleYAttr != nil {
		if _eeae := _ddeb.CustScaleYAttr.ValidateWithPath(path + "\u002fC\u0075s\u0074\u0053\u0063\u0061\u006c\u0065\u0059\u0041\u0074\u0074\u0072"); _eeae != nil {
			return _eeae
		}
	}
	if _ddeb.CustLinFactXAttr != nil {
		if _afda := _ddeb.CustLinFactXAttr.ValidateWithPath(path + "\u002f\u0043\u0075\u0073\u0074\u004c\u0069\u006e\u0046\u0061\u0063\u0074X\u0041\u0074\u0074\u0072"); _afda != nil {
			return _afda
		}
	}
	if _ddeb.CustLinFactYAttr != nil {
		if _cgec := _ddeb.CustLinFactYAttr.ValidateWithPath(path + "\u002f\u0043\u0075\u0073\u0074\u004c\u0069\u006e\u0046\u0061\u0063\u0074Y\u0041\u0074\u0074\u0072"); _cgec != nil {
			return _cgec
		}
	}
	if _ddeb.CustLinFactNeighborXAttr != nil {
		if _cdgb := _ddeb.CustLinFactNeighborXAttr.ValidateWithPath(path + "\u002fC\u0075\u0073\u0074\u004ci\u006e\u0046\u0061\u0063\u0074N\u0065i\u0067h\u0062\u006f\u0072\u0058\u0041\u0074\u0074r"); _cdgb != nil {
			return _cdgb
		}
	}
	if _ddeb.CustLinFactNeighborYAttr != nil {
		if _fag := _ddeb.CustLinFactNeighborYAttr.ValidateWithPath(path + "\u002fC\u0075\u0073\u0074\u004ci\u006e\u0046\u0061\u0063\u0074N\u0065i\u0067h\u0062\u006f\u0072\u0059\u0041\u0074\u0074r"); _fag != nil {
			return _fag
		}
	}
	if _ddeb.CustRadScaleRadAttr != nil {
		if _abdec := _ddeb.CustRadScaleRadAttr.ValidateWithPath(path + "/\u0043u\u0073\u0074\u0052\u0061\u0064\u0053\u0063\u0061l\u0065\u0052\u0061\u0064At\u0074\u0072"); _abdec != nil {
			return _abdec
		}
	}
	if _ddeb.CustRadScaleIncAttr != nil {
		if _dced := _ddeb.CustRadScaleIncAttr.ValidateWithPath(path + "/\u0043u\u0073\u0074\u0052\u0061\u0064\u0053\u0063\u0061l\u0065\u0049\u006e\u0063At\u0074\u0072"); _dced != nil {
			return _dced
		}
	}
	if _ddeb.PresLayoutVars != nil {
		if _gdgc := _ddeb.PresLayoutVars.ValidateWithPath(path + "\u002fP\u0072e\u0073\u004c\u0061\u0079\u006f\u0075\u0074\u0056\u0061\u0072\u0073"); _gdgc != nil {
			return _gdgc
		}
	}
	if _ddeb.Style != nil {
		if _bgcb := _ddeb.Style.ValidateWithPath(path + "\u002f\u0053\u0074\u0079\u006c\u0065"); _bgcb != nil {
			return _bgcb
		}
	}
	return nil
}
func (_bgdfeg *ST_Offset) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_bgdfeg = 0
	case "\u0063\u0074\u0072":
		*_bgdfeg = 1
	case "\u006f\u0066\u0066":
		*_bgdfeg = 2
	}
	return nil
}

// Validate validates the CT_BulletEnabled and its children
func (_gda *CT_BulletEnabled) Validate() error {
	return _gda.ValidateWithPath("\u0043\u0054_\u0042\u0075\u006cl\u0065\u0074\u0045\u006e\u0061\u0062\u006c\u0065\u0064")
}
func (_cccg ST_TextAnchorHorizontal) String() string {
	switch _cccg {
	case 0:
		return ""
	case 1:
		return "\u006e\u006f\u006e\u0065"
	case 2:
		return "\u0063\u0074\u0072"
	}
	return ""
}
func NewStyleDef() *StyleDef {
	_cbbe := &StyleDef{}
	_cbbe.CT_StyleDefinition = *NewCT_StyleDefinition()
	return _cbbe
}
func (_gfdfg ST_ClrAppMethod) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_gfdfg.String(), start)
}
func (_ddfd *CT_Colors) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _bdgd := range start.Attr {
		if _bdgd.Name.Local == "\u006d\u0065\u0074\u0068" {
			_ddfd.MethAttr.UnmarshalXMLAttr(_bdgd)
			continue
		}
		if _bdgd.Name.Local == "\u0068\u0075\u0065\u0044\u0069\u0072" {
			_ddfd.HueDirAttr.UnmarshalXMLAttr(_bdgd)
			continue
		}
	}
_gge:
	for {
		_bda, _dcee := d.Token()
		if _dcee != nil {
			return _dcee
		}
		switch _debc := _bda.(type) {
		case _d.StartElement:
			switch _debc.Name {
			default:
				_b.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u0043\u006f\u006co\u0072\u0073 \u0025\u0076", _debc.Name)
				if _efac := d.Skip(); _efac != nil {
					return _efac
				}
			}
		case _d.EndElement:
			break _gge
		case _d.CharData:
		}
	}
	return nil
}
func (_fbad ST_PyramidAccentTextMargin) String() string {
	switch _fbad {
	case 0:
		return ""
	case 1:
		return "\u0073\u0074\u0065\u0070"
	case 2:
		return "\u0073\u0074\u0061c\u006b"
	}
	return ""
}
func (_ebfa ST_ParameterId) String() string {
	switch _ebfa {
	case 0:
		return ""
	case 1:
		return "\u0068o\u0072\u007a\u0041\u006c\u0069\u0067n"
	case 2:
		return "\u0076e\u0072\u0074\u0041\u006c\u0069\u0067n"
	case 3:
		return "\u0063\u0068\u0044i\u0072"
	case 4:
		return "\u0063h\u0041\u006c\u0069\u0067\u006e"
	case 5:
		return "\u0073\u0065\u0063\u0043\u0068\u0041\u006c\u0069\u0067\u006e"
	case 6:
		return "\u006c\u0069\u006e\u0044\u0069\u0072"
	case 7:
		return "\u0073e\u0063\u004c\u0069\u006e\u0044\u0069r"
	case 8:
		return "\u0073\u0074\u0045\u006c\u0065\u006d"
	case 9:
		return "\u0062\u0065\u006e\u0064\u0050\u0074"
	case 10:
		return "\u0063\u006f\u006e\u006e\u0052\u006f\u0075\u0074"
	case 11:
		return "\u0062\u0065\u0067\u0053\u0074\u0079"
	case 12:
		return "\u0065\u006e\u0064\u0053\u0074\u0079"
	case 13:
		return "\u0064\u0069\u006d"
	case 14:
		return "\u0072o\u0074\u0050\u0061\u0074\u0068"
	case 15:
		return "\u0063t\u0072\u0053\u0068\u0070\u004d\u0061p"
	case 16:
		return "\u006e\u006f\u0064\u0065\u0048\u006f\u0072\u007a\u0041\u006c\u0069\u0067\u006e"
	case 17:
		return "\u006e\u006f\u0064\u0065\u0056\u0065\u0072\u0074\u0041\u006c\u0069\u0067\u006e"
	case 18:
		return "\u0066\u0061\u006c\u006c\u0062\u0061\u0063\u006b"
	case 19:
		return "\u0074\u0078\u0044i\u0072"
	case 20:
		return "p\u0079\u0072\u0061\u0041\u0063\u0063\u0074\u0050\u006f\u0073"
	case 21:
		return "\u0070\u0079\u0072\u0061\u0041\u0063\u0063\u0074\u0054\u0078\u004d\u0061\u0072"
	case 22:
		return "\u0074x\u0042\u006c\u0044\u0069\u0072"
	case 23:
		return "\u0074\u0078\u0041n\u0063\u0068\u006f\u0072\u0048\u006f\u0072\u007a"
	case 24:
		return "\u0074\u0078\u0041n\u0063\u0068\u006f\u0072\u0056\u0065\u0072\u0074"
	case 25:
		return "\u0074\u0078\u0041\u006e\u0063\u0068\u006f\u0072\u0048o\u0072\u007a\u0043\u0068"
	case 26:
		return "\u0074\u0078\u0041\u006e\u0063\u0068\u006f\u0072\u0056e\u0072\u0074\u0043\u0068"
	case 27:
		return "\u0070\u0061\u0072\u0054\u0078\u004c\u0054\u0052\u0041\u006c\u0069\u0067\u006e"
	case 28:
		return "\u0070\u0061\u0072\u0054\u0078\u0052\u0054\u004c\u0041\u006c\u0069\u0067\u006e"
	case 29:
		return "\u0073h\u0070T\u0078\u004c\u0054\u0052\u0041\u006c\u0069\u0067\u006e\u0043\u0068"
	case 30:
		return "\u0073h\u0070T\u0078\u0052\u0054\u004c\u0041\u006c\u0069\u0067\u006e\u0043\u0068"
	case 31:
		return "\u0061u\u0074\u006f\u0054\u0078\u0052\u006ft"
	case 32:
		return "\u0067\u0072\u0044i\u0072"
	case 33:
		return "\u0066l\u006f\u0077\u0044\u0069\u0072"
	case 34:
		return "\u0063o\u006e\u0074\u0044\u0069\u0072"
	case 35:
		return "\u0062\u006b\u0070\u0074"
	case 36:
		return "\u006f\u0066\u0066"
	case 37:
		return "\u0068i\u0065\u0072\u0041\u006c\u0069\u0067n"
	case 38:
		return "\u0062\u006b\u0050t\u0046\u0069\u0078\u0065\u0064\u0056\u0061\u006c"
	case 39:
		return "s\u0074\u0042\u0075\u006c\u006c\u0065\u0074\u004c\u0076\u006c"
	case 40:
		return "\u0073\u0074\u0041n\u0067"
	case 41:
		return "\u0073p\u0061\u006e\u0041\u006e\u0067"
	case 42:
		return "\u0061\u0072"
	case 43:
		return "\u006cn\u0053\u0070\u0050\u0061\u0072"
	case 44:
		return "\u006c\u006e\u0053\u0070\u0041\u0066\u0050\u0061\u0072\u0050"
	case 45:
		return "\u006c\u006e\u0053\u0070\u0043\u0068"
	case 46:
		return "\u006cn\u0053\u0070\u0041\u0066\u0043\u0068P"
	case 47:
		return "r\u0074\u0053\u0068\u006f\u0072\u0074\u0044\u0069\u0073\u0074"
	case 48:
		return "\u0061l\u0069\u0067\u006e\u0054\u0078"
	case 49:
		return "p\u0079\u0072\u0061\u004c\u0076\u006c\u004e\u006f\u0064\u0065"
	case 50:
		return "\u0070\u0079r\u0061\u0041\u0063c\u0074\u0042\u006b\u0067\u0064\u004e\u006f\u0064\u0065"
	case 51:
		return "\u0070\u0079\u0072\u0061\u0041\u0063\u0063\u0074\u0054x\u004e\u006f\u0064\u0065"
	case 52:
		return "\u0073r\u0063\u004e\u006f\u0064\u0065"
	case 53:
		return "\u0064s\u0074\u004e\u006f\u0064\u0065"
	case 54:
		return "\u0062\u0065\u0067\u0050\u0074\u0073"
	case 55:
		return "\u0065\u006e\u0064\u0050\u0074\u0073"
	}
	return ""
}

const (
	ST_ConstraintRelationshipUnset ST_ConstraintRelationship = 0
	ST_ConstraintRelationshipSelf  ST_ConstraintRelationship = 1
	ST_ConstraintRelationshipCh    ST_ConstraintRelationship = 2
	ST_ConstraintRelationshipDes   ST_ConstraintRelationship = 3
)

func (_ffdbb *ST_CxnType) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_bddb, _gdaee := d.Token()
	if _gdaee != nil {
		return _gdaee
	}
	if _bafg, _cbdfc := _bddb.(_d.EndElement); _cbdfc && _bafg.Name == start.Name {
		*_ffdbb = 1
		return nil
	}
	if _egac, _cgeeg := _bddb.(_d.CharData); !_cgeeg {
		return _f.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _bddb)
	} else {
		switch string(_egac) {
		case "":
			*_ffdbb = 0
		case "\u0070\u0061\u0072O\u0066":
			*_ffdbb = 1
		case "\u0070\u0072\u0065\u0073\u004f\u0066":
			*_ffdbb = 2
		case "\u0070r\u0065\u0073\u0050\u0061\u0072\u004ff":
			*_ffdbb = 3
		case "\u0075\u006e\u006b\u006eow\u006e\u0052\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070":
			*_ffdbb = 4
		}
	}
	_bddb, _gdaee = d.Token()
	if _gdaee != nil {
		return _gdaee
	}
	if _fefef, _cbeff := _bddb.(_d.EndElement); _cbeff && _fefef.Name == start.Name {
		return nil
	}
	return _f.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _bddb)
}

// Validate validates the LayoutDef and its children
func (_ffcc *LayoutDef) Validate() error {
	return _ffcc.ValidateWithPath("\u004ca\u0079\u006f\u0075\u0074\u0044\u0065f")
}

type ST_TextBlockDirection byte

func (_dcdcd ST_BoolOperator) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_dcdcd.String(), start)
}

type ST_NodeHorizontalAlignment byte

const (
	ST_LinearDirectionUnset ST_LinearDirection = 0
	ST_LinearDirectionFromL ST_LinearDirection = 1
	ST_LinearDirectionFromR ST_LinearDirection = 2
	ST_LinearDirectionFromT ST_LinearDirection = 3
	ST_LinearDirectionFromB ST_LinearDirection = 4
)

func (_bdga ST_Direction) ValidateWithPath(path string) error {
	switch _bdga {
	case 0, 1, 2:
	default:
		return _f.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_bdga))
	}
	return nil
}
func (_bdgac ST_FunctionType) ValidateWithPath(path string) error {
	switch _bdgac {
	case 0, 1, 2, 3, 4, 5, 6, 7, 8:
	default:
		return _f.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_bdgac))
	}
	return nil
}
func (_bcdebf ST_ChildOrderType) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_babfa := _d.Attr{}
	_babfa.Name = name
	switch _bcdebf {
	case ST_ChildOrderTypeUnset:
		_babfa.Value = ""
	case ST_ChildOrderTypeB:
		_babfa.Value = "\u0062"
	case ST_ChildOrderTypeT:
		_babfa.Value = "\u0074"
	}
	return _babfa, nil
}

const (
	ST_ElementTypeUnset    ST_ElementType = 0
	ST_ElementTypeAll      ST_ElementType = 1
	ST_ElementTypeDoc      ST_ElementType = 2
	ST_ElementTypeNode     ST_ElementType = 3
	ST_ElementTypeNorm     ST_ElementType = 4
	ST_ElementTypeNonNorm  ST_ElementType = 5
	ST_ElementTypeAsst     ST_ElementType = 6
	ST_ElementTypeNonAsst  ST_ElementType = 7
	ST_ElementTypeParTrans ST_ElementType = 8
	ST_ElementTypePres     ST_ElementType = 9
	ST_ElementTypeSibTrans ST_ElementType = 10
)

func (_dgda *ST_OutputShapeType) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_dgda = 0
	case "\u006e\u006f\u006e\u0065":
		*_dgda = 1
	case "\u0063\u006f\u006e\u006e":
		*_dgda = 2
	}
	return nil
}

// ValidateWithPath validates the StyleDef and its children, prefixing error messages with path
func (_cfeag *StyleDef) ValidateWithPath(path string) error {
	if _dbfb := _cfeag.CT_StyleDefinition.ValidateWithPath(path); _dbfb != nil {
		return _dbfb
	}
	return nil
}
func (_bgac *ST_PrSetCustVal) Validate() error { return _bgac.ValidateWithPath("") }
func (_gaeed ST_ParameterVal) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _gaeed.ST_DiagramHorizontalAlignment != ST_DiagramHorizontalAlignmentUnset {
		e.EncodeToken(_d.CharData(_gaeed.ST_DiagramHorizontalAlignment.String()))
	}
	if _gaeed.ST_VerticalAlignment != ST_VerticalAlignmentUnset {
		e.EncodeToken(_d.CharData(_gaeed.ST_VerticalAlignment.String()))
	}
	if _gaeed.ST_ChildDirection != ST_ChildDirectionUnset {
		e.EncodeToken(_d.CharData(_gaeed.ST_ChildDirection.String()))
	}
	if _gaeed.ST_ChildAlignment != ST_ChildAlignmentUnset {
		e.EncodeToken(_d.CharData(_gaeed.ST_ChildAlignment.String()))
	}
	if _gaeed.ST_SecondaryChildAlignment != ST_SecondaryChildAlignmentUnset {
		e.EncodeToken(_d.CharData(_gaeed.ST_SecondaryChildAlignment.String()))
	}
	if _gaeed.ST_LinearDirection != ST_LinearDirectionUnset {
		e.EncodeToken(_d.CharData(_gaeed.ST_LinearDirection.String()))
	}
	if _gaeed.ST_SecondaryLinearDirection != ST_SecondaryLinearDirectionUnset {
		e.EncodeToken(_d.CharData(_gaeed.ST_SecondaryLinearDirection.String()))
	}
	if _gaeed.ST_StartingElement != ST_StartingElementUnset {
		e.EncodeToken(_d.CharData(_gaeed.ST_StartingElement.String()))
	}
	if _gaeed.ST_BendPoint != ST_BendPointUnset {
		e.EncodeToken(_d.CharData(_gaeed.ST_BendPoint.String()))
	}
	if _gaeed.ST_ConnectorRouting != ST_ConnectorRoutingUnset {
		e.EncodeToken(_d.CharData(_gaeed.ST_ConnectorRouting.String()))
	}
	if _gaeed.ST_ArrowheadStyle != ST_ArrowheadStyleUnset {
		e.EncodeToken(_d.CharData(_gaeed.ST_ArrowheadStyle.String()))
	}
	if _gaeed.ST_ConnectorDimension != ST_ConnectorDimensionUnset {
		e.EncodeToken(_d.CharData(_gaeed.ST_ConnectorDimension.String()))
	}
	if _gaeed.ST_RotationPath != ST_RotationPathUnset {
		e.EncodeToken(_d.CharData(_gaeed.ST_RotationPath.String()))
	}
	if _gaeed.ST_CenterShapeMapping != ST_CenterShapeMappingUnset {
		e.EncodeToken(_d.CharData(_gaeed.ST_CenterShapeMapping.String()))
	}
	if _gaeed.ST_NodeHorizontalAlignment != ST_NodeHorizontalAlignmentUnset {
		e.EncodeToken(_d.CharData(_gaeed.ST_NodeHorizontalAlignment.String()))
	}
	if _gaeed.ST_NodeVerticalAlignment != ST_NodeVerticalAlignmentUnset {
		e.EncodeToken(_d.CharData(_gaeed.ST_NodeVerticalAlignment.String()))
	}
	if _gaeed.ST_FallbackDimension != ST_FallbackDimensionUnset {
		e.EncodeToken(_d.CharData(_gaeed.ST_FallbackDimension.String()))
	}
	if _gaeed.ST_TextDirection != ST_TextDirectionUnset {
		e.EncodeToken(_d.CharData(_gaeed.ST_TextDirection.String()))
	}
	if _gaeed.ST_PyramidAccentPosition != ST_PyramidAccentPositionUnset {
		e.EncodeToken(_d.CharData(_gaeed.ST_PyramidAccentPosition.String()))
	}
	if _gaeed.ST_PyramidAccentTextMargin != ST_PyramidAccentTextMarginUnset {
		e.EncodeToken(_d.CharData(_gaeed.ST_PyramidAccentTextMargin.String()))
	}
	if _gaeed.ST_TextBlockDirection != ST_TextBlockDirectionUnset {
		e.EncodeToken(_d.CharData(_gaeed.ST_TextBlockDirection.String()))
	}
	if _gaeed.ST_TextAnchorHorizontal != ST_TextAnchorHorizontalUnset {
		e.EncodeToken(_d.CharData(_gaeed.ST_TextAnchorHorizontal.String()))
	}
	if _gaeed.ST_TextAnchorVertical != ST_TextAnchorVerticalUnset {
		e.EncodeToken(_d.CharData(_gaeed.ST_TextAnchorVertical.String()))
	}
	if _gaeed.ST_DiagramTextAlignment != ST_DiagramTextAlignmentUnset {
		e.EncodeToken(_d.CharData(_gaeed.ST_DiagramTextAlignment.String()))
	}
	if _gaeed.ST_AutoTextRotation != ST_AutoTextRotationUnset {
		e.EncodeToken(_d.CharData(_gaeed.ST_AutoTextRotation.String()))
	}
	if _gaeed.ST_GrowDirection != ST_GrowDirectionUnset {
		e.EncodeToken(_d.CharData(_gaeed.ST_GrowDirection.String()))
	}
	if _gaeed.ST_FlowDirection != ST_FlowDirectionUnset {
		e.EncodeToken(_d.CharData(_gaeed.ST_FlowDirection.String()))
	}
	if _gaeed.ST_ContinueDirection != ST_ContinueDirectionUnset {
		e.EncodeToken(_d.CharData(_gaeed.ST_ContinueDirection.String()))
	}
	if _gaeed.ST_Breakpoint != ST_BreakpointUnset {
		e.EncodeToken(_d.CharData(_gaeed.ST_Breakpoint.String()))
	}
	if _gaeed.ST_Offset != ST_OffsetUnset {
		e.EncodeToken(_d.CharData(_gaeed.ST_Offset.String()))
	}
	if _gaeed.ST_HierarchyAlignment != ST_HierarchyAlignmentUnset {
		e.EncodeToken(_d.CharData(_gaeed.ST_HierarchyAlignment.String()))
	}
	if _gaeed.Int32 != nil {
		e.EncodeToken(_d.CharData(_f.Sprintf("\u0025\u0064", *_gaeed.Int32)))
	}
	if _gaeed.Float64 != nil {
		e.EncodeToken(_d.CharData(_f.Sprintf("\u0025\u0066", *_gaeed.Float64)))
	}
	if _gaeed.Bool != nil {
		e.EncodeToken(_d.CharData(_f.Sprintf("\u0025\u0064", _bbcdb(*_gaeed.Bool))))
	}
	if _gaeed.StringVal != nil {
		e.EncodeToken(_d.CharData(*_gaeed.StringVal))
	}
	if _gaeed.ST_ConnectorPoint != ST_ConnectorPointUnset {
		e.EncodeToken(_d.CharData(_gaeed.ST_ConnectorPoint.String()))
	}
	return e.EncodeToken(_d.EndElement{Name: start.Name})
}

type CT_CTCategories struct{ Cat []*CT_CTCategory }

func (_debbg *ST_ResizeHandlesStr) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_debbg = 0
	case "\u0065\u0078\u0061c\u0074":
		*_debbg = 1
	case "\u0072\u0065\u006c":
		*_debbg = 2
	}
	return nil
}
func (_eea *CT_Algorithm) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	_ffb, _gec := _eea.TypeAttr.MarshalXMLAttr(_d.Name{Local: "\u0074\u0079\u0070\u0065"})
	if _gec != nil {
		return _gec
	}
	start.Attr = append(start.Attr, _ffb)
	if _eea.RevAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0072\u0065\u0076"}, Value: _f.Sprintf("\u0025\u0076", *_eea.RevAttr)})
	}
	e.EncodeToken(start)
	if _eea.Param != nil {
		_fd := _d.StartElement{Name: _d.Name{Local: "\u0070\u0061\u0072a\u006d"}}
		for _, _gcc := range _eea.Param {
			e.EncodeElement(_gcc, _fd)
		}
	}
	if _eea.ExtLst != nil {
		_gccd := _d.StartElement{Name: _d.Name{Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_eea.ExtLst, _gccd)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_cabae *ST_ParameterVal) Validate() error { return _cabae.ValidateWithPath("") }
func (_debf *CT_Cxn) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u006do\u0064\u0065\u006c\u0049\u0064"}, Value: _f.Sprintf("\u0025\u0076", _debf.ModelIdAttr)})
	if _debf.TypeAttr != ST_CxnTypeUnset {
		_ggd, _fadb := _debf.TypeAttr.MarshalXMLAttr(_d.Name{Local: "\u0074\u0079\u0070\u0065"})
		if _fadb != nil {
			return _fadb
		}
		start.Attr = append(start.Attr, _ggd)
	}
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0073\u0072\u0063I\u0064"}, Value: _f.Sprintf("\u0025\u0076", _debf.SrcIdAttr)})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0064\u0065\u0073\u0074\u0049\u0064"}, Value: _f.Sprintf("\u0025\u0076", _debf.DestIdAttr)})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0073\u0072\u0063\u004f\u0072\u0064"}, Value: _f.Sprintf("\u0025\u0076", _debf.SrcOrdAttr)})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0064e\u0073\u0074\u004f\u0072\u0064"}, Value: _f.Sprintf("\u0025\u0076", _debf.DestOrdAttr)})
	if _debf.ParTransIdAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0070\u0061\u0072\u0054\u0072\u0061\u006e\u0073\u0049\u0064"}, Value: _f.Sprintf("\u0025\u0076", *_debf.ParTransIdAttr)})
	}
	if _debf.SibTransIdAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0073\u0069\u0062\u0054\u0072\u0061\u006e\u0073\u0049\u0064"}, Value: _f.Sprintf("\u0025\u0076", *_debf.SibTransIdAttr)})
	}
	if _debf.PresIdAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0070\u0072\u0065\u0073\u0049\u0064"}, Value: _f.Sprintf("\u0025\u0076", *_debf.PresIdAttr)})
	}
	e.EncodeToken(start)
	if _debf.ExtLst != nil {
		_afec := _d.StartElement{Name: _d.Name{Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_debf.ExtLst, _afec)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_daeg ST_AnimLvlStr) Validate() error { return _daeg.ValidateWithPath("") }
func (_ddcab ST_VerticalAlignment) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_bdfa := _d.Attr{}
	_bdfa.Name = name
	switch _ddcab {
	case ST_VerticalAlignmentUnset:
		_bdfa.Value = ""
	case ST_VerticalAlignmentT:
		_bdfa.Value = "\u0074"
	case ST_VerticalAlignmentMid:
		_bdfa.Value = "\u006d\u0069\u0064"
	case ST_VerticalAlignmentB:
		_bdfa.Value = "\u0062"
	case ST_VerticalAlignmentNone:
		_bdfa.Value = "\u006e\u006f\u006e\u0065"
	}
	return _bdfa, nil
}

// ValidateWithPath validates the CT_ColorTransformHeader and its children, prefixing error messages with path
func (_dabd *CT_ColorTransformHeader) ValidateWithPath(path string) error {
	for _gdc, _agae := range _dabd.Title {
		if _bcgfa := _agae.ValidateWithPath(_f.Sprintf("\u0025\u0073\u002fT\u0069\u0074\u006c\u0065\u005b\u0025\u0064\u005d", path, _gdc)); _bcgfa != nil {
			return _bcgfa
		}
	}
	for _abf, _agade := range _dabd.Desc {
		if _gbecb := _agade.ValidateWithPath(_f.Sprintf("%\u0073\u002f\u0044\u0065\u0073\u0063\u005b\u0025\u0064\u005d", path, _abf)); _gbecb != nil {
			return _gbecb
		}
	}
	if _dabd.CatLst != nil {
		if _abfc := _dabd.CatLst.ValidateWithPath(path + "\u002fC\u0061\u0074\u004c\u0073\u0074"); _abfc != nil {
			return _abfc
		}
	}
	if _dabd.ExtLst != nil {
		if _abef := _dabd.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _abef != nil {
			return _abef
		}
	}
	return nil
}

// ValidateWithPath validates the CT_RelIds and its children, prefixing error messages with path
func (_dgad *CT_RelIds) ValidateWithPath(path string) error { return nil }
func (_decaf ST_FunctionValue) String() string {
	if _decaf.Int32 != nil {
		return _f.Sprintf("\u0025\u0076", *_decaf.Int32)
	}
	if _decaf.Bool != nil {
		return _f.Sprintf("\u0025\u0076", *_decaf.Bool)
	}
	if _decaf.ST_Direction != ST_DirectionUnset {
		return _decaf.ST_Direction.String()
	}
	if _decaf.ST_HierBranchStyle != ST_HierBranchStyleUnset {
		return _decaf.ST_HierBranchStyle.String()
	}
	if _decaf.ST_AnimOneStr != ST_AnimOneStrUnset {
		return _decaf.ST_AnimOneStr.String()
	}
	if _decaf.ST_AnimLvlStr != ST_AnimLvlStrUnset {
		return _decaf.ST_AnimLvlStr.String()
	}
	if _decaf.ST_ResizeHandlesStr != ST_ResizeHandlesStrUnset {
		return _decaf.ST_ResizeHandlesStr.String()
	}
	return ""
}
func (_ebbe *ST_VerticalAlignment) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_gbcdf, _abdgc := d.Token()
	if _abdgc != nil {
		return _abdgc
	}
	if _fcdeg, _fcfgc := _gbcdf.(_d.EndElement); _fcfgc && _fcdeg.Name == start.Name {
		*_ebbe = 1
		return nil
	}
	if _ceec, _cfcef := _gbcdf.(_d.CharData); !_cfcef {
		return _f.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _gbcdf)
	} else {
		switch string(_ceec) {
		case "":
			*_ebbe = 0
		case "\u0074":
			*_ebbe = 1
		case "\u006d\u0069\u0064":
			*_ebbe = 2
		case "\u0062":
			*_ebbe = 3
		case "\u006e\u006f\u006e\u0065":
			*_ebbe = 4
		}
	}
	_gbcdf, _abdgc = d.Token()
	if _abdgc != nil {
		return _abdgc
	}
	if _bfdgb, _aafee := _gbcdf.(_d.EndElement); _aafee && _bfdgb.Name == start.Name {
		return nil
	}
	return _f.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _gbcdf)
}

// Validate validates the ColorsDefHdrLst and its children
func (_dbbcc *ColorsDefHdrLst) Validate() error {
	return _dbbcc.ValidateWithPath("\u0043o\u006co\u0072\u0073\u0044\u0065\u0066\u0048\u0064\u0072\u004c\u0073\u0074")
}
func (_acfc ST_StartingElement) Validate() error { return _acfc.ValidateWithPath("") }
func (_fceab *ST_LinearDirection) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_fceab = 0
	case "\u0066\u0072\u006fm\u004c":
		*_fceab = 1
	case "\u0066\u0072\u006fm\u0052":
		*_fceab = 2
	case "\u0066\u0072\u006fm\u0054":
		*_fceab = 3
	case "\u0066\u0072\u006fm\u0042":
		*_fceab = 4
	}
	return nil
}
func (_efcg *ST_PyramidAccentPosition) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_bcef, _bbfbg := d.Token()
	if _bbfbg != nil {
		return _bbfbg
	}
	if _gdeag, _bcdfa := _bcef.(_d.EndElement); _bcdfa && _gdeag.Name == start.Name {
		*_efcg = 1
		return nil
	}
	if _effc, _dgdbg := _bcef.(_d.CharData); !_dgdbg {
		return _f.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _bcef)
	} else {
		switch string(_effc) {
		case "":
			*_efcg = 0
		case "\u0062\u0065\u0066":
			*_efcg = 1
		case "\u0061\u0066\u0074":
			*_efcg = 2
		}
	}
	_bcef, _bbfbg = d.Token()
	if _bbfbg != nil {
		return _bbfbg
	}
	if _dgegc, _dbfd := _bcef.(_d.EndElement); _dbfd && _dgegc.Name == start.Name {
		return nil
	}
	return _f.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _bcef)
}
func (_adfg *CT_CTName) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _adfg.LangAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u006c\u0061\u006e\u0067"}, Value: _f.Sprintf("\u0025\u0076", *_adfg.LangAttr)})
	}
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0076\u0061\u006c"}, Value: _f.Sprintf("\u0025\u0076", _adfg.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_dddgc *ST_TextDirection) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_ddad, _ecdd := d.Token()
	if _ecdd != nil {
		return _ecdd
	}
	if _bgeg, _dbbb := _ddad.(_d.EndElement); _dbbb && _bgeg.Name == start.Name {
		*_dddgc = 1
		return nil
	}
	if _gedf, _dbcdb := _ddad.(_d.CharData); !_dbcdb {
		return _f.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _ddad)
	} else {
		switch string(_gedf) {
		case "":
			*_dddgc = 0
		case "\u0066\u0072\u006fm\u0054":
			*_dddgc = 1
		case "\u0066\u0072\u006fm\u0042":
			*_dddgc = 2
		}
	}
	_ddad, _ecdd = d.Token()
	if _ecdd != nil {
		return _ecdd
	}
	if _cefa, _daega := _ddad.(_d.EndElement); _daega && _cefa.Name == start.Name {
		return nil
	}
	return _f.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _ddad)
}
func (_eba *CT_Categories) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _eba.Cat != nil {
		_adfa := _d.StartElement{Name: _d.Name{Local: "\u0063\u0061\u0074"}}
		for _, _cbabe := range _eba.Cat {
			e.EncodeElement(_cbabe, _adfa)
		}
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_cbeb ST_ElementType) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_cbeb.String(), start)
}

// ValidateWithPath validates the CT_Algorithm and its children, prefixing error messages with path
func (_bd *CT_Algorithm) ValidateWithPath(path string) error {
	if _bd.TypeAttr == ST_AlgorithmTypeUnset {
		return _f.Errorf("\u0025\u0073\u002f\u0054\u0079\u0070\u0065\u0041\u0074\u0074\u0072\u0020\u0069\u0073\u0020a\u0020m\u0061\u006e\u0064\u0061\u0074\u006f\u0072\u0079\u0020\u0066\u0069\u0065\u006c\u0064", path)
	}
	if _dfa := _bd.TypeAttr.ValidateWithPath(path + "\u002fT\u0079\u0070\u0065\u0041\u0074\u0074r"); _dfa != nil {
		return _dfa
	}
	for _gfc, _bb := range _bd.Param {
		if _edfg := _bb.ValidateWithPath(_f.Sprintf("\u0025\u0073\u002fP\u0061\u0072\u0061\u006d\u005b\u0025\u0064\u005d", path, _gfc)); _edfg != nil {
			return _edfg
		}
	}
	if _bd.ExtLst != nil {
		if _bf := _bd.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _bf != nil {
			return _bf
		}
	}
	return nil
}
func (_gfda ST_SecondaryLinearDirection) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_gfda.String(), start)
}

const (
	ST_RotationPathUnset     ST_RotationPath = 0
	ST_RotationPathNone      ST_RotationPath = 1
	ST_RotationPathAlongPath ST_RotationPath = 2
)

// ValidateWithPath validates the CT_SDCategories and its children, prefixing error messages with path
func (_deecc *CT_SDCategories) ValidateWithPath(path string) error {
	for _fdga, _gaeea := range _deecc.Cat {
		if _adec := _gaeea.ValidateWithPath(_f.Sprintf("\u0025\u0073\u002f\u0043\u0061\u0074\u005b\u0025\u0064\u005d", path, _fdga)); _adec != nil {
			return _adec
		}
	}
	return nil
}
func (_ceaa ST_AlgorithmType) String() string {
	switch _ceaa {
	case 0:
		return ""
	case 1:
		return "\u0063o\u006d\u0070\u006f\u0073\u0069\u0074e"
	case 2:
		return "\u0063\u006f\u006e\u006e"
	case 3:
		return "\u0063\u0079\u0063l\u0065"
	case 4:
		return "\u0068i\u0065\u0072\u0043\u0068\u0069\u006cd"
	case 5:
		return "\u0068\u0069\u0065\u0072\u0052\u006f\u006f\u0074"
	case 6:
		return "\u0070\u0079\u0072\u0061"
	case 7:
		return "\u006c\u0069\u006e"
	case 8:
		return "\u0073\u0070"
	case 9:
		return "\u0074\u0078"
	case 10:
		return "\u0073\u006e\u0061k\u0065"
	}
	return ""
}
func (_dddbf ST_TextAnchorHorizontal) Validate() error { return _dddbf.ValidateWithPath("") }

// Validate validates the CT_StyleDefinition and its children
func (_fcggb *CT_StyleDefinition) Validate() error {
	return _fcggb.ValidateWithPath("\u0043T\u005fS\u0074\u0079\u006c\u0065\u0044e\u0066\u0069n\u0069\u0074\u0069\u006f\u006e")
}
func (_ebgg ST_FunctionOperator) ValidateWithPath(path string) error {
	switch _ebgg {
	case 0, 1, 2, 3, 4, 5, 6:
	default:
		return _f.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_ebgg))
	}
	return nil
}
func NewCT_SDName() *CT_SDName { _eded := &CT_SDName{}; return _eded }

const (
	ST_FlowDirectionUnset ST_FlowDirection = 0
	ST_FlowDirectionRow   ST_FlowDirection = 1
	ST_FlowDirectionCol   ST_FlowDirection = 2
)

func (_ff *AG_ConstraintAttributes) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _ae := range start.Attr {
		if _ae.Name.Local == "\u0074\u0079\u0070\u0065" {
			_ff.TypeAttr.UnmarshalXMLAttr(_ae)
			continue
		}
		if _ae.Name.Local == "\u0066\u006f\u0072" {
			_ff.ForAttr.UnmarshalXMLAttr(_ae)
			continue
		}
		if _ae.Name.Local == "\u0066o\u0072\u004e\u0061\u006d\u0065" {
			_ef, _ba := _ae.Value, error(nil)
			if _ba != nil {
				return _ba
			}
			_ff.ForNameAttr = &_ef
			continue
		}
		if _ae.Name.Local == "\u0070\u0074\u0054\u0079\u0070\u0065" {
			_ff.PtTypeAttr.UnmarshalXMLAttr(_ae)
			continue
		}
	}
	for {
		_fb, _de := d.Token()
		if _de != nil {
			return _f.Errorf("p\u0061\u0072\u0073\u0069\u006e\u0067 \u0041\u0047\u005f\u0043\u006f\u006es\u0074\u0072\u0061\u0069\u006e\u0074\u0041t\u0074\u0072\u0069\u0062\u0075\u0074\u0065\u0073\u003a\u0020%\u0073", _de)
		}
		if _gg, _gc := _fb.(_d.EndElement); _gc && _gg.Name == start.Name {
			break
		}
	}
	return nil
}
func (_efaa *CT_ColorTransformHeaderLst) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_aedd:
	for {
		_eabg, _beba := d.Token()
		if _beba != nil {
			return _beba
		}
		switch _acd := _eabg.(type) {
		case _d.StartElement:
			switch _acd.Name {
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u006f\u006co\u0072\u0073\u0044\u0065\u0066\u0048\u0064\u0072"}:
				_eee := NewCT_ColorTransformHeader()
				if _gdaf := d.DecodeElement(_eee, &_acd); _gdaf != nil {
					return _gdaf
				}
				_efaa.ColorsDefHdr = append(_efaa.ColorsDefHdr, _eee)
			default:
				_b.Log.Debug("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006et\u0020o\u006e\u0020\u0043\u0054_\u0043\u006fl\u006f\u0072\u0054\u0072\u0061\u006e\u0073\u0066\u006f\u0072\u006d\u0048\u0065\u0061\u0064\u0065\u0072\u004c\u0073\u0074\u0020\u0025\u0076", _acd.Name)
				if _fcdf := d.Skip(); _fcdf != nil {
					return _fcdf
				}
			}
		case _d.EndElement:
			break _aedd
		case _d.CharData:
		}
	}
	return nil
}

type ST_TextAnchorVertical byte

func ParseUnionST_LayoutShapeType(s string) (ST_LayoutShapeType, error) {
	return ST_LayoutShapeType{}, nil
}
func NewCT_OrgChart() *CT_OrgChart { _bfcb := &CT_OrgChart{}; return _bfcb }

// ValidateWithPath validates the DataModel and its children, prefixing error messages with path
func (_bded *DataModel) ValidateWithPath(path string) error {
	if _ccdg := _bded.CT_DataModel.ValidateWithPath(path); _ccdg != nil {
		return _ccdg
	}
	return nil
}
func (_eeagg ST_ParameterId) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_eeagg.String(), start)
}
func (_ffeg *ST_RotationPath) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_ffeg = 0
	case "\u006e\u006f\u006e\u0065":
		*_ffeg = 1
	case "\u0061l\u006f\u006e\u0067\u0050\u0061\u0074h":
		*_ffeg = 2
	}
	return nil
}

// ValidateWithPath validates the CT_StyleDefinition and its children, prefixing error messages with path
func (_dbcbb *CT_StyleDefinition) ValidateWithPath(path string) error {
	for _aadbf, _bfg := range _dbcbb.Title {
		if _fefca := _bfg.ValidateWithPath(_f.Sprintf("\u0025\u0073\u002fT\u0069\u0074\u006c\u0065\u005b\u0025\u0064\u005d", path, _aadbf)); _fefca != nil {
			return _fefca
		}
	}
	for _gfga, _cedca := range _dbcbb.Desc {
		if _badf := _cedca.ValidateWithPath(_f.Sprintf("%\u0073\u002f\u0044\u0065\u0073\u0063\u005b\u0025\u0064\u005d", path, _gfga)); _badf != nil {
			return _badf
		}
	}
	if _dbcbb.CatLst != nil {
		if _cgac := _dbcbb.CatLst.ValidateWithPath(path + "\u002fC\u0061\u0074\u004c\u0073\u0074"); _cgac != nil {
			return _cgac
		}
	}
	if _dbcbb.Scene3d != nil {
		if _ecfg := _dbcbb.Scene3d.ValidateWithPath(path + "\u002f\u0053\u0063\u0065\u006e\u0065\u0033\u0064"); _ecfg != nil {
			return _ecfg
		}
	}
	for _ecbd, _dbfg := range _dbcbb.StyleLbl {
		if _gggdb := _dbfg.ValidateWithPath(_f.Sprintf("\u0025s\u002fS\u0074\u0079\u006c\u0065\u004c\u0062\u006c\u005b\u0025\u0064\u005d", path, _ecbd)); _gggdb != nil {
			return _gggdb
		}
	}
	if _dbcbb.ExtLst != nil {
		if _caeef := _dbcbb.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _caeef != nil {
			return _caeef
		}
	}
	return nil
}
func (_eggf ST_FunctionType) Validate() error { return _eggf.ValidateWithPath("") }
func (_acgcg ST_ChildAlignment) ValidateWithPath(path string) error {
	switch _acgcg {
	case 0, 1, 2, 3, 4:
	default:
		return _f.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_acgcg))
	}
	return nil
}

type CT_SDCategory struct {
	TypeAttr string
	PriAttr  uint32
}

func (_fgdb *CT_Rules) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_ebacg:
	for {
		_fdff, _ddeab := d.Token()
		if _ddeab != nil {
			return _ddeab
		}
		switch _ggcg := _fdff.(type) {
		case _d.StartElement:
			switch _ggcg.Name {
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0072\u0075\u006c\u0065"}:
				_ffba := NewCT_NumericRule()
				if _dbe := d.DecodeElement(_ffba, &_ggcg); _dbe != nil {
					return _dbe
				}
				_fgdb.Rule = append(_fgdb.Rule, _ffba)
			default:
				_b.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006eg\u0020\u0075\u006es\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0052\u0075\u006c\u0065\u0073\u0020\u0025\u0076", _ggcg.Name)
				if _bbf := d.Skip(); _bbf != nil {
					return _bbf
				}
			}
		case _d.EndElement:
			break _ebacg
		case _d.CharData:
		}
	}
	return nil
}
func (_abdg ST_LayoutShapeType) String() string {
	if _abdg.ST_ShapeType != _bc.ST_ShapeTypeUnset {
		return _abdg.ST_ShapeType.String()
	}
	if _abdg.ST_OutputShapeType != ST_OutputShapeTypeUnset {
		return _abdg.ST_OutputShapeType.String()
	}
	return ""
}
func (_fcca *ColorsDefHdr) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0078\u006d\u006cn\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0061"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0078\u006d\u006c\u006e\u0073\u003a\u0064\u0069"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0072"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"}, Value: "\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"})
	start.Name.Local = "\u0063\u006f\u006co\u0072\u0073\u0044\u0065\u0066\u0048\u0064\u0072"
	return _fcca.CT_ColorTransformHeader.MarshalXML(e, start)
}

type AG_ConstraintRefAttributes struct {
	RefTypeAttr    ST_ConstraintType
	RefForAttr     ST_ConstraintRelationship
	RefForNameAttr *string
	RefPtTypeAttr  ST_ElementType
}
type ST_PtType byte

func (_ffc *CT_ColorTransformHeader) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0075\u006e\u0069\u0071\u0075\u0065\u0049\u0064"}, Value: _f.Sprintf("\u0025\u0076", _ffc.UniqueIdAttr)})
	if _ffc.MinVerAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u006d\u0069\u006e\u0056\u0065\u0072"}, Value: _f.Sprintf("\u0025\u0076", *_ffc.MinVerAttr)})
	}
	if _ffc.ResIdAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0072\u0065\u0073I\u0064"}, Value: _f.Sprintf("\u0025\u0076", *_ffc.ResIdAttr)})
	}
	e.EncodeToken(start)
	_defb := _d.StartElement{Name: _d.Name{Local: "\u0074\u0069\u0074l\u0065"}}
	for _, _gdaea := range _ffc.Title {
		e.EncodeElement(_gdaea, _defb)
	}
	_fcec := _d.StartElement{Name: _d.Name{Local: "\u0064\u0065\u0073\u0063"}}
	for _, _faec := range _ffc.Desc {
		e.EncodeElement(_faec, _fcec)
	}
	if _ffc.CatLst != nil {
		_gca := _d.StartElement{Name: _d.Name{Local: "\u0063\u0061\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_ffc.CatLst, _gca)
	}
	if _ffc.ExtLst != nil {
		_gcea := _d.StartElement{Name: _d.Name{Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_ffc.ExtLst, _gcea)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_egggg *ST_AxisType) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_egggg = 0
	case "\u0073\u0065\u006c\u0066":
		*_egggg = 1
	case "\u0063\u0068":
		*_egggg = 2
	case "\u0064\u0065\u0073":
		*_egggg = 3
	case "\u0064e\u0073\u004f\u0072\u0053\u0065\u006cf":
		*_egggg = 4
	case "\u0070\u0061\u0072":
		*_egggg = 5
	case "\u0061\u006e\u0063s\u0074":
		*_egggg = 6
	case "a\u006e\u0063\u0073\u0074\u004f\u0072\u0053\u0065\u006c\u0066":
		*_egggg = 7
	case "\u0066o\u006c\u006c\u006f\u0077\u0053\u0069b":
		*_egggg = 8
	case "\u0070r\u0065\u0063\u0065\u0064\u0053\u0069b":
		*_egggg = 9
	case "\u0066\u006f\u006c\u006c\u006f\u0077":
		*_egggg = 10
	case "\u0070\u0072\u0065\u0063\u0065\u0064":
		*_egggg = 11
	case "\u0072\u006f\u006f\u0074":
		*_egggg = 12
	case "\u006e\u006f\u006e\u0065":
		*_egggg = 13
	}
	return nil
}

// ValidateWithPath validates the CT_AnimOne and its children, prefixing error messages with path
func (_faa *CT_AnimOne) ValidateWithPath(path string) error {
	if _fabf := _faa.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _fabf != nil {
		return _fabf
	}
	return nil
}

// ValidateWithPath validates the CT_Description and its children, prefixing error messages with path
func (_gba *CT_Description) ValidateWithPath(path string) error { return nil }
func (_bgdfe ST_FallbackDimension) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_bgdfe.String(), start)
}
func NewAG_ConstraintAttributes() *AG_ConstraintAttributes {
	_dd := &AG_ConstraintAttributes{}
	return _dd
}
func (_ceaac *ST_GrowDirection) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_dfgd, _efacc := d.Token()
	if _efacc != nil {
		return _efacc
	}
	if _fcbgg, _agegf := _dfgd.(_d.EndElement); _agegf && _fcbgg.Name == start.Name {
		*_ceaac = 1
		return nil
	}
	if _gdcea, _gbeed := _dfgd.(_d.CharData); !_gbeed {
		return _f.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _dfgd)
	} else {
		switch string(_gdcea) {
		case "":
			*_ceaac = 0
		case "\u0074\u004c":
			*_ceaac = 1
		case "\u0074\u0052":
			*_ceaac = 2
		case "\u0062\u004c":
			*_ceaac = 3
		case "\u0062\u0052":
			*_ceaac = 4
		}
	}
	_dfgd, _efacc = d.Token()
	if _efacc != nil {
		return _efacc
	}
	if _eadc, _eebbg := _dfgd.(_d.EndElement); _eebbg && _eadc.Name == start.Name {
		return nil
	}
	return _f.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _dfgd)
}
func (_cedec *ST_LayoutShapeType) Validate() error { return _cedec.ValidateWithPath("") }
func (_ffe *CT_Choose) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _efbd := range start.Attr {
		if _efbd.Name.Local == "\u006e\u0061\u006d\u0065" {
			_efbb, _dafc := _efbd.Value, error(nil)
			if _dafc != nil {
				return _dafc
			}
			_ffe.NameAttr = &_efbb
			continue
		}
	}
_gfbc:
	for {
		_gfdb, _feba := d.Token()
		if _feba != nil {
			return _feba
		}
		switch _fef := _gfdb.(type) {
		case _d.StartElement:
			switch _fef.Name {
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0069\u0066"}:
				_gff := NewCT_When()
				if _dbgf := d.DecodeElement(_gff, &_fef); _dbgf != nil {
					return _dbgf
				}
				_ffe.If = append(_ffe.If, _gff)
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u006c\u0073\u0065"}:
				_ffe.Else = NewCT_Otherwise()
				if _beagb := d.DecodeElement(_ffe.Else, &_fef); _beagb != nil {
					return _beagb
				}
			default:
				_b.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u0043\u0068\u006fo\u0073\u0065 \u0025\u0076", _fef.Name)
				if _dddb := d.Skip(); _dddb != nil {
					return _dddb
				}
			}
		case _d.EndElement:
			break _gfbc
		case _d.CharData:
		}
	}
	return nil
}
func (_cac *CT_Constraints) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _cac.Constr != nil {
		_abbb := _d.StartElement{Name: _d.Name{Local: "\u0063\u006f\u006e\u0073\u0074\u0072"}}
		for _, _dge := range _cac.Constr {
			e.EncodeElement(_dge, _abbb)
		}
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_abdgg *ST_ModelId) Validate() error { return _abdgg.ValidateWithPath("") }
func (_bdbb *CT_DataModel) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	_ebdge := _d.StartElement{Name: _d.Name{Local: "\u0070\u0074\u004cs\u0074"}}
	e.EncodeElement(_bdbb.PtLst, _ebdge)
	if _bdbb.CxnLst != nil {
		_ggfd := _d.StartElement{Name: _d.Name{Local: "\u0063\u0078\u006e\u004c\u0073\u0074"}}
		e.EncodeElement(_bdbb.CxnLst, _ggfd)
	}
	if _bdbb.Bg != nil {
		_ffadf := _d.StartElement{Name: _d.Name{Local: "\u0062\u0067"}}
		e.EncodeElement(_bdbb.Bg, _ffadf)
	}
	if _bdbb.Whole != nil {
		_ecfc := _d.StartElement{Name: _d.Name{Local: "\u0077\u0068\u006fl\u0065"}}
		e.EncodeElement(_bdbb.Whole, _ecfc)
	}
	if _bdbb.ExtLst != nil {
		_gceab := _d.StartElement{Name: _d.Name{Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_bdbb.ExtLst, _gceab)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func NewCT_SampleData() *CT_SampleData { _eecgc := &CT_SampleData{}; return _eecgc }

// ValidateWithPath validates the CT_Direction and its children, prefixing error messages with path
func (_gbdb *CT_Direction) ValidateWithPath(path string) error {
	if _gcdc := _gbdb.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _gcdc != nil {
		return _gcdc
	}
	return nil
}

type CT_StyleDefinition struct {
	UniqueIdAttr *string
	MinVerAttr   *string
	Title        []*CT_SDName
	Desc         []*CT_SDDescription
	CatLst       *CT_SDCategories
	Scene3d      *_bc.CT_Scene3D
	StyleLbl     []*CT_StyleLabel
	ExtLst       *_bc.CT_OfficeArtExtensionList
}

func (_fddcf *ST_ParameterId) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_fddcf = 0
	case "\u0068o\u0072\u007a\u0041\u006c\u0069\u0067n":
		*_fddcf = 1
	case "\u0076e\u0072\u0074\u0041\u006c\u0069\u0067n":
		*_fddcf = 2
	case "\u0063\u0068\u0044i\u0072":
		*_fddcf = 3
	case "\u0063h\u0041\u006c\u0069\u0067\u006e":
		*_fddcf = 4
	case "\u0073\u0065\u0063\u0043\u0068\u0041\u006c\u0069\u0067\u006e":
		*_fddcf = 5
	case "\u006c\u0069\u006e\u0044\u0069\u0072":
		*_fddcf = 6
	case "\u0073e\u0063\u004c\u0069\u006e\u0044\u0069r":
		*_fddcf = 7
	case "\u0073\u0074\u0045\u006c\u0065\u006d":
		*_fddcf = 8
	case "\u0062\u0065\u006e\u0064\u0050\u0074":
		*_fddcf = 9
	case "\u0063\u006f\u006e\u006e\u0052\u006f\u0075\u0074":
		*_fddcf = 10
	case "\u0062\u0065\u0067\u0053\u0074\u0079":
		*_fddcf = 11
	case "\u0065\u006e\u0064\u0053\u0074\u0079":
		*_fddcf = 12
	case "\u0064\u0069\u006d":
		*_fddcf = 13
	case "\u0072o\u0074\u0050\u0061\u0074\u0068":
		*_fddcf = 14
	case "\u0063t\u0072\u0053\u0068\u0070\u004d\u0061p":
		*_fddcf = 15
	case "\u006e\u006f\u0064\u0065\u0048\u006f\u0072\u007a\u0041\u006c\u0069\u0067\u006e":
		*_fddcf = 16
	case "\u006e\u006f\u0064\u0065\u0056\u0065\u0072\u0074\u0041\u006c\u0069\u0067\u006e":
		*_fddcf = 17
	case "\u0066\u0061\u006c\u006c\u0062\u0061\u0063\u006b":
		*_fddcf = 18
	case "\u0074\u0078\u0044i\u0072":
		*_fddcf = 19
	case "p\u0079\u0072\u0061\u0041\u0063\u0063\u0074\u0050\u006f\u0073":
		*_fddcf = 20
	case "\u0070\u0079\u0072\u0061\u0041\u0063\u0063\u0074\u0054\u0078\u004d\u0061\u0072":
		*_fddcf = 21
	case "\u0074x\u0042\u006c\u0044\u0069\u0072":
		*_fddcf = 22
	case "\u0074\u0078\u0041n\u0063\u0068\u006f\u0072\u0048\u006f\u0072\u007a":
		*_fddcf = 23
	case "\u0074\u0078\u0041n\u0063\u0068\u006f\u0072\u0056\u0065\u0072\u0074":
		*_fddcf = 24
	case "\u0074\u0078\u0041\u006e\u0063\u0068\u006f\u0072\u0048o\u0072\u007a\u0043\u0068":
		*_fddcf = 25
	case "\u0074\u0078\u0041\u006e\u0063\u0068\u006f\u0072\u0056e\u0072\u0074\u0043\u0068":
		*_fddcf = 26
	case "\u0070\u0061\u0072\u0054\u0078\u004c\u0054\u0052\u0041\u006c\u0069\u0067\u006e":
		*_fddcf = 27
	case "\u0070\u0061\u0072\u0054\u0078\u0052\u0054\u004c\u0041\u006c\u0069\u0067\u006e":
		*_fddcf = 28
	case "\u0073h\u0070T\u0078\u004c\u0054\u0052\u0041\u006c\u0069\u0067\u006e\u0043\u0068":
		*_fddcf = 29
	case "\u0073h\u0070T\u0078\u0052\u0054\u004c\u0041\u006c\u0069\u0067\u006e\u0043\u0068":
		*_fddcf = 30
	case "\u0061u\u0074\u006f\u0054\u0078\u0052\u006ft":
		*_fddcf = 31
	case "\u0067\u0072\u0044i\u0072":
		*_fddcf = 32
	case "\u0066l\u006f\u0077\u0044\u0069\u0072":
		*_fddcf = 33
	case "\u0063o\u006e\u0074\u0044\u0069\u0072":
		*_fddcf = 34
	case "\u0062\u006b\u0070\u0074":
		*_fddcf = 35
	case "\u006f\u0066\u0066":
		*_fddcf = 36
	case "\u0068i\u0065\u0072\u0041\u006c\u0069\u0067n":
		*_fddcf = 37
	case "\u0062\u006b\u0050t\u0046\u0069\u0078\u0065\u0064\u0056\u0061\u006c":
		*_fddcf = 38
	case "s\u0074\u0042\u0075\u006c\u006c\u0065\u0074\u004c\u0076\u006c":
		*_fddcf = 39
	case "\u0073\u0074\u0041n\u0067":
		*_fddcf = 40
	case "\u0073p\u0061\u006e\u0041\u006e\u0067":
		*_fddcf = 41
	case "\u0061\u0072":
		*_fddcf = 42
	case "\u006cn\u0053\u0070\u0050\u0061\u0072":
		*_fddcf = 43
	case "\u006c\u006e\u0053\u0070\u0041\u0066\u0050\u0061\u0072\u0050":
		*_fddcf = 44
	case "\u006c\u006e\u0053\u0070\u0043\u0068":
		*_fddcf = 45
	case "\u006cn\u0053\u0070\u0041\u0066\u0043\u0068P":
		*_fddcf = 46
	case "r\u0074\u0053\u0068\u006f\u0072\u0074\u0044\u0069\u0073\u0074":
		*_fddcf = 47
	case "\u0061l\u0069\u0067\u006e\u0054\u0078":
		*_fddcf = 48
	case "p\u0079\u0072\u0061\u004c\u0076\u006c\u004e\u006f\u0064\u0065":
		*_fddcf = 49
	case "\u0070\u0079r\u0061\u0041\u0063c\u0074\u0042\u006b\u0067\u0064\u004e\u006f\u0064\u0065":
		*_fddcf = 50
	case "\u0070\u0079\u0072\u0061\u0041\u0063\u0063\u0074\u0054x\u004e\u006f\u0064\u0065":
		*_fddcf = 51
	case "\u0073r\u0063\u004e\u006f\u0064\u0065":
		*_fddcf = 52
	case "\u0064s\u0074\u004e\u006f\u0064\u0065":
		*_fddcf = 53
	case "\u0062\u0065\u0067\u0050\u0074\u0073":
		*_fddcf = 54
	case "\u0065\u006e\u0064\u0050\u0074\u0073":
		*_fddcf = 55
	}
	return nil
}
func NewCT_AdjLst() *CT_AdjLst { _fbaf := &CT_AdjLst{}; return _fbaf }

const (
	ST_ConnectorPointUnset  ST_ConnectorPoint = 0
	ST_ConnectorPointAuto   ST_ConnectorPoint = 1
	ST_ConnectorPointBCtr   ST_ConnectorPoint = 2
	ST_ConnectorPointCtr    ST_ConnectorPoint = 3
	ST_ConnectorPointMidL   ST_ConnectorPoint = 4
	ST_ConnectorPointMidR   ST_ConnectorPoint = 5
	ST_ConnectorPointTCtr   ST_ConnectorPoint = 6
	ST_ConnectorPointBL     ST_ConnectorPoint = 7
	ST_ConnectorPointBR     ST_ConnectorPoint = 8
	ST_ConnectorPointTL     ST_ConnectorPoint = 9
	ST_ConnectorPointTR     ST_ConnectorPoint = 10
	ST_ConnectorPointRadial ST_ConnectorPoint = 11
)

func NewCT_Shape() *CT_Shape { _gdfg := &CT_Shape{}; return _gdfg }
func (_effbb *ST_AnimLvlStr) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_geeb, _facfd := d.Token()
	if _facfd != nil {
		return _facfd
	}
	if _febg, _bfda := _geeb.(_d.EndElement); _bfda && _febg.Name == start.Name {
		*_effbb = 1
		return nil
	}
	if _dfcfad, _cbcea := _geeb.(_d.CharData); !_cbcea {
		return _f.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _geeb)
	} else {
		switch string(_dfcfad) {
		case "":
			*_effbb = 0
		case "\u006e\u006f\u006e\u0065":
			*_effbb = 1
		case "\u006c\u0076\u006c":
			*_effbb = 2
		case "\u0063\u0074\u0072":
			*_effbb = 3
		}
	}
	_geeb, _facfd = d.Token()
	if _facfd != nil {
		return _facfd
	}
	if _afbb, _afea := _geeb.(_d.EndElement); _afea && _afbb.Name == start.Name {
		return nil
	}
	return _f.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _geeb)
}
func (_bece *CT_Name) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _bece.LangAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u006c\u0061\u006e\u0067"}, Value: _f.Sprintf("\u0025\u0076", *_bece.LangAttr)})
	}
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0076\u0061\u006c"}, Value: _f.Sprintf("\u0025\u0076", _bece.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

type ST_CxnType byte

func (_agee ST_LinearDirection) Validate() error { return _agee.ValidateWithPath("") }
func (_fgff ST_ConnectorDimension) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_fgff.String(), start)
}
func (_gfbg *CT_Categories) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_ccd:
	for {
		_dgg, _cdgd := d.Token()
		if _cdgd != nil {
			return _cdgd
		}
		switch _dbdf := _dgg.(type) {
		case _d.StartElement:
			switch _dbdf.Name {
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0061\u0074"}:
				_gde := NewCT_Category()
				if _dac := d.DecodeElement(_gde, &_dbdf); _dac != nil {
					return _dac
				}
				_gfbg.Cat = append(_gfbg.Cat, _gde)
			default:
				_b.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0043a\u0074\u0065\u0067\u006f\u0072\u0069\u0065\u0073 \u0025\u0076", _dbdf.Name)
				if _ecg := d.Skip(); _ecg != nil {
					return _ecg
				}
			}
		case _d.EndElement:
			break _ccd
		case _d.CharData:
		}
	}
	return nil
}
func (_agff ST_AxisType) String() string {
	switch _agff {
	case 0:
		return ""
	case 1:
		return "\u0073\u0065\u006c\u0066"
	case 2:
		return "\u0063\u0068"
	case 3:
		return "\u0064\u0065\u0073"
	case 4:
		return "\u0064e\u0073\u004f\u0072\u0053\u0065\u006cf"
	case 5:
		return "\u0070\u0061\u0072"
	case 6:
		return "\u0061\u006e\u0063s\u0074"
	case 7:
		return "a\u006e\u0063\u0073\u0074\u004f\u0072\u0053\u0065\u006c\u0066"
	case 8:
		return "\u0066o\u006c\u006c\u006f\u0077\u0053\u0069b"
	case 9:
		return "\u0070r\u0065\u0063\u0065\u0064\u0053\u0069b"
	case 10:
		return "\u0066\u006f\u006c\u006c\u006f\u0077"
	case 11:
		return "\u0070\u0072\u0065\u0063\u0065\u0064"
	case 12:
		return "\u0072\u006f\u006f\u0074"
	case 13:
		return "\u006e\u006f\u006e\u0065"
	}
	return ""
}
func (_becdf *DataModel) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0078\u006d\u006cn\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0061"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0078\u006d\u006c\u006e\u0073\u003a\u0064\u0069"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0072"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"}, Value: "\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"})
	start.Name.Local = "\u0064a\u0074\u0061\u004d\u006f\u0064\u0065l"
	return _becdf.CT_DataModel.MarshalXML(e, start)
}
func (_cccc ST_AutoTextRotation) String() string {
	switch _cccc {
	case 0:
		return ""
	case 1:
		return "\u006e\u006f\u006e\u0065"
	case 2:
		return "\u0075\u0070\u0072"
	case 3:
		return "\u0067\u0072\u0061\u0076"
	}
	return ""
}
func (_ggab ST_FallbackDimension) String() string {
	switch _ggab {
	case 0:
		return ""
	case 1:
		return "\u0031\u0044"
	case 2:
		return "\u0032\u0044"
	}
	return ""
}
func (_dgfa ST_OutputShapeType) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_deged := _d.Attr{}
	_deged.Name = name
	switch _dgfa {
	case ST_OutputShapeTypeUnset:
		_deged.Value = ""
	case ST_OutputShapeTypeNone:
		_deged.Value = "\u006e\u006f\u006e\u0065"
	case ST_OutputShapeTypeConn:
		_deged.Value = "\u0063\u006f\u006e\u006e"
	}
	return _deged, nil
}
func (_facdg ST_HierBranchStyle) Validate() error { return _facdg.ValidateWithPath("") }
func (_bdab *CT_SDDescription) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _bdab.LangAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u006c\u0061\u006e\u0067"}, Value: _f.Sprintf("\u0025\u0076", *_bdab.LangAttr)})
	}
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0076\u0061\u006c"}, Value: _f.Sprintf("\u0025\u0076", _bdab.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_dbde ST_PrSetCustVal) String() string {
	if _dbde.ST_Percentage != nil {
		return _f.Sprintf("\u0025\u0076", *_dbde.ST_Percentage)
	}
	if _dbde.Int32 != nil {
		return _f.Sprintf("\u0025\u0076", *_dbde.Int32)
	}
	return ""
}
func (_daebd *CT_When) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_daebd.FuncAttr = ST_FunctionType(1)
	_daebd.OpAttr = ST_FunctionOperator(1)
	for _, _ddaf := range start.Attr {
		if _ddaf.Name.Local == "\u006e\u0061\u006d\u0065" {
			_acff, _gcee := _ddaf.Value, error(nil)
			if _gcee != nil {
				return _gcee
			}
			_daebd.NameAttr = &_acff
			continue
		}
		if _ddaf.Name.Local == "\u0061\u0072\u0067" {
			_egaa, _bbfa := ParseUnionST_FunctionArgument(_ddaf.Value)
			if _bbfa != nil {
				return _bbfa
			}
			_daebd.ArgAttr = &_egaa
			continue
		}
		if _ddaf.Name.Local == "\u0076\u0061\u006c" {
			_ebff, _gdecg := ParseUnionST_FunctionValue(_ddaf.Value)
			if _gdecg != nil {
				return _gdecg
			}
			_daebd.ValAttr = _ebff
			continue
		}
		if _ddaf.Name.Local == "\u0066\u0075\u006e\u0063" {
			_daebd.FuncAttr.UnmarshalXMLAttr(_ddaf)
			continue
		}
		if _ddaf.Name.Local == "\u006f\u0070" {
			_daebd.OpAttr.UnmarshalXMLAttr(_ddaf)
			continue
		}
		if _ddaf.Name.Local == "\u0061\u0078\u0069\u0073" {
			_fdac, _ddfad := ParseSliceST_AxisTypes(_ddaf.Value)
			if _ddfad != nil {
				return _ddfad
			}
			_daebd.AxisAttr = &_fdac
			continue
		}
		if _ddaf.Name.Local == "\u0070\u0074\u0054\u0079\u0070\u0065" {
			_ffcdg, _cdgg := ParseSliceST_ElementTypes(_ddaf.Value)
			if _cdgg != nil {
				return _cdgg
			}
			_daebd.PtTypeAttr = &_ffcdg
			continue
		}
		if _ddaf.Name.Local == "\u0068\u0069\u0064\u0065\u004c\u0061\u0073\u0074\u0054\u0072\u0061\u006e\u0073" {
			_cfagc, _baec := ParseSliceST_Booleans(_ddaf.Value)
			if _baec != nil {
				return _baec
			}
			_daebd.HideLastTransAttr = &_cfagc
			continue
		}
		if _ddaf.Name.Local == "\u0073\u0074" {
			_cggcd, _fgdc := ParseSliceST_Ints(_ddaf.Value)
			if _fgdc != nil {
				return _fgdc
			}
			_daebd.StAttr = &_cggcd
			continue
		}
		if _ddaf.Name.Local == "\u0063\u006e\u0074" {
			_ffdb, _gagc := ParseSliceST_UnsignedInts(_ddaf.Value)
			if _gagc != nil {
				return _gagc
			}
			_daebd.CntAttr = &_ffdb
			continue
		}
		if _ddaf.Name.Local == "\u0073\u0074\u0065\u0070" {
			_bbdc, _afegb := ParseSliceST_Ints(_ddaf.Value)
			if _afegb != nil {
				return _afegb
			}
			_daebd.StepAttr = &_bbdc
			continue
		}
	}
_aaac:
	for {
		_fagfg, _daba := d.Token()
		if _daba != nil {
			return _daba
		}
		switch _efdfc := _fagfg.(type) {
		case _d.StartElement:
			switch _efdfc.Name {
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0061\u006c\u0067"}:
				_faee := NewCT_Algorithm()
				if _gaaa := d.DecodeElement(_faee, &_efdfc); _gaaa != nil {
					return _gaaa
				}
				_daebd.Alg = append(_daebd.Alg, _faee)
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0073\u0068\u0061p\u0065"}:
				_bcaba := NewCT_Shape()
				if _ccgdc := d.DecodeElement(_bcaba, &_efdfc); _ccgdc != nil {
					return _ccgdc
				}
				_daebd.Shape = append(_daebd.Shape, _bcaba)
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0070\u0072\u0065\u0073\u004f\u0066"}:
				_cdde := NewCT_PresentationOf()
				if _afgf := d.DecodeElement(_cdde, &_efdfc); _afgf != nil {
					return _afgf
				}
				_daebd.PresOf = append(_daebd.PresOf, _cdde)
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063o\u006e\u0073\u0074\u0072\u004c\u0073t"}:
				_fgefb := NewCT_Constraints()
				if _ecfb := d.DecodeElement(_fgefb, &_efdfc); _ecfb != nil {
					return _ecfb
				}
				_daebd.ConstrLst = append(_daebd.ConstrLst, _fgefb)
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0072u\u006c\u0065\u004c\u0073\u0074"}:
				_ebbf := NewCT_Rules()
				if _aagbg := d.DecodeElement(_ebbf, &_efdfc); _aagbg != nil {
					return _aagbg
				}
				_daebd.RuleLst = append(_daebd.RuleLst, _ebbf)
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0066o\u0072\u0045\u0061\u0063\u0068"}:
				_ebdfa := NewCT_ForEach()
				if _dbca := d.DecodeElement(_ebdfa, &_efdfc); _dbca != nil {
					return _dbca
				}
				_daebd.ForEach = append(_daebd.ForEach, _ebdfa)
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u006c\u0061\u0079\u006f\u0075\u0074\u004e\u006f\u0064\u0065"}:
				_bbcgf := NewCT_LayoutNode()
				if _cfabga := d.DecodeElement(_bbcgf, &_efdfc); _cfabga != nil {
					return _cfabga
				}
				_daebd.LayoutNode = append(_daebd.LayoutNode, _bbcgf)
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0068\u006f\u006f\u0073\u0065"}:
				_debb := NewCT_Choose()
				if _gabb := d.DecodeElement(_debb, &_efdfc); _gabb != nil {
					return _gabb
				}
				_daebd.Choose = append(_daebd.Choose, _debb)
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_badfc := _bc.NewCT_OfficeArtExtensionList()
				if _eafff := d.DecodeElement(_badfc, &_efdfc); _eafff != nil {
					return _eafff
				}
				_daebd.ExtLst = append(_daebd.ExtLst, _badfc)
			default:
				_b.Log.Debug("\u0073\u006b\u0069p\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043T\u005f\u0057\u0068\u0065\u006e\u0020\u0025\u0076", _efdfc.Name)
				if _aegec := d.Skip(); _aegec != nil {
					return _aegec
				}
			}
		case _d.EndElement:
			break _aaac
		case _d.CharData:
		}
	}
	return nil
}

const (
	ST_ConstraintTypeUnset         ST_ConstraintType = 0
	ST_ConstraintTypeNone          ST_ConstraintType = 1
	ST_ConstraintTypeAlignOff      ST_ConstraintType = 2
	ST_ConstraintTypeBegMarg       ST_ConstraintType = 3
	ST_ConstraintTypeBendDist      ST_ConstraintType = 4
	ST_ConstraintTypeBegPad        ST_ConstraintType = 5
	ST_ConstraintTypeB             ST_ConstraintType = 6
	ST_ConstraintTypeBMarg         ST_ConstraintType = 7
	ST_ConstraintTypeBOff          ST_ConstraintType = 8
	ST_ConstraintTypeCtrX          ST_ConstraintType = 9
	ST_ConstraintTypeCtrXOff       ST_ConstraintType = 10
	ST_ConstraintTypeCtrY          ST_ConstraintType = 11
	ST_ConstraintTypeCtrYOff       ST_ConstraintType = 12
	ST_ConstraintTypeConnDist      ST_ConstraintType = 13
	ST_ConstraintTypeDiam          ST_ConstraintType = 14
	ST_ConstraintTypeEndMarg       ST_ConstraintType = 15
	ST_ConstraintTypeEndPad        ST_ConstraintType = 16
	ST_ConstraintTypeH             ST_ConstraintType = 17
	ST_ConstraintTypeHArH          ST_ConstraintType = 18
	ST_ConstraintTypeHOff          ST_ConstraintType = 19
	ST_ConstraintTypeL             ST_ConstraintType = 20
	ST_ConstraintTypeLMarg         ST_ConstraintType = 21
	ST_ConstraintTypeLOff          ST_ConstraintType = 22
	ST_ConstraintTypeR             ST_ConstraintType = 23
	ST_ConstraintTypeRMarg         ST_ConstraintType = 24
	ST_ConstraintTypeROff          ST_ConstraintType = 25
	ST_ConstraintTypePrimFontSz    ST_ConstraintType = 26
	ST_ConstraintTypePyraAcctRatio ST_ConstraintType = 27
	ST_ConstraintTypeSecFontSz     ST_ConstraintType = 28
	ST_ConstraintTypeSibSp         ST_ConstraintType = 29
	ST_ConstraintTypeSecSibSp      ST_ConstraintType = 30
	ST_ConstraintTypeSp            ST_ConstraintType = 31
	ST_ConstraintTypeStemThick     ST_ConstraintType = 32
	ST_ConstraintTypeT             ST_ConstraintType = 33
	ST_ConstraintTypeTMarg         ST_ConstraintType = 34
	ST_ConstraintTypeTOff          ST_ConstraintType = 35
	ST_ConstraintTypeUserA         ST_ConstraintType = 36
	ST_ConstraintTypeUserB         ST_ConstraintType = 37
	ST_ConstraintTypeUserC         ST_ConstraintType = 38
	ST_ConstraintTypeUserD         ST_ConstraintType = 39
	ST_ConstraintTypeUserE         ST_ConstraintType = 40
	ST_ConstraintTypeUserF         ST_ConstraintType = 41
	ST_ConstraintTypeUserG         ST_ConstraintType = 42
	ST_ConstraintTypeUserH         ST_ConstraintType = 43
	ST_ConstraintTypeUserI         ST_ConstraintType = 44
	ST_ConstraintTypeUserJ         ST_ConstraintType = 45
	ST_ConstraintTypeUserK         ST_ConstraintType = 46
	ST_ConstraintTypeUserL         ST_ConstraintType = 47
	ST_ConstraintTypeUserM         ST_ConstraintType = 48
	ST_ConstraintTypeUserN         ST_ConstraintType = 49
	ST_ConstraintTypeUserO         ST_ConstraintType = 50
	ST_ConstraintTypeUserP         ST_ConstraintType = 51
	ST_ConstraintTypeUserQ         ST_ConstraintType = 52
	ST_ConstraintTypeUserR         ST_ConstraintType = 53
	ST_ConstraintTypeUserS         ST_ConstraintType = 54
	ST_ConstraintTypeUserT         ST_ConstraintType = 55
	ST_ConstraintTypeUserU         ST_ConstraintType = 56
	ST_ConstraintTypeUserV         ST_ConstraintType = 57
	ST_ConstraintTypeUserW         ST_ConstraintType = 58
	ST_ConstraintTypeUserX         ST_ConstraintType = 59
	ST_ConstraintTypeUserY         ST_ConstraintType = 60
	ST_ConstraintTypeUserZ         ST_ConstraintType = 61
	ST_ConstraintTypeW             ST_ConstraintType = 62
	ST_ConstraintTypeWArH          ST_ConstraintType = 63
	ST_ConstraintTypeWOff          ST_ConstraintType = 64
)

type ST_DiagramTextAlignment byte

func (_affcdb ST_SecondaryLinearDirection) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_gfdbb := _d.Attr{}
	_gfdbb.Name = name
	switch _affcdb {
	case ST_SecondaryLinearDirectionUnset:
		_gfdbb.Value = ""
	case ST_SecondaryLinearDirectionNone:
		_gfdbb.Value = "\u006e\u006f\u006e\u0065"
	case ST_SecondaryLinearDirectionFromL:
		_gfdbb.Value = "\u0066\u0072\u006fm\u004c"
	case ST_SecondaryLinearDirectionFromR:
		_gfdbb.Value = "\u0066\u0072\u006fm\u0052"
	case ST_SecondaryLinearDirectionFromT:
		_gfdbb.Value = "\u0066\u0072\u006fm\u0054"
	case ST_SecondaryLinearDirectionFromB:
		_gfdbb.Value = "\u0066\u0072\u006fm\u0042"
	}
	return _gfdbb, nil
}

const (
	ST_HueDirUnset ST_HueDir = 0
	ST_HueDirCw    ST_HueDir = 1
	ST_HueDirCcw   ST_HueDir = 2
)

type LayoutDefHdrLst struct{ CT_DiagramDefinitionHeaderLst }

const (
	ST_CxnTypeUnset               ST_CxnType = 0
	ST_CxnTypeParOf               ST_CxnType = 1
	ST_CxnTypePresOf              ST_CxnType = 2
	ST_CxnTypePresParOf           ST_CxnType = 3
	ST_CxnTypeUnknownRelationship ST_CxnType = 4
)

func NewColorsDefHdr() *ColorsDefHdr {
	_fcee := &ColorsDefHdr{}
	_fcee.CT_ColorTransformHeader = *NewCT_ColorTransformHeader()
	return _fcee
}
func (_fbff ST_ConstraintType) Validate() error { return _fbff.ValidateWithPath("") }
func (_gdbf *ST_ClrAppMethod) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_dfge, _eeaab := d.Token()
	if _eeaab != nil {
		return _eeaab
	}
	if _fafe, _aegae := _dfge.(_d.EndElement); _aegae && _fafe.Name == start.Name {
		*_gdbf = 1
		return nil
	}
	if _aabda, _aageb := _dfge.(_d.CharData); !_aageb {
		return _f.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _dfge)
	} else {
		switch string(_aabda) {
		case "":
			*_gdbf = 0
		case "\u0073\u0070\u0061\u006e":
			*_gdbf = 1
		case "\u0063\u0079\u0063l\u0065":
			*_gdbf = 2
		case "\u0072\u0065\u0070\u0065\u0061\u0074":
			*_gdbf = 3
		}
	}
	_dfge, _eeaab = d.Token()
	if _eeaab != nil {
		return _eeaab
	}
	if _cefgd, _cedcf := _dfge.(_d.EndElement); _cedcf && _cefgd.Name == start.Name {
		return nil
	}
	return _f.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _dfge)
}
func (_eeec *ST_StartingElement) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_dacba, _agbe := d.Token()
	if _agbe != nil {
		return _agbe
	}
	if _afde, _gcfad := _dacba.(_d.EndElement); _gcfad && _afde.Name == start.Name {
		*_eeec = 1
		return nil
	}
	if _ebcee, _edgc := _dacba.(_d.CharData); !_edgc {
		return _f.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _dacba)
	} else {
		switch string(_ebcee) {
		case "":
			*_eeec = 0
		case "\u006e\u006f\u0064\u0065":
			*_eeec = 1
		case "\u0074\u0072\u0061n\u0073":
			*_eeec = 2
		}
	}
	_dacba, _agbe = d.Token()
	if _agbe != nil {
		return _agbe
	}
	if _gabdd, _bggbc := _dacba.(_d.EndElement); _bggbc && _gabdd.Name == start.Name {
		return nil
	}
	return _f.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _dacba)
}
func ParseSliceST_Ints(s string) (ST_Ints, error) { return ST_Ints{}, nil }
func NewCT_ChildMax() *CT_ChildMax                { _fabe := &CT_ChildMax{}; return _fabe }
func (_ffcf ST_ModelId) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _ffcf.Int32 != nil {
		e.EncodeToken(_d.CharData(_f.Sprintf("\u0025\u0064", *_ffcf.Int32)))
	}
	if _ffcf.ST_Guid != nil {
		e.EncodeToken(_d.CharData(*_ffcf.ST_Guid))
	}
	return e.EncodeToken(_d.EndElement{Name: start.Name})
}

// Validate validates the CT_Cxn and its children
func (_dae *CT_Cxn) Validate() error {
	return _dae.ValidateWithPath("\u0043\u0054\u005f\u0043\u0078\u006e")
}

// Validate validates the CT_LayoutNode and its children
func (_cdbg *CT_LayoutNode) Validate() error {
	return _cdbg.ValidateWithPath("\u0043\u0054\u005f\u004c\u0061\u0079\u006f\u0075\u0074\u004e\u006f\u0064\u0065")
}
func NewStyleDefHdrLst() *StyleDefHdrLst {
	_eabed := &StyleDefHdrLst{}
	_eabed.CT_StyleDefinitionHeaderLst = *NewCT_StyleDefinitionHeaderLst()
	return _eabed
}
func (_cgdcg *ST_ConnectorRouting) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_fgfg, _aecdd := d.Token()
	if _aecdd != nil {
		return _aecdd
	}
	if _eead, _dcag := _fgfg.(_d.EndElement); _dcag && _eead.Name == start.Name {
		*_cgdcg = 1
		return nil
	}
	if _eddcc, _dfebb := _fgfg.(_d.CharData); !_dfebb {
		return _f.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _fgfg)
	} else {
		switch string(_eddcc) {
		case "":
			*_cgdcg = 0
		case "\u0073\u0074\u0072\u0061":
			*_cgdcg = 1
		case "\u0062\u0065\u006e\u0064":
			*_cgdcg = 2
		case "\u0063\u0075\u0072v\u0065":
			*_cgdcg = 3
		case "\u006co\u006e\u0067\u0043\u0075\u0072\u0076e":
			*_cgdcg = 4
		}
	}
	_fgfg, _aecdd = d.Token()
	if _aecdd != nil {
		return _aecdd
	}
	if _bagbg, _dgdba := _fgfg.(_d.EndElement); _dgdba && _bagbg.Name == start.Name {
		return nil
	}
	return _f.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _fgfg)
}

const (
	ST_StartingElementUnset ST_StartingElement = 0
	ST_StartingElementNode  ST_StartingElement = 1
	ST_StartingElementTrans ST_StartingElement = 2
)

func (_cgfcd *ST_AxisType) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_ffbab, _fdgc := d.Token()
	if _fdgc != nil {
		return _fdgc
	}
	if _bfgf, _aacg := _ffbab.(_d.EndElement); _aacg && _bfgf.Name == start.Name {
		*_cgfcd = 1
		return nil
	}
	if _feegf, _gcfeb := _ffbab.(_d.CharData); !_gcfeb {
		return _f.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _ffbab)
	} else {
		switch string(_feegf) {
		case "":
			*_cgfcd = 0
		case "\u0073\u0065\u006c\u0066":
			*_cgfcd = 1
		case "\u0063\u0068":
			*_cgfcd = 2
		case "\u0064\u0065\u0073":
			*_cgfcd = 3
		case "\u0064e\u0073\u004f\u0072\u0053\u0065\u006cf":
			*_cgfcd = 4
		case "\u0070\u0061\u0072":
			*_cgfcd = 5
		case "\u0061\u006e\u0063s\u0074":
			*_cgfcd = 6
		case "a\u006e\u0063\u0073\u0074\u004f\u0072\u0053\u0065\u006c\u0066":
			*_cgfcd = 7
		case "\u0066o\u006c\u006c\u006f\u0077\u0053\u0069b":
			*_cgfcd = 8
		case "\u0070r\u0065\u0063\u0065\u0064\u0053\u0069b":
			*_cgfcd = 9
		case "\u0066\u006f\u006c\u006c\u006f\u0077":
			*_cgfcd = 10
		case "\u0070\u0072\u0065\u0063\u0065\u0064":
			*_cgfcd = 11
		case "\u0072\u006f\u006f\u0074":
			*_cgfcd = 12
		case "\u006e\u006f\u006e\u0065":
			*_cgfcd = 13
		}
	}
	_ffbab, _fdgc = d.Token()
	if _fdgc != nil {
		return _fdgc
	}
	if _geea, _cfgdd := _ffbab.(_d.EndElement); _cfgdd && _geea.Name == start.Name {
		return nil
	}
	return _f.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _ffbab)
}
func (_fcfg *ST_HierBranchStyle) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_fcfg = 0
	case "\u006c":
		*_fcfg = 1
	case "\u0072":
		*_fcfg = 2
	case "\u0068\u0061\u006e\u0067":
		*_fcfg = 3
	case "\u0073\u0074\u0064":
		*_fcfg = 4
	case "\u0069\u006e\u0069\u0074":
		*_fcfg = 5
	}
	return nil
}

// Validate validates the AG_IteratorAttributes and its children
func (_ee *AG_IteratorAttributes) Validate() error {
	return _ee.ValidateWithPath("A\u0047\u005f\u0049\u0074er\u0061t\u006f\u0072\u0041\u0074\u0074r\u0069\u0062\u0075\u0074\u0065\u0073")
}

// ST_ModelId is a union type
type ST_ModelId struct {
	Int32   *int32
	ST_Guid *string
}

func (_eggag *ST_ConstraintType) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_eggag = 0
	case "\u006e\u006f\u006e\u0065":
		*_eggag = 1
	case "\u0061\u006c\u0069\u0067\u006e\u004f\u0066\u0066":
		*_eggag = 2
	case "\u0062e\u0067\u004d\u0061\u0072\u0067":
		*_eggag = 3
	case "\u0062\u0065\u006e\u0064\u0044\u0069\u0073\u0074":
		*_eggag = 4
	case "\u0062\u0065\u0067\u0050\u0061\u0064":
		*_eggag = 5
	case "\u0062":
		*_eggag = 6
	case "\u0062\u004d\u0061r\u0067":
		*_eggag = 7
	case "\u0062\u004f\u0066\u0066":
		*_eggag = 8
	case "\u0063\u0074\u0072\u0058":
		*_eggag = 9
	case "\u0063t\u0072\u0058\u004f\u0066\u0066":
		*_eggag = 10
	case "\u0063\u0074\u0072\u0059":
		*_eggag = 11
	case "\u0063t\u0072\u0059\u004f\u0066\u0066":
		*_eggag = 12
	case "\u0063\u006f\u006e\u006e\u0044\u0069\u0073\u0074":
		*_eggag = 13
	case "\u0064\u0069\u0061\u006d":
		*_eggag = 14
	case "\u0065n\u0064\u004d\u0061\u0072\u0067":
		*_eggag = 15
	case "\u0065\u006e\u0064\u0050\u0061\u0064":
		*_eggag = 16
	case "\u0068":
		*_eggag = 17
	case "\u0068\u0041\u0072\u0048":
		*_eggag = 18
	case "\u0068\u004f\u0066\u0066":
		*_eggag = 19
	case "\u006c":
		*_eggag = 20
	case "\u006c\u004d\u0061r\u0067":
		*_eggag = 21
	case "\u006c\u004f\u0066\u0066":
		*_eggag = 22
	case "\u0072":
		*_eggag = 23
	case "\u0072\u004d\u0061r\u0067":
		*_eggag = 24
	case "\u0072\u004f\u0066\u0066":
		*_eggag = 25
	case "\u0070\u0072\u0069\u006d\u0046\u006f\u006e\u0074\u0053\u007a":
		*_eggag = 26
	case "\u0070\u0079\u0072\u0061\u0041\u0063\u0063\u0074\u0052\u0061\u0074\u0069\u006f":
		*_eggag = 27
	case "\u0073e\u0063\u0046\u006f\u006e\u0074\u0053z":
		*_eggag = 28
	case "\u0073\u0069\u0062S\u0070":
		*_eggag = 29
	case "\u0073\u0065\u0063\u0053\u0069\u0062\u0053\u0070":
		*_eggag = 30
	case "\u0073\u0070":
		*_eggag = 31
	case "\u0073t\u0065\u006d\u0054\u0068\u0069\u0063k":
		*_eggag = 32
	case "\u0074":
		*_eggag = 33
	case "\u0074\u004d\u0061r\u0067":
		*_eggag = 34
	case "\u0074\u004f\u0066\u0066":
		*_eggag = 35
	case "\u0075\u0073\u0065r\u0041":
		*_eggag = 36
	case "\u0075\u0073\u0065r\u0042":
		*_eggag = 37
	case "\u0075\u0073\u0065r\u0043":
		*_eggag = 38
	case "\u0075\u0073\u0065r\u0044":
		*_eggag = 39
	case "\u0075\u0073\u0065r\u0045":
		*_eggag = 40
	case "\u0075\u0073\u0065r\u0046":
		*_eggag = 41
	case "\u0075\u0073\u0065r\u0047":
		*_eggag = 42
	case "\u0075\u0073\u0065r\u0048":
		*_eggag = 43
	case "\u0075\u0073\u0065r\u0049":
		*_eggag = 44
	case "\u0075\u0073\u0065r\u004a":
		*_eggag = 45
	case "\u0075\u0073\u0065r\u004b":
		*_eggag = 46
	case "\u0075\u0073\u0065r\u004c":
		*_eggag = 47
	case "\u0075\u0073\u0065r\u004d":
		*_eggag = 48
	case "\u0075\u0073\u0065r\u004e":
		*_eggag = 49
	case "\u0075\u0073\u0065r\u004f":
		*_eggag = 50
	case "\u0075\u0073\u0065r\u0050":
		*_eggag = 51
	case "\u0075\u0073\u0065r\u0051":
		*_eggag = 52
	case "\u0075\u0073\u0065r\u0052":
		*_eggag = 53
	case "\u0075\u0073\u0065r\u0053":
		*_eggag = 54
	case "\u0075\u0073\u0065r\u0054":
		*_eggag = 55
	case "\u0075\u0073\u0065r\u0055":
		*_eggag = 56
	case "\u0075\u0073\u0065r\u0056":
		*_eggag = 57
	case "\u0075\u0073\u0065r\u0057":
		*_eggag = 58
	case "\u0075\u0073\u0065r\u0058":
		*_eggag = 59
	case "\u0075\u0073\u0065r\u0059":
		*_eggag = 60
	case "\u0075\u0073\u0065r\u005a":
		*_eggag = 61
	case "\u0077":
		*_eggag = 62
	case "\u0077\u0041\u0072\u0048":
		*_eggag = 63
	case "\u0077\u004f\u0066\u0066":
		*_eggag = 64
	}
	return nil
}

// ValidateWithPath validates the LayoutDefHdrLst and its children, prefixing error messages with path
func (_febdf *LayoutDefHdrLst) ValidateWithPath(path string) error {
	if _gaef := _febdf.CT_DiagramDefinitionHeaderLst.ValidateWithPath(path); _gaef != nil {
		return _gaef
	}
	return nil
}

// ValidateWithPath validates the CT_Shape and its children, prefixing error messages with path
func (_aeecd *CT_Shape) ValidateWithPath(path string) error {
	if _aeecd.TypeAttr != nil {
		if _gbgge := _aeecd.TypeAttr.ValidateWithPath(path + "\u002fT\u0079\u0070\u0065\u0041\u0074\u0074r"); _gbgge != nil {
			return _gbgge
		}
	}
	if _aeecd.AdjLst != nil {
		if _ebeg := _aeecd.AdjLst.ValidateWithPath(path + "\u002fA\u0064\u006a\u004c\u0073\u0074"); _ebeg != nil {
			return _ebeg
		}
	}
	if _aeecd.ExtLst != nil {
		if _cdac := _aeecd.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _cdac != nil {
			return _cdac
		}
	}
	return nil
}
func (_gbdd ST_AxisType) ValidateWithPath(path string) error {
	switch _gbdd {
	case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13:
	default:
		return _f.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_gbdd))
	}
	return nil
}

// ValidateWithPath validates the AG_ConstraintRefAttributes and its children, prefixing error messages with path
func (_cf *AG_ConstraintRefAttributes) ValidateWithPath(path string) error {
	if _ffd := _cf.RefTypeAttr.ValidateWithPath(path + "\u002f\u0052\u0065f\u0054\u0079\u0070\u0065\u0041\u0074\u0074\u0072"); _ffd != nil {
		return _ffd
	}
	if _dce := _cf.RefForAttr.ValidateWithPath(path + "/\u0052\u0065\u0066\u0046\u006f\u0072\u0041\u0074\u0074\u0072"); _dce != nil {
		return _dce
	}
	if _edd := _cf.RefPtTypeAttr.ValidateWithPath(path + "\u002f\u0052\u0065\u0066\u0050\u0074\u0054\u0079\u0070e\u0041\u0074\u0074\u0072"); _edd != nil {
		return _edd
	}
	return nil
}

type CT_Pt struct {
	ModelIdAttr ST_ModelId
	TypeAttr    ST_PtType
	CxnIdAttr   *ST_ModelId
	PrSet       *CT_ElemPropSet
	SpPr        *_bc.CT_ShapeProperties
	T           *_bc.CT_TextBody
	ExtLst      *_bc.CT_OfficeArtExtensionList
}

func (_edefd *CT_StyleLabel) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u006e\u0061\u006d\u0065"}, Value: _f.Sprintf("\u0025\u0076", _edefd.NameAttr)})
	e.EncodeToken(start)
	if _edefd.Scene3d != nil {
		_dacgg := _d.StartElement{Name: _d.Name{Local: "\u0073c\u0065\u006e\u0065\u0033\u0064"}}
		e.EncodeElement(_edefd.Scene3d, _dacgg)
	}
	if _edefd.Sp3d != nil {
		_gedga := _d.StartElement{Name: _d.Name{Local: "\u0073\u0070\u0033\u0064"}}
		e.EncodeElement(_edefd.Sp3d, _gedga)
	}
	if _edefd.TxPr != nil {
		_edcae := _d.StartElement{Name: _d.Name{Local: "\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_edefd.TxPr, _edcae)
	}
	if _edefd.Style != nil {
		_gggdc := _d.StartElement{Name: _d.Name{Local: "\u0073\u0074\u0079l\u0065"}}
		e.EncodeElement(_edefd.Style, _gggdc)
	}
	if _edefd.ExtLst != nil {
		_ddga := _d.StartElement{Name: _d.Name{Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_edefd.ExtLst, _ddga)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func NewCT_NumericRule() *CT_NumericRule { _bdc := &CT_NumericRule{}; return _bdc }
func (_ddb *CT_Adj) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0069\u0064\u0078"}, Value: _f.Sprintf("\u0025\u0076", _ddb.IdxAttr)})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0076\u0061\u006c"}, Value: _f.Sprintf("\u0025\u0076", _ddb.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

type CT_TextProps struct {
	Sp3d   *_bc.CT_Shape3D
	FlatTx *_bc.CT_FlatText
}

func (_fgad *StyleDef) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_fgad.CT_StyleDefinition = *NewCT_StyleDefinition()
	for _, _debbb := range start.Attr {
		if _debbb.Name.Local == "\u0075\u006e\u0069\u0071\u0075\u0065\u0049\u0064" {
			_beaga, _egea := _debbb.Value, error(nil)
			if _egea != nil {
				return _egea
			}
			_fgad.UniqueIdAttr = &_beaga
			continue
		}
		if _debbb.Name.Local == "\u006d\u0069\u006e\u0056\u0065\u0072" {
			_cfadf, _bbdca := _debbb.Value, error(nil)
			if _bbdca != nil {
				return _bbdca
			}
			_fgad.MinVerAttr = &_cfadf
			continue
		}
	}
_caegb:
	for {
		_bfdd, _agag := d.Token()
		if _agag != nil {
			return _agag
		}
		switch _effbf := _bfdd.(type) {
		case _d.StartElement:
			switch _effbf.Name {
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0074\u0069\u0074l\u0065"}:
				_cbdgg := NewCT_SDName()
				if _eada := d.DecodeElement(_cbdgg, &_effbf); _eada != nil {
					return _eada
				}
				_fgad.Title = append(_fgad.Title, _cbdgg)
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0064\u0065\u0073\u0063"}:
				_bacda := NewCT_SDDescription()
				if _bebda := d.DecodeElement(_bacda, &_effbf); _bebda != nil {
					return _bebda
				}
				_fgad.Desc = append(_fgad.Desc, _bacda)
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0061\u0074\u004c\u0073\u0074"}:
				_fgad.CatLst = NewCT_SDCategories()
				if _affe := d.DecodeElement(_fgad.CatLst, &_effbf); _affe != nil {
					return _affe
				}
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0073c\u0065\u006e\u0065\u0033\u0064"}:
				_fgad.Scene3d = _bc.NewCT_Scene3D()
				if _dcebb := d.DecodeElement(_fgad.Scene3d, &_effbf); _dcebb != nil {
					return _dcebb
				}
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0073\u0074\u0079\u006c\u0065\u004c\u0062\u006c"}:
				_feebf := NewCT_StyleLabel()
				if _bdbgb := d.DecodeElement(_feebf, &_effbf); _bdbgb != nil {
					return _bdbgb
				}
				_fgad.StyleLbl = append(_fgad.StyleLbl, _feebf)
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_fgad.ExtLst = _bc.NewCT_OfficeArtExtensionList()
				if _ddcgc := d.DecodeElement(_fgad.ExtLst, &_effbf); _ddcgc != nil {
					return _ddcgc
				}
			default:
				_b.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006eg\u0020\u0075\u006es\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0053\u0074\u0079\u006c\u0065\u0044\u0065\u0066\u0020\u0025\u0076", _effbf.Name)
				if _aggac := d.Skip(); _aggac != nil {
					return _aggac
				}
			}
		case _d.EndElement:
			break _caegb
		case _d.CharData:
		}
	}
	return nil
}
func NewLayoutDefHdr() *LayoutDefHdr {
	_egcc := &LayoutDefHdr{}
	_egcc.CT_DiagramDefinitionHeader = *NewCT_DiagramDefinitionHeader()
	return _egcc
}
func (_facfb ST_FallbackDimension) Validate() error { return _facfb.ValidateWithPath("") }
func (_dcca ST_TextBlockDirection) Validate() error { return _dcca.ValidateWithPath("") }
func NewCT_Categories() *CT_Categories              { _dgca := &CT_Categories{}; return _dgca }
func (_dbef ST_BoolOperator) String() string {
	switch _dbef {
	case 0:
		return ""
	case 1:
		return "\u006e\u006f\u006e\u0065"
	case 2:
		return "\u0065\u0071\u0075"
	case 3:
		return "\u0067\u0074\u0065"
	case 4:
		return "\u006c\u0074\u0065"
	}
	return ""
}
func ParseUnionST_PrSetCustVal(s string) (ST_PrSetCustVal, error) { return ST_PrSetCustVal{}, nil }
func (_bbafe ST_HierarchyAlignment) ValidateWithPath(path string) error {
	switch _bbafe {
	case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16:
	default:
		return _f.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_bbafe))
	}
	return nil
}

// Validate validates the CT_DataModel and its children
func (_dfgb *CT_DataModel) Validate() error {
	return _dfgb.ValidateWithPath("\u0043\u0054\u005fD\u0061\u0074\u0061\u004d\u006f\u0064\u0065\u006c")
}

// Validate validates the CT_LayoutVariablePropertySet and its children
func (_deed *CT_LayoutVariablePropertySet) Validate() error {
	return _deed.ValidateWithPath("\u0043\u0054\u005f\u004ca\u0079\u006f\u0075\u0074\u0056\u0061\u0072\u0069\u0061\u0062l\u0065P\u0072\u006f\u0070\u0065\u0072\u0074\u0079S\u0065\u0074")
}

type ST_ParameterId byte

func (_cgcda ST_ClrAppMethod) String() string {
	switch _cgcda {
	case 0:
		return ""
	case 1:
		return "\u0073\u0070\u0061\u006e"
	case 2:
		return "\u0063\u0079\u0063l\u0065"
	case 3:
		return "\u0072\u0065\u0070\u0065\u0061\u0074"
	}
	return ""
}
func (_eafa ST_HierBranchStyle) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_fefaf := _d.Attr{}
	_fefaf.Name = name
	switch _eafa {
	case ST_HierBranchStyleUnset:
		_fefaf.Value = ""
	case ST_HierBranchStyleL:
		_fefaf.Value = "\u006c"
	case ST_HierBranchStyleR:
		_fefaf.Value = "\u0072"
	case ST_HierBranchStyleHang:
		_fefaf.Value = "\u0068\u0061\u006e\u0067"
	case ST_HierBranchStyleStd:
		_fefaf.Value = "\u0073\u0074\u0064"
	case ST_HierBranchStyleInit:
		_fefaf.Value = "\u0069\u006e\u0069\u0074"
	}
	return _fefaf, nil
}
func (_aegbc ST_HueDir) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_dffe := _d.Attr{}
	_dffe.Name = name
	switch _aegbc {
	case ST_HueDirUnset:
		_dffe.Value = ""
	case ST_HueDirCw:
		_dffe.Value = "\u0063\u0077"
	case ST_HueDirCcw:
		_dffe.Value = "\u0063\u0063\u0077"
	}
	return _dffe, nil
}
func NewCT_Constraint() *CT_Constraint { _degd := &CT_Constraint{}; return _degd }
func (_abdeg *ST_AlgorithmType) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_abdeg = 0
	case "\u0063o\u006d\u0070\u006f\u0073\u0069\u0074e":
		*_abdeg = 1
	case "\u0063\u006f\u006e\u006e":
		*_abdeg = 2
	case "\u0063\u0079\u0063l\u0065":
		*_abdeg = 3
	case "\u0068i\u0065\u0072\u0043\u0068\u0069\u006cd":
		*_abdeg = 4
	case "\u0068\u0069\u0065\u0072\u0052\u006f\u006f\u0074":
		*_abdeg = 5
	case "\u0070\u0079\u0072\u0061":
		*_abdeg = 6
	case "\u006c\u0069\u006e":
		*_abdeg = 7
	case "\u0073\u0070":
		*_abdeg = 8
	case "\u0074\u0078":
		*_abdeg = 9
	case "\u0073\u006e\u0061k\u0065":
		*_abdeg = 10
	}
	return nil
}

// Validate validates the CT_DiagramDefinitionHeaderLst and its children
func (_eged *CT_DiagramDefinitionHeaderLst) Validate() error {
	return _eged.ValidateWithPath("\u0043\u0054_\u0044\u0069\u0061\u0067\u0072\u0061\u006d\u0044\u0065\u0066\u0069\u006e\u0069\u0074\u0069\u006f\u006e\u0048\u0065\u0061\u0064\u0065rL\u0073\u0074")
}
func (_daae *ST_Breakpoint) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_daae = 0
	case "\u0065\u006e\u0064\u0043\u006e\u0076":
		*_daae = 1
	case "\u0062\u0061\u006c":
		*_daae = 2
	case "\u0066\u0069\u0078e\u0064":
		*_daae = 3
	}
	return nil
}
func (_aegdd *ST_NodeVerticalAlignment) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_dfdf, _dbfa := d.Token()
	if _dbfa != nil {
		return _dbfa
	}
	if _afecc, _eedb := _dfdf.(_d.EndElement); _eedb && _afecc.Name == start.Name {
		*_aegdd = 1
		return nil
	}
	if _cgab, _eecae := _dfdf.(_d.CharData); !_eecae {
		return _f.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _dfdf)
	} else {
		switch string(_cgab) {
		case "":
			*_aegdd = 0
		case "\u0074":
			*_aegdd = 1
		case "\u006d\u0069\u0064":
			*_aegdd = 2
		case "\u0062":
			*_aegdd = 3
		}
	}
	_dfdf, _dbfa = d.Token()
	if _dbfa != nil {
		return _dbfa
	}
	if _dfed, _eeeca := _dfdf.(_d.EndElement); _eeeca && _dfed.Name == start.Name {
		return nil
	}
	return _f.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _dfdf)
}
func (_fae *CT_AdjLst) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _fae.Adj != nil {
		_ebdb := _d.StartElement{Name: _d.Name{Local: "\u0061\u0064\u006a"}}
		for _, _egfg := range _fae.Adj {
			e.EncodeElement(_egfg, _ebdb)
		}
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_adgf ST_ConstraintType) String() string {
	switch _adgf {
	case 0:
		return ""
	case 1:
		return "\u006e\u006f\u006e\u0065"
	case 2:
		return "\u0061\u006c\u0069\u0067\u006e\u004f\u0066\u0066"
	case 3:
		return "\u0062e\u0067\u004d\u0061\u0072\u0067"
	case 4:
		return "\u0062\u0065\u006e\u0064\u0044\u0069\u0073\u0074"
	case 5:
		return "\u0062\u0065\u0067\u0050\u0061\u0064"
	case 6:
		return "\u0062"
	case 7:
		return "\u0062\u004d\u0061r\u0067"
	case 8:
		return "\u0062\u004f\u0066\u0066"
	case 9:
		return "\u0063\u0074\u0072\u0058"
	case 10:
		return "\u0063t\u0072\u0058\u004f\u0066\u0066"
	case 11:
		return "\u0063\u0074\u0072\u0059"
	case 12:
		return "\u0063t\u0072\u0059\u004f\u0066\u0066"
	case 13:
		return "\u0063\u006f\u006e\u006e\u0044\u0069\u0073\u0074"
	case 14:
		return "\u0064\u0069\u0061\u006d"
	case 15:
		return "\u0065n\u0064\u004d\u0061\u0072\u0067"
	case 16:
		return "\u0065\u006e\u0064\u0050\u0061\u0064"
	case 17:
		return "\u0068"
	case 18:
		return "\u0068\u0041\u0072\u0048"
	case 19:
		return "\u0068\u004f\u0066\u0066"
	case 20:
		return "\u006c"
	case 21:
		return "\u006c\u004d\u0061r\u0067"
	case 22:
		return "\u006c\u004f\u0066\u0066"
	case 23:
		return "\u0072"
	case 24:
		return "\u0072\u004d\u0061r\u0067"
	case 25:
		return "\u0072\u004f\u0066\u0066"
	case 26:
		return "\u0070\u0072\u0069\u006d\u0046\u006f\u006e\u0074\u0053\u007a"
	case 27:
		return "\u0070\u0079\u0072\u0061\u0041\u0063\u0063\u0074\u0052\u0061\u0074\u0069\u006f"
	case 28:
		return "\u0073e\u0063\u0046\u006f\u006e\u0074\u0053z"
	case 29:
		return "\u0073\u0069\u0062S\u0070"
	case 30:
		return "\u0073\u0065\u0063\u0053\u0069\u0062\u0053\u0070"
	case 31:
		return "\u0073\u0070"
	case 32:
		return "\u0073t\u0065\u006d\u0054\u0068\u0069\u0063k"
	case 33:
		return "\u0074"
	case 34:
		return "\u0074\u004d\u0061r\u0067"
	case 35:
		return "\u0074\u004f\u0066\u0066"
	case 36:
		return "\u0075\u0073\u0065r\u0041"
	case 37:
		return "\u0075\u0073\u0065r\u0042"
	case 38:
		return "\u0075\u0073\u0065r\u0043"
	case 39:
		return "\u0075\u0073\u0065r\u0044"
	case 40:
		return "\u0075\u0073\u0065r\u0045"
	case 41:
		return "\u0075\u0073\u0065r\u0046"
	case 42:
		return "\u0075\u0073\u0065r\u0047"
	case 43:
		return "\u0075\u0073\u0065r\u0048"
	case 44:
		return "\u0075\u0073\u0065r\u0049"
	case 45:
		return "\u0075\u0073\u0065r\u004a"
	case 46:
		return "\u0075\u0073\u0065r\u004b"
	case 47:
		return "\u0075\u0073\u0065r\u004c"
	case 48:
		return "\u0075\u0073\u0065r\u004d"
	case 49:
		return "\u0075\u0073\u0065r\u004e"
	case 50:
		return "\u0075\u0073\u0065r\u004f"
	case 51:
		return "\u0075\u0073\u0065r\u0050"
	case 52:
		return "\u0075\u0073\u0065r\u0051"
	case 53:
		return "\u0075\u0073\u0065r\u0052"
	case 54:
		return "\u0075\u0073\u0065r\u0053"
	case 55:
		return "\u0075\u0073\u0065r\u0054"
	case 56:
		return "\u0075\u0073\u0065r\u0055"
	case 57:
		return "\u0075\u0073\u0065r\u0056"
	case 58:
		return "\u0075\u0073\u0065r\u0057"
	case 59:
		return "\u0075\u0073\u0065r\u0058"
	case 60:
		return "\u0075\u0073\u0065r\u0059"
	case 61:
		return "\u0075\u0073\u0065r\u005a"
	case 62:
		return "\u0077"
	case 63:
		return "\u0077\u0041\u0072\u0048"
	case 64:
		return "\u0077\u004f\u0066\u0066"
	}
	return ""
}

// Validate validates the CT_RelIds and its children
func (_ddfa *CT_RelIds) Validate() error {
	return _ddfa.ValidateWithPath("\u0043T\u005f\u0052\u0065\u006c\u0049\u0064s")
}

// ValidateWithPath validates the CT_Colors and its children, prefixing error messages with path
func (_dgcb *CT_Colors) ValidateWithPath(path string) error {
	if _bdbe := _dgcb.MethAttr.ValidateWithPath(path + "\u002fM\u0065\u0074\u0068\u0041\u0074\u0074r"); _bdbe != nil {
		return _bdbe
	}
	if _aeef := _dgcb.HueDirAttr.ValidateWithPath(path + "/\u0048\u0075\u0065\u0044\u0069\u0072\u0041\u0074\u0074\u0072"); _aeef != nil {
		return _aeef
	}
	for _caee, _edef := range _dgcb.EG_ColorChoice {
		if _fccg := _edef.ValidateWithPath(_f.Sprintf("%\u0073\u002f\u0045\u0047_C\u006fl\u006f\u0072\u0043\u0068\u006fi\u0063\u0065\u005b\u0025\u0064\u005d", path, _caee)); _fccg != nil {
			return _fccg
		}
	}
	return nil
}
func (_dgbed *ST_PtType) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_eedc, _agfeg := d.Token()
	if _agfeg != nil {
		return _agfeg
	}
	if _gcdcc, _cdegb := _eedc.(_d.EndElement); _cdegb && _gcdcc.Name == start.Name {
		*_dgbed = 1
		return nil
	}
	if _edcc, _cdfe := _eedc.(_d.CharData); !_cdfe {
		return _f.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _eedc)
	} else {
		switch string(_edcc) {
		case "":
			*_dgbed = 0
		case "\u006e\u006f\u0064\u0065":
			*_dgbed = 1
		case "\u0061\u0073\u0073\u0074":
			*_dgbed = 2
		case "\u0064\u006f\u0063":
			*_dgbed = 3
		case "\u0070\u0072\u0065\u0073":
			*_dgbed = 4
		case "\u0070\u0061\u0072\u0054\u0072\u0061\u006e\u0073":
			*_dgbed = 5
		case "\u0073\u0069\u0062\u0054\u0072\u0061\u006e\u0073":
			*_dgbed = 6
		}
	}
	_eedc, _agfeg = d.Token()
	if _agfeg != nil {
		return _agfeg
	}
	if _faeb, _eafb := _eedc.(_d.EndElement); _eafb && _faeb.Name == start.Name {
		return nil
	}
	return _f.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _eedc)
}

type CT_Constraint struct {
	OpAttr         ST_BoolOperator
	ValAttr        *float64
	FactAttr       *float64
	ExtLst         *_bc.CT_OfficeArtExtensionList
	TypeAttr       ST_ConstraintType
	ForAttr        ST_ConstraintRelationship
	ForNameAttr    *string
	PtTypeAttr     ST_ElementType
	RefTypeAttr    ST_ConstraintType
	RefForAttr     ST_ConstraintRelationship
	RefForNameAttr *string
	RefPtTypeAttr  ST_ElementType
}

func (_cbb *CT_CTCategories) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _cbb.Cat != nil {
		_dgc := _d.StartElement{Name: _d.Name{Local: "\u0063\u0061\u0074"}}
		for _, _aff := range _cbb.Cat {
			e.EncodeElement(_aff, _dgc)
		}
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

const (
	ST_SecondaryLinearDirectionUnset ST_SecondaryLinearDirection = 0
	ST_SecondaryLinearDirectionNone  ST_SecondaryLinearDirection = 1
	ST_SecondaryLinearDirectionFromL ST_SecondaryLinearDirection = 2
	ST_SecondaryLinearDirectionFromR ST_SecondaryLinearDirection = 3
	ST_SecondaryLinearDirectionFromT ST_SecondaryLinearDirection = 4
	ST_SecondaryLinearDirectionFromB ST_SecondaryLinearDirection = 5
)
const (
	ST_NodeVerticalAlignmentUnset ST_NodeVerticalAlignment = 0
	ST_NodeVerticalAlignmentT     ST_NodeVerticalAlignment = 1
	ST_NodeVerticalAlignmentMid   ST_NodeVerticalAlignment = 2
	ST_NodeVerticalAlignmentB     ST_NodeVerticalAlignment = 3
)

func (_abcge *ST_ElementType) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_dffc, _cbcge := d.Token()
	if _cbcge != nil {
		return _cbcge
	}
	if _geaa, _gbbad := _dffc.(_d.EndElement); _gbbad && _geaa.Name == start.Name {
		*_abcge = 1
		return nil
	}
	if _fafa, _aacge := _dffc.(_d.CharData); !_aacge {
		return _f.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _dffc)
	} else {
		switch string(_fafa) {
		case "":
			*_abcge = 0
		case "\u0061\u006c\u006c":
			*_abcge = 1
		case "\u0064\u006f\u0063":
			*_abcge = 2
		case "\u006e\u006f\u0064\u0065":
			*_abcge = 3
		case "\u006e\u006f\u0072\u006d":
			*_abcge = 4
		case "\u006eo\u006e\u004e\u006f\u0072\u006d":
			*_abcge = 5
		case "\u0061\u0073\u0073\u0074":
			*_abcge = 6
		case "\u006eo\u006e\u0041\u0073\u0073\u0074":
			*_abcge = 7
		case "\u0070\u0061\u0072\u0054\u0072\u0061\u006e\u0073":
			*_abcge = 8
		case "\u0070\u0072\u0065\u0073":
			*_abcge = 9
		case "\u0073\u0069\u0062\u0054\u0072\u0061\u006e\u0073":
			*_abcge = 10
		}
	}
	_dffc, _cbcge = d.Token()
	if _cbcge != nil {
		return _cbcge
	}
	if _fedbd, _dfbb := _dffc.(_d.EndElement); _dfbb && _fedbd.Name == start.Name {
		return nil
	}
	return _f.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _dffc)
}
func (_dafb ST_ChildDirection) Validate() error { return _dafb.ValidateWithPath("") }

// ValidateWithPath validates the CT_AdjLst and its children, prefixing error messages with path
func (_fab *CT_AdjLst) ValidateWithPath(path string) error {
	for _aaa, _cba := range _fab.Adj {
		if _afe := _cba.ValidateWithPath(_f.Sprintf("\u0025\u0073\u002f\u0041\u0064\u006a\u005b\u0025\u0064\u005d", path, _aaa)); _afe != nil {
			return _afe
		}
	}
	return nil
}
func (_cbdg *CT_AnimOne) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _cbdg.ValAttr != ST_AnimOneStrUnset {
		_gccg, _aeag := _cbdg.ValAttr.MarshalXMLAttr(_d.Name{Local: "\u0076\u0061\u006c"})
		if _aeag != nil {
			return _aeag
		}
		start.Attr = append(start.Attr, _gccg)
	}
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_Direction and its children
func (_fdgb *CT_Direction) Validate() error {
	return _fdgb.ValidateWithPath("\u0043\u0054\u005fD\u0069\u0072\u0065\u0063\u0074\u0069\u006f\u006e")
}
func NewCT_DiagramDefinitionHeaderLst() *CT_DiagramDefinitionHeaderLst {
	_bgaa := &CT_DiagramDefinitionHeaderLst{}
	return _bgaa
}

type CT_Category struct {
	TypeAttr string
	PriAttr  uint32
}

// ValidateWithPath validates the ColorsDefHdrLst and its children, prefixing error messages with path
func (_defe *ColorsDefHdrLst) ValidateWithPath(path string) error {
	if _bbfcc := _defe.CT_ColorTransformHeaderLst.ValidateWithPath(path); _bbfcc != nil {
		return _bbfcc
	}
	return nil
}
func (_gcdeb ST_ChildDirection) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_gcdeb.String(), start)
}
func (_agg *AG_IteratorAttributes) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _agg.AxisAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0061\u0078\u0069\u0073"}, Value: _f.Sprintf("\u0025\u0076", *_agg.AxisAttr)})
	}
	if _agg.PtTypeAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0070\u0074\u0054\u0079\u0070\u0065"}, Value: _f.Sprintf("\u0025\u0076", *_agg.PtTypeAttr)})
	}
	if _agg.HideLastTransAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0068\u0069\u0064\u0065\u004c\u0061\u0073\u0074\u0054\u0072\u0061\u006e\u0073"}, Value: _f.Sprintf("\u0025\u0076", *_agg.HideLastTransAttr)})
	}
	if _agg.StAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0073\u0074"}, Value: _f.Sprintf("\u0025\u0076", *_agg.StAttr)})
	}
	if _agg.CntAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0063\u006e\u0074"}, Value: _f.Sprintf("\u0025\u0076", *_agg.CntAttr)})
	}
	if _agg.StepAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0073\u0074\u0065\u0070"}, Value: _f.Sprintf("\u0025\u0076", *_agg.StepAttr)})
	}
	return nil
}
func (_bbeg *CT_SDCategories) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_gedb:
	for {
		_edeac, _begc := d.Token()
		if _begc != nil {
			return _begc
		}
		switch _gccdc := _edeac.(type) {
		case _d.StartElement:
			switch _gccdc.Name {
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0061\u0074"}:
				_acgg := NewCT_SDCategory()
				if _gee := d.DecodeElement(_acgg, &_gccdc); _gee != nil {
					return _gee
				}
				_bbeg.Cat = append(_bbeg.Cat, _acgg)
			default:
				_b.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074e\u0064\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0053\u0044\u0043a\u0074\u0065\u0067\u006f\u0072\u0069\u0065\u0073\u0020\u0025\u0076", _gccdc.Name)
				if _eaed := d.Skip(); _eaed != nil {
					return _eaed
				}
			}
		case _d.EndElement:
			break _gedb
		case _d.CharData:
		}
	}
	return nil
}

type CT_HierBranchStyle struct{ ValAttr ST_HierBranchStyle }

func (_bebae ST_ConnectorDimension) Validate() error { return _bebae.ValidateWithPath("") }
func NewCT_ColorTransform() *CT_ColorTransform       { _decc := &CT_ColorTransform{}; return _decc }
func (_eacd ST_ArrowheadStyle) String() string {
	switch _eacd {
	case 0:
		return ""
	case 1:
		return "\u0061\u0075\u0074\u006f"
	case 2:
		return "\u0061\u0072\u0072"
	case 3:
		return "\u006e\u006f\u0041r\u0072"
	}
	return ""
}
func (_bgcg ST_CenterShapeMapping) String() string {
	switch _bgcg {
	case 0:
		return ""
	case 1:
		return "\u006e\u006f\u006e\u0065"
	case 2:
		return "\u0066\u004e\u006fd\u0065"
	}
	return ""
}
func (_dedg ST_Breakpoint) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_dedg.String(), start)
}
func (_aag *CT_OrgChart) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _aag.ValAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0076\u0061\u006c"}, Value: _f.Sprintf("\u0025\u0064", _bbcdb(*_aag.ValAttr))})
	}
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func NewCT_StyleDefinitionHeader() *CT_StyleDefinitionHeader {
	_fdad := &CT_StyleDefinitionHeader{}
	return _fdad
}
func (_eccfg ST_StartingElement) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_bffe := _d.Attr{}
	_bffe.Name = name
	switch _eccfg {
	case ST_StartingElementUnset:
		_bffe.Value = ""
	case ST_StartingElementNode:
		_bffe.Value = "\u006e\u006f\u0064\u0065"
	case ST_StartingElementTrans:
		_bffe.Value = "\u0074\u0072\u0061n\u0073"
	}
	return _bffe, nil
}
func (_ebdg *CT_ColorTransform) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _ebdg.UniqueIdAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0075\u006e\u0069\u0071\u0075\u0065\u0049\u0064"}, Value: _f.Sprintf("\u0025\u0076", *_ebdg.UniqueIdAttr)})
	}
	if _ebdg.MinVerAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u006d\u0069\u006e\u0056\u0065\u0072"}, Value: _f.Sprintf("\u0025\u0076", *_ebdg.MinVerAttr)})
	}
	e.EncodeToken(start)
	if _ebdg.Title != nil {
		_acb := _d.StartElement{Name: _d.Name{Local: "\u0074\u0069\u0074l\u0065"}}
		for _, _gea := range _ebdg.Title {
			e.EncodeElement(_gea, _acb)
		}
	}
	if _ebdg.Desc != nil {
		_eaf := _d.StartElement{Name: _d.Name{Local: "\u0064\u0065\u0073\u0063"}}
		for _, _fgc := range _ebdg.Desc {
			e.EncodeElement(_fgc, _eaf)
		}
	}
	if _ebdg.CatLst != nil {
		_acad := _d.StartElement{Name: _d.Name{Local: "\u0063\u0061\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_ebdg.CatLst, _acad)
	}
	if _ebdg.StyleLbl != nil {
		_cced := _d.StartElement{Name: _d.Name{Local: "\u0073\u0074\u0079\u006c\u0065\u004c\u0062\u006c"}}
		for _, _gaee := range _ebdg.StyleLbl {
			e.EncodeElement(_gaee, _cced)
		}
	}
	if _ebdg.ExtLst != nil {
		_faaa := _d.StartElement{Name: _d.Name{Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_ebdg.ExtLst, _faaa)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_ebaa ST_ResizeHandlesStr) String() string {
	switch _ebaa {
	case 0:
		return ""
	case 1:
		return "\u0065\u0078\u0061c\u0074"
	case 2:
		return "\u0072\u0065\u006c"
	}
	return ""
}
func (_ggbc *ST_SecondaryLinearDirection) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_gdbe, _gggc := d.Token()
	if _gggc != nil {
		return _gggc
	}
	if _dcffg, _ebfd := _gdbe.(_d.EndElement); _ebfd && _dcffg.Name == start.Name {
		*_ggbc = 1
		return nil
	}
	if _cdge, _cecb := _gdbe.(_d.CharData); !_cecb {
		return _f.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _gdbe)
	} else {
		switch string(_cdge) {
		case "":
			*_ggbc = 0
		case "\u006e\u006f\u006e\u0065":
			*_ggbc = 1
		case "\u0066\u0072\u006fm\u004c":
			*_ggbc = 2
		case "\u0066\u0072\u006fm\u0052":
			*_ggbc = 3
		case "\u0066\u0072\u006fm\u0054":
			*_ggbc = 4
		case "\u0066\u0072\u006fm\u0042":
			*_ggbc = 5
		}
	}
	_gdbe, _gggc = d.Token()
	if _gggc != nil {
		return _gggc
	}
	if _edefc, _cbff := _gdbe.(_d.EndElement); _cbff && _edefc.Name == start.Name {
		return nil
	}
	return _f.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _gdbe)
}
func (_fdcf *CT_NumericRule) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _fdcf.ValAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0076\u0061\u006c"}, Value: _f.Sprintf("\u0025\u0076", *_fdcf.ValAttr)})
	}
	if _fdcf.FactAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0066\u0061\u0063\u0074"}, Value: _f.Sprintf("\u0025\u0076", *_fdcf.FactAttr)})
	}
	if _fdcf.MaxAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u006d\u0061\u0078"}, Value: _f.Sprintf("\u0025\u0076", *_fdcf.MaxAttr)})
	}
	if _fdcf.TypeAttr != ST_ConstraintTypeUnset {
		_dbbd, _ffgce := _fdcf.TypeAttr.MarshalXMLAttr(_d.Name{Local: "\u0074\u0079\u0070\u0065"})
		if _ffgce != nil {
			return _ffgce
		}
		start.Attr = append(start.Attr, _dbbd)
	}
	if _fdcf.ForAttr != ST_ConstraintRelationshipUnset {
		_eafe, _dgbe := _fdcf.ForAttr.MarshalXMLAttr(_d.Name{Local: "\u0066\u006f\u0072"})
		if _dgbe != nil {
			return _dgbe
		}
		start.Attr = append(start.Attr, _eafe)
	}
	if _fdcf.ForNameAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0066o\u0072\u004e\u0061\u006d\u0065"}, Value: _f.Sprintf("\u0025\u0076", *_fdcf.ForNameAttr)})
	}
	if _fdcf.PtTypeAttr != ST_ElementTypeUnset {
		_ebdd, _afaa := _fdcf.PtTypeAttr.MarshalXMLAttr(_d.Name{Local: "\u0070\u0074\u0054\u0079\u0070\u0065"})
		if _afaa != nil {
			return _afaa
		}
		start.Attr = append(start.Attr, _ebdd)
	}
	e.EncodeToken(start)
	if _fdcf.ExtLst != nil {
		_fedb := _d.StartElement{Name: _d.Name{Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_fdcf.ExtLst, _fedb)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_edbbf *StyleDefHdr) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0078\u006d\u006cn\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0061"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0078\u006d\u006c\u006e\u0073\u003a\u0064\u0069"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0072"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"}, Value: "\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"})
	start.Name.Local = "s\u0074\u0079\u006c\u0065\u0044\u0065\u0066\u0048\u0064\u0072"
	return _edbbf.CT_StyleDefinitionHeader.MarshalXML(e, start)
}
func NewCT_TextProps() *CT_TextProps { _aadaf := &CT_TextProps{}; return _aadaf }
func (_cdacg ST_ChildAlignment) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_cdacg.String(), start)
}

type CT_LayoutVariablePropertySet struct {
	OrgChart      *CT_OrgChart
	ChMax         *CT_ChildMax
	ChPref        *CT_ChildPref
	BulletEnabled *CT_BulletEnabled
	Dir           *CT_Direction
	HierBranch    *CT_HierBranchStyle
	AnimOne       *CT_AnimOne
	AnimLvl       *CT_AnimLvl
	ResizeHandles *CT_ResizeHandles
}

// Validate validates the CT_Categories and its children
func (_feb *CT_Categories) Validate() error {
	return _feb.ValidateWithPath("\u0043\u0054\u005f\u0043\u0061\u0074\u0065\u0067\u006f\u0072\u0069\u0065\u0073")
}
func (_cadb ST_FunctionType) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_cadb.String(), start)
}
func (_cebcf ST_ResizeHandlesStr) Validate() error { return _cebcf.ValidateWithPath("") }
func (_dfebf *ST_BoolOperator) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_dfebf = 0
	case "\u006e\u006f\u006e\u0065":
		*_dfebf = 1
	case "\u0065\u0071\u0075":
		*_dfebf = 2
	case "\u0067\u0074\u0065":
		*_dfebf = 3
	case "\u006c\u0074\u0065":
		*_dfebf = 4
	}
	return nil
}
func (_dacd *CT_ResizeHandles) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _ccaa := range start.Attr {
		if _ccaa.Name.Local == "\u0076\u0061\u006c" {
			_dacd.ValAttr.UnmarshalXMLAttr(_ccaa)
			continue
		}
	}
	for {
		_cbef, _agcd := d.Token()
		if _agcd != nil {
			return _f.Errorf("\u0070\u0061\u0072\u0073i\u006e\u0067\u0020\u0043\u0054\u005f\u0052\u0065\u0073\u0069z\u0065H\u0061\u006e\u0064\u006c\u0065\u0073\u003a \u0025\u0073", _agcd)
		}
		if _gecf, _bbccc := _cbef.(_d.EndElement); _bbccc && _gecf.Name == start.Name {
			break
		}
	}
	return nil
}

type ST_Offset byte

func (_ddgba ST_DiagramTextAlignment) String() string {
	switch _ddgba {
	case 0:
		return ""
	case 1:
		return "\u006c"
	case 2:
		return "\u0063\u0074\u0072"
	case 3:
		return "\u0072"
	}
	return ""
}

// ValidateWithPath validates the CT_DiagramDefinitionHeaderLst and its children, prefixing error messages with path
func (_dgbdc *CT_DiagramDefinitionHeaderLst) ValidateWithPath(path string) error {
	for _bbg, _dgec := range _dgbdc.LayoutDefHdr {
		if _dgbb := _dgec.ValidateWithPath(_f.Sprintf("\u0025\u0073\u002f\u004cay\u006f\u0075\u0074\u0044\u0065\u0066\u0048\u0064\u0072\u005b\u0025\u0064\u005d", path, _bbg)); _dgbb != nil {
			return _dgbb
		}
	}
	return nil
}
func (_fgdf *ST_ParameterId) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_feeef, _cbafa := d.Token()
	if _cbafa != nil {
		return _cbafa
	}
	if _agcdc, _abdbf := _feeef.(_d.EndElement); _abdbf && _agcdc.Name == start.Name {
		*_fgdf = 1
		return nil
	}
	if _fbcg, _gbaa := _feeef.(_d.CharData); !_gbaa {
		return _f.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _feeef)
	} else {
		switch string(_fbcg) {
		case "":
			*_fgdf = 0
		case "\u0068o\u0072\u007a\u0041\u006c\u0069\u0067n":
			*_fgdf = 1
		case "\u0076e\u0072\u0074\u0041\u006c\u0069\u0067n":
			*_fgdf = 2
		case "\u0063\u0068\u0044i\u0072":
			*_fgdf = 3
		case "\u0063h\u0041\u006c\u0069\u0067\u006e":
			*_fgdf = 4
		case "\u0073\u0065\u0063\u0043\u0068\u0041\u006c\u0069\u0067\u006e":
			*_fgdf = 5
		case "\u006c\u0069\u006e\u0044\u0069\u0072":
			*_fgdf = 6
		case "\u0073e\u0063\u004c\u0069\u006e\u0044\u0069r":
			*_fgdf = 7
		case "\u0073\u0074\u0045\u006c\u0065\u006d":
			*_fgdf = 8
		case "\u0062\u0065\u006e\u0064\u0050\u0074":
			*_fgdf = 9
		case "\u0063\u006f\u006e\u006e\u0052\u006f\u0075\u0074":
			*_fgdf = 10
		case "\u0062\u0065\u0067\u0053\u0074\u0079":
			*_fgdf = 11
		case "\u0065\u006e\u0064\u0053\u0074\u0079":
			*_fgdf = 12
		case "\u0064\u0069\u006d":
			*_fgdf = 13
		case "\u0072o\u0074\u0050\u0061\u0074\u0068":
			*_fgdf = 14
		case "\u0063t\u0072\u0053\u0068\u0070\u004d\u0061p":
			*_fgdf = 15
		case "\u006e\u006f\u0064\u0065\u0048\u006f\u0072\u007a\u0041\u006c\u0069\u0067\u006e":
			*_fgdf = 16
		case "\u006e\u006f\u0064\u0065\u0056\u0065\u0072\u0074\u0041\u006c\u0069\u0067\u006e":
			*_fgdf = 17
		case "\u0066\u0061\u006c\u006c\u0062\u0061\u0063\u006b":
			*_fgdf = 18
		case "\u0074\u0078\u0044i\u0072":
			*_fgdf = 19
		case "p\u0079\u0072\u0061\u0041\u0063\u0063\u0074\u0050\u006f\u0073":
			*_fgdf = 20
		case "\u0070\u0079\u0072\u0061\u0041\u0063\u0063\u0074\u0054\u0078\u004d\u0061\u0072":
			*_fgdf = 21
		case "\u0074x\u0042\u006c\u0044\u0069\u0072":
			*_fgdf = 22
		case "\u0074\u0078\u0041n\u0063\u0068\u006f\u0072\u0048\u006f\u0072\u007a":
			*_fgdf = 23
		case "\u0074\u0078\u0041n\u0063\u0068\u006f\u0072\u0056\u0065\u0072\u0074":
			*_fgdf = 24
		case "\u0074\u0078\u0041\u006e\u0063\u0068\u006f\u0072\u0048o\u0072\u007a\u0043\u0068":
			*_fgdf = 25
		case "\u0074\u0078\u0041\u006e\u0063\u0068\u006f\u0072\u0056e\u0072\u0074\u0043\u0068":
			*_fgdf = 26
		case "\u0070\u0061\u0072\u0054\u0078\u004c\u0054\u0052\u0041\u006c\u0069\u0067\u006e":
			*_fgdf = 27
		case "\u0070\u0061\u0072\u0054\u0078\u0052\u0054\u004c\u0041\u006c\u0069\u0067\u006e":
			*_fgdf = 28
		case "\u0073h\u0070T\u0078\u004c\u0054\u0052\u0041\u006c\u0069\u0067\u006e\u0043\u0068":
			*_fgdf = 29
		case "\u0073h\u0070T\u0078\u0052\u0054\u004c\u0041\u006c\u0069\u0067\u006e\u0043\u0068":
			*_fgdf = 30
		case "\u0061u\u0074\u006f\u0054\u0078\u0052\u006ft":
			*_fgdf = 31
		case "\u0067\u0072\u0044i\u0072":
			*_fgdf = 32
		case "\u0066l\u006f\u0077\u0044\u0069\u0072":
			*_fgdf = 33
		case "\u0063o\u006e\u0074\u0044\u0069\u0072":
			*_fgdf = 34
		case "\u0062\u006b\u0070\u0074":
			*_fgdf = 35
		case "\u006f\u0066\u0066":
			*_fgdf = 36
		case "\u0068i\u0065\u0072\u0041\u006c\u0069\u0067n":
			*_fgdf = 37
		case "\u0062\u006b\u0050t\u0046\u0069\u0078\u0065\u0064\u0056\u0061\u006c":
			*_fgdf = 38
		case "s\u0074\u0042\u0075\u006c\u006c\u0065\u0074\u004c\u0076\u006c":
			*_fgdf = 39
		case "\u0073\u0074\u0041n\u0067":
			*_fgdf = 40
		case "\u0073p\u0061\u006e\u0041\u006e\u0067":
			*_fgdf = 41
		case "\u0061\u0072":
			*_fgdf = 42
		case "\u006cn\u0053\u0070\u0050\u0061\u0072":
			*_fgdf = 43
		case "\u006c\u006e\u0053\u0070\u0041\u0066\u0050\u0061\u0072\u0050":
			*_fgdf = 44
		case "\u006c\u006e\u0053\u0070\u0043\u0068":
			*_fgdf = 45
		case "\u006cn\u0053\u0070\u0041\u0066\u0043\u0068P":
			*_fgdf = 46
		case "r\u0074\u0053\u0068\u006f\u0072\u0074\u0044\u0069\u0073\u0074":
			*_fgdf = 47
		case "\u0061l\u0069\u0067\u006e\u0054\u0078":
			*_fgdf = 48
		case "p\u0079\u0072\u0061\u004c\u0076\u006c\u004e\u006f\u0064\u0065":
			*_fgdf = 49
		case "\u0070\u0079r\u0061\u0041\u0063c\u0074\u0042\u006b\u0067\u0064\u004e\u006f\u0064\u0065":
			*_fgdf = 50
		case "\u0070\u0079\u0072\u0061\u0041\u0063\u0063\u0074\u0054x\u004e\u006f\u0064\u0065":
			*_fgdf = 51
		case "\u0073r\u0063\u004e\u006f\u0064\u0065":
			*_fgdf = 52
		case "\u0064s\u0074\u004e\u006f\u0064\u0065":
			*_fgdf = 53
		case "\u0062\u0065\u0067\u0050\u0074\u0073":
			*_fgdf = 54
		case "\u0065\u006e\u0064\u0050\u0074\u0073":
			*_fgdf = 55
		}
	}
	_feeef, _cbafa = d.Token()
	if _cbafa != nil {
		return _cbafa
	}
	if _cgdga, _ddgd := _feeef.(_d.EndElement); _ddgd && _cgdga.Name == start.Name {
		return nil
	}
	return _f.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _feeef)
}
func (_fbdgf ST_AnimOneStr) String() string {
	switch _fbdgf {
	case 0:
		return ""
	case 1:
		return "\u006e\u006f\u006e\u0065"
	case 2:
		return "\u006f\u006e\u0065"
	case 3:
		return "\u0062\u0072\u0061\u006e\u0063\u0068"
	}
	return ""
}
func (_gbgdb ST_Direction) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_bgfg := _d.Attr{}
	_bgfg.Name = name
	switch _gbgdb {
	case ST_DirectionUnset:
		_bgfg.Value = ""
	case ST_DirectionNorm:
		_bgfg.Value = "\u006e\u006f\u0072\u006d"
	case ST_DirectionRev:
		_bgfg.Value = "\u0072\u0065\u0076"
	}
	return _bgfg, nil
}
func (_dfcd *CT_NumericRule) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _ace := range start.Attr {
		if _ace.Name.Local == "\u0076\u0061\u006c" {
			_fbfd, _eaae := _gb.ParseFloat(_ace.Value, 64)
			if _eaae != nil {
				return _eaae
			}
			_dfcd.ValAttr = &_fbfd
			continue
		}
		if _ace.Name.Local == "\u0066\u0061\u0063\u0074" {
			_eaff, _bdeg := _gb.ParseFloat(_ace.Value, 64)
			if _bdeg != nil {
				return _bdeg
			}
			_dfcd.FactAttr = &_eaff
			continue
		}
		if _ace.Name.Local == "\u006d\u0061\u0078" {
			_ddea, _cggb := _gb.ParseFloat(_ace.Value, 64)
			if _cggb != nil {
				return _cggb
			}
			_dfcd.MaxAttr = &_ddea
			continue
		}
		if _ace.Name.Local == "\u0074\u0079\u0070\u0065" {
			_dfcd.TypeAttr.UnmarshalXMLAttr(_ace)
			continue
		}
		if _ace.Name.Local == "\u0066\u006f\u0072" {
			_dfcd.ForAttr.UnmarshalXMLAttr(_ace)
			continue
		}
		if _ace.Name.Local == "\u0066o\u0072\u004e\u0061\u006d\u0065" {
			_adae, _gcae := _ace.Value, error(nil)
			if _gcae != nil {
				return _gcae
			}
			_dfcd.ForNameAttr = &_adae
			continue
		}
		if _ace.Name.Local == "\u0070\u0074\u0054\u0079\u0070\u0065" {
			_dfcd.PtTypeAttr.UnmarshalXMLAttr(_ace)
			continue
		}
	}
_gbgb:
	for {
		_dage, _cdag := d.Token()
		if _cdag != nil {
			return _cdag
		}
		switch _caff := _dage.(type) {
		case _d.StartElement:
			switch _caff.Name {
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_dfcd.ExtLst = _bc.NewCT_OfficeArtExtensionList()
				if _efbcg := d.DecodeElement(_dfcd.ExtLst, &_caff); _efbcg != nil {
					return _efbcg
				}
			default:
				_b.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069n\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006et\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u004e\u0075\u006d\u0065\u0072\u0069\u0063R\u0075l\u0065\u0020\u0025\u0076", _caff.Name)
				if _deae := d.Skip(); _deae != nil {
					return _deae
				}
			}
		case _d.EndElement:
			break _gbgb
		case _d.CharData:
		}
	}
	return nil
}
func (_ccaba ST_CxnType) ValidateWithPath(path string) error {
	switch _ccaba {
	case 0, 1, 2, 3, 4:
	default:
		return _f.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_ccaba))
	}
	return nil
}
func (_aefb *ST_FallbackDimension) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_fgfc, _abeg := d.Token()
	if _abeg != nil {
		return _abeg
	}
	if _baddf, _eaaf := _fgfc.(_d.EndElement); _eaaf && _baddf.Name == start.Name {
		*_aefb = 1
		return nil
	}
	if _edcf, _fgaa := _fgfc.(_d.CharData); !_fgaa {
		return _f.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _fgfc)
	} else {
		switch string(_edcf) {
		case "":
			*_aefb = 0
		case "\u0031\u0044":
			*_aefb = 1
		case "\u0032\u0044":
			*_aefb = 2
		}
	}
	_fgfc, _abeg = d.Token()
	if _abeg != nil {
		return _abeg
	}
	if _bfada, _bfcfb := _fgfc.(_d.EndElement); _bfcfb && _bfada.Name == start.Name {
		return nil
	}
	return _f.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _fgfc)
}

// ValidateWithPath validates the CT_StyleLabel and its children, prefixing error messages with path
func (_dggac *CT_StyleLabel) ValidateWithPath(path string) error {
	if _dggac.Scene3d != nil {
		if _dfcfa := _dggac.Scene3d.ValidateWithPath(path + "\u002f\u0053\u0063\u0065\u006e\u0065\u0033\u0064"); _dfcfa != nil {
			return _dfcfa
		}
	}
	if _dggac.Sp3d != nil {
		if _dcfe := _dggac.Sp3d.ValidateWithPath(path + "\u002f\u0053\u00703\u0064"); _dcfe != nil {
			return _dcfe
		}
	}
	if _dggac.TxPr != nil {
		if _cggec := _dggac.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _cggec != nil {
			return _cggec
		}
	}
	if _dggac.Style != nil {
		if _ggeb := _dggac.Style.ValidateWithPath(path + "\u002f\u0053\u0074\u0079\u006c\u0065"); _ggeb != nil {
			return _ggeb
		}
	}
	if _dggac.ExtLst != nil {
		if _dcgc := _dggac.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _dcgc != nil {
			return _dcgc
		}
	}
	return nil
}

type ST_Direction byte
type StyleDefHdr struct{ CT_StyleDefinitionHeader }

const (
	ST_DiagramHorizontalAlignmentUnset ST_DiagramHorizontalAlignment = 0
	ST_DiagramHorizontalAlignmentL     ST_DiagramHorizontalAlignment = 1
	ST_DiagramHorizontalAlignmentCtr   ST_DiagramHorizontalAlignment = 2
	ST_DiagramHorizontalAlignmentR     ST_DiagramHorizontalAlignment = 3
	ST_DiagramHorizontalAlignmentNone  ST_DiagramHorizontalAlignment = 4
)

func (_ceca ST_BendPoint) ValidateWithPath(path string) error {
	switch _ceca {
	case 0, 1, 2, 3:
	default:
		return _f.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_ceca))
	}
	return nil
}
func (_dggc *CT_ElemPropSet) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _dcg := range start.Attr {
		if _dcg.Name.Local == "\u0063\u0075\u0073t\u0046\u006c\u0069\u0070\u0056\u0065\u0072\u0074" {
			_fcgg, _dfff := _gb.ParseBool(_dcg.Value)
			if _dfff != nil {
				return _dfff
			}
			_dggc.CustFlipVertAttr = &_fcgg
			continue
		}
		if _dcg.Name.Local == "p\u0072\u0065\u0073\u0041\u0073\u0073\u006f\u0063\u0049\u0044" {
			_aaba, _ddcf := ParseUnionST_ModelId(_dcg.Value)
			if _ddcf != nil {
				return _ddcf
			}
			_dggc.PresAssocIDAttr = &_aaba
			continue
		}
		if _dcg.Name.Local == "c\u0075\u0073\u0074\u0046\u006c\u0069\u0070\u0048\u006f\u0072" {
			_dbcd, _gedg := _gb.ParseBool(_dcg.Value)
			if _gedg != nil {
				return _gedg
			}
			_dggc.CustFlipHorAttr = &_dbcd
			continue
		}
		if _dcg.Name.Local == "\u0070\u0072\u0065s\u0053\u0074\u0079\u006c\u0065\u004c\u0062\u006c" {
			_fdf, _ddfg := _dcg.Value, error(nil)
			if _ddfg != nil {
				return _ddfg
			}
			_dggc.PresStyleLblAttr = &_fdf
			continue
		}
		if _dcg.Name.Local == "\u0063u\u0073\u0074\u0053\u007a\u0058" {
			_eebc, _dfe := _gb.ParseInt(_dcg.Value, 10, 32)
			if _dfe != nil {
				return _dfe
			}
			_fdcc := int32(_eebc)
			_dggc.CustSzXAttr = &_fdcc
			continue
		}
		if _dcg.Name.Local == "\u0070\u0072\u0065s\u0053\u0074\u0079\u006c\u0065\u0043\u006e\u0074" {
			_eece, _dbgeb := _gb.ParseInt(_dcg.Value, 10, 32)
			if _dbgeb != nil {
				return _dbgeb
			}
			_dfd := int32(_eece)
			_dggc.PresStyleCntAttr = &_dfd
			continue
		}
		if _dcg.Name.Local == "\u0063u\u0073\u0074\u0053\u007a\u0059" {
			_efbc, _fbdb := _gb.ParseInt(_dcg.Value, 10, 32)
			if _fbdb != nil {
				return _fbdb
			}
			_faaf := int32(_efbc)
			_dggc.CustSzYAttr = &_faaf
			continue
		}
		if _dcg.Name.Local == "\u006co\u0043\u0061\u0074\u0049\u0064" {
			_cded, _gdcf := _dcg.Value, error(nil)
			if _gdcf != nil {
				return _gdcf
			}
			_dggc.LoCatIdAttr = &_cded
			continue
		}
		if _dcg.Name.Local == "\u0063\u0075\u0073\u0074\u0053\u0063\u0061\u006c\u0065\u0058" {
			_cgdc, _cdf := ParseUnionST_PrSetCustVal(_dcg.Value)
			if _cdf != nil {
				return _cdf
			}
			_dggc.CustScaleXAttr = &_cgdc
			continue
		}
		if _dcg.Name.Local == "\u0071s\u0043\u0061\u0074\u0049\u0064" {
			_ccfb, _ggb := _dcg.Value, error(nil)
			if _ggb != nil {
				return _ggb
			}
			_dggc.QsCatIdAttr = &_ccfb
			continue
		}
		if _dcg.Name.Local == "\u0063\u0075\u0073\u0074\u0053\u0063\u0061\u006c\u0065\u0059" {
			_dfca, _cbfb := ParseUnionST_PrSetCustVal(_dcg.Value)
			if _cbfb != nil {
				return _cbfb
			}
			_dggc.CustScaleYAttr = &_dfca
			continue
		}
		if _dcg.Name.Local == "\u0063u\u0073\u0074\u0041\u006e\u0067" {
			_abcgd, _edac := _gb.ParseInt(_dcg.Value, 10, 32)
			if _edac != nil {
				return _edac
			}
			_cafg := int32(_abcgd)
			_dggc.CustAngAttr = &_cafg
			continue
		}
		if _dcg.Name.Local == "\u0063u\u0073t\u0052\u0061\u0064\u0053\u0063\u0061\u006c\u0065\u0052\u0061\u0064" {
			_cgfd, _gfgf := ParseUnionST_PrSetCustVal(_dcg.Value)
			if _gfgf != nil {
				return _gfgf
			}
			_dggc.CustRadScaleRadAttr = &_cgfd
			continue
		}
		if _dcg.Name.Local == "\u0063\u0075\u0073t\u004c\u0069\u006e\u0046\u0061\u0063\u0074\u0058" {
			_bdfe, _eeg := ParseUnionST_PrSetCustVal(_dcg.Value)
			if _eeg != nil {
				return _eeg
			}
			_dggc.CustLinFactXAttr = &_bdfe
			continue
		}
		if _dcg.Name.Local == "\u0071\u0073\u0054\u0079\u0070\u0065\u0049\u0064" {
			_fggd, _egga := _dcg.Value, error(nil)
			if _egga != nil {
				return _egga
			}
			_dggc.QsTypeIdAttr = &_fggd
			continue
		}
		if _dcg.Name.Local == "\u0063\u006f\u0068\u0065\u0072\u0065\u006e\u0074\u0033\u0044\u004f\u0066\u0066" {
			_fefa, _cggfbf := _gb.ParseBool(_dcg.Value)
			if _cggfbf != nil {
				return _cggfbf
			}
			_dggc.Coherent3DOffAttr = &_fefa
			continue
		}
		if _dcg.Name.Local == "\u0063\u0075\u0073t\u0054" {
			_aafc, _eff := _gb.ParseBool(_dcg.Value)
			if _eff != nil {
				return _eff
			}
			_dggc.CustTAttr = &_aafc
			continue
		}
		if _dcg.Name.Local == "\u0070\u0072\u0065\u0073\u004e\u0061\u006d\u0065" {
			_cbce, _bbcd := _dcg.Value, error(nil)
			if _bbcd != nil {
				return _bbcd
			}
			_dggc.PresNameAttr = &_cbce
			continue
		}
		if _dcg.Name.Local == "c\u0075s\u0074\u004c\u0069\u006e\u0046\u0061\u0063\u0074N\u0065\u0069\u0067\u0068bo\u0072\u0059" {
			_cgeg, _ceabd := ParseUnionST_PrSetCustVal(_dcg.Value)
			if _ceabd != nil {
				return _ceabd
			}
			_dggc.CustLinFactNeighborYAttr = &_cgeg
			continue
		}
		if _dcg.Name.Local == "\u0063\u0075\u0073t\u004c\u0069\u006e\u0046\u0061\u0063\u0074\u0059" {
			_egc, _efcc := ParseUnionST_PrSetCustVal(_dcg.Value)
			if _efcc != nil {
				return _efcc
			}
			_dggc.CustLinFactYAttr = &_egc
			continue
		}
		if _dcg.Name.Local == "\u006c\u006f\u0054\u0079\u0070\u0065\u0049\u0064" {
			_aef, _bbcg := _dcg.Value, error(nil)
			if _bbcg != nil {
				return _bbcg
			}
			_dggc.LoTypeIdAttr = &_aef
			continue
		}
		if _dcg.Name.Local == "\u0063u\u0073t\u0052\u0061\u0064\u0053\u0063\u0061\u006c\u0065\u0049\u006e\u0063" {
			_caac, _feeee := ParseUnionST_PrSetCustVal(_dcg.Value)
			if _feeee != nil {
				return _feeee
			}
			_dggc.CustRadScaleIncAttr = &_caac
			continue
		}
		if _dcg.Name.Local == "\u0070\u0068\u006cd\u0072" {
			_fcff, _fdaa := _gb.ParseBool(_dcg.Value)
			if _fdaa != nil {
				return _fdaa
			}
			_dggc.PhldrAttr = &_fcff
			continue
		}
		if _dcg.Name.Local == "\u0063\u0073\u0054\u0079\u0070\u0065\u0049\u0064" {
			_eadg, _gefeb := _dcg.Value, error(nil)
			if _gefeb != nil {
				return _gefeb
			}
			_dggc.CsTypeIdAttr = &_eadg
			continue
		}
		if _dcg.Name.Local == "\u0063s\u0043\u0061\u0074\u0049\u0064" {
			_dadg, _dcba := _dcg.Value, error(nil)
			if _dcba != nil {
				return _dcba
			}
			_dggc.CsCatIdAttr = &_dadg
			continue
		}
		if _dcg.Name.Local == "\u0070\u0068\u006c\u0064\u0072\u0054" {
			_gcebg, _fed := _dcg.Value, error(nil)
			if _fed != nil {
				return _fed
			}
			_dggc.PhldrTAttr = &_gcebg
			continue
		}
		if _dcg.Name.Local == "\u0070\u0072\u0065s\u0053\u0074\u0079\u006c\u0065\u0049\u0064\u0078" {
			_bcab, _cagd := _gb.ParseInt(_dcg.Value, 10, 32)
			if _cagd != nil {
				return _cagd
			}
			_ecd := int32(_bcab)
			_dggc.PresStyleIdxAttr = &_ecd
			continue
		}
		if _dcg.Name.Local == "c\u0075s\u0074\u004c\u0069\u006e\u0046\u0061\u0063\u0074N\u0065\u0069\u0067\u0068bo\u0072\u0058" {
			_dgba, _bcgd := ParseUnionST_PrSetCustVal(_dcg.Value)
			if _bcgd != nil {
				return _bcgd
			}
			_dggc.CustLinFactNeighborXAttr = &_dgba
			continue
		}
	}
_aeff:
	for {
		_dfb, _febaf := d.Token()
		if _febaf != nil {
			return _febaf
		}
		switch _aaeab := _dfb.(type) {
		case _d.StartElement:
			switch _aaeab.Name {
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0070\u0072\u0065\u0073\u004c\u0061\u0079\u006f\u0075t\u0056\u0061\u0072\u0073"}:
				_dggc.PresLayoutVars = NewCT_LayoutVariablePropertySet()
				if _cee := d.DecodeElement(_dggc.PresLayoutVars, &_aaeab); _cee != nil {
					return _cee
				}
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0073\u0074\u0079l\u0065"}:
				_dggc.Style = _bc.NewCT_ShapeStyle()
				if _fdfa := d.DecodeElement(_dggc.Style, &_aaeab); _fdfa != nil {
					return _fdfa
				}
			default:
				_b.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069n\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006et\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0045\u006c\u0065\u006d\u0050\u0072\u006fp\u0053e\u0074\u0020\u0025\u0076", _aaeab.Name)
				if _cecg := d.Skip(); _cecg != nil {
					return _cecg
				}
			}
		case _d.EndElement:
			break _aeff
		case _d.CharData:
		}
	}
	return nil
}
func (_agaad ST_ConstraintRelationship) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_acbc := _d.Attr{}
	_acbc.Name = name
	switch _agaad {
	case ST_ConstraintRelationshipUnset:
		_acbc.Value = ""
	case ST_ConstraintRelationshipSelf:
		_acbc.Value = "\u0073\u0065\u006c\u0066"
	case ST_ConstraintRelationshipCh:
		_acbc.Value = "\u0063\u0068"
	case ST_ConstraintRelationshipDes:
		_acbc.Value = "\u0064\u0065\u0073"
	}
	return _acbc, nil
}
func NewCT_ElemPropSet() *CT_ElemPropSet { _eddd := &CT_ElemPropSet{}; return _eddd }
func (_bffc ST_OutputShapeType) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_bffc.String(), start)
}
func (_acdea ST_ChildAlignment) String() string {
	switch _acdea {
	case 0:
		return ""
	case 1:
		return "\u0074"
	case 2:
		return "\u0062"
	case 3:
		return "\u006c"
	case 4:
		return "\u0072"
	}
	return ""
}
func (_fbag *LayoutDefHdrLst) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0078\u006d\u006cn\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0061"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0078\u006d\u006c\u006e\u0073\u003a\u0064\u0069"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0072"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"}, Value: "\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"})
	start.Name.Local = "\u006ca\u0079o\u0075\u0074\u0044\u0065\u0066\u0048\u0064\u0072\u004c\u0073\u0074"
	return _fbag.CT_DiagramDefinitionHeaderLst.MarshalXML(e, start)
}
func (_ceadc ST_PyramidAccentPosition) String() string {
	switch _ceadc {
	case 0:
		return ""
	case 1:
		return "\u0062\u0065\u0066"
	case 2:
		return "\u0061\u0066\u0074"
	}
	return ""
}
func (_cdddf ST_PyramidAccentTextMargin) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_eagb := _d.Attr{}
	_eagb.Name = name
	switch _cdddf {
	case ST_PyramidAccentTextMarginUnset:
		_eagb.Value = ""
	case ST_PyramidAccentTextMarginStep:
		_eagb.Value = "\u0073\u0074\u0065\u0070"
	case ST_PyramidAccentTextMarginStack:
		_eagb.Value = "\u0073\u0074\u0061c\u006b"
	}
	return _eagb, nil
}

type ST_VerticalAlignment byte
type ST_Breakpoint byte

func (_dbcbc ST_ChildOrderType) ValidateWithPath(path string) error {
	switch _dbcbc {
	case 0, 1, 2:
	default:
		return _f.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_dbcbc))
	}
	return nil
}
func NewCT_CTDescription() *CT_CTDescription { _bfc := &CT_CTDescription{}; return _bfc }
func (_acdeg ST_SecondaryChildAlignment) ValidateWithPath(path string) error {
	switch _acdeg {
	case 0, 1, 2, 3, 4, 5:
	default:
		return _f.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_acdeg))
	}
	return nil
}

type ST_PyramidAccentTextMargin byte

// Validate validates the CT_SDDescription and its children
func (_dcbff *CT_SDDescription) Validate() error {
	return _dcbff.ValidateWithPath("\u0043\u0054_\u0053\u0044\u0044e\u0073\u0063\u0072\u0069\u0070\u0074\u0069\u006f\u006e")
}

type CT_OrgChart struct{ ValAttr *bool }

// ValidateWithPath validates the CT_Otherwise and its children, prefixing error messages with path
func (_egfdd *CT_Otherwise) ValidateWithPath(path string) error {
	for _abcga, _aecc := range _egfdd.Alg {
		if _bdbc := _aecc.ValidateWithPath(_f.Sprintf("\u0025\u0073\u002f\u0041\u006c\u0067\u005b\u0025\u0064\u005d", path, _abcga)); _bdbc != nil {
			return _bdbc
		}
	}
	for _abeag, _bgdc := range _egfdd.Shape {
		if _egce := _bgdc.ValidateWithPath(_f.Sprintf("\u0025\u0073\u002fS\u0068\u0061\u0070\u0065\u005b\u0025\u0064\u005d", path, _abeag)); _egce != nil {
			return _egce
		}
	}
	for _egcf, _abfcf := range _egfdd.PresOf {
		if _ega := _abfcf.ValidateWithPath(_f.Sprintf("\u0025\u0073\u002f\u0050\u0072\u0065\u0073\u004f\u0066\u005b\u0025\u0064\u005d", path, _egcf)); _ega != nil {
			return _ega
		}
	}
	for _dbgbc, _ffaf := range _egfdd.ConstrLst {
		if _adfac := _ffaf.ValidateWithPath(_f.Sprintf("\u0025\u0073/\u0043\u006f\u006es\u0074\u0072\u004c\u0073\u0074\u005b\u0025\u0064\u005d", path, _dbgbc)); _adfac != nil {
			return _adfac
		}
	}
	for _fcde, _fbfc := range _egfdd.RuleLst {
		if _dcgf := _fbfc.ValidateWithPath(_f.Sprintf("\u0025\u0073\u002f\u0052\u0075\u006c\u0065\u004c\u0073t\u005b\u0025\u0064\u005d", path, _fcde)); _dcgf != nil {
			return _dcgf
		}
	}
	for _eafdd, _ebee := range _egfdd.ForEach {
		if _gafad := _ebee.ValidateWithPath(_f.Sprintf("\u0025\u0073\u002f\u0046\u006f\u0072\u0045\u0061\u0063h\u005b\u0025\u0064\u005d", path, _eafdd)); _gafad != nil {
			return _gafad
		}
	}
	for _ebcbd, _afgdg := range _egfdd.LayoutNode {
		if _bgbe := _afgdg.ValidateWithPath(_f.Sprintf("\u0025\u0073\u002f\u004c\u0061\u0079\u006f\u0075\u0074\u004e\u006f\u0064e\u005b\u0025\u0064\u005d", path, _ebcbd)); _bgbe != nil {
			return _bgbe
		}
	}
	for _ecbc, _fefb := range _egfdd.Choose {
		if _gbgee := _fefb.ValidateWithPath(_f.Sprintf("\u0025\u0073\u002f\u0043\u0068\u006f\u006f\u0073\u0065\u005b\u0025\u0064\u005d", path, _ecbc)); _gbgee != nil {
			return _gbgee
		}
	}
	for _fagd, _ggef := range _egfdd.ExtLst {
		if _aaaed := _ggef.ValidateWithPath(_f.Sprintf("\u0025\u0073\u002f\u0045\u0078\u0074\u004c\u0073\u0074\u005b\u0025\u0064\u005d", path, _fagd)); _aaaed != nil {
			return _aaaed
		}
	}
	return nil
}

// Validate validates the AG_ConstraintRefAttributes and its children
func (_bac *AG_ConstraintRefAttributes) Validate() error {
	return _bac.ValidateWithPath("\u0041\u0047\u005f\u0043\u006f\u006e\u0073\u0074\u0072\u0061\u0069n\u0074\u0052\u0065\u0066\u0041\u0074\u0074\u0072\u0069\u0062u\u0074\u0065\u0073")
}

type ST_UnsignedInts []uint32

func (_egbe *ST_PtType) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_egbe = 0
	case "\u006e\u006f\u0064\u0065":
		*_egbe = 1
	case "\u0061\u0073\u0073\u0074":
		*_egbe = 2
	case "\u0064\u006f\u0063":
		*_egbe = 3
	case "\u0070\u0072\u0065\u0073":
		*_egbe = 4
	case "\u0070\u0061\u0072\u0054\u0072\u0061\u006e\u0073":
		*_egbe = 5
	case "\u0073\u0069\u0062\u0054\u0072\u0061\u006e\u0073":
		*_egbe = 6
	}
	return nil
}
func (_cfbde ST_AnimOneStr) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_fdbfc := _d.Attr{}
	_fdbfc.Name = name
	switch _cfbde {
	case ST_AnimOneStrUnset:
		_fdbfc.Value = ""
	case ST_AnimOneStrNone:
		_fdbfc.Value = "\u006e\u006f\u006e\u0065"
	case ST_AnimOneStrOne:
		_fdbfc.Value = "\u006f\u006e\u0065"
	case ST_AnimOneStrBranch:
		_fdbfc.Value = "\u0062\u0072\u0061\u006e\u0063\u0068"
	}
	return _fdbfc, nil
}

type CT_AdjLst struct{ Adj []*CT_Adj }

func (_gfcd ST_DiagramTextAlignment) Validate() error { return _gfcd.ValidateWithPath("") }
func (_cbfdb ST_VariableType) Validate() error        { return _cbfdb.ValidateWithPath("") }
func (_eega *LayoutDefHdr) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_eega.CT_DiagramDefinitionHeader = *NewCT_DiagramDefinitionHeader()
	for _, _adcc := range start.Attr {
		if _adcc.Name.Local == "\u0075\u006e\u0069\u0071\u0075\u0065\u0049\u0064" {
			_bggd, _becbd := _adcc.Value, error(nil)
			if _becbd != nil {
				return _becbd
			}
			_eega.UniqueIdAttr = _bggd
			continue
		}
		if _adcc.Name.Local == "\u006d\u0069\u006e\u0056\u0065\u0072" {
			_aegb, _ffacc := _adcc.Value, error(nil)
			if _ffacc != nil {
				return _ffacc
			}
			_eega.MinVerAttr = &_aegb
			continue
		}
		if _adcc.Name.Local == "\u0064\u0065\u0066\u0053\u0074\u0079\u006c\u0065" {
			_dbag, _fcce := _adcc.Value, error(nil)
			if _fcce != nil {
				return _fcce
			}
			_eega.DefStyleAttr = &_dbag
			continue
		}
		if _adcc.Name.Local == "\u0072\u0065\u0073I\u0064" {
			_fdbe, _cged := _gb.ParseInt(_adcc.Value, 10, 32)
			if _cged != nil {
				return _cged
			}
			_bgae := int32(_fdbe)
			_eega.ResIdAttr = &_bgae
			continue
		}
	}
_gcbae:
	for {
		_dbaa, _abda := d.Token()
		if _abda != nil {
			return _abda
		}
		switch _cfdf := _dbaa.(type) {
		case _d.StartElement:
			switch _cfdf.Name {
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0074\u0069\u0074l\u0065"}:
				_bbda := NewCT_Name()
				if _ddce := d.DecodeElement(_bbda, &_cfdf); _ddce != nil {
					return _ddce
				}
				_eega.Title = append(_eega.Title, _bbda)
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0064\u0065\u0073\u0063"}:
				_agabf := NewCT_Description()
				if _adedc := d.DecodeElement(_agabf, &_cfdf); _adedc != nil {
					return _adedc
				}
				_eega.Desc = append(_eega.Desc, _agabf)
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0061\u0074\u004c\u0073\u0074"}:
				_eega.CatLst = NewCT_Categories()
				if _abacg := d.DecodeElement(_eega.CatLst, &_cfdf); _abacg != nil {
					return _abacg
				}
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_eega.ExtLst = _bc.NewCT_OfficeArtExtensionList()
				if _bcfe := d.DecodeElement(_eega.ExtLst, &_cfdf); _bcfe != nil {
					return _bcfe
				}
			default:
				_b.Log.Debug("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075n\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u004c\u0061yo\u0075\u0074D\u0065\u0066\u0048\u0064\u0072\u0020\u0025\u0076", _cfdf.Name)
				if _ebceb := d.Skip(); _ebceb != nil {
					return _ebceb
				}
			}
		case _d.EndElement:
			break _gcbae
		case _d.CharData:
		}
	}
	return nil
}
func (_adf *CT_CTCategory) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _ggc := range start.Attr {
		if _ggc.Name.Local == "\u0074\u0079\u0070\u0065" {
			_gdd, _aeda := _ggc.Value, error(nil)
			if _aeda != nil {
				return _aeda
			}
			_adf.TypeAttr = _gdd
			continue
		}
		if _ggc.Name.Local == "\u0070\u0072\u0069" {
			_dgf, _dad := _gb.ParseUint(_ggc.Value, 10, 32)
			if _dad != nil {
				return _dad
			}
			_adf.PriAttr = uint32(_dgf)
			continue
		}
	}
	for {
		_eddb, _caf := d.Token()
		if _caf != nil {
			return _f.Errorf("\u0070a\u0072\u0073\u0069\u006eg\u0020\u0043\u0054\u005f\u0043T\u0043a\u0074e\u0067\u006f\u0072\u0079\u003a\u0020\u0025s", _caf)
		}
		if _adca, _efdf := _eddb.(_d.EndElement); _efdf && _adca.Name == start.Name {
			break
		}
	}
	return nil
}

// Validate validates the CT_CTStyleLabel and its children
func (_ceae *CT_CTStyleLabel) Validate() error {
	return _ceae.ValidateWithPath("\u0043T\u005fC\u0054\u0053\u0074\u0079\u006c\u0065\u004c\u0061\u0062\u0065\u006c")
}
func (_egaaa *ST_SecondaryChildAlignment) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_gfbfg, _aegc := d.Token()
	if _aegc != nil {
		return _aegc
	}
	if _eafeg, _daaa := _gfbfg.(_d.EndElement); _daaa && _eafeg.Name == start.Name {
		*_egaaa = 1
		return nil
	}
	if _dgdd, _deff := _gfbfg.(_d.CharData); !_deff {
		return _f.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _gfbfg)
	} else {
		switch string(_dgdd) {
		case "":
			*_egaaa = 0
		case "\u006e\u006f\u006e\u0065":
			*_egaaa = 1
		case "\u0074":
			*_egaaa = 2
		case "\u0062":
			*_egaaa = 3
		case "\u006c":
			*_egaaa = 4
		case "\u0072":
			*_egaaa = 5
		}
	}
	_gfbfg, _aegc = d.Token()
	if _aegc != nil {
		return _aegc
	}
	if _bfef, _gedea := _gfbfg.(_d.EndElement); _gedea && _bfef.Name == start.Name {
		return nil
	}
	return _f.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _gfbfg)
}
func (_baaba ST_GrowDirection) ValidateWithPath(path string) error {
	switch _baaba {
	case 0, 1, 2, 3, 4:
	default:
		return _f.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_baaba))
	}
	return nil
}
func (_dgfc *CT_PtList) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_ecac:
	for {
		_efage, _bfbe := d.Token()
		if _bfbe != nil {
			return _bfbe
		}
		switch _bfcd := _efage.(type) {
		case _d.StartElement:
			switch _bfcd.Name {
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0070\u0074"}:
				_ddgb := NewCT_Pt()
				if _fabc := d.DecodeElement(_ddgb, &_bfcd); _fabc != nil {
					return _fabc
				}
				_dgfc.Pt = append(_dgfc.Pt, _ddgb)
			default:
				_b.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u0050\u0074\u004ci\u0073\u0074 \u0025\u0076", _bfcd.Name)
				if _gffa := d.Skip(); _gffa != nil {
					return _gffa
				}
			}
		case _d.EndElement:
			break _ecac
		case _d.CharData:
		}
	}
	return nil
}
func (_afeb *CT_DiagramDefinition) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_afeb.LayoutNode = NewCT_LayoutNode()
	for _, _bdf := range start.Attr {
		if _bdf.Name.Local == "\u0075\u006e\u0069\u0071\u0075\u0065\u0049\u0064" {
			_ffaa, _dbge := _bdf.Value, error(nil)
			if _dbge != nil {
				return _dbge
			}
			_afeb.UniqueIdAttr = &_ffaa
			continue
		}
		if _bdf.Name.Local == "\u006d\u0069\u006e\u0056\u0065\u0072" {
			_daeb, _ffdc := _bdf.Value, error(nil)
			if _ffdc != nil {
				return _ffdc
			}
			_afeb.MinVerAttr = &_daeb
			continue
		}
		if _bdf.Name.Local == "\u0064\u0065\u0066\u0053\u0074\u0079\u006c\u0065" {
			_fged, _geg := _bdf.Value, error(nil)
			if _geg != nil {
				return _geg
			}
			_afeb.DefStyleAttr = &_fged
			continue
		}
	}
_beae:
	for {
		_cbed, _dada := d.Token()
		if _dada != nil {
			return _dada
		}
		switch _afad := _cbed.(type) {
		case _d.StartElement:
			switch _afad.Name {
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0074\u0069\u0074l\u0065"}:
				_deda := NewCT_Name()
				if _cfgdf := d.DecodeElement(_deda, &_afad); _cfgdf != nil {
					return _cfgdf
				}
				_afeb.Title = append(_afeb.Title, _deda)
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0064\u0065\u0073\u0063"}:
				_efge := NewCT_Description()
				if _bafa := d.DecodeElement(_efge, &_afad); _bafa != nil {
					return _bafa
				}
				_afeb.Desc = append(_afeb.Desc, _efge)
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0061\u0074\u004c\u0073\u0074"}:
				_afeb.CatLst = NewCT_Categories()
				if _egee := d.DecodeElement(_afeb.CatLst, &_afad); _egee != nil {
					return _egee
				}
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0073\u0061\u006d\u0070\u0044\u0061\u0074\u0061"}:
				_afeb.SampData = NewCT_SampleData()
				if _ggea := d.DecodeElement(_afeb.SampData, &_afad); _ggea != nil {
					return _ggea
				}
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0073t\u0079\u006c\u0065\u0044\u0061\u0074a"}:
				_afeb.StyleData = NewCT_SampleData()
				if _egd := d.DecodeElement(_afeb.StyleData, &_afad); _egd != nil {
					return _egd
				}
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063l\u0072\u0044\u0061\u0074\u0061"}:
				_afeb.ClrData = NewCT_SampleData()
				if _dbf := d.DecodeElement(_afeb.ClrData, &_afad); _dbf != nil {
					return _dbf
				}
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u006c\u0061\u0079\u006f\u0075\u0074\u004e\u006f\u0064\u0065"}:
				if _dbgba := d.DecodeElement(_afeb.LayoutNode, &_afad); _dbgba != nil {
					return _dbgba
				}
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_afeb.ExtLst = _bc.NewCT_OfficeArtExtensionList()
				if _dda := d.DecodeElement(_afeb.ExtLst, &_afad); _dda != nil {
					return _dda
				}
			default:
				_b.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006eg\u0020\u0075\u006es\u0075\u0070\u0070o\u0072\u0074e\u0064\u0020\u0065\u006c\u0065\u006de\u006et \u006f\u006e\u0020\u0043\u0054\u005f\u0044\u0069\u0061\u0067\u0072\u0061\u006d\u0044\u0065\u0066\u0069\u006e\u0069\u0074\u0069\u006f\u006e\u0020\u0025\u0076", _afad.Name)
				if _fgd := d.Skip(); _fgd != nil {
					return _fgd
				}
			}
		case _d.EndElement:
			break _beae
		case _d.CharData:
		}
	}
	return nil
}
func (_ddeg ST_AlgorithmType) ValidateWithPath(path string) error {
	switch _ddeg {
	case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10:
	default:
		return _f.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_ddeg))
	}
	return nil
}
func (_aefff ST_FunctionType) String() string {
	switch _aefff {
	case 0:
		return ""
	case 1:
		return "\u0063\u006e\u0074"
	case 2:
		return "\u0070\u006f\u0073"
	case 3:
		return "\u0072\u0065\u0076\u0050\u006f\u0073"
	case 4:
		return "\u0070o\u0073\u0045\u0076\u0065\u006e"
	case 5:
		return "\u0070\u006f\u0073\u004f\u0064\u0064"
	case 6:
		return "\u0076\u0061\u0072"
	case 7:
		return "\u0064\u0065\u0070t\u0068"
	case 8:
		return "\u006d\u0061\u0078\u0044\u0065\u0070\u0074\u0068"
	}
	return ""
}

type ST_FallbackDimension byte

func (_egca *CT_Parameter) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_egca.TypeAttr = ST_ParameterId(1)
	for _, _bggbb := range start.Attr {
		if _bggbb.Name.Local == "\u0074\u0079\u0070\u0065" {
			_egca.TypeAttr.UnmarshalXMLAttr(_bggbb)
			continue
		}
		if _bggbb.Name.Local == "\u0076\u0061\u006c" {
			_fdcfg, _ccab := ParseUnionST_ParameterVal(_bggbb.Value)
			if _ccab != nil {
				return _ccab
			}
			_egca.ValAttr = _fdcfg
			continue
		}
	}
	for {
		_adfaa, _gded := d.Token()
		if _gded != nil {
			return _f.Errorf("\u0070a\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005f\u0050\u0061r\u0061\u006d\u0065\u0074\u0065\u0072\u003a\u0020\u0025\u0073", _gded)
		}
		if _ggbg, _gcgad := _adfaa.(_d.EndElement); _gcgad && _ggbg.Name == start.Name {
			break
		}
	}
	return nil
}

// ValidateWithPath validates the CT_SDName and its children, prefixing error messages with path
func (_cdfcc *CT_SDName) ValidateWithPath(path string) error { return nil }
func (_afagd *ST_LinearDirection) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_fgedb, _ccca := d.Token()
	if _ccca != nil {
		return _ccca
	}
	if _eegff, _feda := _fgedb.(_d.EndElement); _feda && _eegff.Name == start.Name {
		*_afagd = 1
		return nil
	}
	if _caccd, _dgacf := _fgedb.(_d.CharData); !_dgacf {
		return _f.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _fgedb)
	} else {
		switch string(_caccd) {
		case "":
			*_afagd = 0
		case "\u0066\u0072\u006fm\u004c":
			*_afagd = 1
		case "\u0066\u0072\u006fm\u0052":
			*_afagd = 2
		case "\u0066\u0072\u006fm\u0054":
			*_afagd = 3
		case "\u0066\u0072\u006fm\u0042":
			*_afagd = 4
		}
	}
	_fgedb, _ccca = d.Token()
	if _ccca != nil {
		return _ccca
	}
	if _cefe, _fgddf := _fgedb.(_d.EndElement); _fgddf && _cefe.Name == start.Name {
		return nil
	}
	return _f.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _fgedb)
}

type ST_OutputShapeType byte

// ValidateWithPath validates the CT_Adj and its children, prefixing error messages with path
func (_eaa *CT_Adj) ValidateWithPath(path string) error {
	if _eaa.IdxAttr < 1 {
		return _f.Errorf("%\u0073\u002f\u006d\u002e\u0049\u0064x\u0041\u0074\u0074\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u003e=\u0020\u0031\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, _eaa.IdxAttr)
	}
	return nil
}
func (_eccff ST_HierBranchStyle) String() string {
	switch _eccff {
	case 0:
		return ""
	case 1:
		return "\u006c"
	case 2:
		return "\u0072"
	case 3:
		return "\u0068\u0061\u006e\u0067"
	case 4:
		return "\u0073\u0074\u0064"
	case 5:
		return "\u0069\u006e\u0069\u0074"
	}
	return ""
}
func (_eag *CT_AnimLvl) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _eag.ValAttr != ST_AnimLvlStrUnset {
		_dba, _gd := _eag.ValAttr.MarshalXMLAttr(_d.Name{Local: "\u0076\u0061\u006c"})
		if _gd != nil {
			return _gd
		}
		start.Attr = append(start.Attr, _dba)
	}
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

const (
	ST_AutoTextRotationUnset ST_AutoTextRotation = 0
	ST_AutoTextRotationNone  ST_AutoTextRotation = 1
	ST_AutoTextRotationUpr   ST_AutoTextRotation = 2
	ST_AutoTextRotationGrav  ST_AutoTextRotation = 3
)

// Validate validates the CT_SDName and its children
func (_facdc *CT_SDName) Validate() error {
	return _facdc.ValidateWithPath("\u0043T\u005f\u0053\u0044\u004e\u0061\u006de")
}
func (_abgcb ST_VariableType) ValidateWithPath(path string) error {
	switch _abgcb {
	case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10:
	default:
		return _f.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_abgcb))
	}
	return nil
}
func NewCT_CTCategory() *CT_CTCategory { _bbc := &CT_CTCategory{}; return _bbc }
func (_efcfc *CT_TextProps) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _efcfc.Sp3d != nil {
		_abgc := _d.StartElement{Name: _d.Name{Local: "\u0073\u0070\u0033\u0064"}}
		e.EncodeElement(_efcfc.Sp3d, _abgc)
	}
	if _efcfc.FlatTx != nil {
		_ffac := _d.StartElement{Name: _d.Name{Local: "\u0066\u006c\u0061\u0074\u0054\u0078"}}
		e.EncodeElement(_efcfc.FlatTx, _ffac)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_dgbfd ST_Breakpoint) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_cafb := _d.Attr{}
	_cafb.Name = name
	switch _dgbfd {
	case ST_BreakpointUnset:
		_cafb.Value = ""
	case ST_BreakpointEndCnv:
		_cafb.Value = "\u0065\u006e\u0064\u0043\u006e\u0076"
	case ST_BreakpointBal:
		_cafb.Value = "\u0062\u0061\u006c"
	case ST_BreakpointFixed:
		_cafb.Value = "\u0066\u0069\u0078e\u0064"
	}
	return _cafb, nil
}

// Validate validates the CT_Constraint and its children
func (_dbgd *CT_Constraint) Validate() error {
	return _dbgd.ValidateWithPath("\u0043\u0054\u005f\u0043\u006f\u006e\u0073\u0074\u0072\u0061\u0069\u006e\u0074")
}

type CT_ColorTransformHeader struct {
	UniqueIdAttr string
	MinVerAttr   *string
	ResIdAttr    *int32
	Title        []*CT_CTName
	Desc         []*CT_CTDescription
	CatLst       *CT_CTCategories
	ExtLst       *_bc.CT_OfficeArtExtensionList
}

func (_cfbec *ST_ConnectorDimension) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_cbdcc, _fggb := d.Token()
	if _fggb != nil {
		return _fggb
	}
	if _gcgdb, _cfbcg := _cbdcc.(_d.EndElement); _cfbcg && _gcgdb.Name == start.Name {
		*_cfbec = 1
		return nil
	}
	if _bafgg, _edeaca := _cbdcc.(_d.CharData); !_edeaca {
		return _f.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _cbdcc)
	} else {
		switch string(_bafgg) {
		case "":
			*_cfbec = 0
		case "\u0031\u0044":
			*_cfbec = 1
		case "\u0032\u0044":
			*_cfbec = 2
		case "\u0063\u0075\u0073\u0074":
			*_cfbec = 3
		}
	}
	_cbdcc, _fggb = d.Token()
	if _fggb != nil {
		return _fggb
	}
	if _gaae, _agfbf := _cbdcc.(_d.EndElement); _agfbf && _gaae.Name == start.Name {
		return nil
	}
	return _f.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _cbdcc)
}

// ValidateWithPath validates the CT_When and its children, prefixing error messages with path
func (_fcdfa *CT_When) ValidateWithPath(path string) error {
	if _fcdfa.FuncAttr == ST_FunctionTypeUnset {
		return _f.Errorf("\u0025\u0073\u002f\u0046\u0075\u006e\u0063\u0041\u0074\u0074\u0072\u0020\u0069\u0073\u0020a\u0020m\u0061\u006e\u0064\u0061\u0074\u006f\u0072\u0079\u0020\u0066\u0069\u0065\u006c\u0064", path)
	}
	if _afefe := _fcdfa.FuncAttr.ValidateWithPath(path + "\u002fF\u0075\u006e\u0063\u0041\u0074\u0074r"); _afefe != nil {
		return _afefe
	}
	if _fcdfa.ArgAttr != nil {
		if _eafg := _fcdfa.ArgAttr.ValidateWithPath(path + "\u002f\u0041\u0072\u0067\u0041\u0074\u0074\u0072"); _eafg != nil {
			return _eafg
		}
	}
	if _fcdfa.OpAttr == ST_FunctionOperatorUnset {
		return _f.Errorf("\u0025\u0073\u002f\u004f\u0070\u0041\u0074\u0074\u0072\u0020i\u0073\u0020\u0061\u0020\u006d\u0061\u006ed\u0061\u0074\u006f\u0072\u0079\u0020\u0066\u0069\u0065\u006c\u0064", path)
	}
	if _egfc := _fcdfa.OpAttr.ValidateWithPath(path + "\u002fO\u0070\u0041\u0074\u0074\u0072"); _egfc != nil {
		return _egfc
	}
	if _afgc := _fcdfa.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _afgc != nil {
		return _afgc
	}
	for _bba, _egfda := range _fcdfa.Alg {
		if _cbgd := _egfda.ValidateWithPath(_f.Sprintf("\u0025\u0073\u002f\u0041\u006c\u0067\u005b\u0025\u0064\u005d", path, _bba)); _cbgd != nil {
			return _cbgd
		}
	}
	for _fgbd, _dagf := range _fcdfa.Shape {
		if _aabd := _dagf.ValidateWithPath(_f.Sprintf("\u0025\u0073\u002fS\u0068\u0061\u0070\u0065\u005b\u0025\u0064\u005d", path, _fgbd)); _aabd != nil {
			return _aabd
		}
	}
	for _acbfg, _faeag := range _fcdfa.PresOf {
		if _abdcb := _faeag.ValidateWithPath(_f.Sprintf("\u0025\u0073\u002f\u0050\u0072\u0065\u0073\u004f\u0066\u005b\u0025\u0064\u005d", path, _acbfg)); _abdcb != nil {
			return _abdcb
		}
	}
	for _bcaea, _cacfc := range _fcdfa.ConstrLst {
		if _bfeg := _cacfc.ValidateWithPath(_f.Sprintf("\u0025\u0073/\u0043\u006f\u006es\u0074\u0072\u004c\u0073\u0074\u005b\u0025\u0064\u005d", path, _bcaea)); _bfeg != nil {
			return _bfeg
		}
	}
	for _ebge, _gdda := range _fcdfa.RuleLst {
		if _abac := _gdda.ValidateWithPath(_f.Sprintf("\u0025\u0073\u002f\u0052\u0075\u006c\u0065\u004c\u0073t\u005b\u0025\u0064\u005d", path, _ebge)); _abac != nil {
			return _abac
		}
	}
	for _fdcd, _adfgb := range _fcdfa.ForEach {
		if _cecfg := _adfgb.ValidateWithPath(_f.Sprintf("\u0025\u0073\u002f\u0046\u006f\u0072\u0045\u0061\u0063h\u005b\u0025\u0064\u005d", path, _fdcd)); _cecfg != nil {
			return _cecfg
		}
	}
	for _fbgc, _afdf := range _fcdfa.LayoutNode {
		if _fdbf := _afdf.ValidateWithPath(_f.Sprintf("\u0025\u0073\u002f\u004c\u0061\u0079\u006f\u0075\u0074\u004e\u006f\u0064e\u005b\u0025\u0064\u005d", path, _fbgc)); _fdbf != nil {
			return _fdbf
		}
	}
	for _fadbfb, _abbg := range _fcdfa.Choose {
		if _ffdcf := _abbg.ValidateWithPath(_f.Sprintf("\u0025\u0073\u002f\u0043\u0068\u006f\u006f\u0073\u0065\u005b\u0025\u0064\u005d", path, _fadbfb)); _ffdcf != nil {
			return _ffdcf
		}
	}
	for _eege, _cdfb := range _fcdfa.ExtLst {
		if _aafe := _cdfb.ValidateWithPath(_f.Sprintf("\u0025\u0073\u002f\u0045\u0078\u0074\u004c\u0073\u0074\u005b\u0025\u0064\u005d", path, _eege)); _aafe != nil {
			return _aafe
		}
	}
	return nil
}

type ST_HueDir byte

func (_fceee ST_NodeVerticalAlignment) String() string {
	switch _fceee {
	case 0:
		return ""
	case 1:
		return "\u0074"
	case 2:
		return "\u006d\u0069\u0064"
	case 3:
		return "\u0062"
	}
	return ""
}

// ValidateWithPath validates the AG_ConstraintAttributes and its children, prefixing error messages with path
func (_cg *AG_ConstraintAttributes) ValidateWithPath(path string) error {
	if _eg := _cg.TypeAttr.ValidateWithPath(path + "\u002fT\u0079\u0070\u0065\u0041\u0074\u0074r"); _eg != nil {
		return _eg
	}
	if _aea := _cg.ForAttr.ValidateWithPath(path + "\u002f\u0046\u006f\u0072\u0041\u0074\u0074\u0072"); _aea != nil {
		return _aea
	}
	if _ag := _cg.PtTypeAttr.ValidateWithPath(path + "/\u0050\u0074\u0054\u0079\u0070\u0065\u0041\u0074\u0074\u0072"); _ag != nil {
		return _ag
	}
	return nil
}
func (_fbbbe ST_StartingElement) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_fbbbe.String(), start)
}
func (_gdfa ST_ChildOrderType) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_gdfa.String(), start)
}

const (
	ST_ConnectorRoutingUnset     ST_ConnectorRouting = 0
	ST_ConnectorRoutingStra      ST_ConnectorRouting = 1
	ST_ConnectorRoutingBend      ST_ConnectorRouting = 2
	ST_ConnectorRoutingCurve     ST_ConnectorRouting = 3
	ST_ConnectorRoutingLongCurve ST_ConnectorRouting = 4
)

func (_efggc *ST_ConnectorDimension) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_efggc = 0
	case "\u0031\u0044":
		*_efggc = 1
	case "\u0032\u0044":
		*_efggc = 2
	case "\u0063\u0075\u0073\u0074":
		*_efggc = 3
	}
	return nil
}
func (_ddc *CT_CTDescription) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _ddc.LangAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u006c\u0061\u006e\u0067"}, Value: _f.Sprintf("\u0025\u0076", *_ddc.LangAttr)})
	}
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0076\u0061\u006c"}, Value: _f.Sprintf("\u0025\u0076", _ddc.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func NewCT_AnimLvl() *CT_AnimLvl { _bff := &CT_AnimLvl{}; return _bff }

const (
	ST_FunctionTypeUnset    ST_FunctionType = 0
	ST_FunctionTypeCnt      ST_FunctionType = 1
	ST_FunctionTypePos      ST_FunctionType = 2
	ST_FunctionTypeRevPos   ST_FunctionType = 3
	ST_FunctionTypePosEven  ST_FunctionType = 4
	ST_FunctionTypePosOdd   ST_FunctionType = 5
	ST_FunctionTypeVar      ST_FunctionType = 6
	ST_FunctionTypeDepth    ST_FunctionType = 7
	ST_FunctionTypeMaxDepth ST_FunctionType = 8
)

func (_dccd *ST_FallbackDimension) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_dccd = 0
	case "\u0031\u0044":
		*_dccd = 1
	case "\u0032\u0044":
		*_dccd = 2
	}
	return nil
}
func NewCT_PresentationOf() *CT_PresentationOf { _dbgc := &CT_PresentationOf{}; return _dbgc }
func NewCT_Direction() *CT_Direction           { _eeba := &CT_Direction{}; return _eeba }

type ST_FlowDirection byte

func (_aacga ST_ContinueDirection) String() string {
	switch _aacga {
	case 0:
		return ""
	case 1:
		return "\u0072\u0065\u0076\u0044\u0069\u0072"
	case 2:
		return "\u0073a\u006d\u0065\u0044\u0069\u0072"
	}
	return ""
}
func (_cffg *ST_HierarchyAlignment) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_aeea, _cfdcc := d.Token()
	if _cfdcc != nil {
		return _cfdcc
	}
	if _adgb, _aeaa := _aeea.(_d.EndElement); _aeaa && _adgb.Name == start.Name {
		*_cffg = 1
		return nil
	}
	if _fgee, _efefb := _aeea.(_d.CharData); !_efefb {
		return _f.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _aeea)
	} else {
		switch string(_fgee) {
		case "":
			*_cffg = 0
		case "\u0074\u004c":
			*_cffg = 1
		case "\u0074\u0052":
			*_cffg = 2
		case "\u0074\u0043\u0074\u0072\u0043\u0068":
			*_cffg = 3
		case "\u0074C\u0074\u0072\u0044\u0065\u0073":
			*_cffg = 4
		case "\u0062\u004c":
			*_cffg = 5
		case "\u0062\u0052":
			*_cffg = 6
		case "\u0062\u0043\u0074\u0072\u0043\u0068":
			*_cffg = 7
		case "\u0062C\u0074\u0072\u0044\u0065\u0073":
			*_cffg = 8
		case "\u006c\u0054":
			*_cffg = 9
		case "\u006c\u0042":
			*_cffg = 10
		case "\u006c\u0043\u0074\u0072\u0043\u0068":
			*_cffg = 11
		case "\u006cC\u0074\u0072\u0044\u0065\u0073":
			*_cffg = 12
		case "\u0072\u0054":
			*_cffg = 13
		case "\u0072\u0042":
			*_cffg = 14
		case "\u0072\u0043\u0074\u0072\u0043\u0068":
			*_cffg = 15
		case "\u0072C\u0074\u0072\u0044\u0065\u0073":
			*_cffg = 16
		}
	}
	_aeea, _cfdcc = d.Token()
	if _cfdcc != nil {
		return _cfdcc
	}
	if _bbgf, _gdee := _aeea.(_d.EndElement); _gdee && _bbgf.Name == start.Name {
		return nil
	}
	return _f.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _aeea)
}

type ST_AxisTypes []ST_AxisType

func (_agbed ST_Offset) ValidateWithPath(path string) error {
	switch _agbed {
	case 0, 1, 2:
	default:
		return _f.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_agbed))
	}
	return nil
}
func (_feegb *ST_TextDirection) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_feegb = 0
	case "\u0066\u0072\u006fm\u0054":
		*_feegb = 1
	case "\u0066\u0072\u006fm\u0042":
		*_feegb = 2
	}
	return nil
}
func (_bdddg *ST_TextBlockDirection) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_bdddg = 0
	case "\u0068\u006f\u0072\u007a":
		*_bdddg = 1
	case "\u0076\u0065\u0072\u0074":
		*_bdddg = 2
	}
	return nil
}
func (_ggfab *ST_FlowDirection) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_ggfab = 0
	case "\u0072\u006f\u0077":
		*_ggfab = 1
	case "\u0063\u006f\u006c":
		*_ggfab = 2
	}
	return nil
}
func NewCT_ColorTransformHeaderLst() *CT_ColorTransformHeaderLst {
	_bbcb := &CT_ColorTransformHeaderLst{}
	return _bbcb
}
func (_bfd *CT_DiagramDefinitionHeader) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0075\u006e\u0069\u0071\u0075\u0065\u0049\u0064"}, Value: _f.Sprintf("\u0025\u0076", _bfd.UniqueIdAttr)})
	if _bfd.MinVerAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u006d\u0069\u006e\u0056\u0065\u0072"}, Value: _f.Sprintf("\u0025\u0076", *_bfd.MinVerAttr)})
	}
	if _bfd.DefStyleAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0064\u0065\u0066\u0053\u0074\u0079\u006c\u0065"}, Value: _f.Sprintf("\u0025\u0076", *_bfd.DefStyleAttr)})
	}
	if _bfd.ResIdAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0072\u0065\u0073I\u0064"}, Value: _f.Sprintf("\u0025\u0076", *_bfd.ResIdAttr)})
	}
	e.EncodeToken(start)
	_ceb := _d.StartElement{Name: _d.Name{Local: "\u0074\u0069\u0074l\u0065"}}
	for _, _fecg := range _bfd.Title {
		e.EncodeElement(_fecg, _ceb)
	}
	_fdde := _d.StartElement{Name: _d.Name{Local: "\u0064\u0065\u0073\u0063"}}
	for _, _deccd := range _bfd.Desc {
		e.EncodeElement(_deccd, _fdde)
	}
	if _bfd.CatLst != nil {
		_edae := _d.StartElement{Name: _d.Name{Local: "\u0063\u0061\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_bfd.CatLst, _edae)
	}
	if _bfd.ExtLst != nil {
		_egbf := _d.StartElement{Name: _d.Name{Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_bfd.ExtLst, _egbf)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

type ST_ElementType byte

func (_ebgd *ST_FunctionOperator) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_agec, _gfbcf := d.Token()
	if _gfbcf != nil {
		return _gfbcf
	}
	if _dgce, _eecec := _agec.(_d.EndElement); _eecec && _dgce.Name == start.Name {
		*_ebgd = 1
		return nil
	}
	if _cfdff, _bddg := _agec.(_d.CharData); !_bddg {
		return _f.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _agec)
	} else {
		switch string(_cfdff) {
		case "":
			*_ebgd = 0
		case "\u0065\u0071\u0075":
			*_ebgd = 1
		case "\u006e\u0065\u0071":
			*_ebgd = 2
		case "\u0067\u0074":
			*_ebgd = 3
		case "\u006c\u0074":
			*_ebgd = 4
		case "\u0067\u0074\u0065":
			*_ebgd = 5
		case "\u006c\u0074\u0065":
			*_ebgd = 6
		}
	}
	_agec, _gfbcf = d.Token()
	if _gfbcf != nil {
		return _gfbcf
	}
	if _eegg, _efggg := _agec.(_d.EndElement); _efggg && _eegg.Name == start.Name {
		return nil
	}
	return _f.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _agec)
}
func (_gceeg ST_NodeVerticalAlignment) Validate() error { return _gceeg.ValidateWithPath("") }

type ST_NodeVerticalAlignment byte

func (_bdbd *CT_CTStyleLabel) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _egfbb := range start.Attr {
		if _egfbb.Name.Local == "\u006e\u0061\u006d\u0065" {
			_bbd, _gfeb := _egfbb.Value, error(nil)
			if _gfeb != nil {
				return _gfeb
			}
			_bdbd.NameAttr = _bbd
			continue
		}
	}
_gaf:
	for {
		_bde, _deg := d.Token()
		if _deg != nil {
			return _deg
		}
		switch _cbe := _bde.(type) {
		case _d.StartElement:
			switch _cbe.Name {
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0066\u0069\u006c\u006c\u0043\u006c\u0072\u004c\u0073\u0074"}:
				_bdbd.FillClrLst = NewCT_Colors()
				if _cfe := d.DecodeElement(_bdbd.FillClrLst, &_cbe); _cfe != nil {
					return _cfe
				}
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u006ci\u006e\u0043\u006c\u0072\u004c\u0073t"}:
				_bdbd.LinClrLst = NewCT_Colors()
				if _gcfg := d.DecodeElement(_bdbd.LinClrLst, &_cbe); _gcfg != nil {
					return _gcfg
				}
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0066\u0066e\u0063\u0074\u0043\u006c\u0072\u004c\u0073\u0074"}:
				_bdbd.EffectClrLst = NewCT_Colors()
				if _dde := d.DecodeElement(_bdbd.EffectClrLst, &_cbe); _dde != nil {
					return _dde
				}
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "t\u0078\u004c\u0069\u006e\u0043\u006c\u0072\u004c\u0073\u0074"}:
				_bdbd.TxLinClrLst = NewCT_Colors()
				if _dbac := d.DecodeElement(_bdbd.TxLinClrLst, &_cbe); _dbac != nil {
					return _dbac
				}
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0074\u0078\u0046i\u006c\u006c\u0043\u006c\u0072\u004c\u0073\u0074"}:
				_bdbd.TxFillClrLst = NewCT_Colors()
				if _gcb := d.DecodeElement(_bdbd.TxFillClrLst, &_cbe); _gcb != nil {
					return _gcb
				}
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0074\u0078\u0045\u0066\u0066\u0065\u0063\u0074\u0043l\u0072\u004c\u0073\u0074"}:
				_bdbd.TxEffectClrLst = NewCT_Colors()
				if _agdb := d.DecodeElement(_bdbd.TxEffectClrLst, &_cbe); _agdb != nil {
					return _agdb
				}
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_bdbd.ExtLst = _bc.NewCT_OfficeArtExtensionList()
				if _agga := d.DecodeElement(_bdbd.ExtLst, &_cbe); _agga != nil {
					return _agga
				}
			default:
				_b.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074e\u0064\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0043\u0054\u0053t\u0079\u006c\u0065\u004c\u0061\u0062\u0065\u006c\u0020\u0025\u0076", _cbe.Name)
				if _aca := d.Skip(); _aca != nil {
					return _aca
				}
			}
		case _d.EndElement:
			break _gaf
		case _d.CharData:
		}
	}
	return nil
}

type CT_ColorTransform struct {
	UniqueIdAttr *string
	MinVerAttr   *string
	Title        []*CT_CTName
	Desc         []*CT_CTDescription
	CatLst       *CT_CTCategories
	StyleLbl     []*CT_CTStyleLabel
	ExtLst       *_bc.CT_OfficeArtExtensionList
}

// ValidateWithPath validates the CT_Parameter and its children, prefixing error messages with path
func (_cfag *CT_Parameter) ValidateWithPath(path string) error {
	if _cfag.TypeAttr == ST_ParameterIdUnset {
		return _f.Errorf("\u0025\u0073\u002f\u0054\u0079\u0070\u0065\u0041\u0074\u0074\u0072\u0020\u0069\u0073\u0020a\u0020m\u0061\u006e\u0064\u0061\u0074\u006f\u0072\u0079\u0020\u0066\u0069\u0065\u006c\u0064", path)
	}
	if _gfge := _cfag.TypeAttr.ValidateWithPath(path + "\u002fT\u0079\u0070\u0065\u0041\u0074\u0074r"); _gfge != nil {
		return _gfge
	}
	if _gcaef := _cfag.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _gcaef != nil {
		return _gcaef
	}
	return nil
}
func NewCT_LayoutVariablePropertySet() *CT_LayoutVariablePropertySet {
	_ebgc := &CT_LayoutVariablePropertySet{}
	return _ebgc
}
func (_gcbfe *ST_BoolOperator) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_ggdb, _gdgd := d.Token()
	if _gdgd != nil {
		return _gdgd
	}
	if _gdfe, _gefae := _ggdb.(_d.EndElement); _gefae && _gdfe.Name == start.Name {
		*_gcbfe = 1
		return nil
	}
	if _dbffe, _facdcc := _ggdb.(_d.CharData); !_facdcc {
		return _f.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _ggdb)
	} else {
		switch string(_dbffe) {
		case "":
			*_gcbfe = 0
		case "\u006e\u006f\u006e\u0065":
			*_gcbfe = 1
		case "\u0065\u0071\u0075":
			*_gcbfe = 2
		case "\u0067\u0074\u0065":
			*_gcbfe = 3
		case "\u006c\u0074\u0065":
			*_gcbfe = 4
		}
	}
	_ggdb, _gdgd = d.Token()
	if _gdgd != nil {
		return _gdgd
	}
	if _bfga, _gaefa := _ggdb.(_d.EndElement); _gaefa && _bfga.Name == start.Name {
		return nil
	}
	return _f.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _ggdb)
}
func (_fdbfd *ST_Breakpoint) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_gacd, _gcdg := d.Token()
	if _gcdg != nil {
		return _gcdg
	}
	if _dfegf, _aggb := _gacd.(_d.EndElement); _aggb && _dfegf.Name == start.Name {
		*_fdbfd = 1
		return nil
	}
	if _bcga, _dddgg := _gacd.(_d.CharData); !_dddgg {
		return _f.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _gacd)
	} else {
		switch string(_bcga) {
		case "":
			*_fdbfd = 0
		case "\u0065\u006e\u0064\u0043\u006e\u0076":
			*_fdbfd = 1
		case "\u0062\u0061\u006c":
			*_fdbfd = 2
		case "\u0066\u0069\u0078e\u0064":
			*_fdbfd = 3
		}
	}
	_gacd, _gcdg = d.Token()
	if _gcdg != nil {
		return _gcdg
	}
	if _adege, _fbffg := _gacd.(_d.EndElement); _fbffg && _adege.Name == start.Name {
		return nil
	}
	return _f.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _gacd)
}
func (_gcdb ST_Direction) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_gcdb.String(), start)
}

// ValidateWithPath validates the CT_NumericRule and its children, prefixing error messages with path
func (_ecdf *CT_NumericRule) ValidateWithPath(path string) error {
	if _ecdf.ExtLst != nil {
		if _fde := _ecdf.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _fde != nil {
			return _fde
		}
	}
	if _cdea := _ecdf.TypeAttr.ValidateWithPath(path + "\u002fT\u0079\u0070\u0065\u0041\u0074\u0074r"); _cdea != nil {
		return _cdea
	}
	if _afag := _ecdf.ForAttr.ValidateWithPath(path + "\u002f\u0046\u006f\u0072\u0041\u0074\u0074\u0072"); _afag != nil {
		return _afag
	}
	if _cgbc := _ecdf.PtTypeAttr.ValidateWithPath(path + "/\u0050\u0074\u0054\u0079\u0070\u0065\u0041\u0074\u0074\u0072"); _cgbc != nil {
		return _cgbc
	}
	return nil
}
func (_facdd *ST_FunctionValue) ValidateWithPath(path string) error {
	_feefe := []string{}
	if _facdd.Int32 != nil {
		_feefe = append(_feefe, "\u0049\u006e\u00743\u0032")
	}
	if _facdd.Bool != nil {
		_feefe = append(_feefe, "\u0042\u006f\u006f\u006c")
	}
	if _facdd.ST_Direction != ST_DirectionUnset {
		_feefe = append(_feefe, "\u0053\u0054\u005fD\u0069\u0072\u0065\u0063\u0074\u0069\u006f\u006e")
	}
	if _facdd.ST_HierBranchStyle != ST_HierBranchStyleUnset {
		_feefe = append(_feefe, "\u0053T\u005fH\u0069\u0065\u0072\u0042\u0072a\u006e\u0063h\u0053\u0074\u0079\u006c\u0065")
	}
	if _facdd.ST_AnimOneStr != ST_AnimOneStrUnset {
		_feefe = append(_feefe, "\u0053\u0054\u005f\u0041\u006e\u0069\u006d\u004f\u006e\u0065\u0053\u0074\u0072")
	}
	if _facdd.ST_AnimLvlStr != ST_AnimLvlStrUnset {
		_feefe = append(_feefe, "\u0053\u0054\u005f\u0041\u006e\u0069\u006d\u004c\u0076\u006c\u0053\u0074\u0072")
	}
	if _facdd.ST_ResizeHandlesStr != ST_ResizeHandlesStrUnset {
		_feefe = append(_feefe, "\u0053\u0054\u005f\u0052es\u0069\u007a\u0065\u0048\u0061\u006e\u0064\u006c\u0065\u0073\u0053\u0074\u0072")
	}
	if len(_feefe) > 1 {
		return _f.Errorf("%\u0073\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u006d\u0065\u006d\u0062\u0065r\u0073\u0020\u0073e\u0074:\u0020\u0025\u0076", path, _feefe)
	}
	return nil
}
func (_ggbff ST_RotationPath) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_egdc := _d.Attr{}
	_egdc.Name = name
	switch _ggbff {
	case ST_RotationPathUnset:
		_egdc.Value = ""
	case ST_RotationPathNone:
		_egdc.Value = "\u006e\u006f\u006e\u0065"
	case ST_RotationPathAlongPath:
		_egdc.Value = "\u0061l\u006f\u006e\u0067\u0050\u0061\u0074h"
	}
	return _egdc, nil
}
func (_baadg *ST_ChildAlignment) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_dadc, _gace := d.Token()
	if _gace != nil {
		return _gace
	}
	if _ffcfe, _fabd := _dadc.(_d.EndElement); _fabd && _ffcfe.Name == start.Name {
		*_baadg = 1
		return nil
	}
	if _dagb, _gfad := _dadc.(_d.CharData); !_gfad {
		return _f.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _dadc)
	} else {
		switch string(_dagb) {
		case "":
			*_baadg = 0
		case "\u0074":
			*_baadg = 1
		case "\u0062":
			*_baadg = 2
		case "\u006c":
			*_baadg = 3
		case "\u0072":
			*_baadg = 4
		}
	}
	_dadc, _gace = d.Token()
	if _gace != nil {
		return _gace
	}
	if _bafc, _dffa := _dadc.(_d.EndElement); _dffa && _bafc.Name == start.Name {
		return nil
	}
	return _f.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _dadc)
}

const (
	ST_BendPointUnset ST_BendPoint = 0
	ST_BendPointBeg   ST_BendPoint = 1
	ST_BendPointDef   ST_BendPoint = 2
	ST_BendPointEnd   ST_BendPoint = 3
)

type CT_CxnList struct{ Cxn []*CT_Cxn }

func (_ggdg ST_ChildOrderType) Validate() error { return _ggdg.ValidateWithPath("") }
func (_dcef *CT_TextProps) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_dcafe:
	for {
		_ggfaa, _ggaa := d.Token()
		if _ggaa != nil {
			return _ggaa
		}
		switch _dddd := _ggfaa.(type) {
		case _d.StartElement:
			switch _dddd.Name {
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e", Local: "\u0073\u0070\u0033\u0064"}, _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a/\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072g\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u006d\u0061\u0069\u006e", Local: "\u0073\u0070\u0033\u0064"}:
				_dcef.Sp3d = _bc.NewCT_Shape3D()
				if _ffee := d.DecodeElement(_dcef.Sp3d, &_dddd); _ffee != nil {
					return _ffee
				}
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e", Local: "\u0066\u006c\u0061\u0074\u0054\u0078"}, _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a/\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072g\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u006d\u0061\u0069\u006e", Local: "\u0066\u006c\u0061\u0074\u0054\u0078"}:
				_dcef.FlatTx = _bc.NewCT_FlatText()
				if _baeg := d.DecodeElement(_dcef.FlatTx, &_dddd); _baeg != nil {
					return _baeg
				}
			default:
				_b.Log.Debug("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075n\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054_T\u0065\u0078t\u0050\u0072\u006f\u0070\u0073\u0020\u0025\u0076", _dddd.Name)
				if _cagdd := d.Skip(); _cagdd != nil {
					return _cagdd
				}
			}
		case _d.EndElement:
			break _dcafe
		case _d.CharData:
		}
	}
	return nil
}
func (_eeff ST_ElementType) Validate() error { return _eeff.ValidateWithPath("") }
func (_fceg ST_HueDir) String() string {
	switch _fceg {
	case 0:
		return ""
	case 1:
		return "\u0063\u0077"
	case 2:
		return "\u0063\u0063\u0077"
	}
	return ""
}
func (_fbae *StyleDefHdr) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_fbae.CT_StyleDefinitionHeader = *NewCT_StyleDefinitionHeader()
	for _, _aacf := range start.Attr {
		if _aacf.Name.Local == "\u0075\u006e\u0069\u0071\u0075\u0065\u0049\u0064" {
			_baadd, _gcde := _aacf.Value, error(nil)
			if _gcde != nil {
				return _gcde
			}
			_fbae.UniqueIdAttr = _baadd
			continue
		}
		if _aacf.Name.Local == "\u006d\u0069\u006e\u0056\u0065\u0072" {
			_agegg, _gbba := _aacf.Value, error(nil)
			if _gbba != nil {
				return _gbba
			}
			_fbae.MinVerAttr = &_agegg
			continue
		}
		if _aacf.Name.Local == "\u0072\u0065\u0073I\u0064" {
			_gffe, _bcfeb := _gb.ParseInt(_aacf.Value, 10, 32)
			if _bcfeb != nil {
				return _bcfeb
			}
			_gefbg := int32(_gffe)
			_fbae.ResIdAttr = &_gefbg
			continue
		}
	}
_acec:
	for {
		_cead, _cgbb := d.Token()
		if _cgbb != nil {
			return _cgbb
		}
		switch _edbec := _cead.(type) {
		case _d.StartElement:
			switch _edbec.Name {
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0074\u0069\u0074l\u0065"}:
				_bcbe := NewCT_SDName()
				if _cgce := d.DecodeElement(_bcbe, &_edbec); _cgce != nil {
					return _cgce
				}
				_fbae.Title = append(_fbae.Title, _bcbe)
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0064\u0065\u0073\u0063"}:
				_acag := NewCT_SDDescription()
				if _gcfgb := d.DecodeElement(_acag, &_edbec); _gcfgb != nil {
					return _gcfgb
				}
				_fbae.Desc = append(_fbae.Desc, _acag)
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0061\u0074\u004c\u0073\u0074"}:
				_fbae.CatLst = NewCT_SDCategories()
				if _ebfb := d.DecodeElement(_fbae.CatLst, &_edbec); _ebfb != nil {
					return _ebfb
				}
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_fbae.ExtLst = _bc.NewCT_OfficeArtExtensionList()
				if _adcb := d.DecodeElement(_fbae.ExtLst, &_edbec); _adcb != nil {
					return _adcb
				}
			default:
				_b.Log.Debug("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0053\u0074\u0079\u006c\u0065\u0044\u0065\u0066\u0048\u0064\u0072\u0020\u0025\u0076", _edbec.Name)
				if _deag := d.Skip(); _deag != nil {
					return _deag
				}
			}
		case _d.EndElement:
			break _acec
		case _d.CharData:
		}
	}
	return nil
}

type StyleDefHdrLst struct{ CT_StyleDefinitionHeaderLst }
type DataModel struct{ CT_DataModel }

func (_eacb *ST_BendPoint) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_becc, _dgffa := d.Token()
	if _dgffa != nil {
		return _dgffa
	}
	if _gcfgg, _dfgae := _becc.(_d.EndElement); _dfgae && _gcfgg.Name == start.Name {
		*_eacb = 1
		return nil
	}
	if _gccdf, _badea := _becc.(_d.CharData); !_badea {
		return _f.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _becc)
	} else {
		switch string(_gccdf) {
		case "":
			*_eacb = 0
		case "\u0062\u0065\u0067":
			*_eacb = 1
		case "\u0064\u0065\u0066":
			*_eacb = 2
		case "\u0065\u006e\u0064":
			*_eacb = 3
		}
	}
	_becc, _dgffa = d.Token()
	if _dgffa != nil {
		return _dgffa
	}
	if _fdggb, _dcdca := _becc.(_d.EndElement); _dcdca && _fdggb.Name == start.Name {
		return nil
	}
	return _f.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _becc)
}

// Validate validates the CT_CTName and its children
func (_baa *CT_CTName) Validate() error {
	return _baa.ValidateWithPath("\u0043T\u005f\u0043\u0054\u004e\u0061\u006de")
}

// ValidateWithPath validates the CT_ChildPref and its children, prefixing error messages with path
func (_fga *CT_ChildPref) ValidateWithPath(path string) error {
	if _fga.ValAttr != nil {
		if *_fga.ValAttr < -1 {
			return _f.Errorf("\u0025\u0073/m\u002e\u0056\u0061l\u0041\u0074\u0074\u0072 mu\u0073t \u0062\u0065\u0020\u003e\u003d\u0020\u002d1 \u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, *_fga.ValAttr)
		}
	}
	return nil
}

// Validate validates the CT_NumericRule and its children
func (_dfccb *CT_NumericRule) Validate() error {
	return _dfccb.ValidateWithPath("\u0043\u0054\u005f\u004e\u0075\u006d\u0065\u0072\u0069c\u0052\u0075\u006c\u0065")
}

type CT_SDCategories struct{ Cat []*CT_SDCategory }

func (_eabgf *ST_Offset) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_gdff, _deaf := d.Token()
	if _deaf != nil {
		return _deaf
	}
	if _ageb, _dbgae := _gdff.(_d.EndElement); _dbgae && _ageb.Name == start.Name {
		*_eabgf = 1
		return nil
	}
	if _dbcbf, _gdaeaa := _gdff.(_d.CharData); !_gdaeaa {
		return _f.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _gdff)
	} else {
		switch string(_dbcbf) {
		case "":
			*_eabgf = 0
		case "\u0063\u0074\u0072":
			*_eabgf = 1
		case "\u006f\u0066\u0066":
			*_eabgf = 2
		}
	}
	_gdff, _deaf = d.Token()
	if _deaf != nil {
		return _deaf
	}
	if _afdg, _aggdd := _gdff.(_d.EndElement); _aggdd && _afdg.Name == start.Name {
		return nil
	}
	return _f.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _gdff)
}

type CT_DiagramDefinitionHeader struct {
	UniqueIdAttr string
	MinVerAttr   *string
	DefStyleAttr *string
	ResIdAttr    *int32
	Title        []*CT_Name
	Desc         []*CT_Description
	CatLst       *CT_Categories
	ExtLst       *_bc.CT_OfficeArtExtensionList
}

func (_efae *CT_Pt) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _daff := range start.Attr {
		if _daff.Name.Local == "\u006do\u0064\u0065\u006c\u0049\u0064" {
			_dfeg, _gdcb := ParseUnionST_ModelId(_daff.Value)
			if _gdcb != nil {
				return _gdcb
			}
			_efae.ModelIdAttr = _dfeg
			continue
		}
		if _daff.Name.Local == "\u0074\u0079\u0070\u0065" {
			_efae.TypeAttr.UnmarshalXMLAttr(_daff)
			continue
		}
		if _daff.Name.Local == "\u0063\u0078\u006eI\u0064" {
			_dggg, _bfffc := ParseUnionST_ModelId(_daff.Value)
			if _bfffc != nil {
				return _bfffc
			}
			_efae.CxnIdAttr = &_dggg
			continue
		}
	}
_dedf:
	for {
		_bgeee, _cbbbe := d.Token()
		if _cbbbe != nil {
			return _cbbbe
		}
		switch _fbfde := _bgeee.(type) {
		case _d.StartElement:
			switch _fbfde.Name {
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0070\u0072\u0053e\u0074"}:
				_efae.PrSet = NewCT_ElemPropSet()
				if _gbgg := d.DecodeElement(_efae.PrSet, &_fbfde); _gbgg != nil {
					return _gbgg
				}
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0073\u0070\u0050\u0072"}:
				_efae.SpPr = _bc.NewCT_ShapeProperties()
				if _dbdb := d.DecodeElement(_efae.SpPr, &_fbfde); _dbdb != nil {
					return _dbdb
				}
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0074"}:
				_efae.T = _bc.NewCT_TextBody()
				if _fcdg := d.DecodeElement(_efae.T, &_fbfde); _fcdg != nil {
					return _fcdg
				}
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_efae.ExtLst = _bc.NewCT_OfficeArtExtensionList()
				if _caae := d.DecodeElement(_efae.ExtLst, &_fbfde); _caae != nil {
					return _caae
				}
			default:
				_b.Log.Debug("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006fn \u0043\u0054\u005fP\u0074 \u0025\u0076", _fbfde.Name)
				if _bbee := d.Skip(); _bbee != nil {
					return _bbee
				}
			}
		case _d.EndElement:
			break _dedf
		case _d.CharData:
		}
	}
	return nil
}
func (_fdbd ST_TextAnchorHorizontal) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_fdbd.String(), start)
}

// ValidateWithPath validates the CT_Rules and its children, prefixing error messages with path
func (_cagg *CT_Rules) ValidateWithPath(path string) error {
	for _bacf, _dgbf := range _cagg.Rule {
		if _bbfc := _dgbf.ValidateWithPath(_f.Sprintf("%\u0073\u002f\u0052\u0075\u006c\u0065\u005b\u0025\u0064\u005d", path, _bacf)); _bbfc != nil {
			return _bbfc
		}
	}
	return nil
}
func (_ccdfca ST_HierarchyAlignment) String() string {
	switch _ccdfca {
	case 0:
		return ""
	case 1:
		return "\u0074\u004c"
	case 2:
		return "\u0074\u0052"
	case 3:
		return "\u0074\u0043\u0074\u0072\u0043\u0068"
	case 4:
		return "\u0074C\u0074\u0072\u0044\u0065\u0073"
	case 5:
		return "\u0062\u004c"
	case 6:
		return "\u0062\u0052"
	case 7:
		return "\u0062\u0043\u0074\u0072\u0043\u0068"
	case 8:
		return "\u0062C\u0074\u0072\u0044\u0065\u0073"
	case 9:
		return "\u006c\u0054"
	case 10:
		return "\u006c\u0042"
	case 11:
		return "\u006c\u0043\u0074\u0072\u0043\u0068"
	case 12:
		return "\u006cC\u0074\u0072\u0044\u0065\u0073"
	case 13:
		return "\u0072\u0054"
	case 14:
		return "\u0072\u0042"
	case 15:
		return "\u0072\u0043\u0074\u0072\u0043\u0068"
	case 16:
		return "\u0072C\u0074\u0072\u0044\u0065\u0073"
	}
	return ""
}
func NewCT_CTCategories() *CT_CTCategories { _efb := &CT_CTCategories{}; return _efb }

const (
	ST_ChildOrderTypeUnset ST_ChildOrderType = 0
	ST_ChildOrderTypeB     ST_ChildOrderType = 1
	ST_ChildOrderTypeT     ST_ChildOrderType = 2
)

func (_dcebg ST_OutputShapeType) String() string {
	switch _dcebg {
	case 0:
		return ""
	case 1:
		return "\u006e\u006f\u006e\u0065"
	case 2:
		return "\u0063\u006f\u006e\u006e"
	}
	return ""
}

const (
	ST_OutputShapeTypeUnset ST_OutputShapeType = 0
	ST_OutputShapeTypeNone  ST_OutputShapeType = 1
	ST_OutputShapeTypeConn  ST_OutputShapeType = 2
)

func (_dcbg ST_ParameterVal) String() string {
	if _dcbg.ST_DiagramHorizontalAlignment != ST_DiagramHorizontalAlignmentUnset {
		return _dcbg.ST_DiagramHorizontalAlignment.String()
	}
	if _dcbg.ST_VerticalAlignment != ST_VerticalAlignmentUnset {
		return _dcbg.ST_VerticalAlignment.String()
	}
	if _dcbg.ST_ChildDirection != ST_ChildDirectionUnset {
		return _dcbg.ST_ChildDirection.String()
	}
	if _dcbg.ST_ChildAlignment != ST_ChildAlignmentUnset {
		return _dcbg.ST_ChildAlignment.String()
	}
	if _dcbg.ST_SecondaryChildAlignment != ST_SecondaryChildAlignmentUnset {
		return _dcbg.ST_SecondaryChildAlignment.String()
	}
	if _dcbg.ST_LinearDirection != ST_LinearDirectionUnset {
		return _dcbg.ST_LinearDirection.String()
	}
	if _dcbg.ST_SecondaryLinearDirection != ST_SecondaryLinearDirectionUnset {
		return _dcbg.ST_SecondaryLinearDirection.String()
	}
	if _dcbg.ST_StartingElement != ST_StartingElementUnset {
		return _dcbg.ST_StartingElement.String()
	}
	if _dcbg.ST_BendPoint != ST_BendPointUnset {
		return _dcbg.ST_BendPoint.String()
	}
	if _dcbg.ST_ConnectorRouting != ST_ConnectorRoutingUnset {
		return _dcbg.ST_ConnectorRouting.String()
	}
	if _dcbg.ST_ArrowheadStyle != ST_ArrowheadStyleUnset {
		return _dcbg.ST_ArrowheadStyle.String()
	}
	if _dcbg.ST_ConnectorDimension != ST_ConnectorDimensionUnset {
		return _dcbg.ST_ConnectorDimension.String()
	}
	if _dcbg.ST_RotationPath != ST_RotationPathUnset {
		return _dcbg.ST_RotationPath.String()
	}
	if _dcbg.ST_CenterShapeMapping != ST_CenterShapeMappingUnset {
		return _dcbg.ST_CenterShapeMapping.String()
	}
	if _dcbg.ST_NodeHorizontalAlignment != ST_NodeHorizontalAlignmentUnset {
		return _dcbg.ST_NodeHorizontalAlignment.String()
	}
	if _dcbg.ST_NodeVerticalAlignment != ST_NodeVerticalAlignmentUnset {
		return _dcbg.ST_NodeVerticalAlignment.String()
	}
	if _dcbg.ST_FallbackDimension != ST_FallbackDimensionUnset {
		return _dcbg.ST_FallbackDimension.String()
	}
	if _dcbg.ST_TextDirection != ST_TextDirectionUnset {
		return _dcbg.ST_TextDirection.String()
	}
	if _dcbg.ST_PyramidAccentPosition != ST_PyramidAccentPositionUnset {
		return _dcbg.ST_PyramidAccentPosition.String()
	}
	if _dcbg.ST_PyramidAccentTextMargin != ST_PyramidAccentTextMarginUnset {
		return _dcbg.ST_PyramidAccentTextMargin.String()
	}
	if _dcbg.ST_TextBlockDirection != ST_TextBlockDirectionUnset {
		return _dcbg.ST_TextBlockDirection.String()
	}
	if _dcbg.ST_TextAnchorHorizontal != ST_TextAnchorHorizontalUnset {
		return _dcbg.ST_TextAnchorHorizontal.String()
	}
	if _dcbg.ST_TextAnchorVertical != ST_TextAnchorVerticalUnset {
		return _dcbg.ST_TextAnchorVertical.String()
	}
	if _dcbg.ST_DiagramTextAlignment != ST_DiagramTextAlignmentUnset {
		return _dcbg.ST_DiagramTextAlignment.String()
	}
	if _dcbg.ST_AutoTextRotation != ST_AutoTextRotationUnset {
		return _dcbg.ST_AutoTextRotation.String()
	}
	if _dcbg.ST_GrowDirection != ST_GrowDirectionUnset {
		return _dcbg.ST_GrowDirection.String()
	}
	if _dcbg.ST_FlowDirection != ST_FlowDirectionUnset {
		return _dcbg.ST_FlowDirection.String()
	}
	if _dcbg.ST_ContinueDirection != ST_ContinueDirectionUnset {
		return _dcbg.ST_ContinueDirection.String()
	}
	if _dcbg.ST_Breakpoint != ST_BreakpointUnset {
		return _dcbg.ST_Breakpoint.String()
	}
	if _dcbg.ST_Offset != ST_OffsetUnset {
		return _dcbg.ST_Offset.String()
	}
	if _dcbg.ST_HierarchyAlignment != ST_HierarchyAlignmentUnset {
		return _dcbg.ST_HierarchyAlignment.String()
	}
	if _dcbg.Int32 != nil {
		return _f.Sprintf("\u0025\u0076", *_dcbg.Int32)
	}
	if _dcbg.Float64 != nil {
		return _f.Sprintf("\u0025\u0076", *_dcbg.Float64)
	}
	if _dcbg.Bool != nil {
		return _f.Sprintf("\u0025\u0076", *_dcbg.Bool)
	}
	if _dcbg.StringVal != nil {
		return _f.Sprintf("\u0025\u0076", *_dcbg.StringVal)
	}
	if _dcbg.ST_ConnectorPoint != ST_ConnectorPointUnset {
		return _dcbg.ST_ConnectorPoint.String()
	}
	return ""
}
func NewCT_SDCategories() *CT_SDCategories { _abfgd := &CT_SDCategories{}; return _abfgd }
func (_bffdb ST_RotationPath) String() string {
	switch _bffdb {
	case 0:
		return ""
	case 1:
		return "\u006e\u006f\u006e\u0065"
	case 2:
		return "\u0061l\u006f\u006e\u0067\u0050\u0061\u0074h"
	}
	return ""
}
func (_gegd *CT_PresentationOf) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _gegd.AxisAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0061\u0078\u0069\u0073"}, Value: _f.Sprintf("\u0025\u0076", *_gegd.AxisAttr)})
	}
	if _gegd.PtTypeAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0070\u0074\u0054\u0079\u0070\u0065"}, Value: _f.Sprintf("\u0025\u0076", *_gegd.PtTypeAttr)})
	}
	if _gegd.HideLastTransAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0068\u0069\u0064\u0065\u004c\u0061\u0073\u0074\u0054\u0072\u0061\u006e\u0073"}, Value: _f.Sprintf("\u0025\u0076", *_gegd.HideLastTransAttr)})
	}
	if _gegd.StAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0073\u0074"}, Value: _f.Sprintf("\u0025\u0076", *_gegd.StAttr)})
	}
	if _gegd.CntAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0063\u006e\u0074"}, Value: _f.Sprintf("\u0025\u0076", *_gegd.CntAttr)})
	}
	if _gegd.StepAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0073\u0074\u0065\u0070"}, Value: _f.Sprintf("\u0025\u0076", *_gegd.StepAttr)})
	}
	e.EncodeToken(start)
	if _gegd.ExtLst != nil {
		_cbaf := _d.StartElement{Name: _d.Name{Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_gegd.ExtLst, _cbaf)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_cbfa ST_AnimOneStr) Validate() error { return _cbfa.ValidateWithPath("") }
func (_cade ST_CenterShapeMapping) ValidateWithPath(path string) error {
	switch _cade {
	case 0, 1, 2:
	default:
		return _f.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_cade))
	}
	return nil
}

const (
	ST_ParameterIdUnset            ST_ParameterId = 0
	ST_ParameterIdHorzAlign        ST_ParameterId = 1
	ST_ParameterIdVertAlign        ST_ParameterId = 2
	ST_ParameterIdChDir            ST_ParameterId = 3
	ST_ParameterIdChAlign          ST_ParameterId = 4
	ST_ParameterIdSecChAlign       ST_ParameterId = 5
	ST_ParameterIdLinDir           ST_ParameterId = 6
	ST_ParameterIdSecLinDir        ST_ParameterId = 7
	ST_ParameterIdStElem           ST_ParameterId = 8
	ST_ParameterIdBendPt           ST_ParameterId = 9
	ST_ParameterIdConnRout         ST_ParameterId = 10
	ST_ParameterIdBegSty           ST_ParameterId = 11
	ST_ParameterIdEndSty           ST_ParameterId = 12
	ST_ParameterIdDim              ST_ParameterId = 13
	ST_ParameterIdRotPath          ST_ParameterId = 14
	ST_ParameterIdCtrShpMap        ST_ParameterId = 15
	ST_ParameterIdNodeHorzAlign    ST_ParameterId = 16
	ST_ParameterIdNodeVertAlign    ST_ParameterId = 17
	ST_ParameterIdFallback         ST_ParameterId = 18
	ST_ParameterIdTxDir            ST_ParameterId = 19
	ST_ParameterIdPyraAcctPos      ST_ParameterId = 20
	ST_ParameterIdPyraAcctTxMar    ST_ParameterId = 21
	ST_ParameterIdTxBlDir          ST_ParameterId = 22
	ST_ParameterIdTxAnchorHorz     ST_ParameterId = 23
	ST_ParameterIdTxAnchorVert     ST_ParameterId = 24
	ST_ParameterIdTxAnchorHorzCh   ST_ParameterId = 25
	ST_ParameterIdTxAnchorVertCh   ST_ParameterId = 26
	ST_ParameterIdParTxLTRAlign    ST_ParameterId = 27
	ST_ParameterIdParTxRTLAlign    ST_ParameterId = 28
	ST_ParameterIdShpTxLTRAlignCh  ST_ParameterId = 29
	ST_ParameterIdShpTxRTLAlignCh  ST_ParameterId = 30
	ST_ParameterIdAutoTxRot        ST_ParameterId = 31
	ST_ParameterIdGrDir            ST_ParameterId = 32
	ST_ParameterIdFlowDir          ST_ParameterId = 33
	ST_ParameterIdContDir          ST_ParameterId = 34
	ST_ParameterIdBkpt             ST_ParameterId = 35
	ST_ParameterIdOff              ST_ParameterId = 36
	ST_ParameterIdHierAlign        ST_ParameterId = 37
	ST_ParameterIdBkPtFixedVal     ST_ParameterId = 38
	ST_ParameterIdStBulletLvl      ST_ParameterId = 39
	ST_ParameterIdStAng            ST_ParameterId = 40
	ST_ParameterIdSpanAng          ST_ParameterId = 41
	ST_ParameterIdAr               ST_ParameterId = 42
	ST_ParameterIdLnSpPar          ST_ParameterId = 43
	ST_ParameterIdLnSpAfParP       ST_ParameterId = 44
	ST_ParameterIdLnSpCh           ST_ParameterId = 45
	ST_ParameterIdLnSpAfChP        ST_ParameterId = 46
	ST_ParameterIdRtShortDist      ST_ParameterId = 47
	ST_ParameterIdAlignTx          ST_ParameterId = 48
	ST_ParameterIdPyraLvlNode      ST_ParameterId = 49
	ST_ParameterIdPyraAcctBkgdNode ST_ParameterId = 50
	ST_ParameterIdPyraAcctTxNode   ST_ParameterId = 51
	ST_ParameterIdSrcNode          ST_ParameterId = 52
	ST_ParameterIdDstNode          ST_ParameterId = 53
	ST_ParameterIdBegPts           ST_ParameterId = 54
	ST_ParameterIdEndPts           ST_ParameterId = 55
)

func (_ffaac ST_AnimOneStr) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_ffaac.String(), start)
}
func (_aabbf ST_FallbackDimension) ValidateWithPath(path string) error {
	switch _aabbf {
	case 0, 1, 2:
	default:
		return _f.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_aabbf))
	}
	return nil
}
func (_gagfag *CT_StyleLabel) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _edbf := range start.Attr {
		if _edbf.Name.Local == "\u006e\u0061\u006d\u0065" {
			_ebgb, _bgcc := _edbf.Value, error(nil)
			if _bgcc != nil {
				return _bgcc
			}
			_gagfag.NameAttr = _ebgb
			continue
		}
	}
_gcada:
	for {
		_fadce, _ccfa := d.Token()
		if _ccfa != nil {
			return _ccfa
		}
		switch _eeeg := _fadce.(type) {
		case _d.StartElement:
			switch _eeeg.Name {
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0073c\u0065\u006e\u0065\u0033\u0064"}:
				_gagfag.Scene3d = _bc.NewCT_Scene3D()
				if _fffe := d.DecodeElement(_gagfag.Scene3d, &_eeeg); _fffe != nil {
					return _fffe
				}
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0073\u0070\u0033\u0064"}:
				_gagfag.Sp3d = _bc.NewCT_Shape3D()
				if _aggfc := d.DecodeElement(_gagfag.Sp3d, &_eeeg); _aggfc != nil {
					return _aggfc
				}
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0074\u0078\u0050\u0072"}:
				_gagfag.TxPr = NewCT_TextProps()
				if _fcdb := d.DecodeElement(_gagfag.TxPr, &_eeeg); _fcdb != nil {
					return _fcdb
				}
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0073\u0074\u0079l\u0065"}:
				_gagfag.Style = _bc.NewCT_ShapeStyle()
				if _cegad := d.DecodeElement(_gagfag.Style, &_eeeg); _cegad != nil {
					return _cegad
				}
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_gagfag.ExtLst = _bc.NewCT_OfficeArtExtensionList()
				if _dbga := d.DecodeElement(_gagfag.ExtLst, &_eeeg); _dbga != nil {
					return _dbga
				}
			default:
				_b.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0053t\u0079\u006c\u0065\u004c\u0061\u0062\u0065\u006c \u0025\u0076", _eeeg.Name)
				if _agde := d.Skip(); _agde != nil {
					return _agde
				}
			}
		case _d.EndElement:
			break _gcada
		case _d.CharData:
		}
	}
	return nil
}

type CT_ForEach struct {
	NameAttr          *string
	RefAttr           *string
	Alg               []*CT_Algorithm
	Shape             []*CT_Shape
	PresOf            []*CT_PresentationOf
	ConstrLst         []*CT_Constraints
	RuleLst           []*CT_Rules
	ForEach           []*CT_ForEach
	LayoutNode        []*CT_LayoutNode
	Choose            []*CT_Choose
	ExtLst            []*_bc.CT_OfficeArtExtensionList
	AxisAttr          *ST_AxisTypes
	PtTypeAttr        *ST_ElementTypes
	HideLastTransAttr *ST_Booleans
	StAttr            *ST_Ints
	CntAttr           *ST_UnsignedInts
	StepAttr          *ST_Ints
}

func (_eccfc ST_StartingElement) ValidateWithPath(path string) error {
	switch _eccfc {
	case 0, 1, 2:
	default:
		return _f.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_eccfc))
	}
	return nil
}

// ST_ParameterVal is a union type
type ST_ParameterVal struct {
	ST_DiagramHorizontalAlignment ST_DiagramHorizontalAlignment
	ST_VerticalAlignment          ST_VerticalAlignment
	ST_ChildDirection             ST_ChildDirection
	ST_ChildAlignment             ST_ChildAlignment
	ST_SecondaryChildAlignment    ST_SecondaryChildAlignment
	ST_LinearDirection            ST_LinearDirection
	ST_SecondaryLinearDirection   ST_SecondaryLinearDirection
	ST_StartingElement            ST_StartingElement
	ST_BendPoint                  ST_BendPoint
	ST_ConnectorRouting           ST_ConnectorRouting
	ST_ArrowheadStyle             ST_ArrowheadStyle
	ST_ConnectorDimension         ST_ConnectorDimension
	ST_RotationPath               ST_RotationPath
	ST_CenterShapeMapping         ST_CenterShapeMapping
	ST_NodeHorizontalAlignment    ST_NodeHorizontalAlignment
	ST_NodeVerticalAlignment      ST_NodeVerticalAlignment
	ST_FallbackDimension          ST_FallbackDimension
	ST_TextDirection              ST_TextDirection
	ST_PyramidAccentPosition      ST_PyramidAccentPosition
	ST_PyramidAccentTextMargin    ST_PyramidAccentTextMargin
	ST_TextBlockDirection         ST_TextBlockDirection
	ST_TextAnchorHorizontal       ST_TextAnchorHorizontal
	ST_TextAnchorVertical         ST_TextAnchorVertical
	ST_DiagramTextAlignment       ST_DiagramTextAlignment
	ST_AutoTextRotation           ST_AutoTextRotation
	ST_GrowDirection              ST_GrowDirection
	ST_FlowDirection              ST_FlowDirection
	ST_ContinueDirection          ST_ContinueDirection
	ST_Breakpoint                 ST_Breakpoint
	ST_Offset                     ST_Offset
	ST_HierarchyAlignment         ST_HierarchyAlignment
	Int32                         *int32
	Float64                       *float64
	Bool                          *bool
	StringVal                     *string
	ST_ConnectorPoint             ST_ConnectorPoint
}

func (_acedf *CT_When) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _acedf.NameAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u006e\u0061\u006d\u0065"}, Value: _f.Sprintf("\u0025\u0076", *_acedf.NameAttr)})
	}
	_gaeg, _bdda := _acedf.FuncAttr.MarshalXMLAttr(_d.Name{Local: "\u0066\u0075\u006e\u0063"})
	if _bdda != nil {
		return _bdda
	}
	start.Attr = append(start.Attr, _gaeg)
	if _acedf.ArgAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0061\u0072\u0067"}, Value: _f.Sprintf("\u0025\u0076", *_acedf.ArgAttr)})
	}
	_gaeg, _bdda = _acedf.OpAttr.MarshalXMLAttr(_d.Name{Local: "\u006f\u0070"})
	if _bdda != nil {
		return _bdda
	}
	start.Attr = append(start.Attr, _gaeg)
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0076\u0061\u006c"}, Value: _f.Sprintf("\u0025\u0076", _acedf.ValAttr)})
	if _acedf.AxisAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0061\u0078\u0069\u0073"}, Value: _f.Sprintf("\u0025\u0076", *_acedf.AxisAttr)})
	}
	if _acedf.PtTypeAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0070\u0074\u0054\u0079\u0070\u0065"}, Value: _f.Sprintf("\u0025\u0076", *_acedf.PtTypeAttr)})
	}
	if _acedf.HideLastTransAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0068\u0069\u0064\u0065\u004c\u0061\u0073\u0074\u0054\u0072\u0061\u006e\u0073"}, Value: _f.Sprintf("\u0025\u0076", *_acedf.HideLastTransAttr)})
	}
	if _acedf.StAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0073\u0074"}, Value: _f.Sprintf("\u0025\u0076", *_acedf.StAttr)})
	}
	if _acedf.CntAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0063\u006e\u0074"}, Value: _f.Sprintf("\u0025\u0076", *_acedf.CntAttr)})
	}
	if _acedf.StepAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0073\u0074\u0065\u0070"}, Value: _f.Sprintf("\u0025\u0076", *_acedf.StepAttr)})
	}
	e.EncodeToken(start)
	if _acedf.Alg != nil {
		_beca := _d.StartElement{Name: _d.Name{Local: "\u0061\u006c\u0067"}}
		for _, _agab := range _acedf.Alg {
			e.EncodeElement(_agab, _beca)
		}
	}
	if _acedf.Shape != nil {
		_bfdg := _d.StartElement{Name: _d.Name{Local: "\u0073\u0068\u0061p\u0065"}}
		for _, _cagga := range _acedf.Shape {
			e.EncodeElement(_cagga, _bfdg)
		}
	}
	if _acedf.PresOf != nil {
		_agea := _d.StartElement{Name: _d.Name{Local: "\u0070\u0072\u0065\u0073\u004f\u0066"}}
		for _, _agef := range _acedf.PresOf {
			e.EncodeElement(_agef, _agea)
		}
	}
	if _acedf.ConstrLst != nil {
		_degc := _d.StartElement{Name: _d.Name{Local: "\u0063o\u006e\u0073\u0074\u0072\u004c\u0073t"}}
		for _, _dbgee := range _acedf.ConstrLst {
			e.EncodeElement(_dbgee, _degc)
		}
	}
	if _acedf.RuleLst != nil {
		_ccfbe := _d.StartElement{Name: _d.Name{Local: "\u0072u\u006c\u0065\u004c\u0073\u0074"}}
		for _, _ddbcg := range _acedf.RuleLst {
			e.EncodeElement(_ddbcg, _ccfbe)
		}
	}
	if _acedf.ForEach != nil {
		_facdf := _d.StartElement{Name: _d.Name{Local: "\u0066o\u0072\u0045\u0061\u0063\u0068"}}
		for _, _cfff := range _acedf.ForEach {
			e.EncodeElement(_cfff, _facdf)
		}
	}
	if _acedf.LayoutNode != nil {
		_gac := _d.StartElement{Name: _d.Name{Local: "\u006c\u0061\u0079\u006f\u0075\u0074\u004e\u006f\u0064\u0065"}}
		for _, _ffcb := range _acedf.LayoutNode {
			e.EncodeElement(_ffcb, _gac)
		}
	}
	if _acedf.Choose != nil {
		_ggbbg := _d.StartElement{Name: _d.Name{Local: "\u0063\u0068\u006f\u006f\u0073\u0065"}}
		for _, _egfbc := range _acedf.Choose {
			e.EncodeElement(_egfbc, _ggbbg)
		}
	}
	if _acedf.ExtLst != nil {
		_cdaec := _d.StartElement{Name: _d.Name{Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}}
		for _, _aegf := range _acedf.ExtLst {
			e.EncodeElement(_aegf, _cdaec)
		}
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_efed ST_Direction) Validate() error { return _efed.ValidateWithPath("") }

type CT_ChildPref struct{ ValAttr *int32 }

func (_dggaf ST_FlowDirection) Validate() error { return _dggaf.ValidateWithPath("") }
func (_bggbd *ST_DiagramHorizontalAlignment) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_gafcd, _fagfe := d.Token()
	if _fagfe != nil {
		return _fagfe
	}
	if _caca, _gfgec := _gafcd.(_d.EndElement); _gfgec && _caca.Name == start.Name {
		*_bggbd = 1
		return nil
	}
	if _cdafe, _dgfdc := _gafcd.(_d.CharData); !_dgfdc {
		return _f.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _gafcd)
	} else {
		switch string(_cdafe) {
		case "":
			*_bggbd = 0
		case "\u006c":
			*_bggbd = 1
		case "\u0063\u0074\u0072":
			*_bggbd = 2
		case "\u0072":
			*_bggbd = 3
		case "\u006e\u006f\u006e\u0065":
			*_bggbd = 4
		}
	}
	_gafcd, _fagfe = d.Token()
	if _fagfe != nil {
		return _fagfe
	}
	if _cdaa, _cdgf := _gafcd.(_d.EndElement); _cdgf && _cdaa.Name == start.Name {
		return nil
	}
	return _f.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _gafcd)
}

// Validate validates the CT_TextProps and its children
func (_fefed *CT_TextProps) Validate() error {
	return _fefed.ValidateWithPath("\u0043\u0054\u005fT\u0065\u0078\u0074\u0050\u0072\u006f\u0070\u0073")
}
func ParseUnionST_FunctionArgument(s string) (ST_FunctionArgument, error) {
	return ST_FunctionArgument{}, nil
}

type CT_Rules struct{ Rule []*CT_NumericRule }
type ST_ResizeHandlesStr byte

func (_bcgb ST_ConstraintRelationship) String() string {
	switch _bcgb {
	case 0:
		return ""
	case 1:
		return "\u0073\u0065\u006c\u0066"
	case 2:
		return "\u0063\u0068"
	case 3:
		return "\u0064\u0065\u0073"
	}
	return ""
}
func (_cbgf ST_AlgorithmType) Validate() error { return _cbgf.ValidateWithPath("") }
func NewStyleDefHdr() *StyleDefHdr {
	_aafag := &StyleDefHdr{}
	_aafag.CT_StyleDefinitionHeader = *NewCT_StyleDefinitionHeader()
	return _aafag
}
func (_cefef ST_VariableType) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_cefef.String(), start)
}
func (_fafg ST_TextBlockDirection) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_fafg.String(), start)
}
func (_bebg *CT_ForEach) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _fadd := range start.Attr {
		if _fadd.Name.Local == "\u0072\u0065\u0066" {
			_ffgg, _ccaef := _fadd.Value, error(nil)
			if _ccaef != nil {
				return _ccaef
			}
			_bebg.RefAttr = &_ffgg
			continue
		}
		if _fadd.Name.Local == "\u006e\u0061\u006d\u0065" {
			_cgdag, _eabe := _fadd.Value, error(nil)
			if _eabe != nil {
				return _eabe
			}
			_bebg.NameAttr = &_cgdag
			continue
		}
		if _fadd.Name.Local == "\u0061\u0078\u0069\u0073" {
			_bcce, _aafcg := ParseSliceST_AxisTypes(_fadd.Value)
			if _aafcg != nil {
				return _aafcg
			}
			_bebg.AxisAttr = &_bcce
			continue
		}
		if _fadd.Name.Local == "\u0070\u0074\u0054\u0079\u0070\u0065" {
			_acc, _gbae := ParseSliceST_ElementTypes(_fadd.Value)
			if _gbae != nil {
				return _gbae
			}
			_bebg.PtTypeAttr = &_acc
			continue
		}
		if _fadd.Name.Local == "\u0068\u0069\u0064\u0065\u004c\u0061\u0073\u0074\u0054\u0072\u0061\u006e\u0073" {
			_bcdeg, _gagg := ParseSliceST_Booleans(_fadd.Value)
			if _gagg != nil {
				return _gagg
			}
			_bebg.HideLastTransAttr = &_bcdeg
			continue
		}
		if _fadd.Name.Local == "\u0073\u0074" {
			_cbba, _cece := ParseSliceST_Ints(_fadd.Value)
			if _cece != nil {
				return _cece
			}
			_bebg.StAttr = &_cbba
			continue
		}
		if _fadd.Name.Local == "\u0063\u006e\u0074" {
			_fgdd, _bada := ParseSliceST_UnsignedInts(_fadd.Value)
			if _bada != nil {
				return _bada
			}
			_bebg.CntAttr = &_fgdd
			continue
		}
		if _fadd.Name.Local == "\u0073\u0074\u0065\u0070" {
			_cdecd, _acdce := ParseSliceST_Ints(_fadd.Value)
			if _acdce != nil {
				return _acdce
			}
			_bebg.StepAttr = &_cdecd
			continue
		}
	}
_cefg:
	for {
		_dafca, _faab := d.Token()
		if _faab != nil {
			return _faab
		}
		switch _fagg := _dafca.(type) {
		case _d.StartElement:
			switch _fagg.Name {
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0061\u006c\u0067"}:
				_fada := NewCT_Algorithm()
				if _baad := d.DecodeElement(_fada, &_fagg); _baad != nil {
					return _baad
				}
				_bebg.Alg = append(_bebg.Alg, _fada)
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0073\u0068\u0061p\u0065"}:
				_geb := NewCT_Shape()
				if _fedf := d.DecodeElement(_geb, &_fagg); _fedf != nil {
					return _fedf
				}
				_bebg.Shape = append(_bebg.Shape, _geb)
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0070\u0072\u0065\u0073\u004f\u0066"}:
				_fcgb := NewCT_PresentationOf()
				if _edbe := d.DecodeElement(_fcgb, &_fagg); _edbe != nil {
					return _edbe
				}
				_bebg.PresOf = append(_bebg.PresOf, _fcgb)
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063o\u006e\u0073\u0074\u0072\u004c\u0073t"}:
				_gcdf := NewCT_Constraints()
				if _ddbg := d.DecodeElement(_gcdf, &_fagg); _ddbg != nil {
					return _ddbg
				}
				_bebg.ConstrLst = append(_bebg.ConstrLst, _gcdf)
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0072u\u006c\u0065\u004c\u0073\u0074"}:
				_aadc := NewCT_Rules()
				if _abec := d.DecodeElement(_aadc, &_fagg); _abec != nil {
					return _abec
				}
				_bebg.RuleLst = append(_bebg.RuleLst, _aadc)
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0066o\u0072\u0045\u0061\u0063\u0068"}:
				_adeg := NewCT_ForEach()
				if _abbba := d.DecodeElement(_adeg, &_fagg); _abbba != nil {
					return _abbba
				}
				_bebg.ForEach = append(_bebg.ForEach, _adeg)
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u006c\u0061\u0079\u006f\u0075\u0074\u004e\u006f\u0064\u0065"}:
				_deca := NewCT_LayoutNode()
				if _dece := d.DecodeElement(_deca, &_fagg); _dece != nil {
					return _dece
				}
				_bebg.LayoutNode = append(_bebg.LayoutNode, _deca)
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0068\u006f\u006f\u0073\u0065"}:
				_dcbd := NewCT_Choose()
				if _deabe := d.DecodeElement(_dcbd, &_fagg); _deabe != nil {
					return _deabe
				}
				_bebg.Choose = append(_bebg.Choose, _dcbd)
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_cfbd := _bc.NewCT_OfficeArtExtensionList()
				if _gdf := d.DecodeElement(_cfbd, &_fagg); _gdf != nil {
					return _gdf
				}
				_bebg.ExtLst = append(_bebg.ExtLst, _cfbd)
			default:
				_b.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006ce\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005fF\u006f\u0072\u0045\u0061\u0063\u0068\u0020\u0025\u0076", _fagg.Name)
				if _gaacg := d.Skip(); _gaacg != nil {
					return _gaacg
				}
			}
		case _d.EndElement:
			break _cefg
		case _d.CharData:
		}
	}
	return nil
}
func (_bbfg *RelIds) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_bbfg.CT_RelIds = *NewCT_RelIds()
	for _, _dddg := range start.Attr {
		if _dddg.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073" && _dddg.Name.Local == "\u0064\u006d" || _dddg.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f\u002fp\u0075\u0072\u006c.\u006f\u0063\u006cc\u002e\u006fr\u0067\u002f\u006f\u006f\u0078\u006dl\u002fof\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073" && _dddg.Name.Local == "\u0064\u006d" {
			_gbgf, _dacff := _dddg.Value, error(nil)
			if _dacff != nil {
				return _dacff
			}
			_bbfg.DmAttr = _gbgf
			continue
		}
		if _dddg.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073" && _dddg.Name.Local == "\u006c\u006f" || _dddg.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f\u002fp\u0075\u0072\u006c.\u006f\u0063\u006cc\u002e\u006fr\u0067\u002f\u006f\u006f\u0078\u006dl\u002fof\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073" && _dddg.Name.Local == "\u006c\u006f" {
			_gaagfc, _gdbg := _dddg.Value, error(nil)
			if _gdbg != nil {
				return _gdbg
			}
			_bbfg.LoAttr = _gaagfc
			continue
		}
		if _dddg.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073" && _dddg.Name.Local == "\u0071\u0073" || _dddg.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f\u002fp\u0075\u0072\u006c.\u006f\u0063\u006cc\u002e\u006fr\u0067\u002f\u006f\u006f\u0078\u006dl\u002fof\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073" && _dddg.Name.Local == "\u0071\u0073" {
			_bcb, _afdaf := _dddg.Value, error(nil)
			if _afdaf != nil {
				return _afdaf
			}
			_bbfg.QsAttr = _bcb
			continue
		}
		if _dddg.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073" && _dddg.Name.Local == "\u0063\u0073" || _dddg.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f\u002fp\u0075\u0072\u006c.\u006f\u0063\u006cc\u002e\u006fr\u0067\u002f\u006f\u006f\u0078\u006dl\u002fof\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073" && _dddg.Name.Local == "\u0063\u0073" {
			_fega, _dfac := _dddg.Value, error(nil)
			if _dfac != nil {
				return _dfac
			}
			_bbfg.CsAttr = _fega
			continue
		}
	}
	for {
		_gedec, _fbbc := d.Token()
		if _fbbc != nil {
			return _f.Errorf("\u0070a\u0072s\u0069\u006e\u0067\u0020\u0052e\u006c\u0049d\u0073\u003a\u0020\u0025\u0073", _fbbc)
		}
		if _bfge, _acdcd := _gedec.(_d.EndElement); _acdcd && _bfge.Name == start.Name {
			break
		}
	}
	return nil
}
func (_fbca *ST_ChildOrderType) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_fbca = 0
	case "\u0062":
		*_fbca = 1
	case "\u0074":
		*_fbca = 2
	}
	return nil
}

// Validate validates the CT_Algorithm and its children
func (_ebc *CT_Algorithm) Validate() error {
	return _ebc.ValidateWithPath("\u0043\u0054\u005fA\u006c\u0067\u006f\u0072\u0069\u0074\u0068\u006d")
}

const (
	ST_CenterShapeMappingUnset ST_CenterShapeMapping = 0
	ST_CenterShapeMappingNone  ST_CenterShapeMapping = 1
	ST_CenterShapeMappingFNode ST_CenterShapeMapping = 2
)

func (_dcdc *CT_StyleDefinition) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _ccaf := range start.Attr {
		if _ccaf.Name.Local == "\u0075\u006e\u0069\u0071\u0075\u0065\u0049\u0064" {
			_beddd, _gfec := _ccaf.Value, error(nil)
			if _gfec != nil {
				return _gfec
			}
			_dcdc.UniqueIdAttr = &_beddd
			continue
		}
		if _ccaf.Name.Local == "\u006d\u0069\u006e\u0056\u0065\u0072" {
			_eaddb, _ecbg := _ccaf.Value, error(nil)
			if _ecbg != nil {
				return _ecbg
			}
			_dcdc.MinVerAttr = &_eaddb
			continue
		}
	}
_bgdeg:
	for {
		_afecf, _dbcb := d.Token()
		if _dbcb != nil {
			return _dbcb
		}
		switch _aedg := _afecf.(type) {
		case _d.StartElement:
			switch _aedg.Name {
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0074\u0069\u0074l\u0065"}:
				_cceb := NewCT_SDName()
				if _eegf := d.DecodeElement(_cceb, &_aedg); _eegf != nil {
					return _eegf
				}
				_dcdc.Title = append(_dcdc.Title, _cceb)
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0064\u0065\u0073\u0063"}:
				_aedga := NewCT_SDDescription()
				if _ddbf := d.DecodeElement(_aedga, &_aedg); _ddbf != nil {
					return _ddbf
				}
				_dcdc.Desc = append(_dcdc.Desc, _aedga)
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0061\u0074\u004c\u0073\u0074"}:
				_dcdc.CatLst = NewCT_SDCategories()
				if _ccafb := d.DecodeElement(_dcdc.CatLst, &_aedg); _ccafb != nil {
					return _ccafb
				}
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0073c\u0065\u006e\u0065\u0033\u0064"}:
				_dcdc.Scene3d = _bc.NewCT_Scene3D()
				if _fbee := d.DecodeElement(_dcdc.Scene3d, &_aedg); _fbee != nil {
					return _fbee
				}
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0073\u0074\u0079\u006c\u0065\u004c\u0062\u006c"}:
				_cdbce := NewCT_StyleLabel()
				if _ggcc := d.DecodeElement(_cdbce, &_aedg); _ggcc != nil {
					return _ggcc
				}
				_dcdc.StyleLbl = append(_dcdc.StyleLbl, _cdbce)
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_dcdc.ExtLst = _bc.NewCT_OfficeArtExtensionList()
				if _cbeg := d.DecodeElement(_dcdc.ExtLst, &_aedg); _cbeg != nil {
					return _cbeg
				}
			default:
				_b.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0065l\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0053\u0074\u0079\u006c\u0065\u0044e\u0066\u0069\u006e\u0069\u0074\u0069\u006f\u006e\u0020\u0025\u0076", _aedg.Name)
				if _bcdeb := d.Skip(); _bcdeb != nil {
					return _bcdeb
				}
			}
		case _d.EndElement:
			break _bgdeg
		case _d.CharData:
		}
	}
	return nil
}
func (_bdabf ST_CenterShapeMapping) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_cdggb := _d.Attr{}
	_cdggb.Name = name
	switch _bdabf {
	case ST_CenterShapeMappingUnset:
		_cdggb.Value = ""
	case ST_CenterShapeMappingNone:
		_cdggb.Value = "\u006e\u006f\u006e\u0065"
	case ST_CenterShapeMappingFNode:
		_cdggb.Value = "\u0066\u004e\u006fd\u0065"
	}
	return _cdggb, nil
}
func (_ggfg *CT_Category) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0074\u0079\u0070\u0065"}, Value: _f.Sprintf("\u0025\u0076", _ggfg.TypeAttr)})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0070\u0072\u0069"}, Value: _f.Sprintf("\u0025\u0076", _ggfg.PriAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

type ST_CenterShapeMapping byte

func (_ebdc *ST_AnimOneStr) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_ecbgd, _cfddg := d.Token()
	if _cfddg != nil {
		return _cfddg
	}
	if _febf, _beda := _ecbgd.(_d.EndElement); _beda && _febf.Name == start.Name {
		*_ebdc = 1
		return nil
	}
	if _adfd, _ecea := _ecbgd.(_d.CharData); !_ecea {
		return _f.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _ecbgd)
	} else {
		switch string(_adfd) {
		case "":
			*_ebdc = 0
		case "\u006e\u006f\u006e\u0065":
			*_ebdc = 1
		case "\u006f\u006e\u0065":
			*_ebdc = 2
		case "\u0062\u0072\u0061\u006e\u0063\u0068":
			*_ebdc = 3
		}
	}
	_ecbgd, _cfddg = d.Token()
	if _cfddg != nil {
		return _cfddg
	}
	if _edfbe, _cfgg := _ecbgd.(_d.EndElement); _cfgg && _edfbe.Name == start.Name {
		return nil
	}
	return _f.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _ecbgd)
}
func (_dded ST_ArrowheadStyle) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_eeaf := _d.Attr{}
	_eeaf.Name = name
	switch _dded {
	case ST_ArrowheadStyleUnset:
		_eeaf.Value = ""
	case ST_ArrowheadStyleAuto:
		_eeaf.Value = "\u0061\u0075\u0074\u006f"
	case ST_ArrowheadStyleArr:
		_eeaf.Value = "\u0061\u0072\u0072"
	case ST_ArrowheadStyleNoArr:
		_eeaf.Value = "\u006e\u006f\u0041r\u0072"
	}
	return _eeaf, nil
}
func (_egeb ST_PyramidAccentTextMargin) Validate() error { return _egeb.ValidateWithPath("") }
func (_afcc ST_AlgorithmType) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_cafdb := _d.Attr{}
	_cafdb.Name = name
	switch _afcc {
	case ST_AlgorithmTypeUnset:
		_cafdb.Value = ""
	case ST_AlgorithmTypeComposite:
		_cafdb.Value = "\u0063o\u006d\u0070\u006f\u0073\u0069\u0074e"
	case ST_AlgorithmTypeConn:
		_cafdb.Value = "\u0063\u006f\u006e\u006e"
	case ST_AlgorithmTypeCycle:
		_cafdb.Value = "\u0063\u0079\u0063l\u0065"
	case ST_AlgorithmTypeHierChild:
		_cafdb.Value = "\u0068i\u0065\u0072\u0043\u0068\u0069\u006cd"
	case ST_AlgorithmTypeHierRoot:
		_cafdb.Value = "\u0068\u0069\u0065\u0072\u0052\u006f\u006f\u0074"
	case ST_AlgorithmTypePyra:
		_cafdb.Value = "\u0070\u0079\u0072\u0061"
	case ST_AlgorithmTypeLin:
		_cafdb.Value = "\u006c\u0069\u006e"
	case ST_AlgorithmTypeSp:
		_cafdb.Value = "\u0073\u0070"
	case ST_AlgorithmTypeTx:
		_cafdb.Value = "\u0074\u0078"
	case ST_AlgorithmTypeSnake:
		_cafdb.Value = "\u0073\u006e\u0061k\u0065"
	}
	return _cafdb, nil
}

// Validate validates the CT_SDCategories and its children
func (_bacca *CT_SDCategories) Validate() error {
	return _bacca.ValidateWithPath("\u0043T\u005fS\u0044\u0043\u0061\u0074\u0065\u0067\u006f\u0072\u0069\u0065\u0073")
}

// ValidateWithPath validates the CT_OrgChart and its children, prefixing error messages with path
func (_cdedg *CT_OrgChart) ValidateWithPath(path string) error { return nil }
func (_bace ST_Direction) String() string {
	switch _bace {
	case 0:
		return ""
	case 1:
		return "\u006e\u006f\u0072\u006d"
	case 2:
		return "\u0072\u0065\u0076"
	}
	return ""
}
func (_eefc ST_DiagramHorizontalAlignment) String() string {
	switch _eefc {
	case 0:
		return ""
	case 1:
		return "\u006c"
	case 2:
		return "\u0063\u0074\u0072"
	case 3:
		return "\u0072"
	case 4:
		return "\u006e\u006f\u006e\u0065"
	}
	return ""
}
func ParseSliceST_ElementTypes(s string) (ST_ElementTypes, error) { return ST_ElementTypes{}, nil }
func (_gf *AG_ConstraintAttributes) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _gf.TypeAttr != ST_ConstraintTypeUnset {
		_a, _dg := _gf.TypeAttr.MarshalXMLAttr(_d.Name{Local: "\u0074\u0079\u0070\u0065"})
		if _dg != nil {
			return _dg
		}
		start.Attr = append(start.Attr, _a)
	}
	if _gf.ForAttr != ST_ConstraintRelationshipUnset {
		_c, _fc := _gf.ForAttr.MarshalXMLAttr(_d.Name{Local: "\u0066\u006f\u0072"})
		if _fc != nil {
			return _fc
		}
		start.Attr = append(start.Attr, _c)
	}
	if _gf.ForNameAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0066o\u0072\u004e\u0061\u006d\u0065"}, Value: _f.Sprintf("\u0025\u0076", *_gf.ForNameAttr)})
	}
	if _gf.PtTypeAttr != ST_ElementTypeUnset {
		_db, _cc := _gf.PtTypeAttr.MarshalXMLAttr(_d.Name{Local: "\u0070\u0074\u0054\u0079\u0070\u0065"})
		if _cc != nil {
			return _cc
		}
		start.Attr = append(start.Attr, _db)
	}
	return nil
}
func (_cgee *CT_StyleDefinition) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _cgee.UniqueIdAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0075\u006e\u0069\u0071\u0075\u0065\u0049\u0064"}, Value: _f.Sprintf("\u0025\u0076", *_cgee.UniqueIdAttr)})
	}
	if _cgee.MinVerAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u006d\u0069\u006e\u0056\u0065\u0072"}, Value: _f.Sprintf("\u0025\u0076", *_cgee.MinVerAttr)})
	}
	e.EncodeToken(start)
	if _cgee.Title != nil {
		_adgg := _d.StartElement{Name: _d.Name{Local: "\u0074\u0069\u0074l\u0065"}}
		for _, _adaea := range _cgee.Title {
			e.EncodeElement(_adaea, _adgg)
		}
	}
	if _cgee.Desc != nil {
		_dfcf := _d.StartElement{Name: _d.Name{Local: "\u0064\u0065\u0073\u0063"}}
		for _, _fgfb := range _cgee.Desc {
			e.EncodeElement(_fgfb, _dfcf)
		}
	}
	if _cgee.CatLst != nil {
		_fbedf := _d.StartElement{Name: _d.Name{Local: "\u0063\u0061\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_cgee.CatLst, _fbedf)
	}
	if _cgee.Scene3d != nil {
		_ggfdc := _d.StartElement{Name: _d.Name{Local: "\u0073c\u0065\u006e\u0065\u0033\u0064"}}
		e.EncodeElement(_cgee.Scene3d, _ggfdc)
	}
	_bceaf := _d.StartElement{Name: _d.Name{Local: "\u0073\u0074\u0079\u006c\u0065\u004c\u0062\u006c"}}
	for _, _bbcfb := range _cgee.StyleLbl {
		e.EncodeElement(_bbcfb, _bceaf)
	}
	if _cgee.ExtLst != nil {
		_ffgb := _d.StartElement{Name: _d.Name{Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_cgee.ExtLst, _ffgb)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

const (
	ST_BoolOperatorUnset ST_BoolOperator = 0
	ST_BoolOperatorNone  ST_BoolOperator = 1
	ST_BoolOperatorEqu   ST_BoolOperator = 2
	ST_BoolOperatorGte   ST_BoolOperator = 3
	ST_BoolOperatorLte   ST_BoolOperator = 4
)

func (_gdea *ST_ParameterVal) ValidateWithPath(path string) error {
	_gafce := []string{}
	if _gdea.ST_DiagramHorizontalAlignment != ST_DiagramHorizontalAlignmentUnset {
		_gafce = append(_gafce, "\u0053\u0054_\u0044\u0069\u0061\u0067\u0072\u0061\u006d\u0048\u006f\u0072\u0069\u007a\u006f\u006e\u0074\u0061\u006c\u0041\u006c\u0069\u0067\u006eme\u006e\u0074")
	}
	if _gdea.ST_VerticalAlignment != ST_VerticalAlignmentUnset {
		_gafce = append(_gafce, "S\u0054_\u0056\u0065\u0072\u0074\u0069\u0063\u0061\u006cA\u006c\u0069\u0067\u006eme\u006e\u0074")
	}
	if _gdea.ST_ChildDirection != ST_ChildDirectionUnset {
		_gafce = append(_gafce, "\u0053\u0054\u005f\u0043\u0068\u0069\u006c\u0064\u0044\u0069\u0072\u0065c\u0074\u0069\u006f\u006e")
	}
	if _gdea.ST_ChildAlignment != ST_ChildAlignmentUnset {
		_gafce = append(_gafce, "\u0053\u0054\u005f\u0043\u0068\u0069\u006c\u0064\u0041\u006c\u0069\u0067n\u006d\u0065\u006e\u0074")
	}
	if _gdea.ST_SecondaryChildAlignment != ST_SecondaryChildAlignmentUnset {
		_gafce = append(_gafce, "\u0053\u0054\u005f\u0053\u0065\u0063\u006f\u006e\u0064\u0061\u0072y\u0043\u0068\u0069\u006c\u0064\u0041\u006c\u0069\u0067\u006em\u0065\u006e\u0074")
	}
	if _gdea.ST_LinearDirection != ST_LinearDirectionUnset {
		_gafce = append(_gafce, "\u0053T\u005fL\u0069\u006e\u0065\u0061\u0072D\u0069\u0072e\u0063\u0074\u0069\u006f\u006e")
	}
	if _gdea.ST_SecondaryLinearDirection != ST_SecondaryLinearDirectionUnset {
		_gafce = append(_gafce, "S\u0054\u005f\u0053\u0065\u0063\u006fn\u0064\u0061\u0072\u0079\u004c\u0069\u006e\u0065\u0061r\u0044\u0069\u0072e\u0063t\u0069\u006f\u006e")
	}
	if _gdea.ST_StartingElement != ST_StartingElementUnset {
		_gafce = append(_gafce, "\u0053T\u005fS\u0074\u0061\u0072\u0074\u0069n\u0067\u0045l\u0065\u006d\u0065\u006e\u0074")
	}
	if _gdea.ST_BendPoint != ST_BendPointUnset {
		_gafce = append(_gafce, "\u0053\u0054\u005fB\u0065\u006e\u0064\u0050\u006f\u0069\u006e\u0074")
	}
	if _gdea.ST_ConnectorRouting != ST_ConnectorRoutingUnset {
		_gafce = append(_gafce, "\u0053\u0054\u005f\u0043on\u006e\u0065\u0063\u0074\u006f\u0072\u0052\u006f\u0075\u0074\u0069\u006e\u0067")
	}
	if _gdea.ST_ArrowheadStyle != ST_ArrowheadStyleUnset {
		_gafce = append(_gafce, "\u0053\u0054\u005f\u0041\u0072\u0072\u006f\u0077\u0068\u0065\u0061\u0064S\u0074\u0079\u006c\u0065")
	}
	if _gdea.ST_ConnectorDimension != ST_ConnectorDimensionUnset {
		_gafce = append(_gafce, "S\u0054\u005f\u0043\u006fnn\u0065c\u0074\u006f\u0072\u0044\u0069m\u0065\u006e\u0073\u0069\u006f\u006e")
	}
	if _gdea.ST_RotationPath != ST_RotationPathUnset {
		_gafce = append(_gafce, "\u0053T\u005fR\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0050\u0061\u0074\u0068")
	}
	if _gdea.ST_CenterShapeMapping != ST_CenterShapeMappingUnset {
		_gafce = append(_gafce, "S\u0054\u005f\u0043\u0065nt\u0065r\u0053\u0068\u0061\u0070\u0065M\u0061\u0070\u0070\u0069\u006e\u0067")
	}
	if _gdea.ST_NodeHorizontalAlignment != ST_NodeHorizontalAlignmentUnset {
		_gafce = append(_gafce, "\u0053\u0054\u005f\u004e\u006f\u0064\u0065\u0048\u006f\u0072\u0069z\u006f\u006e\u0074\u0061\u006c\u0041\u006c\u0069\u0067\u006em\u0065\u006e\u0074")
	}
	if _gdea.ST_NodeVerticalAlignment != ST_NodeVerticalAlignmentUnset {
		_gafce = append(_gafce, "\u0053T\u005f\u004e\u006f\u0064\u0065\u0056\u0065\u0072\u0074\u0069\u0063a\u006c\u0041\u006c\u0069\u0067\u006e\u006d\u0065\u006e\u0074")
	}
	if _gdea.ST_FallbackDimension != ST_FallbackDimensionUnset {
		_gafce = append(_gafce, "S\u0054_\u0046\u0061\u006c\u006c\u0062\u0061\u0063\u006bD\u0069\u006d\u0065\u006esi\u006f\u006e")
	}
	if _gdea.ST_TextDirection != ST_TextDirectionUnset {
		_gafce = append(_gafce, "\u0053\u0054_\u0054\u0065\u0078t\u0044\u0069\u0072\u0065\u0063\u0074\u0069\u006f\u006e")
	}
	if _gdea.ST_PyramidAccentPosition != ST_PyramidAccentPositionUnset {
		_gafce = append(_gafce, "\u0053T\u005f\u0050\u0079\u0072\u0061\u006d\u0069\u0064\u0041\u0063\u0063e\u006e\u0074\u0050\u006f\u0073\u0069\u0074\u0069\u006f\u006e")
	}
	if _gdea.ST_PyramidAccentTextMargin != ST_PyramidAccentTextMarginUnset {
		_gafce = append(_gafce, "\u0053\u0054\u005f\u0050\u0079\u0072\u0061\u006d\u0069\u0064\u0041c\u0063\u0065\u006e\u0074\u0054\u0065\u0078\u0074\u004d\u0061r\u0067\u0069\u006e")
	}
	if _gdea.ST_TextBlockDirection != ST_TextBlockDirectionUnset {
		_gafce = append(_gafce, "S\u0054\u005f\u0054\u0065xt\u0042l\u006f\u0063\u006b\u0044\u0069r\u0065\u0063\u0074\u0069\u006f\u006e")
	}
	if _gdea.ST_TextAnchorHorizontal != ST_TextAnchorHorizontalUnset {
		_gafce = append(_gafce, "\u0053\u0054\u005fTe\u0078\u0074\u0041\u006e\u0063\u0068\u006f\u0072\u0048\u006f\u0072\u0069\u007a\u006f\u006e\u0074\u0061\u006c")
	}
	if _gdea.ST_TextAnchorVertical != ST_TextAnchorVerticalUnset {
		_gafce = append(_gafce, "S\u0054\u005f\u0054\u0065xt\u0041n\u0063\u0068\u006f\u0072\u0056e\u0072\u0074\u0069\u0063\u0061\u006c")
	}
	if _gdea.ST_DiagramTextAlignment != ST_DiagramTextAlignmentUnset {
		_gafce = append(_gafce, "\u0053\u0054\u005fDi\u0061\u0067\u0072\u0061\u006d\u0054\u0065\u0078\u0074\u0041\u006c\u0069\u0067\u006e\u006d\u0065\u006e\u0074")
	}
	if _gdea.ST_AutoTextRotation != ST_AutoTextRotationUnset {
		_gafce = append(_gafce, "\u0053\u0054\u005f\u0041ut\u006f\u0054\u0065\u0078\u0074\u0052\u006f\u0074\u0061\u0074\u0069\u006f\u006e")
	}
	if _gdea.ST_GrowDirection != ST_GrowDirectionUnset {
		_gafce = append(_gafce, "\u0053\u0054_\u0047\u0072\u006fw\u0044\u0069\u0072\u0065\u0063\u0074\u0069\u006f\u006e")
	}
	if _gdea.ST_FlowDirection != ST_FlowDirectionUnset {
		_gafce = append(_gafce, "\u0053\u0054_\u0046\u006c\u006fw\u0044\u0069\u0072\u0065\u0063\u0074\u0069\u006f\u006e")
	}
	if _gdea.ST_ContinueDirection != ST_ContinueDirectionUnset {
		_gafce = append(_gafce, "S\u0054_\u0043\u006f\u006e\u0074\u0069\u006e\u0075\u0065D\u0069\u0072\u0065\u0063ti\u006f\u006e")
	}
	if _gdea.ST_Breakpoint != ST_BreakpointUnset {
		_gafce = append(_gafce, "\u0053\u0054\u005f\u0042\u0072\u0065\u0061\u006b\u0070\u006f\u0069\u006e\u0074")
	}
	if _gdea.ST_Offset != ST_OffsetUnset {
		_gafce = append(_gafce, "\u0053T\u005f\u004f\u0066\u0066\u0073\u0065t")
	}
	if _gdea.ST_HierarchyAlignment != ST_HierarchyAlignmentUnset {
		_gafce = append(_gafce, "S\u0054\u005f\u0048\u0069er\u0061r\u0063\u0068\u0079\u0041\u006ci\u0067\u006e\u006d\u0065\u006e\u0074")
	}
	if _gdea.Int32 != nil {
		_gafce = append(_gafce, "\u0049\u006e\u00743\u0032")
	}
	if _gdea.Float64 != nil {
		_gafce = append(_gafce, "\u0046l\u006f\u0061\u0074\u0036\u0034")
	}
	if _gdea.Bool != nil {
		_gafce = append(_gafce, "\u0042\u006f\u006f\u006c")
	}
	if _gdea.StringVal != nil {
		_gafce = append(_gafce, "\u0053t\u0072\u0069\u006e\u0067\u0056\u0061l")
	}
	if _gdea.ST_ConnectorPoint != ST_ConnectorPointUnset {
		_gafce = append(_gafce, "\u0053\u0054\u005f\u0043\u006f\u006e\u006e\u0065\u0063\u0074\u006f\u0072P\u006f\u0069\u006e\u0074")
	}
	if len(_gafce) > 1 {
		return _f.Errorf("%\u0073\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u006d\u0065\u006d\u0062\u0065r\u0073\u0020\u0073e\u0074:\u0020\u0025\u0076", path, _gafce)
	}
	return nil
}
func (_cgaa ST_CxnType) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_cgaa.String(), start)
}
func (_cgda *CT_CTDescription) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _dee := range start.Attr {
		if _dee.Name.Local == "\u006c\u0061\u006e\u0067" {
			_afa, _aggd := _dee.Value, error(nil)
			if _aggd != nil {
				return _aggd
			}
			_cgda.LangAttr = &_afa
			continue
		}
		if _dee.Name.Local == "\u0076\u0061\u006c" {
			_gdb, _abc := _dee.Value, error(nil)
			if _abc != nil {
				return _abc
			}
			_cgda.ValAttr = _gdb
			continue
		}
	}
	for {
		_ccg, _fbb := d.Token()
		if _fbb != nil {
			return _f.Errorf("\u0070\u0061\u0072\u0073i\u006e\u0067\u0020\u0043\u0054\u005f\u0043\u0054\u0044\u0065s\u0063r\u0069\u0070\u0074\u0069\u006f\u006e\u003a \u0025\u0073", _fbb)
		}
		if _gdab, _daf := _ccg.(_d.EndElement); _daf && _gdab.Name == start.Name {
			break
		}
	}
	return nil
}
func (_cdcg ST_AnimLvlStr) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_egadc := _d.Attr{}
	_egadc.Name = name
	switch _cdcg {
	case ST_AnimLvlStrUnset:
		_egadc.Value = ""
	case ST_AnimLvlStrNone:
		_egadc.Value = "\u006e\u006f\u006e\u0065"
	case ST_AnimLvlStrLvl:
		_egadc.Value = "\u006c\u0076\u006c"
	case ST_AnimLvlStrCtr:
		_egadc.Value = "\u0063\u0074\u0072"
	}
	return _egadc, nil
}
func (_fbagf *ST_DiagramHorizontalAlignment) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_fbagf = 0
	case "\u006c":
		*_fbagf = 1
	case "\u0063\u0074\u0072":
		*_fbagf = 2
	case "\u0072":
		*_fbagf = 3
	case "\u006e\u006f\u006e\u0065":
		*_fbagf = 4
	}
	return nil
}
func (_fcadf ST_PyramidAccentTextMargin) ValidateWithPath(path string) error {
	switch _fcadf {
	case 0, 1, 2:
	default:
		return _f.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_fcadf))
	}
	return nil
}
func (_bbab ST_ParameterId) Validate() error { return _bbab.ValidateWithPath("") }
func NewCT_Choose() *CT_Choose               { _dcc := &CT_Choose{}; return _dcc }

const (
	ST_GrowDirectionUnset ST_GrowDirection = 0
	ST_GrowDirectionTL    ST_GrowDirection = 1
	ST_GrowDirectionTR    ST_GrowDirection = 2
	ST_GrowDirectionBL    ST_GrowDirection = 3
	ST_GrowDirectionBR    ST_GrowDirection = 4
)
const (
	ST_FunctionOperatorUnset ST_FunctionOperator = 0
	ST_FunctionOperatorEqu   ST_FunctionOperator = 1
	ST_FunctionOperatorNeq   ST_FunctionOperator = 2
	ST_FunctionOperatorGt    ST_FunctionOperator = 3
	ST_FunctionOperatorLt    ST_FunctionOperator = 4
	ST_FunctionOperatorGte   ST_FunctionOperator = 5
	ST_FunctionOperatorLte   ST_FunctionOperator = 6
)

func (_ccgb *LayoutDef) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_ccgb.CT_DiagramDefinition = *NewCT_DiagramDefinition()
	for _, _fdcb := range start.Attr {
		if _fdcb.Name.Local == "\u0075\u006e\u0069\u0071\u0075\u0065\u0049\u0064" {
			_dgcc, _ddcgg := _fdcb.Value, error(nil)
			if _ddcgg != nil {
				return _ddcgg
			}
			_ccgb.UniqueIdAttr = &_dgcc
			continue
		}
		if _fdcb.Name.Local == "\u006d\u0069\u006e\u0056\u0065\u0072" {
			_bddd, _eace := _fdcb.Value, error(nil)
			if _eace != nil {
				return _eace
			}
			_ccgb.MinVerAttr = &_bddd
			continue
		}
		if _fdcb.Name.Local == "\u0064\u0065\u0066\u0053\u0074\u0079\u006c\u0065" {
			_bdaba, _cbbaf := _fdcb.Value, error(nil)
			if _cbbaf != nil {
				return _cbbaf
			}
			_ccgb.DefStyleAttr = &_bdaba
			continue
		}
	}
_gabc:
	for {
		_eafca, _bffdd := d.Token()
		if _bffdd != nil {
			return _bffdd
		}
		switch _cfdg := _eafca.(type) {
		case _d.StartElement:
			switch _cfdg.Name {
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0074\u0069\u0074l\u0065"}:
				_gfgc := NewCT_Name()
				if _dbead := d.DecodeElement(_gfgc, &_cfdg); _dbead != nil {
					return _dbead
				}
				_ccgb.Title = append(_ccgb.Title, _gfgc)
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0064\u0065\u0073\u0063"}:
				_gbag := NewCT_Description()
				if _ecec := d.DecodeElement(_gbag, &_cfdg); _ecec != nil {
					return _ecec
				}
				_ccgb.Desc = append(_ccgb.Desc, _gbag)
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0061\u0074\u004c\u0073\u0074"}:
				_ccgb.CatLst = NewCT_Categories()
				if _cbggf := d.DecodeElement(_ccgb.CatLst, &_cfdg); _cbggf != nil {
					return _cbggf
				}
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0073\u0061\u006d\u0070\u0044\u0061\u0074\u0061"}:
				_ccgb.SampData = NewCT_SampleData()
				if _fefbb := d.DecodeElement(_ccgb.SampData, &_cfdg); _fefbb != nil {
					return _fefbb
				}
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0073t\u0079\u006c\u0065\u0044\u0061\u0074a"}:
				_ccgb.StyleData = NewCT_SampleData()
				if _egbg := d.DecodeElement(_ccgb.StyleData, &_cfdg); _egbg != nil {
					return _egbg
				}
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063l\u0072\u0044\u0061\u0074\u0061"}:
				_ccgb.ClrData = NewCT_SampleData()
				if _afbc := d.DecodeElement(_ccgb.ClrData, &_cfdg); _afbc != nil {
					return _afbc
				}
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u006c\u0061\u0079\u006f\u0075\u0074\u004e\u006f\u0064\u0065"}:
				if _dbce := d.DecodeElement(_ccgb.LayoutNode, &_cfdg); _dbce != nil {
					return _dbce
				}
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_ccgb.ExtLst = _bc.NewCT_OfficeArtExtensionList()
				if _afgfd := d.DecodeElement(_ccgb.ExtLst, &_cfdg); _afgfd != nil {
					return _afgfd
				}
			default:
				_b.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u004c\u0061\u0079\u006f\u0075\u0074D\u0065\u0066 \u0025\u0076", _cfdg.Name)
				if _aedgg := d.Skip(); _aedgg != nil {
					return _aedgg
				}
			}
		case _d.EndElement:
			break _gabc
		case _d.CharData:
		}
	}
	return nil
}
func (_ffeb *ST_ChildAlignment) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_ffeb = 0
	case "\u0074":
		*_ffeb = 1
	case "\u0062":
		*_ffeb = 2
	case "\u006c":
		*_ffeb = 3
	case "\u0072":
		*_ffeb = 4
	}
	return nil
}
func (_efeaf *LayoutDefHdrLst) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_efeaf.CT_DiagramDefinitionHeaderLst = *NewCT_DiagramDefinitionHeaderLst()
_adaff:
	for {
		_dgadg, _gcgf := d.Token()
		if _gcgf != nil {
			return _gcgf
		}
		switch _gabbc := _dgadg.(type) {
		case _d.StartElement:
			switch _gabbc.Name {
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u006c\u0061\u0079o\u0075\u0074\u0044\u0065\u0066\u0048\u0064\u0072"}:
				_abcc := NewCT_DiagramDefinitionHeader()
				if _ddaa := d.DecodeElement(_abcc, &_gabbc); _ddaa != nil {
					return _ddaa
				}
				_efeaf.LayoutDefHdr = append(_efeaf.LayoutDefHdr, _abcc)
			default:
				_b.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074e\u0064\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0020\u006f\u006e\u0020\u004c\u0061\u0079\u006f\u0075\u0074D\u0065\u0066\u0048\u0064\u0072\u004c\u0073\u0074\u0020\u0025\u0076", _gabbc.Name)
				if _ffggb := d.Skip(); _ffggb != nil {
					return _ffggb
				}
			}
		case _d.EndElement:
			break _adaff
		case _d.CharData:
		}
	}
	return nil
}
func NewCT_Colors() *CT_Colors { _ece := &CT_Colors{}; return _ece }
func (_becdfc ST_TextDirection) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_dggf := _d.Attr{}
	_dggf.Name = name
	switch _becdfc {
	case ST_TextDirectionUnset:
		_dggf.Value = ""
	case ST_TextDirectionFromT:
		_dggf.Value = "\u0066\u0072\u006fm\u0054"
	case ST_TextDirectionFromB:
		_dggf.Value = "\u0066\u0072\u006fm\u0042"
	}
	return _dggf, nil
}
func (_acbca ST_PyramidAccentPosition) ValidateWithPath(path string) error {
	switch _acbca {
	case 0, 1, 2:
	default:
		return _f.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_acbca))
	}
	return nil
}
func (_bbagb ST_VariableType) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_cbagb := _d.Attr{}
	_cbagb.Name = name
	switch _bbagb {
	case ST_VariableTypeUnset:
		_cbagb.Value = ""
	case ST_VariableTypeNone:
		_cbagb.Value = "\u006e\u006f\u006e\u0065"
	case ST_VariableTypeOrgChart:
		_cbagb.Value = "\u006f\u0072\u0067\u0043\u0068\u0061\u0072\u0074"
	case ST_VariableTypeChMax:
		_cbagb.Value = "\u0063\u0068\u004da\u0078"
	case ST_VariableTypeChPref:
		_cbagb.Value = "\u0063\u0068\u0050\u0072\u0065\u0066"
	case ST_VariableTypeBulEnabled:
		_cbagb.Value = "\u0062\u0075\u006c\u0045\u006e\u0061\u0062\u006c\u0065\u0064"
	case ST_VariableTypeDir:
		_cbagb.Value = "\u0064\u0069\u0072"
	case ST_VariableTypeHierBranch:
		_cbagb.Value = "\u0068\u0069\u0065\u0072\u0042\u0072\u0061\u006e\u0063\u0068"
	case ST_VariableTypeAnimOne:
		_cbagb.Value = "\u0061n\u0069\u006d\u004f\u006e\u0065"
	case ST_VariableTypeAnimLvl:
		_cbagb.Value = "\u0061n\u0069\u006d\u004c\u0076\u006c"
	case ST_VariableTypeResizeHandles:
		_cbagb.Value = "\u0072\u0065\u0073\u0069\u007a\u0065\u0048\u0061\u006e\u0064\u006c\u0065\u0073"
	}
	return _cbagb, nil
}
func (_acfe *ST_HierarchyAlignment) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_acfe = 0
	case "\u0074\u004c":
		*_acfe = 1
	case "\u0074\u0052":
		*_acfe = 2
	case "\u0074\u0043\u0074\u0072\u0043\u0068":
		*_acfe = 3
	case "\u0074C\u0074\u0072\u0044\u0065\u0073":
		*_acfe = 4
	case "\u0062\u004c":
		*_acfe = 5
	case "\u0062\u0052":
		*_acfe = 6
	case "\u0062\u0043\u0074\u0072\u0043\u0068":
		*_acfe = 7
	case "\u0062C\u0074\u0072\u0044\u0065\u0073":
		*_acfe = 8
	case "\u006c\u0054":
		*_acfe = 9
	case "\u006c\u0042":
		*_acfe = 10
	case "\u006c\u0043\u0074\u0072\u0043\u0068":
		*_acfe = 11
	case "\u006cC\u0074\u0072\u0044\u0065\u0073":
		*_acfe = 12
	case "\u0072\u0054":
		*_acfe = 13
	case "\u0072\u0042":
		*_acfe = 14
	case "\u0072\u0043\u0074\u0072\u0043\u0068":
		*_acfe = 15
	case "\u0072C\u0074\u0072\u0044\u0065\u0073":
		*_acfe = 16
	}
	return nil
}

const (
	ST_DiagramTextAlignmentUnset ST_DiagramTextAlignment = 0
	ST_DiagramTextAlignmentL     ST_DiagramTextAlignment = 1
	ST_DiagramTextAlignmentCtr   ST_DiagramTextAlignment = 2
	ST_DiagramTextAlignmentR     ST_DiagramTextAlignment = 3
)

func (_bgaab *ST_TextAnchorHorizontal) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_bgaab = 0
	case "\u006e\u006f\u006e\u0065":
		*_bgaab = 1
	case "\u0063\u0074\u0072":
		*_bgaab = 2
	}
	return nil
}
func (_cgaaa ST_ConnectorDimension) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_bcbg := _d.Attr{}
	_bcbg.Name = name
	switch _cgaaa {
	case ST_ConnectorDimensionUnset:
		_bcbg.Value = ""
	case ST_ConnectorDimension1D:
		_bcbg.Value = "\u0031\u0044"
	case ST_ConnectorDimension2D:
		_bcbg.Value = "\u0032\u0044"
	case ST_ConnectorDimensionCust:
		_bcbg.Value = "\u0063\u0075\u0073\u0074"
	}
	return _bcbg, nil
}
func (_eagd *ST_FunctionArgument) Validate() error { return _eagd.ValidateWithPath("") }
func (_gcebc ST_CxnType) Validate() error          { return _gcebc.ValidateWithPath("") }

type CT_Colors struct {
	MethAttr       ST_ClrAppMethod
	HueDirAttr     ST_HueDir
	EG_ColorChoice []*_bc.EG_ColorChoice
}

func (_degg *CT_ChildMax) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _aega := range start.Attr {
		if _aega.Name.Local == "\u0076\u0061\u006c" {
			_efcf, _eae := _gb.ParseInt(_aega.Value, 10, 32)
			if _eae != nil {
				return _eae
			}
			_bea := int32(_efcf)
			_degg.ValAttr = &_bea
			continue
		}
	}
	for {
		_agda, _bcde := d.Token()
		if _bcde != nil {
			return _f.Errorf("\u0070\u0061\u0072si\u006e\u0067\u0020\u0043\u0054\u005f\u0043\u0068\u0069\u006c\u0064\u004d\u0061\u0078\u003a\u0020\u0025\u0073", _bcde)
		}
		if _ddg, _cfb := _agda.(_d.EndElement); _cfb && _ddg.Name == start.Name {
			break
		}
	}
	return nil
}

// ValidateWithPath validates the CT_CTStyleLabel and its children, prefixing error messages with path
func (_egb *CT_CTStyleLabel) ValidateWithPath(path string) error {
	if _egb.FillClrLst != nil {
		if _fad := _egb.FillClrLst.ValidateWithPath(path + "/\u0046\u0069\u006c\u006c\u0043\u006c\u0072\u004c\u0073\u0074"); _fad != nil {
			return _fad
		}
	}
	if _egb.LinClrLst != nil {
		if _baf := _egb.LinClrLst.ValidateWithPath(path + "\u002f\u004c\u0069\u006e\u0043\u006c\u0072\u004c\u0073\u0074"); _baf != nil {
			return _baf
		}
	}
	if _egb.EffectClrLst != nil {
		if _fee := _egb.EffectClrLst.ValidateWithPath(path + "\u002f\u0045\u0066\u0066\u0065\u0063\u0074\u0043\u006c\u0072\u004c\u0073\u0074"); _fee != nil {
			return _fee
		}
	}
	if _egb.TxLinClrLst != nil {
		if _agf := _egb.TxLinClrLst.ValidateWithPath(path + "\u002f\u0054\u0078L\u0069\u006e\u0043\u006c\u0072\u004c\u0073\u0074"); _agf != nil {
			return _agf
		}
	}
	if _egb.TxFillClrLst != nil {
		if _cca := _egb.TxFillClrLst.ValidateWithPath(path + "\u002f\u0054\u0078\u0046\u0069\u006c\u006c\u0043\u006c\u0072\u004c\u0073\u0074"); _cca != nil {
			return _cca
		}
	}
	if _egb.TxEffectClrLst != nil {
		if _gbge := _egb.TxEffectClrLst.ValidateWithPath(path + "\u002fT\u0078E\u0066\u0066\u0065\u0063\u0074\u0043\u006c\u0072\u004c\u0073\u0074"); _gbge != nil {
			return _gbge
		}
	}
	if _egb.ExtLst != nil {
		if _ead := _egb.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _ead != nil {
			return _ead
		}
	}
	return nil
}

// ValidateWithPath validates the CT_SDDescription and its children, prefixing error messages with path
func (_aged *CT_SDDescription) ValidateWithPath(path string) error { return nil }
func (_aaec ST_TextDirection) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_aaec.String(), start)
}
func (_acgd ST_AutoTextRotation) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_bgdb := _d.Attr{}
	_bgdb.Name = name
	switch _acgd {
	case ST_AutoTextRotationUnset:
		_bgdb.Value = ""
	case ST_AutoTextRotationNone:
		_bgdb.Value = "\u006e\u006f\u006e\u0065"
	case ST_AutoTextRotationUpr:
		_bgdb.Value = "\u0075\u0070\u0072"
	case ST_AutoTextRotationGrav:
		_bgdb.Value = "\u0067\u0072\u0061\u0076"
	}
	return _bgdb, nil
}

// Validate validates the CT_OrgChart and its children
func (_cfccd *CT_OrgChart) Validate() error {
	return _cfccd.ValidateWithPath("C\u0054\u005f\u004f\u0072\u0067\u0043\u0068\u0061\u0072\u0074")
}
func NewCT_ForEach() *CT_ForEach { _aggg := &CT_ForEach{}; return _aggg }
func (_dgabe ST_OutputShapeType) ValidateWithPath(path string) error {
	switch _dgabe {
	case 0, 1, 2:
	default:
		return _f.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_dgabe))
	}
	return nil
}
func (_bccd ST_ConstraintRelationship) Validate() error { return _bccd.ValidateWithPath("") }
func NewCT_CTName() *CT_CTName                          { _fda := &CT_CTName{}; return _fda }
func (_bbea ST_FunctionOperator) String() string {
	switch _bbea {
	case 0:
		return ""
	case 1:
		return "\u0065\u0071\u0075"
	case 2:
		return "\u006e\u0065\u0071"
	case 3:
		return "\u0067\u0074"
	case 4:
		return "\u006c\u0074"
	case 5:
		return "\u0067\u0074\u0065"
	case 6:
		return "\u006c\u0074\u0065"
	}
	return ""
}
func (_dbfc *ST_PyramidAccentPosition) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_dbfc = 0
	case "\u0062\u0065\u0066":
		*_dbfc = 1
	case "\u0061\u0066\u0074":
		*_dbfc = 2
	}
	return nil
}
func (_adab ST_DiagramHorizontalAlignment) ValidateWithPath(path string) error {
	switch _adab {
	case 0, 1, 2, 3, 4:
	default:
		return _f.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_adab))
	}
	return nil
}
func (_ccdf *CT_LayoutNode) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _ccdf.NameAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u006e\u0061\u006d\u0065"}, Value: _f.Sprintf("\u0025\u0076", *_ccdf.NameAttr)})
	}
	if _ccdf.StyleLblAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0073\u0074\u0079\u006c\u0065\u004c\u0062\u006c"}, Value: _f.Sprintf("\u0025\u0076", *_ccdf.StyleLblAttr)})
	}
	if _ccdf.ChOrderAttr != ST_ChildOrderTypeUnset {
		_eegb, _ecfcf := _ccdf.ChOrderAttr.MarshalXMLAttr(_d.Name{Local: "\u0063h\u004f\u0072\u0064\u0065\u0072"})
		if _ecfcf != nil {
			return _ecfcf
		}
		start.Attr = append(start.Attr, _eegb)
	}
	if _ccdf.MoveWithAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u006d\u006f\u0076\u0065\u0057\u0069\u0074\u0068"}, Value: _f.Sprintf("\u0025\u0076", *_ccdf.MoveWithAttr)})
	}
	e.EncodeToken(start)
	if _ccdf.Alg != nil {
		_eccf := _d.StartElement{Name: _d.Name{Local: "\u0061\u006c\u0067"}}
		for _, _feeeee := range _ccdf.Alg {
			e.EncodeElement(_feeeee, _eccf)
		}
	}
	if _ccdf.Shape != nil {
		_dbbg := _d.StartElement{Name: _d.Name{Local: "\u0073\u0068\u0061p\u0065"}}
		for _, _adcgd := range _ccdf.Shape {
			e.EncodeElement(_adcgd, _dbbg)
		}
	}
	if _ccdf.PresOf != nil {
		_cceda := _d.StartElement{Name: _d.Name{Local: "\u0070\u0072\u0065\u0073\u004f\u0066"}}
		for _, _babfe := range _ccdf.PresOf {
			e.EncodeElement(_babfe, _cceda)
		}
	}
	if _ccdf.ConstrLst != nil {
		_aadf := _d.StartElement{Name: _d.Name{Local: "\u0063o\u006e\u0073\u0074\u0072\u004c\u0073t"}}
		for _, _bbeb := range _ccdf.ConstrLst {
			e.EncodeElement(_bbeb, _aadf)
		}
	}
	if _ccdf.RuleLst != nil {
		_aadg := _d.StartElement{Name: _d.Name{Local: "\u0072u\u006c\u0065\u004c\u0073\u0074"}}
		for _, _cdbef := range _ccdf.RuleLst {
			e.EncodeElement(_cdbef, _aadg)
		}
	}
	if _ccdf.VarLst != nil {
		_gcgee := _d.StartElement{Name: _d.Name{Local: "\u0076\u0061\u0072\u004c\u0073\u0074"}}
		for _, _gbedb := range _ccdf.VarLst {
			e.EncodeElement(_gbedb, _gcgee)
		}
	}
	if _ccdf.ForEach != nil {
		_bfdf := _d.StartElement{Name: _d.Name{Local: "\u0066o\u0072\u0045\u0061\u0063\u0068"}}
		for _, _adcab := range _ccdf.ForEach {
			e.EncodeElement(_adcab, _bfdf)
		}
	}
	if _ccdf.LayoutNode != nil {
		_deef := _d.StartElement{Name: _d.Name{Local: "\u006c\u0061\u0079\u006f\u0075\u0074\u004e\u006f\u0064\u0065"}}
		for _, _feef := range _ccdf.LayoutNode {
			e.EncodeElement(_feef, _deef)
		}
	}
	if _ccdf.Choose != nil {
		_fbdg := _d.StartElement{Name: _d.Name{Local: "\u0063\u0068\u006f\u006f\u0073\u0065"}}
		for _, _dacf := range _ccdf.Choose {
			e.EncodeElement(_dacf, _fbdg)
		}
	}
	if _ccdf.ExtLst != nil {
		_gcab := _d.StartElement{Name: _d.Name{Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}}
		for _, _gfae := range _ccdf.ExtLst {
			e.EncodeElement(_gfae, _gcab)
		}
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_dadaa *CT_LayoutNode) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _gafa := range start.Attr {
		if _gafa.Name.Local == "\u006e\u0061\u006d\u0065" {
			_agaa, _ccef := _gafa.Value, error(nil)
			if _ccef != nil {
				return _ccef
			}
			_dadaa.NameAttr = &_agaa
			continue
		}
		if _gafa.Name.Local == "\u0063h\u004f\u0072\u0064\u0065\u0072" {
			_dadaa.ChOrderAttr.UnmarshalXMLAttr(_gafa)
			continue
		}
		if _gafa.Name.Local == "\u006d\u006f\u0076\u0065\u0057\u0069\u0074\u0068" {
			_cggc, _ada := _gafa.Value, error(nil)
			if _ada != nil {
				return _ada
			}
			_dadaa.MoveWithAttr = &_cggc
			continue
		}
		if _gafa.Name.Local == "\u0073\u0074\u0079\u006c\u0065\u004c\u0062\u006c" {
			_gbcd, _edcb := _gafa.Value, error(nil)
			if _edcb != nil {
				return _edcb
			}
			_dadaa.StyleLblAttr = &_gbcd
			continue
		}
	}
_abgf:
	for {
		_defc, _cbbf := d.Token()
		if _cbbf != nil {
			return _cbbf
		}
		switch _fefae := _defc.(type) {
		case _d.StartElement:
			switch _fefae.Name {
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0061\u006c\u0067"}:
				_gaea := NewCT_Algorithm()
				if _dfgg := d.DecodeElement(_gaea, &_fefae); _dfgg != nil {
					return _dfgg
				}
				_dadaa.Alg = append(_dadaa.Alg, _gaea)
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0073\u0068\u0061p\u0065"}:
				_ebbg := NewCT_Shape()
				if _fcef := d.DecodeElement(_ebbg, &_fefae); _fcef != nil {
					return _fcef
				}
				_dadaa.Shape = append(_dadaa.Shape, _ebbg)
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0070\u0072\u0065\u0073\u004f\u0066"}:
				_ffgc := NewCT_PresentationOf()
				if _baeb := d.DecodeElement(_ffgc, &_fefae); _baeb != nil {
					return _baeb
				}
				_dadaa.PresOf = append(_dadaa.PresOf, _ffgc)
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063o\u006e\u0073\u0074\u0072\u004c\u0073t"}:
				_dcaf := NewCT_Constraints()
				if _fcb := d.DecodeElement(_dcaf, &_fefae); _fcb != nil {
					return _fcb
				}
				_dadaa.ConstrLst = append(_dadaa.ConstrLst, _dcaf)
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0072u\u006c\u0065\u004c\u0073\u0074"}:
				_cfaa := NewCT_Rules()
				if _debg := d.DecodeElement(_cfaa, &_fefae); _debg != nil {
					return _debg
				}
				_dadaa.RuleLst = append(_dadaa.RuleLst, _cfaa)
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0076\u0061\u0072\u004c\u0073\u0074"}:
				_fbac := NewCT_LayoutVariablePropertySet()
				if _eagf := d.DecodeElement(_fbac, &_fefae); _eagf != nil {
					return _eagf
				}
				_dadaa.VarLst = append(_dadaa.VarLst, _fbac)
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0066o\u0072\u0045\u0061\u0063\u0068"}:
				_ggffe := NewCT_ForEach()
				if _acbg := d.DecodeElement(_ggffe, &_fefae); _acbg != nil {
					return _acbg
				}
				_dadaa.ForEach = append(_dadaa.ForEach, _ggffe)
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u006c\u0061\u0079\u006f\u0075\u0074\u004e\u006f\u0064\u0065"}:
				_dafcg := NewCT_LayoutNode()
				if _gfca := d.DecodeElement(_dafcg, &_fefae); _gfca != nil {
					return _gfca
				}
				_dadaa.LayoutNode = append(_dadaa.LayoutNode, _dafcg)
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0068\u006f\u006f\u0073\u0065"}:
				_ggbda := NewCT_Choose()
				if _gfgfe := d.DecodeElement(_ggbda, &_fefae); _gfgfe != nil {
					return _gfgfe
				}
				_dadaa.Choose = append(_dadaa.Choose, _ggbda)
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_cffc := _bc.NewCT_OfficeArtExtensionList()
				if _gega := d.DecodeElement(_cffc, &_fefae); _gega != nil {
					return _gega
				}
				_dadaa.ExtLst = append(_dadaa.ExtLst, _cffc)
			default:
				_b.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u004ca\u0079\u006f\u0075\u0074\u004e\u006f\u0064\u0065 \u0025\u0076", _fefae.Name)
				if _cgad := d.Skip(); _cgad != nil {
					return _cgad
				}
			}
		case _d.EndElement:
			break _abgf
		case _d.CharData:
		}
	}
	return nil
}
func NewCT_When() *CT_When {
	_edbg := &CT_When{}
	_edbg.FuncAttr = ST_FunctionType(1)
	_edbg.OpAttr = ST_FunctionOperator(1)
	return _edbg
}
func (_bceb ST_GrowDirection) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_bceb.String(), start)
}

type CT_ColorTransformHeaderLst struct{ ColorsDefHdr []*CT_ColorTransformHeader }

// ValidateWithPath validates the CT_PresentationOf and its children, prefixing error messages with path
func (_fbeb *CT_PresentationOf) ValidateWithPath(path string) error {
	if _fbeb.ExtLst != nil {
		if _bagb := _fbeb.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _bagb != nil {
			return _bagb
		}
	}
	return nil
}
func (_cbfe *CT_Constraint) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _dcad := range start.Attr {
		if _dcad.Name.Local == "\u006f\u0070" {
			_cbfe.OpAttr.UnmarshalXMLAttr(_dcad)
			continue
		}
		if _dcad.Name.Local == "\u0076\u0061\u006c" {
			_acf, _ggac := _gb.ParseFloat(_dcad.Value, 64)
			if _ggac != nil {
				return _ggac
			}
			_cbfe.ValAttr = &_acf
			continue
		}
		if _dcad.Name.Local == "\u0066\u0061\u0063\u0074" {
			_cfec, _gceb := _gb.ParseFloat(_dcad.Value, 64)
			if _gceb != nil {
				return _gceb
			}
			_cbfe.FactAttr = &_cfec
			continue
		}
		if _dcad.Name.Local == "\u0074\u0079\u0070\u0065" {
			_cbfe.TypeAttr.UnmarshalXMLAttr(_dcad)
			continue
		}
		if _dcad.Name.Local == "\u0066\u006f\u0072" {
			_cbfe.ForAttr.UnmarshalXMLAttr(_dcad)
			continue
		}
		if _dcad.Name.Local == "\u0066o\u0072\u004e\u0061\u006d\u0065" {
			_cfa, _bdad := _dcad.Value, error(nil)
			if _bdad != nil {
				return _bdad
			}
			_cbfe.ForNameAttr = &_cfa
			continue
		}
		if _dcad.Name.Local == "\u0070\u0074\u0054\u0079\u0070\u0065" {
			_cbfe.PtTypeAttr.UnmarshalXMLAttr(_dcad)
			continue
		}
		if _dcad.Name.Local == "\u0072e\u0066\u0054\u0079\u0070\u0065" {
			_cbfe.RefTypeAttr.UnmarshalXMLAttr(_dcad)
			continue
		}
		if _dcad.Name.Local == "\u0072\u0065\u0066\u0046\u006f\u0072" {
			_cbfe.RefForAttr.UnmarshalXMLAttr(_dcad)
			continue
		}
		if _dcad.Name.Local == "\u0072\u0065\u0066\u0046\u006f\u0072\u004e\u0061\u006d\u0065" {
			_fbba, _dfae := _dcad.Value, error(nil)
			if _dfae != nil {
				return _dfae
			}
			_cbfe.RefForNameAttr = &_fbba
			continue
		}
		if _dcad.Name.Local == "\u0072e\u0066\u0050\u0074\u0054\u0079\u0070e" {
			_cbfe.RefPtTypeAttr.UnmarshalXMLAttr(_dcad)
			continue
		}
	}
_cccd:
	for {
		_abg, _cbc := d.Token()
		if _cbc != nil {
			return _cbc
		}
		switch _cedd := _abg.(type) {
		case _d.StartElement:
			switch _cedd.Name {
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_cbfe.ExtLst = _bc.NewCT_OfficeArtExtensionList()
				if _cede := d.DecodeElement(_cbfe.ExtLst, &_cedd); _cede != nil {
					return _cede
				}
			default:
				_b.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0043o\u006e\u0073\u0074\u0072\u0061\u0069\u006e\u0074 \u0025\u0076", _cedd.Name)
				if _eaaa := d.Skip(); _eaaa != nil {
					return _eaaa
				}
			}
		case _d.EndElement:
			break _cccd
		case _d.CharData:
		}
	}
	return nil
}
func (_dcdd ST_TextAnchorVertical) ValidateWithPath(path string) error {
	switch _dcdd {
	case 0, 1, 2, 3:
	default:
		return _f.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_dcdd))
	}
	return nil
}
func (_ceaeg ST_PrSetCustVal) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _ceaeg.ST_Percentage != nil {
		e.EncodeToken(_d.CharData(*_ceaeg.ST_Percentage))
	}
	if _ceaeg.Int32 != nil {
		e.EncodeToken(_d.CharData(_f.Sprintf("\u0025\u0064", *_ceaeg.Int32)))
	}
	return e.EncodeToken(_d.EndElement{Name: start.Name})
}

// Validate validates the CT_DiagramDefinitionHeader and its children
func (_deba *CT_DiagramDefinitionHeader) Validate() error {
	return _deba.ValidateWithPath("\u0043\u0054\u005f\u0044\u0069\u0061\u0067\u0072\u0061\u006d\u0044e\u0066\u0069\u006e\u0069\u0074\u0069\u006f\u006e\u0048\u0065a\u0064\u0065\u0072")
}
func (_eface *ST_PrSetCustVal) ValidateWithPath(path string) error {
	_agfeb := []string{}
	if _eface.ST_Percentage != nil {
		_agfeb = append(_agfeb, "\u0053\u0054\u005f\u0050\u0065\u0072\u0063\u0065\u006e\u0074\u0061\u0067\u0065")
	}
	if _eface.Int32 != nil {
		_agfeb = append(_agfeb, "\u0049\u006e\u00743\u0032")
	}
	if len(_agfeb) > 1 {
		return _f.Errorf("%\u0073\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u006d\u0065\u006d\u0062\u0065r\u0073\u0020\u0073e\u0074:\u0020\u0025\u0076", path, _agfeb)
	}
	return nil
}
func (_bega ST_VerticalAlignment) String() string {
	switch _bega {
	case 0:
		return ""
	case 1:
		return "\u0074"
	case 2:
		return "\u006d\u0069\u0064"
	case 3:
		return "\u0062"
	case 4:
		return "\u006e\u006f\u006e\u0065"
	}
	return ""
}
func (_afcf ST_FallbackDimension) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_cbedba := _d.Attr{}
	_cbedba.Name = name
	switch _afcf {
	case ST_FallbackDimensionUnset:
		_cbedba.Value = ""
	case ST_FallbackDimension1D:
		_cbedba.Value = "\u0031\u0044"
	case ST_FallbackDimension2D:
		_cbedba.Value = "\u0032\u0044"
	}
	return _cbedba, nil
}
func NewRelIds() *RelIds { _cgcd := &RelIds{}; _cgcd.CT_RelIds = *NewCT_RelIds(); return _cgcd }
func (_bccgc ST_FlowDirection) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_dbbba := _d.Attr{}
	_dbbba.Name = name
	switch _bccgc {
	case ST_FlowDirectionUnset:
		_dbbba.Value = ""
	case ST_FlowDirectionRow:
		_dbbba.Value = "\u0072\u006f\u0077"
	case ST_FlowDirectionCol:
		_dbbba.Value = "\u0063\u006f\u006c"
	}
	return _dbbba, nil
}
func (_ccag *ST_AnimOneStr) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_ccag = 0
	case "\u006e\u006f\u006e\u0065":
		*_ccag = 1
	case "\u006f\u006e\u0065":
		*_ccag = 2
	case "\u0062\u0072\u0061\u006e\u0063\u0068":
		*_ccag = 3
	}
	return nil
}
func (_bafac ST_TextBlockDirection) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_aefd := _d.Attr{}
	_aefd.Name = name
	switch _bafac {
	case ST_TextBlockDirectionUnset:
		_aefd.Value = ""
	case ST_TextBlockDirectionHorz:
		_aefd.Value = "\u0068\u006f\u0072\u007a"
	case ST_TextBlockDirectionVert:
		_aefd.Value = "\u0076\u0065\u0072\u0074"
	}
	return _aefd, nil
}

// ValidateWithPath validates the CT_ResizeHandles and its children, prefixing error messages with path
func (_dacg *CT_ResizeHandles) ValidateWithPath(path string) error {
	if _agb := _dacg.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _agb != nil {
		return _agb
	}
	return nil
}

// Validate validates the CT_PresentationOf and its children
func (_gaff *CT_PresentationOf) Validate() error {
	return _gaff.ValidateWithPath("\u0043\u0054\u005f\u0050\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074i\u006f\u006e\u004f\u0066")
}
func (_adbc ST_BendPoint) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_adbc.String(), start)
}
func (_edfb *CT_ForEach) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _edfb.NameAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u006e\u0061\u006d\u0065"}, Value: _f.Sprintf("\u0025\u0076", *_edfb.NameAttr)})
	}
	if _edfb.RefAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0072\u0065\u0066"}, Value: _f.Sprintf("\u0025\u0076", *_edfb.RefAttr)})
	}
	if _edfb.AxisAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0061\u0078\u0069\u0073"}, Value: _f.Sprintf("\u0025\u0076", *_edfb.AxisAttr)})
	}
	if _edfb.PtTypeAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0070\u0074\u0054\u0079\u0070\u0065"}, Value: _f.Sprintf("\u0025\u0076", *_edfb.PtTypeAttr)})
	}
	if _edfb.HideLastTransAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0068\u0069\u0064\u0065\u004c\u0061\u0073\u0074\u0054\u0072\u0061\u006e\u0073"}, Value: _f.Sprintf("\u0025\u0076", *_edfb.HideLastTransAttr)})
	}
	if _edfb.StAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0073\u0074"}, Value: _f.Sprintf("\u0025\u0076", *_edfb.StAttr)})
	}
	if _edfb.CntAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0063\u006e\u0074"}, Value: _f.Sprintf("\u0025\u0076", *_edfb.CntAttr)})
	}
	if _edfb.StepAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0073\u0074\u0065\u0070"}, Value: _f.Sprintf("\u0025\u0076", *_edfb.StepAttr)})
	}
	e.EncodeToken(start)
	if _edfb.Alg != nil {
		_dcde := _d.StartElement{Name: _d.Name{Local: "\u0061\u006c\u0067"}}
		for _, _cdcb := range _edfb.Alg {
			e.EncodeElement(_cdcb, _dcde)
		}
	}
	if _edfb.Shape != nil {
		_cgfdf := _d.StartElement{Name: _d.Name{Local: "\u0073\u0068\u0061p\u0065"}}
		for _, _beg := range _edfb.Shape {
			e.EncodeElement(_beg, _cgfdf)
		}
	}
	if _edfb.PresOf != nil {
		_bag := _d.StartElement{Name: _d.Name{Local: "\u0070\u0072\u0065\u0073\u004f\u0066"}}
		for _, _ddac := range _edfb.PresOf {
			e.EncodeElement(_ddac, _bag)
		}
	}
	if _edfb.ConstrLst != nil {
		_dcga := _d.StartElement{Name: _d.Name{Local: "\u0063o\u006e\u0073\u0074\u0072\u004c\u0073t"}}
		for _, _bdbg := range _edfb.ConstrLst {
			e.EncodeElement(_bdbg, _dcga)
		}
	}
	if _edfb.RuleLst != nil {
		_gabd := _d.StartElement{Name: _d.Name{Local: "\u0072u\u006c\u0065\u004c\u0073\u0074"}}
		for _, _gbed := range _edfb.RuleLst {
			e.EncodeElement(_gbed, _gabd)
		}
	}
	if _edfb.ForEach != nil {
		_dgeg := _d.StartElement{Name: _d.Name{Local: "\u0066o\u0072\u0045\u0061\u0063\u0068"}}
		for _, _bgdf := range _edfb.ForEach {
			e.EncodeElement(_bgdf, _dgeg)
		}
	}
	if _edfb.LayoutNode != nil {
		_gbbg := _d.StartElement{Name: _d.Name{Local: "\u006c\u0061\u0079\u006f\u0075\u0074\u004e\u006f\u0064\u0065"}}
		for _, _daded := range _edfb.LayoutNode {
			e.EncodeElement(_daded, _gbbg)
		}
	}
	if _edfb.Choose != nil {
		_bef := _d.StartElement{Name: _d.Name{Local: "\u0063\u0068\u006f\u006f\u0073\u0065"}}
		for _, _ccge := range _edfb.Choose {
			e.EncodeElement(_ccge, _bef)
		}
	}
	if _edfb.ExtLst != nil {
		_dacb := _d.StartElement{Name: _d.Name{Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}}
		for _, _eggg := range _edfb.ExtLst {
			e.EncodeElement(_eggg, _dacb)
		}
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func NewCT_DiagramDefinition() *CT_DiagramDefinition {
	_edce := &CT_DiagramDefinition{}
	_edce.LayoutNode = NewCT_LayoutNode()
	return _edce
}
func (_decf *CT_RelIds) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0072\u003a\u0064\u006d"}, Value: _f.Sprintf("\u0025\u0076", _decf.DmAttr)})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0072\u003a\u006c\u006f"}, Value: _f.Sprintf("\u0025\u0076", _decf.LoAttr)})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0072\u003a\u0071\u0073"}, Value: _f.Sprintf("\u0025\u0076", _decf.QsAttr)})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0072\u003a\u0063\u0073"}, Value: _f.Sprintf("\u0025\u0076", _decf.CsAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_gfece ST_TextBlockDirection) String() string {
	switch _gfece {
	case 0:
		return ""
	case 1:
		return "\u0068\u006f\u0072\u007a"
	case 2:
		return "\u0076\u0065\u0072\u0074"
	}
	return ""
}
func (_dceac *ST_AutoTextRotation) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_dceac = 0
	case "\u006e\u006f\u006e\u0065":
		*_dceac = 1
	case "\u0075\u0070\u0072":
		*_dceac = 2
	case "\u0067\u0072\u0061\u0076":
		*_dceac = 3
	}
	return nil
}
func (_gdfed ST_HierarchyAlignment) Validate() error { return _gdfed.ValidateWithPath("") }
func (_cgadb ST_SecondaryLinearDirection) ValidateWithPath(path string) error {
	switch _cgadb {
	case 0, 1, 2, 3, 4, 5:
	default:
		return _f.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_cgadb))
	}
	return nil
}
func (_badfg ST_RotationPath) ValidateWithPath(path string) error {
	switch _badfg {
	case 0, 1, 2:
	default:
		return _f.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_badfg))
	}
	return nil
}

type CT_StyleDefinitionHeader struct {
	UniqueIdAttr string
	MinVerAttr   *string
	ResIdAttr    *int32
	Title        []*CT_SDName
	Desc         []*CT_SDDescription
	CatLst       *CT_SDCategories
	ExtLst       *_bc.CT_OfficeArtExtensionList
}
type CT_Adj struct {
	IdxAttr uint32
	ValAttr float64
}

// ValidateWithPath validates the CT_Pt and its children, prefixing error messages with path
func (_gadc *CT_Pt) ValidateWithPath(path string) error {
	if _cgegb := _gadc.ModelIdAttr.ValidateWithPath(path + "\u002f\u004d\u006fd\u0065\u006c\u0049\u0064\u0041\u0074\u0074\u0072"); _cgegb != nil {
		return _cgegb
	}
	if _ccga := _gadc.TypeAttr.ValidateWithPath(path + "\u002fT\u0079\u0070\u0065\u0041\u0074\u0074r"); _ccga != nil {
		return _ccga
	}
	if _gadc.CxnIdAttr != nil {
		if _aecd := _gadc.CxnIdAttr.ValidateWithPath(path + "\u002f\u0043\u0078\u006e\u0049\u0064\u0041\u0074\u0074\u0072"); _aecd != nil {
			return _aecd
		}
	}
	if _gadc.PrSet != nil {
		if _adff := _gadc.PrSet.ValidateWithPath(path + "\u002f\u0050\u0072\u0053\u0065\u0074"); _adff != nil {
			return _adff
		}
	}
	if _gadc.SpPr != nil {
		if _ddbb := _gadc.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _ddbb != nil {
			return _ddbb
		}
	}
	if _gadc.T != nil {
		if _gbcc := _gadc.T.ValidateWithPath(path + "\u002f\u0054"); _gbcc != nil {
			return _gbcc
		}
	}
	if _gadc.ExtLst != nil {
		if _feac := _gadc.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _feac != nil {
			return _feac
		}
	}
	return nil
}
func (_ceecc *ST_DiagramTextAlignment) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_ceecc = 0
	case "\u006c":
		*_ceecc = 1
	case "\u0063\u0074\u0072":
		*_ceecc = 2
	case "\u0072":
		*_ceecc = 3
	}
	return nil
}
func (_ggfbd ST_AnimOneStr) ValidateWithPath(path string) error {
	switch _ggfbd {
	case 0, 1, 2, 3:
	default:
		return _f.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_ggfbd))
	}
	return nil
}
func (_dddc *LayoutDefHdr) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0078\u006d\u006cn\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0061"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0078\u006d\u006c\u006e\u0073\u003a\u0064\u0069"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0072"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"}, Value: "\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"})
	start.Name.Local = "\u006c\u0061\u0079o\u0075\u0074\u0044\u0065\u0066\u0048\u0064\u0072"
	return _dddc.CT_DiagramDefinitionHeader.MarshalXML(e, start)
}
func (_egcg ST_ArrowheadStyle) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_egcg.String(), start)
}
func NewCT_StyleDefinition() *CT_StyleDefinition { _baade := &CT_StyleDefinition{}; return _baade }

type ST_LinearDirection byte

func NewCT_HierBranchStyle() *CT_HierBranchStyle { _begb := &CT_HierBranchStyle{}; return _begb }

type ST_AutoTextRotation byte

func NewCT_Algorithm() *CT_Algorithm {
	_edb := &CT_Algorithm{}
	_edb.TypeAttr = ST_AlgorithmType(1)
	return _edb
}

// ValidateWithPath validates the CT_ForEach and its children, prefixing error messages with path
func (_affcd *CT_ForEach) ValidateWithPath(path string) error {
	for _cbbb, _cdae := range _affcd.Alg {
		if _ecgc := _cdae.ValidateWithPath(_f.Sprintf("\u0025\u0073\u002f\u0041\u006c\u0067\u005b\u0025\u0064\u005d", path, _cbbb)); _ecgc != nil {
			return _ecgc
		}
	}
	for _bcae, _bfag := range _affcd.Shape {
		if _cbabc := _bfag.ValidateWithPath(_f.Sprintf("\u0025\u0073\u002fS\u0068\u0061\u0070\u0065\u005b\u0025\u0064\u005d", path, _bcae)); _cbabc != nil {
			return _cbabc
		}
	}
	for _fefc, _adedg := range _affcd.PresOf {
		if _fage := _adedg.ValidateWithPath(_f.Sprintf("\u0025\u0073\u002f\u0050\u0072\u0065\u0073\u004f\u0066\u005b\u0025\u0064\u005d", path, _fefc)); _fage != nil {
			return _fage
		}
	}
	for _geag, _aeec := range _affcd.ConstrLst {
		if _bfcf := _aeec.ValidateWithPath(_f.Sprintf("\u0025\u0073/\u0043\u006f\u006es\u0074\u0072\u004c\u0073\u0074\u005b\u0025\u0064\u005d", path, _geag)); _bfcf != nil {
			return _bfcf
		}
	}
	for _gaeec, _cfab := range _affcd.RuleLst {
		if _gcgd := _cfab.ValidateWithPath(_f.Sprintf("\u0025\u0073\u002f\u0052\u0075\u006c\u0065\u004c\u0073t\u005b\u0025\u0064\u005d", path, _gaeec)); _gcgd != nil {
			return _gcgd
		}
	}
	for _afdc, _gbbgd := range _affcd.ForEach {
		if _eabf := _gbbgd.ValidateWithPath(_f.Sprintf("\u0025\u0073\u002f\u0046\u006f\u0072\u0045\u0061\u0063h\u005b\u0025\u0064\u005d", path, _afdc)); _eabf != nil {
			return _eabf
		}
	}
	for _acdb, _ddba := range _affcd.LayoutNode {
		if _dfaec := _ddba.ValidateWithPath(_f.Sprintf("\u0025\u0073\u002f\u004c\u0061\u0079\u006f\u0075\u0074\u004e\u006f\u0064e\u005b\u0025\u0064\u005d", path, _acdb)); _dfaec != nil {
			return _dfaec
		}
	}
	for _eecb, _cdfd := range _affcd.Choose {
		if _fagf := _cdfd.ValidateWithPath(_f.Sprintf("\u0025\u0073\u002f\u0043\u0068\u006f\u006f\u0073\u0065\u005b\u0025\u0064\u005d", path, _eecb)); _fagf != nil {
			return _fagf
		}
	}
	for _ebed, _cgdab := range _affcd.ExtLst {
		if _efgfg := _cgdab.ValidateWithPath(_f.Sprintf("\u0025\u0073\u002f\u0045\u0078\u0074\u004c\u0073\u0074\u005b\u0025\u0064\u005d", path, _ebed)); _efgfg != nil {
			return _efgfg
		}
	}
	return nil
}
func (_cdecf ST_PyramidAccentPosition) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_fdfgbf := _d.Attr{}
	_fdfgbf.Name = name
	switch _cdecf {
	case ST_PyramidAccentPositionUnset:
		_fdfgbf.Value = ""
	case ST_PyramidAccentPositionBef:
		_fdfgbf.Value = "\u0062\u0065\u0066"
	case ST_PyramidAccentPositionAft:
		_fdfgbf.Value = "\u0061\u0066\u0074"
	}
	return _fdfgbf, nil
}
func (_baba ST_DiagramTextAlignment) ValidateWithPath(path string) error {
	switch _baba {
	case 0, 1, 2, 3:
	default:
		return _f.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_baba))
	}
	return nil
}
func (_cgada ST_TextAnchorVertical) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_cgada.String(), start)
}

type ST_AnimOneStr byte

// ValidateWithPath validates the CT_Constraint and its children, prefixing error messages with path
func (_aafd *CT_Constraint) ValidateWithPath(path string) error {
	if _gcga := _aafd.OpAttr.ValidateWithPath(path + "\u002fO\u0070\u0041\u0074\u0074\u0072"); _gcga != nil {
		return _gcga
	}
	if _aafd.ExtLst != nil {
		if _eabgd := _aafd.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _eabgd != nil {
			return _eabgd
		}
	}
	if _eca := _aafd.TypeAttr.ValidateWithPath(path + "\u002fT\u0079\u0070\u0065\u0041\u0074\u0074r"); _eca != nil {
		return _eca
	}
	if _gafc := _aafd.ForAttr.ValidateWithPath(path + "\u002f\u0046\u006f\u0072\u0041\u0074\u0074\u0072"); _gafc != nil {
		return _gafc
	}
	if _cbgg := _aafd.PtTypeAttr.ValidateWithPath(path + "/\u0050\u0074\u0054\u0079\u0070\u0065\u0041\u0074\u0074\u0072"); _cbgg != nil {
		return _cbgg
	}
	if _dgfd := _aafd.RefTypeAttr.ValidateWithPath(path + "\u002f\u0052\u0065f\u0054\u0079\u0070\u0065\u0041\u0074\u0074\u0072"); _dgfd != nil {
		return _dgfd
	}
	if _gfbf := _aafd.RefForAttr.ValidateWithPath(path + "/\u0052\u0065\u0066\u0046\u006f\u0072\u0041\u0074\u0074\u0072"); _gfbf != nil {
		return _gfbf
	}
	if _gad := _aafd.RefPtTypeAttr.ValidateWithPath(path + "\u002f\u0052\u0065\u0066\u0050\u0074\u0054\u0079\u0070e\u0041\u0074\u0074\u0072"); _gad != nil {
		return _gad
	}
	return nil
}
func (_acade *ST_SecondaryChildAlignment) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_acade = 0
	case "\u006e\u006f\u006e\u0065":
		*_acade = 1
	case "\u0074":
		*_acade = 2
	case "\u0062":
		*_acade = 3
	case "\u006c":
		*_acade = 4
	case "\u0072":
		*_acade = 5
	}
	return nil
}
func (_fbga ST_BoolOperator) Validate() error { return _fbga.ValidateWithPath("") }

// Validate validates the StyleDef and its children
func (_bfce *StyleDef) Validate() error {
	return _bfce.ValidateWithPath("\u0053\u0074\u0079\u006c\u0065\u0044\u0065\u0066")
}
func (_dgacg ST_HierBranchStyle) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_dgacg.String(), start)
}
func NewColorsDef() *ColorsDef {
	_dgcbe := &ColorsDef{}
	_dgcbe.CT_ColorTransform = *NewCT_ColorTransform()
	return _dgcbe
}

const (
	ST_ChildAlignmentUnset ST_ChildAlignment = 0
	ST_ChildAlignmentT     ST_ChildAlignment = 1
	ST_ChildAlignmentB     ST_ChildAlignment = 2
	ST_ChildAlignmentL     ST_ChildAlignment = 3
	ST_ChildAlignmentR     ST_ChildAlignment = 4
)

func (_dbgfb *ST_Direction) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_bdec, _ggacb := d.Token()
	if _ggacb != nil {
		return _ggacb
	}
	if _dcgg, _degca := _bdec.(_d.EndElement); _degca && _dcgg.Name == start.Name {
		*_dbgfb = 1
		return nil
	}
	if _adcbb, _defd := _bdec.(_d.CharData); !_defd {
		return _f.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _bdec)
	} else {
		switch string(_adcbb) {
		case "":
			*_dbgfb = 0
		case "\u006e\u006f\u0072\u006d":
			*_dbgfb = 1
		case "\u0072\u0065\u0076":
			*_dbgfb = 2
		}
	}
	_bdec, _ggacb = d.Token()
	if _ggacb != nil {
		return _ggacb
	}
	if _bebdc, _ddcac := _bdec.(_d.EndElement); _ddcac && _bebdc.Name == start.Name {
		return nil
	}
	return _f.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _bdec)
}

type ST_ConnectorDimension byte

func (_efda ST_ContinueDirection) ValidateWithPath(path string) error {
	switch _efda {
	case 0, 1, 2:
	default:
		return _f.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_efda))
	}
	return nil
}
func (_gegfd ST_ConnectorPoint) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_gegfd.String(), start)
}

const (
	ST_VariableTypeUnset         ST_VariableType = 0
	ST_VariableTypeNone          ST_VariableType = 1
	ST_VariableTypeOrgChart      ST_VariableType = 2
	ST_VariableTypeChMax         ST_VariableType = 3
	ST_VariableTypeChPref        ST_VariableType = 4
	ST_VariableTypeBulEnabled    ST_VariableType = 5
	ST_VariableTypeDir           ST_VariableType = 6
	ST_VariableTypeHierBranch    ST_VariableType = 7
	ST_VariableTypeAnimOne       ST_VariableType = 8
	ST_VariableTypeAnimLvl       ST_VariableType = 9
	ST_VariableTypeResizeHandles ST_VariableType = 10
)

type CT_SampleData struct {
	UseDefAttr *bool
	DataModel  *CT_DataModel
}

func (_egef *ST_PyramidAccentTextMargin) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_edaf, _afdcb := d.Token()
	if _afdcb != nil {
		return _afdcb
	}
	if _babfc, _bddgd := _edaf.(_d.EndElement); _bddgd && _babfc.Name == start.Name {
		*_egef = 1
		return nil
	}
	if _bbfbf, _begg := _edaf.(_d.CharData); !_begg {
		return _f.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _edaf)
	} else {
		switch string(_bbfbf) {
		case "":
			*_egef = 0
		case "\u0073\u0074\u0065\u0070":
			*_egef = 1
		case "\u0073\u0074\u0061c\u006b":
			*_egef = 2
		}
	}
	_edaf, _afdcb = d.Token()
	if _afdcb != nil {
		return _afdcb
	}
	if _dfdd, _efgbg := _edaf.(_d.EndElement); _efgbg && _dfdd.Name == start.Name {
		return nil
	}
	return _f.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _edaf)
}

type ST_ChildDirection byte

func (_egbb ST_ConnectorPoint) String() string {
	switch _egbb {
	case 0:
		return ""
	case 1:
		return "\u0061\u0075\u0074\u006f"
	case 2:
		return "\u0062\u0043\u0074\u0072"
	case 3:
		return "\u0063\u0074\u0072"
	case 4:
		return "\u006d\u0069\u0064\u004c"
	case 5:
		return "\u006d\u0069\u0064\u0052"
	case 6:
		return "\u0074\u0043\u0074\u0072"
	case 7:
		return "\u0062\u004c"
	case 8:
		return "\u0062\u0052"
	case 9:
		return "\u0074\u004c"
	case 10:
		return "\u0074\u0052"
	case 11:
		return "\u0072\u0061\u0064\u0069\u0061\u006c"
	}
	return ""
}

// ValidateWithPath validates the CT_DataModel and its children, prefixing error messages with path
func (_cdbc *CT_DataModel) ValidateWithPath(path string) error {
	if _aaea := _cdbc.PtLst.ValidateWithPath(path + "\u002f\u0050\u0074\u004c\u0073\u0074"); _aaea != nil {
		return _aaea
	}
	if _cdbc.CxnLst != nil {
		if _gfebe := _cdbc.CxnLst.ValidateWithPath(path + "\u002fC\u0078\u006e\u004c\u0073\u0074"); _gfebe != nil {
			return _gfebe
		}
	}
	if _cdbc.Bg != nil {
		if _aaca := _cdbc.Bg.ValidateWithPath(path + "\u002f\u0042\u0067"); _aaca != nil {
			return _aaca
		}
	}
	if _cdbc.Whole != nil {
		if _fge := _cdbc.Whole.ValidateWithPath(path + "\u002f\u0057\u0068\u006f\u006c\u0065"); _fge != nil {
			return _fge
		}
	}
	if _cdbc.ExtLst != nil {
		if _fgef := _cdbc.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _fgef != nil {
			return _fgef
		}
	}
	return nil
}
func (_egcca ST_AxisType) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_eafae := _d.Attr{}
	_eafae.Name = name
	switch _egcca {
	case ST_AxisTypeUnset:
		_eafae.Value = ""
	case ST_AxisTypeSelf:
		_eafae.Value = "\u0073\u0065\u006c\u0066"
	case ST_AxisTypeCh:
		_eafae.Value = "\u0063\u0068"
	case ST_AxisTypeDes:
		_eafae.Value = "\u0064\u0065\u0073"
	case ST_AxisTypeDesOrSelf:
		_eafae.Value = "\u0064e\u0073\u004f\u0072\u0053\u0065\u006cf"
	case ST_AxisTypePar:
		_eafae.Value = "\u0070\u0061\u0072"
	case ST_AxisTypeAncst:
		_eafae.Value = "\u0061\u006e\u0063s\u0074"
	case ST_AxisTypeAncstOrSelf:
		_eafae.Value = "a\u006e\u0063\u0073\u0074\u004f\u0072\u0053\u0065\u006c\u0066"
	case ST_AxisTypeFollowSib:
		_eafae.Value = "\u0066o\u006c\u006c\u006f\u0077\u0053\u0069b"
	case ST_AxisTypePrecedSib:
		_eafae.Value = "\u0070r\u0065\u0063\u0065\u0064\u0053\u0069b"
	case ST_AxisTypeFollow:
		_eafae.Value = "\u0066\u006f\u006c\u006c\u006f\u0077"
	case ST_AxisTypePreced:
		_eafae.Value = "\u0070\u0072\u0065\u0063\u0065\u0064"
	case ST_AxisTypeRoot:
		_eafae.Value = "\u0072\u006f\u006f\u0074"
	case ST_AxisTypeNone:
		_eafae.Value = "\u006e\u006f\u006e\u0065"
	}
	return _eafae, nil
}

// ValidateWithPath validates the CT_CTDescription and its children, prefixing error messages with path
func (_gbf *CT_CTDescription) ValidateWithPath(path string) error { return nil }
func (_cbgb ST_Breakpoint) ValidateWithPath(path string) error {
	switch _cbgb {
	case 0, 1, 2, 3:
	default:
		return _f.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_cbgb))
	}
	return nil
}
func (_eaad ST_BendPoint) String() string {
	switch _eaad {
	case 0:
		return ""
	case 1:
		return "\u0062\u0065\u0067"
	case 2:
		return "\u0064\u0065\u0066"
	case 3:
		return "\u0065\u006e\u0064"
	}
	return ""
}

type CT_ResizeHandles struct{ ValAttr ST_ResizeHandlesStr }
type ColorsDef struct{ CT_ColorTransform }

const (
	ST_ClrAppMethodUnset  ST_ClrAppMethod = 0
	ST_ClrAppMethodSpan   ST_ClrAppMethod = 1
	ST_ClrAppMethodCycle  ST_ClrAppMethod = 2
	ST_ClrAppMethodRepeat ST_ClrAppMethod = 3
)

type CT_DataModel struct {
	PtLst  *CT_PtList
	CxnLst *CT_CxnList
	Bg     *_bc.CT_BackgroundFormatting
	Whole  *_bc.CT_WholeE2oFormatting
	ExtLst *_bc.CT_OfficeArtExtensionList
}

// Validate validates the CT_ChildPref and its children
func (_egfbd *CT_ChildPref) Validate() error {
	return _egfbd.ValidateWithPath("\u0043\u0054\u005fC\u0068\u0069\u006c\u0064\u0050\u0072\u0065\u0066")
}
func (_fgadf ST_SecondaryChildAlignment) String() string {
	switch _fgadf {
	case 0:
		return ""
	case 1:
		return "\u006e\u006f\u006e\u0065"
	case 2:
		return "\u0074"
	case 3:
		return "\u0062"
	case 4:
		return "\u006c"
	case 5:
		return "\u0072"
	}
	return ""
}
func (_cdaga ST_ConnectorRouting) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_cdaga.String(), start)
}
func (_dfaef ST_RotationPath) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_dfaef.String(), start)
}
func (_dedd ST_ArrowheadStyle) Validate() error { return _dedd.ValidateWithPath("") }
func (_aefg *ST_ContinueDirection) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_cfcg, _gaacf := d.Token()
	if _gaacf != nil {
		return _gaacf
	}
	if _bggg, _dgegf := _cfcg.(_d.EndElement); _dgegf && _bggg.Name == start.Name {
		*_aefg = 1
		return nil
	}
	if _dbbee, _beac := _cfcg.(_d.CharData); !_beac {
		return _f.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _cfcg)
	} else {
		switch string(_dbbee) {
		case "":
			*_aefg = 0
		case "\u0072\u0065\u0076\u0044\u0069\u0072":
			*_aefg = 1
		case "\u0073a\u006d\u0065\u0044\u0069\u0072":
			*_aefg = 2
		}
	}
	_cfcg, _gaacf = d.Token()
	if _gaacf != nil {
		return _gaacf
	}
	if _afcda, _gfff := _cfcg.(_d.EndElement); _gfff && _afcda.Name == start.Name {
		return nil
	}
	return _f.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _cfcg)
}

type ST_AxisType byte

func (_abcg *CT_Choose) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _abcg.NameAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u006e\u0061\u006d\u0065"}, Value: _f.Sprintf("\u0025\u0076", *_abcg.NameAttr)})
	}
	e.EncodeToken(start)
	_gfbga := _d.StartElement{Name: _d.Name{Local: "\u0069\u0066"}}
	for _, _fgb := range _abcg.If {
		e.EncodeElement(_fgb, _gfbga)
	}
	if _abcg.Else != nil {
		_gaag := _d.StartElement{Name: _d.Name{Local: "\u0065\u006c\u0073\u0065"}}
		e.EncodeElement(_abcg.Else, _gaag)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_fcdd *ST_FunctionOperator) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_fcdd = 0
	case "\u0065\u0071\u0075":
		*_fcdd = 1
	case "\u006e\u0065\u0071":
		*_fcdd = 2
	case "\u0067\u0074":
		*_fcdd = 3
	case "\u006c\u0074":
		*_fcdd = 4
	case "\u0067\u0074\u0065":
		*_fcdd = 5
	case "\u006c\u0074\u0065":
		*_fcdd = 6
	}
	return nil
}

type ST_TextAnchorHorizontal byte

func (_cddgc *ST_ArrowheadStyle) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_cddgc = 0
	case "\u0061\u0075\u0074\u006f":
		*_cddgc = 1
	case "\u0061\u0072\u0072":
		*_cddgc = 2
	case "\u006e\u006f\u0041r\u0072":
		*_cddgc = 3
	}
	return nil
}
func (_fgbed ST_Breakpoint) Validate() error { return _fgbed.ValidateWithPath("") }
func (_degge ST_NodeHorizontalAlignment) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_babg := _d.Attr{}
	_babg.Name = name
	switch _degge {
	case ST_NodeHorizontalAlignmentUnset:
		_babg.Value = ""
	case ST_NodeHorizontalAlignmentL:
		_babg.Value = "\u006c"
	case ST_NodeHorizontalAlignmentCtr:
		_babg.Value = "\u0063\u0074\u0072"
	case ST_NodeHorizontalAlignmentR:
		_babg.Value = "\u0072"
	}
	return _babg, nil
}
func (_bdeef ST_Offset) Validate() error { return _bdeef.ValidateWithPath("") }
func (_fcgf *ST_TextAnchorVertical) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_fcgf = 0
	case "\u0074":
		*_fcgf = 1
	case "\u006d\u0069\u0064":
		*_fcgf = 2
	case "\u0062":
		*_fcgf = 3
	}
	return nil
}

type CT_Choose struct {
	NameAttr *string
	If       []*CT_When
	Else     *CT_Otherwise
}
type CT_CTDescription struct {
	LangAttr *string
	ValAttr  string
}

// Validate validates the CT_ColorTransformHeader and its children
func (_gccf *CT_ColorTransformHeader) Validate() error {
	return _gccf.ValidateWithPath("\u0043\u0054\u005fCo\u006c\u006f\u0072\u0054\u0072\u0061\u006e\u0073\u0066\u006f\u0072\u006d\u0048\u0065\u0061\u0064\u0065\u0072")
}

// Validate validates the CT_Adj and its children
func (_dca *CT_Adj) Validate() error {
	return _dca.ValidateWithPath("\u0043\u0054\u005f\u0041\u0064\u006a")
}
func (_cacc ST_AxisType) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_cacc.String(), start)
}

type CT_SDDescription struct {
	LangAttr *string
	ValAttr  string
}

func (_ececg *ST_PyramidAccentTextMargin) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_ececg = 0
	case "\u0073\u0074\u0065\u0070":
		*_ececg = 1
	case "\u0073\u0074\u0061c\u006b":
		*_ececg = 2
	}
	return nil
}
func (_eggc ST_ConnectorRouting) String() string {
	switch _eggc {
	case 0:
		return ""
	case 1:
		return "\u0073\u0074\u0072\u0061"
	case 2:
		return "\u0062\u0065\u006e\u0064"
	case 3:
		return "\u0063\u0075\u0072v\u0065"
	case 4:
		return "\u006co\u006e\u0067\u0043\u0075\u0072\u0076e"
	}
	return ""
}

// Validate validates the CT_StyleDefinitionHeader and its children
func (_gbbgg *CT_StyleDefinitionHeader) Validate() error {
	return _gbbgg.ValidateWithPath("\u0043T\u005f\u0053\u0074\u0079\u006c\u0065\u0044\u0065\u0066\u0069\u006ei\u0074\u0069\u006f\u006e\u0048\u0065\u0061\u0064\u0065\u0072")
}
func (_aeaf *CT_ColorTransformHeaderLst) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _aeaf.ColorsDefHdr != nil {
		_dceb := _d.StartElement{Name: _d.Name{Local: "\u0063\u006f\u006co\u0072\u0073\u0044\u0065\u0066\u0048\u0064\u0072"}}
		for _, _decd := range _aeaf.ColorsDefHdr {
			e.EncodeElement(_decd, _dceb)
		}
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_ffa *CT_CTStyleLabel) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u006e\u0061\u006d\u0065"}, Value: _f.Sprintf("\u0025\u0076", _ffa.NameAttr)})
	e.EncodeToken(start)
	if _ffa.FillClrLst != nil {
		_aaf := _d.StartElement{Name: _d.Name{Local: "\u0066\u0069\u006c\u006c\u0043\u006c\u0072\u004c\u0073\u0074"}}
		e.EncodeElement(_ffa.FillClrLst, _aaf)
	}
	if _ffa.LinClrLst != nil {
		_bge := _d.StartElement{Name: _d.Name{Local: "\u006ci\u006e\u0043\u006c\u0072\u004c\u0073t"}}
		e.EncodeElement(_ffa.LinClrLst, _bge)
	}
	if _ffa.EffectClrLst != nil {
		_ebf := _d.StartElement{Name: _d.Name{Local: "\u0065\u0066\u0066e\u0063\u0074\u0043\u006c\u0072\u004c\u0073\u0074"}}
		e.EncodeElement(_ffa.EffectClrLst, _ebf)
	}
	if _ffa.TxLinClrLst != nil {
		_aae := _d.StartElement{Name: _d.Name{Local: "t\u0078\u004c\u0069\u006e\u0043\u006c\u0072\u004c\u0073\u0074"}}
		e.EncodeElement(_ffa.TxLinClrLst, _aae)
	}
	if _ffa.TxFillClrLst != nil {
		_gfe := _d.StartElement{Name: _d.Name{Local: "\u0074\u0078\u0046i\u006c\u006c\u0043\u006c\u0072\u004c\u0073\u0074"}}
		e.EncodeElement(_ffa.TxFillClrLst, _gfe)
	}
	if _ffa.TxEffectClrLst != nil {
		_afc := _d.StartElement{Name: _d.Name{Local: "\u0074\u0078\u0045\u0066\u0066\u0065\u0063\u0074\u0043l\u0072\u004c\u0073\u0074"}}
		e.EncodeElement(_ffa.TxEffectClrLst, _afc)
	}
	if _ffa.ExtLst != nil {
		_dff := _d.StartElement{Name: _d.Name{Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_ffa.ExtLst, _dff)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_cggf *CT_BulletEnabled) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _fcg := range start.Attr {
		if _fcg.Name.Local == "\u0076\u0061\u006c" {
			_gae, _cbdc := _gb.ParseBool(_fcg.Value)
			if _cbdc != nil {
				return _cbdc
			}
			_cggf.ValAttr = &_gae
			continue
		}
	}
	for {
		_aac, _aggc := d.Token()
		if _aggc != nil {
			return _f.Errorf("\u0070\u0061\u0072\u0073i\u006e\u0067\u0020\u0043\u0054\u005f\u0042\u0075\u006c\u006ce\u0074E\u006e\u0061\u0062\u006c\u0065\u0064\u003a \u0025\u0073", _aggc)
		}
		if _bab, _eed := _aac.(_d.EndElement); _eed && _bab.Name == start.Name {
			break
		}
	}
	return nil
}
func (_egade ST_ConstraintRelationship) ValidateWithPath(path string) error {
	switch _egade {
	case 0, 1, 2, 3:
	default:
		return _f.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_egade))
	}
	return nil
}

type ST_ConnectorPoint byte

// ValidateWithPath validates the CT_SDCategory and its children, prefixing error messages with path
func (_dedb *CT_SDCategory) ValidateWithPath(path string) error { return nil }
func NewCT_DataModel() *CT_DataModel {
	_dfad := &CT_DataModel{}
	_dfad.PtLst = NewCT_PtList()
	return _dfad
}
func (_bbgc ST_FunctionType) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_fdfc := _d.Attr{}
	_fdfc.Name = name
	switch _bbgc {
	case ST_FunctionTypeUnset:
		_fdfc.Value = ""
	case ST_FunctionTypeCnt:
		_fdfc.Value = "\u0063\u006e\u0074"
	case ST_FunctionTypePos:
		_fdfc.Value = "\u0070\u006f\u0073"
	case ST_FunctionTypeRevPos:
		_fdfc.Value = "\u0072\u0065\u0076\u0050\u006f\u0073"
	case ST_FunctionTypePosEven:
		_fdfc.Value = "\u0070o\u0073\u0045\u0076\u0065\u006e"
	case ST_FunctionTypePosOdd:
		_fdfc.Value = "\u0070\u006f\u0073\u004f\u0064\u0064"
	case ST_FunctionTypeVar:
		_fdfc.Value = "\u0076\u0061\u0072"
	case ST_FunctionTypeDepth:
		_fdfc.Value = "\u0064\u0065\u0070t\u0068"
	case ST_FunctionTypeMaxDepth:
		_fdfc.Value = "\u006d\u0061\u0078\u0044\u0065\u0070\u0074\u0068"
	}
	return _fdfc, nil
}

type ST_HierarchyAlignment byte

func (_bfeag ST_ContinueDirection) Validate() error { return _bfeag.ValidateWithPath("") }
func (_fccgf ST_ResizeHandlesStr) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_fgca := _d.Attr{}
	_fgca.Name = name
	switch _fccgf {
	case ST_ResizeHandlesStrUnset:
		_fgca.Value = ""
	case ST_ResizeHandlesStrExact:
		_fgca.Value = "\u0065\u0078\u0061c\u0074"
	case ST_ResizeHandlesStrRel:
		_fgca.Value = "\u0072\u0065\u006c"
	}
	return _fgca, nil
}
func (_abdd *ST_CenterShapeMapping) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_ebfcd, _dafga := d.Token()
	if _dafga != nil {
		return _dafga
	}
	if _bgcbb, _degcg := _ebfcd.(_d.EndElement); _degcg && _bgcbb.Name == start.Name {
		*_abdd = 1
		return nil
	}
	if _beef, _abgbb := _ebfcd.(_d.CharData); !_abgbb {
		return _f.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _ebfcd)
	} else {
		switch string(_beef) {
		case "":
			*_abdd = 0
		case "\u006e\u006f\u006e\u0065":
			*_abdd = 1
		case "\u0066\u004e\u006fd\u0065":
			*_abdd = 2
		}
	}
	_ebfcd, _dafga = d.Token()
	if _dafga != nil {
		return _dafga
	}
	if _fbbg, _cbfg := _ebfcd.(_d.EndElement); _cbfg && _fbbg.Name == start.Name {
		return nil
	}
	return _f.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _ebfcd)
}

// Validate validates the RelIds and its children
func (_cgcdg *RelIds) Validate() error {
	return _cgcdg.ValidateWithPath("\u0052\u0065\u006c\u0049\u0064\u0073")
}

type CT_CTName struct {
	LangAttr *string
	ValAttr  string
}

func (_ddgc ST_NodeHorizontalAlignment) Validate() error { return _ddgc.ValidateWithPath("") }

type ST_ContinueDirection byte

func (_aeae *CT_Name) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _ebfc := range start.Attr {
		if _ebfc.Name.Local == "\u006c\u0061\u006e\u0067" {
			_eacf, _bfbg := _ebfc.Value, error(nil)
			if _bfbg != nil {
				return _bfbg
			}
			_aeae.LangAttr = &_eacf
			continue
		}
		if _ebfc.Name.Local == "\u0076\u0061\u006c" {
			_dfdg, _fcfbf := _ebfc.Value, error(nil)
			if _fcfbf != nil {
				return _fcfbf
			}
			_aeae.ValAttr = _dfdg
			continue
		}
	}
	for {
		_cfdbb, _cgea := d.Token()
		if _cgea != nil {
			return _f.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0043\u0054\u005f\u004e\u0061\u006d\u0065\u003a\u0020\u0025\u0073", _cgea)
		}
		if _ceeb, _cacf := _cfdbb.(_d.EndElement); _cacf && _ceeb.Name == start.Name {
			break
		}
	}
	return nil
}
func NewCT_ColorTransformHeader() *CT_ColorTransformHeader {
	_cef := &CT_ColorTransformHeader{}
	return _cef
}

// ValidateWithPath validates the CT_DiagramDefinition and its children, prefixing error messages with path
func (_aace *CT_DiagramDefinition) ValidateWithPath(path string) error {
	for _edea, _edee := range _aace.Title {
		if _bdee := _edee.ValidateWithPath(_f.Sprintf("\u0025\u0073\u002fT\u0069\u0074\u006c\u0065\u005b\u0025\u0064\u005d", path, _edea)); _bdee != nil {
			return _bdee
		}
	}
	for _bdae, _eec := range _aace.Desc {
		if _bgd := _eec.ValidateWithPath(_f.Sprintf("%\u0073\u002f\u0044\u0065\u0073\u0063\u005b\u0025\u0064\u005d", path, _bdae)); _bgd != nil {
			return _bgd
		}
	}
	if _aace.CatLst != nil {
		if _fbg := _aace.CatLst.ValidateWithPath(path + "\u002fC\u0061\u0074\u004c\u0073\u0074"); _fbg != nil {
			return _fbg
		}
	}
	if _aace.SampData != nil {
		if _cbcg := _aace.SampData.ValidateWithPath(path + "\u002fS\u0061\u006d\u0070\u0044\u0061\u0074a"); _cbcg != nil {
			return _cbcg
		}
	}
	if _aace.StyleData != nil {
		if _bbb := _aace.StyleData.ValidateWithPath(path + "\u002f\u0053\u0074\u0079\u006c\u0065\u0044\u0061\u0074\u0061"); _bbb != nil {
			return _bbb
		}
	}
	if _aace.ClrData != nil {
		if _aec := _aace.ClrData.ValidateWithPath(path + "\u002f\u0043\u006c\u0072\u0044\u0061\u0074\u0061"); _aec != nil {
			return _aec
		}
	}
	if _dege := _aace.LayoutNode.ValidateWithPath(path + "/\u004c\u0061\u0079\u006f\u0075\u0074\u004e\u006f\u0064\u0065"); _dege != nil {
		return _dege
	}
	if _aace.ExtLst != nil {
		if _afd := _aace.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _afd != nil {
			return _afd
		}
	}
	return nil
}

// ValidateWithPath validates the CT_TextProps and its children, prefixing error messages with path
func (_bgbd *CT_TextProps) ValidateWithPath(path string) error {
	if _bgbd.Sp3d != nil {
		if _gccbf := _bgbd.Sp3d.ValidateWithPath(path + "\u002f\u0053\u00703\u0064"); _gccbf != nil {
			return _gccbf
		}
	}
	if _bgbd.FlatTx != nil {
		if _cedg := _bgbd.FlatTx.ValidateWithPath(path + "\u002fF\u006c\u0061\u0074\u0054\u0078"); _cedg != nil {
			return _cedg
		}
	}
	return nil
}

// Validate validates the CT_Shape and its children
func (_acgc *CT_Shape) Validate() error {
	return _acgc.ValidateWithPath("\u0043\u0054\u005f\u0053\u0068\u0061\u0070\u0065")
}

type RelIds struct{ CT_RelIds }

func (_fbfdd *ST_ChildDirection) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_bacdc, _edccg := d.Token()
	if _edccg != nil {
		return _edccg
	}
	if _adgfb, _adcdg := _bacdc.(_d.EndElement); _adcdg && _adgfb.Name == start.Name {
		*_fbfdd = 1
		return nil
	}
	if _eeab, _gegc := _bacdc.(_d.CharData); !_gegc {
		return _f.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _bacdc)
	} else {
		switch string(_eeab) {
		case "":
			*_fbfdd = 0
		case "\u0068\u006f\u0072\u007a":
			*_fbfdd = 1
		case "\u0076\u0065\u0072\u0074":
			*_fbfdd = 2
		}
	}
	_bacdc, _edccg = d.Token()
	if _edccg != nil {
		return _edccg
	}
	if _dcfcc, _abca := _bacdc.(_d.EndElement); _abca && _dcfcc.Name == start.Name {
		return nil
	}
	return _f.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _bacdc)
}
func (_gcedg *ST_NodeHorizontalAlignment) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_bcee, _ccda := d.Token()
	if _ccda != nil {
		return _ccda
	}
	if _cdcc, _ecfgf := _bcee.(_d.EndElement); _ecfgf && _cdcc.Name == start.Name {
		*_gcedg = 1
		return nil
	}
	if _bcgff, _abfad := _bcee.(_d.CharData); !_abfad {
		return _f.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _bcee)
	} else {
		switch string(_bcgff) {
		case "":
			*_gcedg = 0
		case "\u006c":
			*_gcedg = 1
		case "\u0063\u0074\u0072":
			*_gcedg = 2
		case "\u0072":
			*_gcedg = 3
		}
	}
	_bcee, _ccda = d.Token()
	if _ccda != nil {
		return _ccda
	}
	if _dagaa, _aafeg := _bcee.(_d.EndElement); _aafeg && _dagaa.Name == start.Name {
		return nil
	}
	return _f.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _bcee)
}
func (_eagfa *ST_LayoutShapeType) ValidateWithPath(path string) error {
	_cddg := []string{}
	if _eagfa.ST_ShapeType != _bc.ST_ShapeTypeUnset {
		_cddg = append(_cddg, "\u0053\u0054\u005fS\u0068\u0061\u0070\u0065\u0054\u0079\u0070\u0065")
	}
	if _eagfa.ST_OutputShapeType != ST_OutputShapeTypeUnset {
		_cddg = append(_cddg, "\u0053T\u005fO\u0075\u0074\u0070\u0075\u0074S\u0068\u0061p\u0065\u0054\u0079\u0070\u0065")
	}
	if len(_cddg) > 1 {
		return _f.Errorf("%\u0073\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u006d\u0065\u006d\u0062\u0065r\u0073\u0020\u0073e\u0074:\u0020\u0025\u0076", path, _cddg)
	}
	return nil
}

const (
	ST_ChildDirectionUnset ST_ChildDirection = 0
	ST_ChildDirectionHorz  ST_ChildDirection = 1
	ST_ChildDirectionVert  ST_ChildDirection = 2
)

func (_afadd *ST_VariableType) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_afadd = 0
	case "\u006e\u006f\u006e\u0065":
		*_afadd = 1
	case "\u006f\u0072\u0067\u0043\u0068\u0061\u0072\u0074":
		*_afadd = 2
	case "\u0063\u0068\u004da\u0078":
		*_afadd = 3
	case "\u0063\u0068\u0050\u0072\u0065\u0066":
		*_afadd = 4
	case "\u0062\u0075\u006c\u0045\u006e\u0061\u0062\u006c\u0065\u0064":
		*_afadd = 5
	case "\u0064\u0069\u0072":
		*_afadd = 6
	case "\u0068\u0069\u0065\u0072\u0042\u0072\u0061\u006e\u0063\u0068":
		*_afadd = 7
	case "\u0061n\u0069\u006d\u004f\u006e\u0065":
		*_afadd = 8
	case "\u0061n\u0069\u006d\u004c\u0076\u006c":
		*_afadd = 9
	case "\u0072\u0065\u0073\u0069\u007a\u0065\u0048\u0061\u006e\u0064\u006c\u0065\u0073":
		*_afadd = 10
	}
	return nil
}

const (
	ST_BreakpointUnset  ST_Breakpoint = 0
	ST_BreakpointEndCnv ST_Breakpoint = 1
	ST_BreakpointBal    ST_Breakpoint = 2
	ST_BreakpointFixed  ST_Breakpoint = 3
)

func (_ccde ST_ChildDirection) String() string {
	switch _ccde {
	case 0:
		return ""
	case 1:
		return "\u0068\u006f\u0072\u007a"
	case 2:
		return "\u0076\u0065\u0072\u0074"
	}
	return ""
}

// ValidateWithPath validates the CT_PtList and its children, prefixing error messages with path
func (_begf *CT_PtList) ValidateWithPath(path string) error {
	for _bbba, _dfec := range _begf.Pt {
		if _adbf := _dfec.ValidateWithPath(_f.Sprintf("\u0025s\u002f\u0050\u0074\u005b\u0025\u0064]", path, _bbba)); _adbf != nil {
			return _adbf
		}
	}
	return nil
}

// ValidateWithPath validates the StyleDefHdrLst and its children, prefixing error messages with path
func (_dcaa *StyleDefHdrLst) ValidateWithPath(path string) error {
	if _egggd := _dcaa.CT_StyleDefinitionHeaderLst.ValidateWithPath(path); _egggd != nil {
		return _egggd
	}
	return nil
}
func (_fgea *CT_DiagramDefinitionHeaderLst) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _fgea.LayoutDefHdr != nil {
		_bcad := _d.StartElement{Name: _d.Name{Local: "\u006c\u0061\u0079o\u0075\u0074\u0044\u0065\u0066\u0048\u0064\u0072"}}
		for _, _aeeg := range _fgea.LayoutDefHdr {
			e.EncodeElement(_aeeg, _bcad)
		}
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the StyleDefHdr and its children, prefixing error messages with path
func (_daea *StyleDefHdr) ValidateWithPath(path string) error {
	if _dddce := _daea.CT_StyleDefinitionHeader.ValidateWithPath(path); _dddce != nil {
		return _dddce
	}
	return nil
}
func (_ddee ST_FunctionValue) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _ddee.Int32 != nil {
		e.EncodeToken(_d.CharData(_f.Sprintf("\u0025\u0064", *_ddee.Int32)))
	}
	if _ddee.Bool != nil {
		e.EncodeToken(_d.CharData(_f.Sprintf("\u0025\u0064", _bbcdb(*_ddee.Bool))))
	}
	if _ddee.ST_Direction != ST_DirectionUnset {
		e.EncodeToken(_d.CharData(_ddee.ST_Direction.String()))
	}
	if _ddee.ST_HierBranchStyle != ST_HierBranchStyleUnset {
		e.EncodeToken(_d.CharData(_ddee.ST_HierBranchStyle.String()))
	}
	if _ddee.ST_AnimOneStr != ST_AnimOneStrUnset {
		e.EncodeToken(_d.CharData(_ddee.ST_AnimOneStr.String()))
	}
	if _ddee.ST_AnimLvlStr != ST_AnimLvlStrUnset {
		e.EncodeToken(_d.CharData(_ddee.ST_AnimLvlStr.String()))
	}
	if _ddee.ST_ResizeHandlesStr != ST_ResizeHandlesStrUnset {
		e.EncodeToken(_d.CharData(_ddee.ST_ResizeHandlesStr.String()))
	}
	return e.EncodeToken(_d.EndElement{Name: start.Name})
}
func (_bdac *ST_AutoTextRotation) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_bbafg, _fcbg := d.Token()
	if _fcbg != nil {
		return _fcbg
	}
	if _bbbba, _acfb := _bbafg.(_d.EndElement); _acfb && _bbbba.Name == start.Name {
		*_bdac = 1
		return nil
	}
	if _fcddf, _egaaag := _bbafg.(_d.CharData); !_egaaag {
		return _f.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _bbafg)
	} else {
		switch string(_fcddf) {
		case "":
			*_bdac = 0
		case "\u006e\u006f\u006e\u0065":
			*_bdac = 1
		case "\u0075\u0070\u0072":
			*_bdac = 2
		case "\u0067\u0072\u0061\u0076":
			*_bdac = 3
		}
	}
	_bbafg, _fcbg = d.Token()
	if _fcbg != nil {
		return _fcbg
	}
	if _adba, _affbb := _bbafg.(_d.EndElement); _affbb && _adba.Name == start.Name {
		return nil
	}
	return _f.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _bbafg)
}

const (
	ST_AnimOneStrUnset  ST_AnimOneStr = 0
	ST_AnimOneStrNone   ST_AnimOneStr = 1
	ST_AnimOneStrOne    ST_AnimOneStr = 2
	ST_AnimOneStrBranch ST_AnimOneStr = 3
)

func (_fdcea ST_PyramidAccentTextMargin) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_fdcea.String(), start)
}

// ValidateWithPath validates the CT_HierBranchStyle and its children, prefixing error messages with path
func (_cdad *CT_HierBranchStyle) ValidateWithPath(path string) error {
	if _eaec := _cdad.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _eaec != nil {
		return _eaec
	}
	return nil
}

// Validate validates the StyleDefHdrLst and its children
func (_aedgaf *StyleDefHdrLst) Validate() error {
	return _aedgaf.ValidateWithPath("\u0053\u0074\u0079\u006c\u0065\u0044\u0065\u0066\u0048d\u0072\u004c\u0073\u0074")
}
func NewCT_RelIds() *CT_RelIds { _eeee := &CT_RelIds{}; return _eeee }

const (
	ST_TextAnchorVerticalUnset ST_TextAnchorVertical = 0
	ST_TextAnchorVerticalT     ST_TextAnchorVertical = 1
	ST_TextAnchorVerticalMid   ST_TextAnchorVertical = 2
	ST_TextAnchorVerticalB     ST_TextAnchorVertical = 3
)

func (_abag ST_StartingElement) String() string {
	switch _abag {
	case 0:
		return ""
	case 1:
		return "\u006e\u006f\u0064\u0065"
	case 2:
		return "\u0074\u0072\u0061n\u0073"
	}
	return ""
}

const (
	ST_HierarchyAlignmentUnset   ST_HierarchyAlignment = 0
	ST_HierarchyAlignmentTL      ST_HierarchyAlignment = 1
	ST_HierarchyAlignmentTR      ST_HierarchyAlignment = 2
	ST_HierarchyAlignmentTCtrCh  ST_HierarchyAlignment = 3
	ST_HierarchyAlignmentTCtrDes ST_HierarchyAlignment = 4
	ST_HierarchyAlignmentBL      ST_HierarchyAlignment = 5
	ST_HierarchyAlignmentBR      ST_HierarchyAlignment = 6
	ST_HierarchyAlignmentBCtrCh  ST_HierarchyAlignment = 7
	ST_HierarchyAlignmentBCtrDes ST_HierarchyAlignment = 8
	ST_HierarchyAlignmentLT      ST_HierarchyAlignment = 9
	ST_HierarchyAlignmentLB      ST_HierarchyAlignment = 10
	ST_HierarchyAlignmentLCtrCh  ST_HierarchyAlignment = 11
	ST_HierarchyAlignmentLCtrDes ST_HierarchyAlignment = 12
	ST_HierarchyAlignmentRT      ST_HierarchyAlignment = 13
	ST_HierarchyAlignmentRB      ST_HierarchyAlignment = 14
	ST_HierarchyAlignmentRCtrCh  ST_HierarchyAlignment = 15
	ST_HierarchyAlignmentRCtrDes ST_HierarchyAlignment = 16
)

type ST_PyramidAccentPosition byte
type ST_ConnectorRouting byte

func (_bfcef ST_AxisType) Validate() error { return _bfcef.ValidateWithPath("") }
func (_efdb ST_ResizeHandlesStr) ValidateWithPath(path string) error {
	switch _efdb {
	case 0, 1, 2:
	default:
		return _f.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_efdb))
	}
	return nil
}
func (_bgdg ST_AlgorithmType) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_bgdg.String(), start)
}
func (_dgfca *CT_StyleDefinitionHeader) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _cbfd := range start.Attr {
		if _cbfd.Name.Local == "\u0075\u006e\u0069\u0071\u0075\u0065\u0049\u0064" {
			_gcfe, _dggbf := _cbfd.Value, error(nil)
			if _dggbf != nil {
				return _dggbf
			}
			_dgfca.UniqueIdAttr = _gcfe
			continue
		}
		if _cbfd.Name.Local == "\u006d\u0069\u006e\u0056\u0065\u0072" {
			_edca, _egbc := _cbfd.Value, error(nil)
			if _egbc != nil {
				return _egbc
			}
			_dgfca.MinVerAttr = &_edca
			continue
		}
		if _cbfd.Name.Local == "\u0072\u0065\u0073I\u0064" {
			_fcadb, _afaf := _gb.ParseInt(_cbfd.Value, 10, 32)
			if _afaf != nil {
				return _afaf
			}
			_effe := int32(_fcadb)
			_dgfca.ResIdAttr = &_effe
			continue
		}
	}
_ccdbc:
	for {
		_faba, _faea := d.Token()
		if _faea != nil {
			return _faea
		}
		switch _eaba := _faba.(type) {
		case _d.StartElement:
			switch _eaba.Name {
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0074\u0069\u0074l\u0065"}:
				_eecad := NewCT_SDName()
				if _dadgb := d.DecodeElement(_eecad, &_eaba); _dadgb != nil {
					return _dadgb
				}
				_dgfca.Title = append(_dgfca.Title, _eecad)
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0064\u0065\u0073\u0063"}:
				_gdce := NewCT_SDDescription()
				if _gdac := d.DecodeElement(_gdce, &_eaba); _gdac != nil {
					return _gdac
				}
				_dgfca.Desc = append(_dgfca.Desc, _gdce)
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0061\u0074\u004c\u0073\u0074"}:
				_dgfca.CatLst = NewCT_SDCategories()
				if _dbbc := d.DecodeElement(_dgfca.CatLst, &_eaba); _dbbc != nil {
					return _dbbc
				}
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_dgfca.ExtLst = _bc.NewCT_OfficeArtExtensionList()
				if _fbdd := d.DecodeElement(_dgfca.ExtLst, &_eaba); _fbdd != nil {
					return _fbdd
				}
			default:
				_b.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0053\u0074\u0079\u006c\u0065\u0044\u0065\u0066\u0069\u006e\u0069\u0074\u0069\u006f\u006e\u0048e\u0061\u0064\u0065\u0072\u0020%\u0076", _eaba.Name)
				if _cbbaa := d.Skip(); _cbbaa != nil {
					return _cbbaa
				}
			}
		case _d.EndElement:
			break _ccdbc
		case _d.CharData:
		}
	}
	return nil
}
func (_gcg *AG_ConstraintRefAttributes) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _gcg.RefTypeAttr != ST_ConstraintTypeUnset {
		_cbd, _agd := _gcg.RefTypeAttr.MarshalXMLAttr(_d.Name{Local: "\u0072e\u0066\u0054\u0079\u0070\u0065"})
		if _agd != nil {
			return _agd
		}
		start.Attr = append(start.Attr, _cbd)
	}
	if _gcg.RefForAttr != ST_ConstraintRelationshipUnset {
		_fcd, _bcg := _gcg.RefForAttr.MarshalXMLAttr(_d.Name{Local: "\u0072\u0065\u0066\u0046\u006f\u0072"})
		if _bcg != nil {
			return _bcg
		}
		start.Attr = append(start.Attr, _fcd)
	}
	if _gcg.RefForNameAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0072\u0065\u0066\u0046\u006f\u0072\u004e\u0061\u006d\u0065"}, Value: _f.Sprintf("\u0025\u0076", *_gcg.RefForNameAttr)})
	}
	if _gcg.RefPtTypeAttr != ST_ElementTypeUnset {
		_ca, _ed := _gcg.RefPtTypeAttr.MarshalXMLAttr(_d.Name{Local: "\u0072e\u0066\u0050\u0074\u0054\u0079\u0070e"})
		if _ed != nil {
			return _ed
		}
		start.Attr = append(start.Attr, _ca)
	}
	return nil
}
func (_cddc *ST_TextBlockDirection) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_cfgga, _fgffd := d.Token()
	if _fgffd != nil {
		return _fgffd
	}
	if _ffdfb, _faca := _cfgga.(_d.EndElement); _faca && _ffdfb.Name == start.Name {
		*_cddc = 1
		return nil
	}
	if _dgecg, _egadb := _cfgga.(_d.CharData); !_egadb {
		return _f.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _cfgga)
	} else {
		switch string(_dgecg) {
		case "":
			*_cddc = 0
		case "\u0068\u006f\u0072\u007a":
			*_cddc = 1
		case "\u0076\u0065\u0072\u0074":
			*_cddc = 2
		}
	}
	_cfgga, _fgffd = d.Token()
	if _fgffd != nil {
		return _fgffd
	}
	if _ggae, _dccdg := _cfgga.(_d.EndElement); _dccdg && _ggae.Name == start.Name {
		return nil
	}
	return _f.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _cfgga)
}

const (
	ST_NodeHorizontalAlignmentUnset ST_NodeHorizontalAlignment = 0
	ST_NodeHorizontalAlignmentL     ST_NodeHorizontalAlignment = 1
	ST_NodeHorizontalAlignmentCtr   ST_NodeHorizontalAlignment = 2
	ST_NodeHorizontalAlignmentR     ST_NodeHorizontalAlignment = 3
)

func (_fcag *CT_ResizeHandles) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _fcag.ValAttr != ST_ResizeHandlesStrUnset {
		_edffd, _aaad := _fcag.ValAttr.MarshalXMLAttr(_d.Name{Local: "\u0076\u0061\u006c"})
		if _aaad != nil {
			return _aaad
		}
		start.Attr = append(start.Attr, _edffd)
	}
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_bdgc *ColorsDefHdrLst) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_bdgc.CT_ColorTransformHeaderLst = *NewCT_ColorTransformHeaderLst()
_efeee:
	for {
		_fdffa, _fbbb := d.Token()
		if _fbbb != nil {
			return _fbbb
		}
		switch _bcdc := _fdffa.(type) {
		case _d.StartElement:
			switch _bcdc.Name {
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u006f\u006co\u0072\u0073\u0044\u0065\u0066\u0048\u0064\u0072"}:
				_acbd := NewCT_ColorTransformHeader()
				if _ebafe := d.DecodeElement(_acbd, &_bcdc); _ebafe != nil {
					return _ebafe
				}
				_bdgc.ColorsDefHdr = append(_bdgc.ColorsDefHdr, _acbd)
			default:
				_b.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074e\u0064\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0020\u006f\u006e\u0020\u0043\u006f\u006c\u006f\u0072\u0073D\u0065\u0066\u0048\u0064\u0072\u004c\u0073\u0074\u0020\u0025\u0076", _bcdc.Name)
				if _bfee := d.Skip(); _bfee != nil {
					return _bfee
				}
			}
		case _d.EndElement:
			break _efeee
		case _d.CharData:
		}
	}
	return nil
}
func (_acbdd ST_LinearDirection) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_efga := _d.Attr{}
	_efga.Name = name
	switch _acbdd {
	case ST_LinearDirectionUnset:
		_efga.Value = ""
	case ST_LinearDirectionFromL:
		_efga.Value = "\u0066\u0072\u006fm\u004c"
	case ST_LinearDirectionFromR:
		_efga.Value = "\u0066\u0072\u006fm\u0052"
	case ST_LinearDirectionFromT:
		_efga.Value = "\u0066\u0072\u006fm\u0054"
	case ST_LinearDirectionFromB:
		_efga.Value = "\u0066\u0072\u006fm\u0042"
	}
	return _efga, nil
}
func NewCT_CxnList() *CT_CxnList { _aeeff := &CT_CxnList{}; return _aeeff }
func (_dgeb *ColorsDef) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0078\u006d\u006cn\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0061"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0078\u006d\u006c\u006e\u0073\u003a\u0064\u0069"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0072"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"}, Value: "\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"})
	start.Name.Local = "\u0063o\u006c\u006f\u0072\u0073\u0044\u0065f"
	return _dgeb.CT_ColorTransform.MarshalXML(e, start)
}

const (
	ST_TextAnchorHorizontalUnset ST_TextAnchorHorizontal = 0
	ST_TextAnchorHorizontalNone  ST_TextAnchorHorizontal = 1
	ST_TextAnchorHorizontalCtr   ST_TextAnchorHorizontal = 2
)

func (_gadd ST_ConnectorPoint) Validate() error { return _gadd.ValidateWithPath("") }
func (_aage *CT_StyleDefinitionHeader) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0075\u006e\u0069\u0071\u0075\u0065\u0049\u0064"}, Value: _f.Sprintf("\u0025\u0076", _aage.UniqueIdAttr)})
	if _aage.MinVerAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u006d\u0069\u006e\u0056\u0065\u0072"}, Value: _f.Sprintf("\u0025\u0076", *_aage.MinVerAttr)})
	}
	if _aage.ResIdAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0072\u0065\u0073I\u0064"}, Value: _f.Sprintf("\u0025\u0076", *_aage.ResIdAttr)})
	}
	e.EncodeToken(start)
	_daca := _d.StartElement{Name: _d.Name{Local: "\u0074\u0069\u0074l\u0065"}}
	for _, _aabg := range _aage.Title {
		e.EncodeElement(_aabg, _daca)
	}
	_ecca := _d.StartElement{Name: _d.Name{Local: "\u0064\u0065\u0073\u0063"}}
	for _, _gfedf := range _aage.Desc {
		e.EncodeElement(_gfedf, _ecca)
	}
	if _aage.CatLst != nil {
		_bfeab := _d.StartElement{Name: _d.Name{Local: "\u0063\u0061\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_aage.CatLst, _bfeab)
	}
	if _aage.ExtLst != nil {
		_fcagg := _d.StartElement{Name: _d.Name{Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_aage.ExtLst, _fcagg)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_dadef *ST_ResizeHandlesStr) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_cfccg, _babc := d.Token()
	if _babc != nil {
		return _babc
	}
	if _fbde, _fdge := _cfccg.(_d.EndElement); _fdge && _fbde.Name == start.Name {
		*_dadef = 1
		return nil
	}
	if _efgg, _fdcg := _cfccg.(_d.CharData); !_fdcg {
		return _f.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _cfccg)
	} else {
		switch string(_efgg) {
		case "":
			*_dadef = 0
		case "\u0065\u0078\u0061c\u0074":
			*_dadef = 1
		case "\u0072\u0065\u006c":
			*_dadef = 2
		}
	}
	_cfccg, _babc = d.Token()
	if _babc != nil {
		return _babc
	}
	if _cgfce, _efff := _cfccg.(_d.EndElement); _efff && _cgfce.Name == start.Name {
		return nil
	}
	return _f.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _cfccg)
}
func (_bfbec ST_ParameterId) ValidateWithPath(path string) error {
	switch _bfbec {
	case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55:
	default:
		return _f.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_bfbec))
	}
	return nil
}

// ValidateWithPath validates the ColorsDefHdr and its children, prefixing error messages with path
func (_fbcc *ColorsDefHdr) ValidateWithPath(path string) error {
	if _bddc := _fbcc.CT_ColorTransformHeader.ValidateWithPath(path); _bddc != nil {
		return _bddc
	}
	return nil
}
func (_bceef ST_TextAnchorVertical) Validate() error { return _bceef.ValidateWithPath("") }
func (_fadga *CT_HierBranchStyle) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _babd := range start.Attr {
		if _babd.Name.Local == "\u0076\u0061\u006c" {
			_fadga.ValAttr.UnmarshalXMLAttr(_babd)
			continue
		}
	}
	for {
		_bacc, _ffef := d.Token()
		if _ffef != nil {
			return _f.Errorf("\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054_\u0048\u0069\u0065\u0072\u0042\u0072\u0061n\u0063\u0068\u0053\u0074\u0079\u006c\u0065\u003a\u0020\u0025\u0073", _ffef)
		}
		if _bbdd, _dcbf := _bacc.(_d.EndElement); _dcbf && _bbdd.Name == start.Name {
			break
		}
	}
	return nil
}

// Validate validates the CT_Pt and its children
func (_bbbf *CT_Pt) Validate() error { return _bbbf.ValidateWithPath("\u0043\u0054\u005fP\u0074") }

type CT_Parameter struct {
	TypeAttr ST_ParameterId
	ValAttr  ST_ParameterVal
}

func (_gffae *ST_HierBranchStyle) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_agbf, _abbgd := d.Token()
	if _abbgd != nil {
		return _abbgd
	}
	if _fefeb, _fdaad := _agbf.(_d.EndElement); _fdaad && _fefeb.Name == start.Name {
		*_gffae = 1
		return nil
	}
	if _gdddb, _bfegc := _agbf.(_d.CharData); !_bfegc {
		return _f.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _agbf)
	} else {
		switch string(_gdddb) {
		case "":
			*_gffae = 0
		case "\u006c":
			*_gffae = 1
		case "\u0072":
			*_gffae = 2
		case "\u0068\u0061\u006e\u0067":
			*_gffae = 3
		case "\u0073\u0074\u0064":
			*_gffae = 4
		case "\u0069\u006e\u0069\u0074":
			*_gffae = 5
		}
	}
	_agbf, _abbgd = d.Token()
	if _abbgd != nil {
		return _abbgd
	}
	if _adcdc, _afce := _agbf.(_d.EndElement); _afce && _adcdc.Name == start.Name {
		return nil
	}
	return _f.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _agbf)
}
func (_caeeb *CT_Direction) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _bbccf := range start.Attr {
		if _bbccf.Name.Local == "\u0076\u0061\u006c" {
			_caeeb.ValAttr.UnmarshalXMLAttr(_bbccf)
			continue
		}
	}
	for {
		_cgb, _bdeeg := d.Token()
		if _bdeeg != nil {
			return _f.Errorf("\u0070a\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005f\u0044\u0069r\u0065\u0063\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0073", _bdeeg)
		}
		if _deab, _ddca := _cgb.(_d.EndElement); _ddca && _deab.Name == start.Name {
			break
		}
	}
	return nil
}
func (_dfacd ST_ContinueDirection) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_dfacd.String(), start)
}

// ValidateWithPath validates the LayoutDefHdr and its children, prefixing error messages with path
func (_aagfg *LayoutDefHdr) ValidateWithPath(path string) error {
	if _geeg := _aagfg.CT_DiagramDefinitionHeader.ValidateWithPath(path); _geeg != nil {
		return _geeg
	}
	return nil
}
func (_gfceg ST_ConnectorDimension) ValidateWithPath(path string) error {
	switch _gfceg {
	case 0, 1, 2, 3:
	default:
		return _f.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_gfceg))
	}
	return nil
}
func (_fede *ST_ConstraintType) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_gedc, _defdc := d.Token()
	if _defdc != nil {
		return _defdc
	}
	if _bbgde, _eecgf := _gedc.(_d.EndElement); _eecgf && _bbgde.Name == start.Name {
		*_fede = 1
		return nil
	}
	if _cfaf, _cgacb := _gedc.(_d.CharData); !_cgacb {
		return _f.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _gedc)
	} else {
		switch string(_cfaf) {
		case "":
			*_fede = 0
		case "\u006e\u006f\u006e\u0065":
			*_fede = 1
		case "\u0061\u006c\u0069\u0067\u006e\u004f\u0066\u0066":
			*_fede = 2
		case "\u0062e\u0067\u004d\u0061\u0072\u0067":
			*_fede = 3
		case "\u0062\u0065\u006e\u0064\u0044\u0069\u0073\u0074":
			*_fede = 4
		case "\u0062\u0065\u0067\u0050\u0061\u0064":
			*_fede = 5
		case "\u0062":
			*_fede = 6
		case "\u0062\u004d\u0061r\u0067":
			*_fede = 7
		case "\u0062\u004f\u0066\u0066":
			*_fede = 8
		case "\u0063\u0074\u0072\u0058":
			*_fede = 9
		case "\u0063t\u0072\u0058\u004f\u0066\u0066":
			*_fede = 10
		case "\u0063\u0074\u0072\u0059":
			*_fede = 11
		case "\u0063t\u0072\u0059\u004f\u0066\u0066":
			*_fede = 12
		case "\u0063\u006f\u006e\u006e\u0044\u0069\u0073\u0074":
			*_fede = 13
		case "\u0064\u0069\u0061\u006d":
			*_fede = 14
		case "\u0065n\u0064\u004d\u0061\u0072\u0067":
			*_fede = 15
		case "\u0065\u006e\u0064\u0050\u0061\u0064":
			*_fede = 16
		case "\u0068":
			*_fede = 17
		case "\u0068\u0041\u0072\u0048":
			*_fede = 18
		case "\u0068\u004f\u0066\u0066":
			*_fede = 19
		case "\u006c":
			*_fede = 20
		case "\u006c\u004d\u0061r\u0067":
			*_fede = 21
		case "\u006c\u004f\u0066\u0066":
			*_fede = 22
		case "\u0072":
			*_fede = 23
		case "\u0072\u004d\u0061r\u0067":
			*_fede = 24
		case "\u0072\u004f\u0066\u0066":
			*_fede = 25
		case "\u0070\u0072\u0069\u006d\u0046\u006f\u006e\u0074\u0053\u007a":
			*_fede = 26
		case "\u0070\u0079\u0072\u0061\u0041\u0063\u0063\u0074\u0052\u0061\u0074\u0069\u006f":
			*_fede = 27
		case "\u0073e\u0063\u0046\u006f\u006e\u0074\u0053z":
			*_fede = 28
		case "\u0073\u0069\u0062S\u0070":
			*_fede = 29
		case "\u0073\u0065\u0063\u0053\u0069\u0062\u0053\u0070":
			*_fede = 30
		case "\u0073\u0070":
			*_fede = 31
		case "\u0073t\u0065\u006d\u0054\u0068\u0069\u0063k":
			*_fede = 32
		case "\u0074":
			*_fede = 33
		case "\u0074\u004d\u0061r\u0067":
			*_fede = 34
		case "\u0074\u004f\u0066\u0066":
			*_fede = 35
		case "\u0075\u0073\u0065r\u0041":
			*_fede = 36
		case "\u0075\u0073\u0065r\u0042":
			*_fede = 37
		case "\u0075\u0073\u0065r\u0043":
			*_fede = 38
		case "\u0075\u0073\u0065r\u0044":
			*_fede = 39
		case "\u0075\u0073\u0065r\u0045":
			*_fede = 40
		case "\u0075\u0073\u0065r\u0046":
			*_fede = 41
		case "\u0075\u0073\u0065r\u0047":
			*_fede = 42
		case "\u0075\u0073\u0065r\u0048":
			*_fede = 43
		case "\u0075\u0073\u0065r\u0049":
			*_fede = 44
		case "\u0075\u0073\u0065r\u004a":
			*_fede = 45
		case "\u0075\u0073\u0065r\u004b":
			*_fede = 46
		case "\u0075\u0073\u0065r\u004c":
			*_fede = 47
		case "\u0075\u0073\u0065r\u004d":
			*_fede = 48
		case "\u0075\u0073\u0065r\u004e":
			*_fede = 49
		case "\u0075\u0073\u0065r\u004f":
			*_fede = 50
		case "\u0075\u0073\u0065r\u0050":
			*_fede = 51
		case "\u0075\u0073\u0065r\u0051":
			*_fede = 52
		case "\u0075\u0073\u0065r\u0052":
			*_fede = 53
		case "\u0075\u0073\u0065r\u0053":
			*_fede = 54
		case "\u0075\u0073\u0065r\u0054":
			*_fede = 55
		case "\u0075\u0073\u0065r\u0055":
			*_fede = 56
		case "\u0075\u0073\u0065r\u0056":
			*_fede = 57
		case "\u0075\u0073\u0065r\u0057":
			*_fede = 58
		case "\u0075\u0073\u0065r\u0058":
			*_fede = 59
		case "\u0075\u0073\u0065r\u0059":
			*_fede = 60
		case "\u0075\u0073\u0065r\u005a":
			*_fede = 61
		case "\u0077":
			*_fede = 62
		case "\u0077\u0041\u0072\u0048":
			*_fede = 63
		case "\u0077\u004f\u0066\u0066":
			*_fede = 64
		}
	}
	_gedc, _defdc = d.Token()
	if _defdc != nil {
		return _defdc
	}
	if _gaeb, _cage := _gedc.(_d.EndElement); _cage && _gaeb.Name == start.Name {
		return nil
	}
	return _f.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _gedc)
}
func (_fdgaf *ST_ConnectorRouting) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_fdgaf = 0
	case "\u0073\u0074\u0072\u0061":
		*_fdgaf = 1
	case "\u0062\u0065\u006e\u0064":
		*_fdgaf = 2
	case "\u0063\u0075\u0072v\u0065":
		*_fdgaf = 3
	case "\u006co\u006e\u0067\u0043\u0075\u0072\u0076e":
		*_fdgaf = 4
	}
	return nil
}
func (_bfaa ST_ResizeHandlesStr) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_bfaa.String(), start)
}
func (_egae ST_HueDir) ValidateWithPath(path string) error {
	switch _egae {
	case 0, 1, 2:
	default:
		return _f.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_egae))
	}
	return nil
}

// ValidateWithPath validates the CT_CTName and its children, prefixing error messages with path
func (_bgc *CT_CTName) ValidateWithPath(path string) error { return nil }

type CT_StyleDefinitionHeaderLst struct{ StyleDefHdr []*CT_StyleDefinitionHeader }

func (_bfaf *CT_ElemPropSet) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _bfaf.PresAssocIDAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "p\u0072\u0065\u0073\u0041\u0073\u0073\u006f\u0063\u0049\u0044"}, Value: _f.Sprintf("\u0025\u0076", *_bfaf.PresAssocIDAttr)})
	}
	if _bfaf.PresNameAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0070\u0072\u0065\u0073\u004e\u0061\u006d\u0065"}, Value: _f.Sprintf("\u0025\u0076", *_bfaf.PresNameAttr)})
	}
	if _bfaf.PresStyleLblAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0070\u0072\u0065s\u0053\u0074\u0079\u006c\u0065\u004c\u0062\u006c"}, Value: _f.Sprintf("\u0025\u0076", *_bfaf.PresStyleLblAttr)})
	}
	if _bfaf.PresStyleIdxAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0070\u0072\u0065s\u0053\u0074\u0079\u006c\u0065\u0049\u0064\u0078"}, Value: _f.Sprintf("\u0025\u0076", *_bfaf.PresStyleIdxAttr)})
	}
	if _bfaf.PresStyleCntAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0070\u0072\u0065s\u0053\u0074\u0079\u006c\u0065\u0043\u006e\u0074"}, Value: _f.Sprintf("\u0025\u0076", *_bfaf.PresStyleCntAttr)})
	}
	if _bfaf.LoTypeIdAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u006c\u006f\u0054\u0079\u0070\u0065\u0049\u0064"}, Value: _f.Sprintf("\u0025\u0076", *_bfaf.LoTypeIdAttr)})
	}
	if _bfaf.LoCatIdAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u006co\u0043\u0061\u0074\u0049\u0064"}, Value: _f.Sprintf("\u0025\u0076", *_bfaf.LoCatIdAttr)})
	}
	if _bfaf.QsTypeIdAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0071\u0073\u0054\u0079\u0070\u0065\u0049\u0064"}, Value: _f.Sprintf("\u0025\u0076", *_bfaf.QsTypeIdAttr)})
	}
	if _bfaf.QsCatIdAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0071s\u0043\u0061\u0074\u0049\u0064"}, Value: _f.Sprintf("\u0025\u0076", *_bfaf.QsCatIdAttr)})
	}
	if _bfaf.CsTypeIdAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0063\u0073\u0054\u0079\u0070\u0065\u0049\u0064"}, Value: _f.Sprintf("\u0025\u0076", *_bfaf.CsTypeIdAttr)})
	}
	if _bfaf.CsCatIdAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0063s\u0043\u0061\u0074\u0049\u0064"}, Value: _f.Sprintf("\u0025\u0076", *_bfaf.CsCatIdAttr)})
	}
	if _bfaf.Coherent3DOffAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0063\u006f\u0068\u0065\u0072\u0065\u006e\u0074\u0033\u0044\u004f\u0066\u0066"}, Value: _f.Sprintf("\u0025\u0064", _bbcdb(*_bfaf.Coherent3DOffAttr))})
	}
	if _bfaf.PhldrTAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0070\u0068\u006c\u0064\u0072\u0054"}, Value: _f.Sprintf("\u0025\u0076", *_bfaf.PhldrTAttr)})
	}
	if _bfaf.PhldrAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0070\u0068\u006cd\u0072"}, Value: _f.Sprintf("\u0025\u0064", _bbcdb(*_bfaf.PhldrAttr))})
	}
	if _bfaf.CustAngAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0063u\u0073\u0074\u0041\u006e\u0067"}, Value: _f.Sprintf("\u0025\u0076", *_bfaf.CustAngAttr)})
	}
	if _bfaf.CustFlipVertAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0063\u0075\u0073t\u0046\u006c\u0069\u0070\u0056\u0065\u0072\u0074"}, Value: _f.Sprintf("\u0025\u0064", _bbcdb(*_bfaf.CustFlipVertAttr))})
	}
	if _bfaf.CustFlipHorAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "c\u0075\u0073\u0074\u0046\u006c\u0069\u0070\u0048\u006f\u0072"}, Value: _f.Sprintf("\u0025\u0064", _bbcdb(*_bfaf.CustFlipHorAttr))})
	}
	if _bfaf.CustSzXAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0063u\u0073\u0074\u0053\u007a\u0058"}, Value: _f.Sprintf("\u0025\u0076", *_bfaf.CustSzXAttr)})
	}
	if _bfaf.CustSzYAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0063u\u0073\u0074\u0053\u007a\u0059"}, Value: _f.Sprintf("\u0025\u0076", *_bfaf.CustSzYAttr)})
	}
	if _bfaf.CustScaleXAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0063\u0075\u0073\u0074\u0053\u0063\u0061\u006c\u0065\u0058"}, Value: _f.Sprintf("\u0025\u0076", *_bfaf.CustScaleXAttr)})
	}
	if _bfaf.CustScaleYAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0063\u0075\u0073\u0074\u0053\u0063\u0061\u006c\u0065\u0059"}, Value: _f.Sprintf("\u0025\u0076", *_bfaf.CustScaleYAttr)})
	}
	if _bfaf.CustTAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0063\u0075\u0073t\u0054"}, Value: _f.Sprintf("\u0025\u0064", _bbcdb(*_bfaf.CustTAttr))})
	}
	if _bfaf.CustLinFactXAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0063\u0075\u0073t\u004c\u0069\u006e\u0046\u0061\u0063\u0074\u0058"}, Value: _f.Sprintf("\u0025\u0076", *_bfaf.CustLinFactXAttr)})
	}
	if _bfaf.CustLinFactYAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0063\u0075\u0073t\u004c\u0069\u006e\u0046\u0061\u0063\u0074\u0059"}, Value: _f.Sprintf("\u0025\u0076", *_bfaf.CustLinFactYAttr)})
	}
	if _bfaf.CustLinFactNeighborXAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "c\u0075s\u0074\u004c\u0069\u006e\u0046\u0061\u0063\u0074N\u0065\u0069\u0067\u0068bo\u0072\u0058"}, Value: _f.Sprintf("\u0025\u0076", *_bfaf.CustLinFactNeighborXAttr)})
	}
	if _bfaf.CustLinFactNeighborYAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "c\u0075s\u0074\u004c\u0069\u006e\u0046\u0061\u0063\u0074N\u0065\u0069\u0067\u0068bo\u0072\u0059"}, Value: _f.Sprintf("\u0025\u0076", *_bfaf.CustLinFactNeighborYAttr)})
	}
	if _bfaf.CustRadScaleRadAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0063u\u0073t\u0052\u0061\u0064\u0053\u0063\u0061\u006c\u0065\u0052\u0061\u0064"}, Value: _f.Sprintf("\u0025\u0076", *_bfaf.CustRadScaleRadAttr)})
	}
	if _bfaf.CustRadScaleIncAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0063u\u0073t\u0052\u0061\u0064\u0053\u0063\u0061\u006c\u0065\u0049\u006e\u0063"}, Value: _f.Sprintf("\u0025\u0076", *_bfaf.CustRadScaleIncAttr)})
	}
	e.EncodeToken(start)
	if _bfaf.PresLayoutVars != nil {
		_bebab := _d.StartElement{Name: _d.Name{Local: "\u0070\u0072\u0065\u0073\u004c\u0061\u0079\u006f\u0075t\u0056\u0061\u0072\u0073"}}
		e.EncodeElement(_bfaf.PresLayoutVars, _bebab)
	}
	if _bfaf.Style != nil {
		_cddb := _d.StartElement{Name: _d.Name{Local: "\u0073\u0074\u0079l\u0065"}}
		e.EncodeElement(_bfaf.Style, _cddb)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_beed ST_LinearDirection) String() string {
	switch _beed {
	case 0:
		return ""
	case 1:
		return "\u0066\u0072\u006fm\u004c"
	case 2:
		return "\u0066\u0072\u006fm\u0052"
	case 3:
		return "\u0066\u0072\u006fm\u0054"
	case 4:
		return "\u0066\u0072\u006fm\u0042"
	}
	return ""
}
func (_agcdd ST_BendPoint) Validate() error { return _agcdd.ValidateWithPath("") }

// ValidateWithPath validates the LayoutDef and its children, prefixing error messages with path
func (_fddeb *LayoutDef) ValidateWithPath(path string) error {
	if _dgbbc := _fddeb.CT_DiagramDefinition.ValidateWithPath(path); _dgbbc != nil {
		return _dgbbc
	}
	return nil
}
func (_dbcgg ST_TextAnchorHorizontal) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_cfbgb := _d.Attr{}
	_cfbgb.Name = name
	switch _dbcgg {
	case ST_TextAnchorHorizontalUnset:
		_cfbgb.Value = ""
	case ST_TextAnchorHorizontalNone:
		_cfbgb.Value = "\u006e\u006f\u006e\u0065"
	case ST_TextAnchorHorizontalCtr:
		_cfbgb.Value = "\u0063\u0074\u0072"
	}
	return _cfbgb, nil
}

type CT_Cxn struct {
	ModelIdAttr    ST_ModelId
	TypeAttr       ST_CxnType
	SrcIdAttr      ST_ModelId
	DestIdAttr     ST_ModelId
	SrcOrdAttr     uint32
	DestOrdAttr    uint32
	ParTransIdAttr *ST_ModelId
	SibTransIdAttr *ST_ModelId
	PresIdAttr     *string
	ExtLst         *_bc.CT_OfficeArtExtensionList
}

// Validate validates the CT_Category and its children
func (_gdae *CT_Category) Validate() error {
	return _gdae.ValidateWithPath("C\u0054\u005f\u0043\u0061\u0074\u0065\u0067\u006f\u0072\u0079")
}

type ST_DiagramHorizontalAlignment byte

func (_bcaa *CT_SampleData) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _fagdb := range start.Attr {
		if _fagdb.Name.Local == "\u0075\u0073\u0065\u0044\u0065\u0066" {
			_fagcc, _bfad := _gb.ParseBool(_fagdb.Value)
			if _bfad != nil {
				return _bfad
			}
			_bcaa.UseDefAttr = &_fagcc
			continue
		}
	}
_cggeg:
	for {
		_feea, _gggd := d.Token()
		if _gggd != nil {
			return _gggd
		}
		switch _ddfb := _feea.(type) {
		case _d.StartElement:
			switch _ddfb.Name {
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0064a\u0074\u0061\u004d\u006f\u0064\u0065l"}:
				_bcaa.DataModel = NewCT_DataModel()
				if _eagg := d.DecodeElement(_bcaa.DataModel, &_ddfb); _eagg != nil {
					return _eagg
				}
			default:
				_b.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0053a\u006d\u0070\u006c\u0065\u0044\u0061\u0074\u0061 \u0025\u0076", _ddfb.Name)
				if _afdd := d.Skip(); _afdd != nil {
					return _afdd
				}
			}
		case _d.EndElement:
			break _cggeg
		case _d.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_Name and its children, prefixing error messages with path
func (_bebb *CT_Name) ValidateWithPath(path string) error { return nil }

// Validate validates the CT_Constraints and its children
func (_cefb *CT_Constraints) Validate() error {
	return _cefb.ValidateWithPath("\u0043\u0054\u005f\u0043\u006f\u006e\u0073\u0074\u0072a\u0069\u006e\u0074\u0073")
}
func NewCT_SDDescription() *CT_SDDescription { _fdcfc := &CT_SDDescription{}; return _fdcfc }

// ST_FunctionValue is a union type
type ST_FunctionValue struct {
	Int32               *int32
	Bool                *bool
	ST_Direction        ST_Direction
	ST_HierBranchStyle  ST_HierBranchStyle
	ST_AnimOneStr       ST_AnimOneStr
	ST_AnimLvlStr       ST_AnimLvlStr
	ST_ResizeHandlesStr ST_ResizeHandlesStr
}
type AG_IteratorAttributes struct {
	AxisAttr          *ST_AxisTypes
	PtTypeAttr        *ST_ElementTypes
	HideLastTransAttr *ST_Booleans
	StAttr            *ST_Ints
	CntAttr           *ST_UnsignedInts
	StepAttr          *ST_Ints
}

func (_fdc *CT_BulletEnabled) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _fdc.ValAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0076\u0061\u006c"}, Value: _f.Sprintf("\u0025\u0064", _bbcdb(*_fdc.ValAttr))})
	}
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

type ST_VariableType byte

func (_fac *CT_Colors) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _fac.MethAttr != ST_ClrAppMethodUnset {
		_efad, _fgg := _fac.MethAttr.MarshalXMLAttr(_d.Name{Local: "\u006d\u0065\u0074\u0068"})
		if _fgg != nil {
			return _fgg
		}
		start.Attr = append(start.Attr, _efad)
	}
	if _fac.HueDirAttr != ST_HueDirUnset {
		_ffce, _cbbc := _fac.HueDirAttr.MarshalXMLAttr(_d.Name{Local: "\u0068\u0075\u0065\u0044\u0069\u0072"})
		if _cbbc != nil {
			return _cbbc
		}
		start.Attr = append(start.Attr, _ffce)
	}
	e.EncodeToken(start)
	if _fac.EG_ColorChoice != nil {
		for _, _dcd := range _fac.EG_ColorChoice {
			_dcd.MarshalXML(e, _d.StartElement{})
		}
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_dfgbd ST_AnimLvlStr) ValidateWithPath(path string) error {
	switch _dfgbd {
	case 0, 1, 2, 3:
	default:
		return _f.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_dfgbd))
	}
	return nil
}

type ST_BendPoint byte

func (_bccbg *ColorsDef) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_bccbg.CT_ColorTransform = *NewCT_ColorTransform()
	for _, _acca := range start.Attr {
		if _acca.Name.Local == "\u0075\u006e\u0069\u0071\u0075\u0065\u0049\u0064" {
			_bdce, _edgd := _acca.Value, error(nil)
			if _edgd != nil {
				return _edgd
			}
			_bccbg.UniqueIdAttr = &_bdce
			continue
		}
		if _acca.Name.Local == "\u006d\u0069\u006e\u0056\u0065\u0072" {
			_dfcb, _dgfb := _acca.Value, error(nil)
			if _dgfb != nil {
				return _dgfb
			}
			_bccbg.MinVerAttr = &_dfcb
			continue
		}
	}
_egfe:
	for {
		_cfde, _edgba := d.Token()
		if _edgba != nil {
			return _edgba
		}
		switch _gcbb := _cfde.(type) {
		case _d.StartElement:
			switch _gcbb.Name {
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0074\u0069\u0074l\u0065"}:
				_eeega := NewCT_CTName()
				if _caace := d.DecodeElement(_eeega, &_gcbb); _caace != nil {
					return _caace
				}
				_bccbg.Title = append(_bccbg.Title, _eeega)
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0064\u0065\u0073\u0063"}:
				_cdgda := NewCT_CTDescription()
				if _bffd := d.DecodeElement(_cdgda, &_gcbb); _bffd != nil {
					return _bffd
				}
				_bccbg.Desc = append(_bccbg.Desc, _cdgda)
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0061\u0074\u004c\u0073\u0074"}:
				_bccbg.CatLst = NewCT_CTCategories()
				if _acaff := d.DecodeElement(_bccbg.CatLst, &_gcbb); _acaff != nil {
					return _acaff
				}
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0073\u0074\u0079\u006c\u0065\u004c\u0062\u006c"}:
				_bbgb := NewCT_CTStyleLabel()
				if _afb := d.DecodeElement(_bbgb, &_gcbb); _afb != nil {
					return _afb
				}
				_bccbg.StyleLbl = append(_bccbg.StyleLbl, _bbgb)
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_bccbg.ExtLst = _bc.NewCT_OfficeArtExtensionList()
				if _cdcec := d.DecodeElement(_bccbg.ExtLst, &_gcbb); _cdcec != nil {
					return _cdcec
				}
			default:
				_b.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u006f\u006c\u006f\u0072\u0073D\u0065\u0066 \u0025\u0076", _gcbb.Name)
				if _bdde := d.Skip(); _bdde != nil {
					return _bdde
				}
			}
		case _d.EndElement:
			break _egfe
		case _d.CharData:
		}
	}
	return nil
}

// Validate validates the CT_StyleDefinitionHeaderLst and its children
func (_bdeb *CT_StyleDefinitionHeaderLst) Validate() error {
	return _bdeb.ValidateWithPath("C\u0054\u005f\u0053\u0074\u0079\u006ce\u0044\u0065\u0066\u0069\u006e\u0069\u0074\u0069\u006fn\u0048\u0065\u0061d\u0065r\u004c\u0073\u0074")
}
func (_ggbf ST_ModelId) String() string {
	if _ggbf.Int32 != nil {
		return _f.Sprintf("\u0025\u0076", *_ggbf.Int32)
	}
	if _ggbf.ST_Guid != nil {
		return _f.Sprintf("\u0025\u0076", *_ggbf.ST_Guid)
	}
	return ""
}
func (_acbb *StyleDefHdrLst) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0078\u006d\u006cn\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0061"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0078\u006d\u006c\u006e\u0073\u003a\u0064\u0069"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0072"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"}, Value: "\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"})
	start.Name.Local = "\u0073\u0074\u0079\u006c\u0065\u0044\u0065\u0066\u0048d\u0072\u004c\u0073\u0074"
	return _acbb.CT_StyleDefinitionHeaderLst.MarshalXML(e, start)
}
func (_ceba ST_NodeVerticalAlignment) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_ceba.String(), start)
}
func (_defdf ST_SecondaryLinearDirection) String() string {
	switch _defdf {
	case 0:
		return ""
	case 1:
		return "\u006e\u006f\u006e\u0065"
	case 2:
		return "\u0066\u0072\u006fm\u004c"
	case 3:
		return "\u0066\u0072\u006fm\u0052"
	case 4:
		return "\u0066\u0072\u006fm\u0054"
	case 5:
		return "\u0066\u0072\u006fm\u0042"
	}
	return ""
}
func NewCT_Description() *CT_Description { _ffdd := &CT_Description{}; return _ffdd }

// ValidateWithPath validates the AG_IteratorAttributes and its children, prefixing error messages with path
func (_dbc *AG_IteratorAttributes) ValidateWithPath(path string) error { return nil }
func (_bcbea *ST_NodeHorizontalAlignment) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_bcbea = 0
	case "\u006c":
		*_bcbea = 1
	case "\u0063\u0074\u0072":
		*_bcbea = 2
	case "\u0072":
		*_bcbea = 3
	}
	return nil
}
func (_fgfdb *StyleDef) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0078\u006d\u006cn\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0061"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0078\u006d\u006c\u006e\u0073\u003a\u0064\u0069"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0072"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"}, Value: "\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"})
	start.Name.Local = "\u0073\u0074\u0079\u006c\u0065\u0044\u0065\u0066"
	return _fgfdb.CT_StyleDefinition.MarshalXML(e, start)
}

// ValidateWithPath validates the CT_LayoutVariablePropertySet and its children, prefixing error messages with path
func (_affb *CT_LayoutVariablePropertySet) ValidateWithPath(path string) error {
	if _affb.OrgChart != nil {
		if _bcf := _affb.OrgChart.ValidateWithPath(path + "\u002fO\u0072\u0067\u0043\u0068\u0061\u0072t"); _bcf != nil {
			return _bcf
		}
	}
	if _affb.ChMax != nil {
		if _fdce := _affb.ChMax.ValidateWithPath(path + "\u002f\u0043\u0068\u004d\u0061\u0078"); _fdce != nil {
			return _fdce
		}
	}
	if _affb.ChPref != nil {
		if _cgge := _affb.ChPref.ValidateWithPath(path + "\u002fC\u0068\u0050\u0072\u0065\u0066"); _cgge != nil {
			return _cgge
		}
	}
	if _affb.BulletEnabled != nil {
		if _fgefc := _affb.BulletEnabled.ValidateWithPath(path + "\u002f\u0042\u0075\u006c\u006c\u0065\u0074\u0045\u006ea\u0062\u006c\u0065\u0064"); _fgefc != nil {
			return _fgefc
		}
	}
	if _affb.Dir != nil {
		if _gcad := _affb.Dir.ValidateWithPath(path + "\u002f\u0044\u0069\u0072"); _gcad != nil {
			return _gcad
		}
	}
	if _affb.HierBranch != nil {
		if _dafad := _affb.HierBranch.ValidateWithPath(path + "/\u0048\u0069\u0065\u0072\u0042\u0072\u0061\u006e\u0063\u0068"); _dafad != nil {
			return _dafad
		}
	}
	if _affb.AnimOne != nil {
		if _ggca := _affb.AnimOne.ValidateWithPath(path + "\u002f\u0041\u006e\u0069\u006d\u004f\u006e\u0065"); _ggca != nil {
			return _ggca
		}
	}
	if _affb.AnimLvl != nil {
		if _fccd := _affb.AnimLvl.ValidateWithPath(path + "\u002f\u0041\u006e\u0069\u006d\u004c\u0076\u006c"); _fccd != nil {
			return _fccd
		}
	}
	if _affb.ResizeHandles != nil {
		if _ddfc := _affb.ResizeHandles.ValidateWithPath(path + "\u002f\u0052\u0065\u0073\u0069\u007a\u0065\u0048\u0061n\u0064\u006c\u0065\u0073"); _ddfc != nil {
			return _ddfc
		}
	}
	return nil
}
func (_bfgag *ST_ChildOrderType) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_ggfaag, _ebdbb := d.Token()
	if _ebdbb != nil {
		return _ebdbb
	}
	if _febda, _aadac := _ggfaag.(_d.EndElement); _aadac && _febda.Name == start.Name {
		*_bfgag = 1
		return nil
	}
	if _cebe, _ecgg := _ggfaag.(_d.CharData); !_ecgg {
		return _f.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _ggfaag)
	} else {
		switch string(_cebe) {
		case "":
			*_bfgag = 0
		case "\u0062":
			*_bfgag = 1
		case "\u0074":
			*_bfgag = 2
		}
	}
	_ggfaag, _ebdbb = d.Token()
	if _ebdbb != nil {
		return _ebdbb
	}
	if _cgbg, _ffeda := _ggfaag.(_d.EndElement); _ffeda && _cgbg.Name == start.Name {
		return nil
	}
	return _f.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _ggfaag)
}
func (_efef *ST_StartingElement) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_efef = 0
	case "\u006e\u006f\u0064\u0065":
		*_efef = 1
	case "\u0074\u0072\u0061n\u0073":
		*_efef = 2
	}
	return nil
}

// ValidateWithPath validates the RelIds and its children, prefixing error messages with path
func (_fcbaa *RelIds) ValidateWithPath(path string) error {
	if _gfecf := _fcbaa.CT_RelIds.ValidateWithPath(path); _gfecf != nil {
		return _gfecf
	}
	return nil
}
func (_cgfe ST_AutoTextRotation) Validate() error { return _cgfe.ValidateWithPath("") }

type ST_RotationPath byte

func (_fedbb ST_VerticalAlignment) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_fedbb.String(), start)
}

type ST_FunctionOperator byte

func (_fcaf ST_ConnectorDimension) String() string {
	switch _fcaf {
	case 0:
		return ""
	case 1:
		return "\u0031\u0044"
	case 2:
		return "\u0032\u0044"
	case 3:
		return "\u0063\u0075\u0073\u0074"
	}
	return ""
}
func (_gffce ST_LayoutShapeType) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _gffce.ST_ShapeType != _bc.ST_ShapeTypeUnset {
		e.EncodeToken(_d.CharData(_gffce.ST_ShapeType.String()))
	}
	if _gffce.ST_OutputShapeType != ST_OutputShapeTypeUnset {
		e.EncodeToken(_d.CharData(_gffce.ST_OutputShapeType.String()))
	}
	return e.EncodeToken(_d.EndElement{Name: start.Name})
}
func (_cfdca ST_SecondaryChildAlignment) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_dffef := _d.Attr{}
	_dffef.Name = name
	switch _cfdca {
	case ST_SecondaryChildAlignmentUnset:
		_dffef.Value = ""
	case ST_SecondaryChildAlignmentNone:
		_dffef.Value = "\u006e\u006f\u006e\u0065"
	case ST_SecondaryChildAlignmentT:
		_dffef.Value = "\u0074"
	case ST_SecondaryChildAlignmentB:
		_dffef.Value = "\u0062"
	case ST_SecondaryChildAlignmentL:
		_dffef.Value = "\u006c"
	case ST_SecondaryChildAlignmentR:
		_dffef.Value = "\u0072"
	}
	return _dffef, nil
}
func (_gdbde *CT_SDDescription) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _cbge := range start.Attr {
		if _cbge.Name.Local == "\u006c\u0061\u006e\u0067" {
			_ffdf, _gbfgb := _cbge.Value, error(nil)
			if _gbfgb != nil {
				return _gbfgb
			}
			_gdbde.LangAttr = &_ffdf
			continue
		}
		if _cbge.Name.Local == "\u0076\u0061\u006c" {
			_adaa, _fcda := _cbge.Value, error(nil)
			if _fcda != nil {
				return _fcda
			}
			_gdbde.ValAttr = _adaa
			continue
		}
	}
	for {
		_gegge, _aagf := d.Token()
		if _aagf != nil {
			return _f.Errorf("\u0070\u0061\u0072\u0073i\u006e\u0067\u0020\u0043\u0054\u005f\u0053\u0044\u0044\u0065s\u0063r\u0069\u0070\u0074\u0069\u006f\u006e\u003a \u0025\u0073", _aagf)
		}
		if _bgf, _feeb := _gegge.(_d.EndElement); _feeb && _bgf.Name == start.Name {
			break
		}
	}
	return nil
}
func (_feadb ST_HierarchyAlignment) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_feadb.String(), start)
}
func (_fcgba ST_ConnectorRouting) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_ceaee := _d.Attr{}
	_ceaee.Name = name
	switch _fcgba {
	case ST_ConnectorRoutingUnset:
		_ceaee.Value = ""
	case ST_ConnectorRoutingStra:
		_ceaee.Value = "\u0073\u0074\u0072\u0061"
	case ST_ConnectorRoutingBend:
		_ceaee.Value = "\u0062\u0065\u006e\u0064"
	case ST_ConnectorRoutingCurve:
		_ceaee.Value = "\u0063\u0075\u0072v\u0065"
	case ST_ConnectorRoutingLongCurve:
		_ceaee.Value = "\u006co\u006e\u0067\u0043\u0075\u0072\u0076e"
	}
	return _ceaee, nil
}
func (_gfbgae ST_ConnectorPoint) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_cdgff := _d.Attr{}
	_cdgff.Name = name
	switch _gfbgae {
	case ST_ConnectorPointUnset:
		_cdgff.Value = ""
	case ST_ConnectorPointAuto:
		_cdgff.Value = "\u0061\u0075\u0074\u006f"
	case ST_ConnectorPointBCtr:
		_cdgff.Value = "\u0062\u0043\u0074\u0072"
	case ST_ConnectorPointCtr:
		_cdgff.Value = "\u0063\u0074\u0072"
	case ST_ConnectorPointMidL:
		_cdgff.Value = "\u006d\u0069\u0064\u004c"
	case ST_ConnectorPointMidR:
		_cdgff.Value = "\u006d\u0069\u0064\u0052"
	case ST_ConnectorPointTCtr:
		_cdgff.Value = "\u0074\u0043\u0074\u0072"
	case ST_ConnectorPointBL:
		_cdgff.Value = "\u0062\u004c"
	case ST_ConnectorPointBR:
		_cdgff.Value = "\u0062\u0052"
	case ST_ConnectorPointTL:
		_cdgff.Value = "\u0074\u004c"
	case ST_ConnectorPointTR:
		_cdgff.Value = "\u0074\u0052"
	case ST_ConnectorPointRadial:
		_cdgff.Value = "\u0072\u0061\u0064\u0069\u0061\u006c"
	}
	return _cdgff, nil
}

// ValidateWithPath validates the CT_Category and its children, prefixing error messages with path
func (_ceg *CT_Category) ValidateWithPath(path string) error { return nil }

// Validate validates the ColorsDef and its children
func (_dafd *ColorsDef) Validate() error {
	return _dafd.ValidateWithPath("\u0043o\u006c\u006f\u0072\u0073\u0044\u0065f")
}
func (_gegf ST_ChildAlignment) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_fgcf := _d.Attr{}
	_fgcf.Name = name
	switch _gegf {
	case ST_ChildAlignmentUnset:
		_fgcf.Value = ""
	case ST_ChildAlignmentT:
		_fgcf.Value = "\u0074"
	case ST_ChildAlignmentB:
		_fgcf.Value = "\u0062"
	case ST_ChildAlignmentL:
		_fgcf.Value = "\u006c"
	case ST_ChildAlignmentR:
		_fgcf.Value = "\u0072"
	}
	return _fgcf, nil
}
func (_fege *ST_HueDir) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_fege = 0
	case "\u0063\u0077":
		*_fege = 1
	case "\u0063\u0063\u0077":
		*_fege = 2
	}
	return nil
}
func NewCT_CTStyleLabel() *CT_CTStyleLabel { _eabb := &CT_CTStyleLabel{}; return _eabb }

type ST_ClrAppMethod byte
type ST_FunctionType byte

func (_gfcf ST_GrowDirection) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_baaa := _d.Attr{}
	_baaa.Name = name
	switch _gfcf {
	case ST_GrowDirectionUnset:
		_baaa.Value = ""
	case ST_GrowDirectionTL:
		_baaa.Value = "\u0074\u004c"
	case ST_GrowDirectionTR:
		_baaa.Value = "\u0074\u0052"
	case ST_GrowDirectionBL:
		_baaa.Value = "\u0062\u004c"
	case ST_GrowDirectionBR:
		_baaa.Value = "\u0062\u0052"
	}
	return _baaa, nil
}

const (
	ST_PtTypeUnset    ST_PtType = 0
	ST_PtTypeNode     ST_PtType = 1
	ST_PtTypeAsst     ST_PtType = 2
	ST_PtTypeDoc      ST_PtType = 3
	ST_PtTypePres     ST_PtType = 4
	ST_PtTypeParTrans ST_PtType = 5
	ST_PtTypeSibTrans ST_PtType = 6
)

func (_ffcdd *ST_TextAnchorVertical) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_fcfbd, _fafd := d.Token()
	if _fafd != nil {
		return _fafd
	}
	if _geffb, _cgcbb := _fcfbd.(_d.EndElement); _cgcbb && _geffb.Name == start.Name {
		*_ffcdd = 1
		return nil
	}
	if _bdcc, _begad := _fcfbd.(_d.CharData); !_begad {
		return _f.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _fcfbd)
	} else {
		switch string(_bdcc) {
		case "":
			*_ffcdd = 0
		case "\u0074":
			*_ffcdd = 1
		case "\u006d\u0069\u0064":
			*_ffcdd = 2
		case "\u0062":
			*_ffcdd = 3
		}
	}
	_fcfbd, _fafd = d.Token()
	if _fafd != nil {
		return _fafd
	}
	if _bdfb, _cdbdb := _fcfbd.(_d.EndElement); _cdbdb && _bdfb.Name == start.Name {
		return nil
	}
	return _f.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _fcfbd)
}
func (_bggbda ST_ContinueDirection) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_cbddb := _d.Attr{}
	_cbddb.Name = name
	switch _bggbda {
	case ST_ContinueDirectionUnset:
		_cbddb.Value = ""
	case ST_ContinueDirectionRevDir:
		_cbddb.Value = "\u0072\u0065\u0076\u0044\u0069\u0072"
	case ST_ContinueDirectionSameDir:
		_cbddb.Value = "\u0073a\u006d\u0065\u0044\u0069\u0072"
	}
	return _cbddb, nil
}
func NewCT_Pt() *CT_Pt { _bcda := &CT_Pt{}; return _bcda }
func (_gccea ST_TextDirection) ValidateWithPath(path string) error {
	switch _gccea {
	case 0, 1, 2:
	default:
		return _f.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_gccea))
	}
	return nil
}

// ValidateWithPath validates the CT_Constraints and its children, prefixing error messages with path
func (_caec *CT_Constraints) ValidateWithPath(path string) error {
	for _eeag, _fgae := range _caec.Constr {
		if _facd := _fgae.ValidateWithPath(_f.Sprintf("\u0025\u0073\u002f\u0043\u006f\u006e\u0073\u0074\u0072\u005b\u0025\u0064\u005d", path, _eeag)); _facd != nil {
			return _facd
		}
	}
	return nil
}

const (
	ST_ContinueDirectionUnset   ST_ContinueDirection = 0
	ST_ContinueDirectionRevDir  ST_ContinueDirection = 1
	ST_ContinueDirectionSameDir ST_ContinueDirection = 2
)

func (_dbae *CT_AnimOne) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _egfb := range start.Attr {
		if _egfb.Name.Local == "\u0076\u0061\u006c" {
			_dbae.ValAttr.UnmarshalXMLAttr(_egfb)
			continue
		}
	}
	for {
		_efc, _bfb := d.Token()
		if _bfb != nil {
			return _f.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0043\u0054\u005f\u0041\u006e\u0069\u006d\u004f\u006e\u0065\u003a\u0020%\u0073", _bfb)
		}
		if _ede, _ebe := _efc.(_d.EndElement); _ebe && _ede.Name == start.Name {
			break
		}
	}
	return nil
}

type CT_Name struct {
	LangAttr *string
	ValAttr  string
}

// Validate validates the CT_CTDescription and its children
func (_cfd *CT_CTDescription) Validate() error {
	return _cfd.ValidateWithPath("\u0043\u0054_\u0043\u0054\u0044e\u0073\u0063\u0072\u0069\u0070\u0074\u0069\u006f\u006e")
}
func (_gcgb *ST_CxnType) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_gcgb = 0
	case "\u0070\u0061\u0072O\u0066":
		*_gcgb = 1
	case "\u0070\u0072\u0065\u0073\u004f\u0066":
		*_gcgb = 2
	case "\u0070r\u0065\u0073\u0050\u0061\u0072\u004ff":
		*_gcgb = 3
	case "\u0075\u006e\u006b\u006eow\u006e\u0052\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070":
		*_gcgb = 4
	}
	return nil
}

// Validate validates the CT_Choose and its children
func (_dgff *CT_Choose) Validate() error {
	return _dgff.ValidateWithPath("\u0043T\u005f\u0043\u0068\u006f\u006f\u0073e")
}

const (
	ST_AlgorithmTypeUnset     ST_AlgorithmType = 0
	ST_AlgorithmTypeComposite ST_AlgorithmType = 1
	ST_AlgorithmTypeConn      ST_AlgorithmType = 2
	ST_AlgorithmTypeCycle     ST_AlgorithmType = 3
	ST_AlgorithmTypeHierChild ST_AlgorithmType = 4
	ST_AlgorithmTypeHierRoot  ST_AlgorithmType = 5
	ST_AlgorithmTypePyra      ST_AlgorithmType = 6
	ST_AlgorithmTypeLin       ST_AlgorithmType = 7
	ST_AlgorithmTypeSp        ST_AlgorithmType = 8
	ST_AlgorithmTypeTx        ST_AlgorithmType = 9
	ST_AlgorithmTypeSnake     ST_AlgorithmType = 10
)

type CT_PresentationOf struct {
	ExtLst            *_bc.CT_OfficeArtExtensionList
	AxisAttr          *ST_AxisTypes
	PtTypeAttr        *ST_ElementTypes
	HideLastTransAttr *ST_Booleans
	StAttr            *ST_Ints
	CntAttr           *ST_UnsignedInts
	StepAttr          *ST_Ints
}
type CT_StyleLabel struct {
	NameAttr string
	Scene3d  *_bc.CT_Scene3D
	Sp3d     *_bc.CT_Shape3D
	TxPr     *CT_TextProps
	Style    *_bc.CT_ShapeStyle
	ExtLst   *_bc.CT_OfficeArtExtensionList
}

// Validate validates the CT_CTCategory and its children
func (_adb *CT_CTCategory) Validate() error {
	return _adb.ValidateWithPath("\u0043\u0054\u005f\u0043\u0054\u0043\u0061\u0074\u0065\u0067\u006f\u0072\u0079")
}
func (_gccdce ST_TextBlockDirection) ValidateWithPath(path string) error {
	switch _gccdce {
	case 0, 1, 2:
	default:
		return _f.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_gccdce))
	}
	return nil
}
func (_beaea ST_BoolOperator) ValidateWithPath(path string) error {
	switch _beaea {
	case 0, 1, 2, 3, 4:
	default:
		return _f.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_beaea))
	}
	return nil
}
func (_bbaf *ST_AlgorithmType) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_agccc, _abgg := d.Token()
	if _abgg != nil {
		return _abgg
	}
	if _ggbbgf, _gbbc := _agccc.(_d.EndElement); _gbbc && _ggbbgf.Name == start.Name {
		*_bbaf = 1
		return nil
	}
	if _dgef, _ffgf := _agccc.(_d.CharData); !_ffgf {
		return _f.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _agccc)
	} else {
		switch string(_dgef) {
		case "":
			*_bbaf = 0
		case "\u0063o\u006d\u0070\u006f\u0073\u0069\u0074e":
			*_bbaf = 1
		case "\u0063\u006f\u006e\u006e":
			*_bbaf = 2
		case "\u0063\u0079\u0063l\u0065":
			*_bbaf = 3
		case "\u0068i\u0065\u0072\u0043\u0068\u0069\u006cd":
			*_bbaf = 4
		case "\u0068\u0069\u0065\u0072\u0052\u006f\u006f\u0074":
			*_bbaf = 5
		case "\u0070\u0079\u0072\u0061":
			*_bbaf = 6
		case "\u006c\u0069\u006e":
			*_bbaf = 7
		case "\u0073\u0070":
			*_bbaf = 8
		case "\u0074\u0078":
			*_bbaf = 9
		case "\u0073\u006e\u0061k\u0065":
			*_bbaf = 10
		}
	}
	_agccc, _abgg = d.Token()
	if _abgg != nil {
		return _abgg
	}
	if _efbbe, _efaf := _agccc.(_d.EndElement); _efaf && _efbbe.Name == start.Name {
		return nil
	}
	return _f.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _agccc)
}
func (_bec *CT_AnimLvl) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _cae := range start.Attr {
		if _cae.Name.Local == "\u0076\u0061\u006c" {
			_bec.ValAttr.UnmarshalXMLAttr(_cae)
			continue
		}
	}
	for {
		_gcf, _cec := d.Token()
		if _cec != nil {
			return _f.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0043\u0054\u005f\u0041\u006e\u0069\u006d\u004c\u0076\u006c\u003a\u0020%\u0073", _cec)
		}
		if _fabg, _ggf := _gcf.(_d.EndElement); _ggf && _fabg.Name == start.Name {
			break
		}
	}
	return nil
}

// Validate validates the CT_CTCategories and its children
func (_bcd *CT_CTCategories) Validate() error {
	return _bcd.ValidateWithPath("\u0043T\u005fC\u0054\u0043\u0061\u0074\u0065\u0067\u006f\u0072\u0069\u0065\u0073")
}
func (_cfgac *CT_StyleDefinitionHeaderLst) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
_geed:
	for {
		_gffg, _cfdd := d.Token()
		if _cfdd != nil {
			return _cfdd
		}
		switch _aafda := _gffg.(type) {
		case _d.StartElement:
			switch _aafda.Name {
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "s\u0074\u0079\u006c\u0065\u0044\u0065\u0066\u0048\u0064\u0072"}:
				_cbedb := NewCT_StyleDefinitionHeader()
				if _eeeeb := d.DecodeElement(_cbedb, &_aafda); _eeeeb != nil {
					return _eeeeb
				}
				_cfgac.StyleDefHdr = append(_cfgac.StyleDefHdr, _cbedb)
			default:
				_b.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020e\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054_\u0053\u0074\u0079\u006c\u0065\u0044\u0065\u0066\u0069\u006e\u0069\u0074\u0069\u006f\u006e\u0048\u0065a\u0064\u0065\u0072\u004c\u0073\u0074\u0020\u0025\u0076", _aafda.Name)
				if _addae := d.Skip(); _addae != nil {
					return _addae
				}
			}
		case _d.EndElement:
			break _geed
		case _d.CharData:
		}
	}
	return nil
}
func (_addc *CT_Description) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _addc.LangAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u006c\u0061\u006e\u0067"}, Value: _f.Sprintf("\u0025\u0076", *_addc.LangAttr)})
	}
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0076\u0061\u006c"}, Value: _f.Sprintf("\u0025\u0076", _addc.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_ffceb ST_DiagramTextAlignment) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_cbfac := _d.Attr{}
	_cbfac.Name = name
	switch _ffceb {
	case ST_DiagramTextAlignmentUnset:
		_cbfac.Value = ""
	case ST_DiagramTextAlignmentL:
		_cbfac.Value = "\u006c"
	case ST_DiagramTextAlignmentCtr:
		_cbfac.Value = "\u0063\u0074\u0072"
	case ST_DiagramTextAlignmentR:
		_cbfac.Value = "\u0072"
	}
	return _cbfac, nil
}
func (_eddcf *CT_RelIds) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _bcea := range start.Attr {
		if _bcea.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073" && _bcea.Name.Local == "\u0064\u006d" || _bcea.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f\u002fp\u0075\u0072\u006c.\u006f\u0063\u006cc\u002e\u006fr\u0067\u002f\u006f\u006f\u0078\u006dl\u002fof\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073" && _bcea.Name.Local == "\u0064\u006d" {
			_dggb, _aaab := _bcea.Value, error(nil)
			if _aaab != nil {
				return _aaab
			}
			_eddcf.DmAttr = _dggb
			continue
		}
		if _bcea.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073" && _bcea.Name.Local == "\u006c\u006f" || _bcea.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f\u002fp\u0075\u0072\u006c.\u006f\u0063\u006cc\u002e\u006fr\u0067\u002f\u006f\u006f\u0078\u006dl\u002fof\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073" && _bcea.Name.Local == "\u006c\u006f" {
			_aggf, _fdag := _bcea.Value, error(nil)
			if _fdag != nil {
				return _fdag
			}
			_eddcf.LoAttr = _aggf
			continue
		}
		if _bcea.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073" && _bcea.Name.Local == "\u0071\u0073" || _bcea.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f\u002fp\u0075\u0072\u006c.\u006f\u0063\u006cc\u002e\u006fr\u0067\u002f\u006f\u006f\u0078\u006dl\u002fof\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073" && _bcea.Name.Local == "\u0071\u0073" {
			_addg, _aegd := _bcea.Value, error(nil)
			if _aegd != nil {
				return _aegd
			}
			_eddcf.QsAttr = _addg
			continue
		}
		if _bcea.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073" && _bcea.Name.Local == "\u0063\u0073" || _bcea.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f\u002fp\u0075\u0072\u006c.\u006f\u0063\u006cc\u002e\u006fr\u0067\u002f\u006f\u006f\u0078\u006dl\u002fof\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073" && _bcea.Name.Local == "\u0063\u0073" {
			_dgac, _bggf := _bcea.Value, error(nil)
			if _bggf != nil {
				return _bggf
			}
			_eddcf.CsAttr = _dgac
			continue
		}
	}
	for {
		_fadae, _dgcbd := d.Token()
		if _dgcbd != nil {
			return _f.Errorf("p\u0061\u0072\u0073\u0069ng\u0020C\u0054\u005f\u0052\u0065\u006cI\u0064\u0073\u003a\u0020\u0025\u0073", _dgcbd)
		}
		if _fadc, _dgaf := _fadae.(_d.EndElement); _dgaf && _fadc.Name == start.Name {
			break
		}
	}
	return nil
}
func (_caece ST_HierBranchStyle) ValidateWithPath(path string) error {
	switch _caece {
	case 0, 1, 2, 3, 4, 5:
	default:
		return _f.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_caece))
	}
	return nil
}
func (_cgecg ST_Offset) String() string {
	switch _cgecg {
	case 0:
		return ""
	case 1:
		return "\u0063\u0074\u0072"
	case 2:
		return "\u006f\u0066\u0066"
	}
	return ""
}
func (_fbeda ST_ConnectorRouting) ValidateWithPath(path string) error {
	switch _fbeda {
	case 0, 1, 2, 3, 4:
	default:
		return _f.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_fbeda))
	}
	return nil
}
func (_bgcd ST_BendPoint) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_deedd := _d.Attr{}
	_deedd.Name = name
	switch _bgcd {
	case ST_BendPointUnset:
		_deedd.Value = ""
	case ST_BendPointBeg:
		_deedd.Value = "\u0062\u0065\u0067"
	case ST_BendPointDef:
		_deedd.Value = "\u0064\u0065\u0066"
	case ST_BendPointEnd:
		_deedd.Value = "\u0065\u006e\u0064"
	}
	return _deedd, nil
}
func (_bcge ST_SecondaryChildAlignment) Validate() error { return _bcge.ValidateWithPath("") }
func NewCT_Otherwise() *CT_Otherwise                     { _ffeff := &CT_Otherwise{}; return _ffeff }

// ValidateWithPath validates the CT_ColorTransform and its children, prefixing error messages with path
func (_aada *CT_ColorTransform) ValidateWithPath(path string) error {
	for _cdd, _bdd := range _aada.Title {
		if _ddf := _bdd.ValidateWithPath(_f.Sprintf("\u0025\u0073\u002fT\u0069\u0074\u006c\u0065\u005b\u0025\u0064\u005d", path, _cdd)); _ddf != nil {
			return _ddf
		}
	}
	for _bcgf, _feg := range _aada.Desc {
		if _eeda := _feg.ValidateWithPath(_f.Sprintf("%\u0073\u002f\u0044\u0065\u0073\u0063\u005b\u0025\u0064\u005d", path, _bcgf)); _eeda != nil {
			return _eeda
		}
	}
	if _aada.CatLst != nil {
		if _ege := _aada.CatLst.ValidateWithPath(path + "\u002fC\u0061\u0074\u004c\u0073\u0074"); _ege != nil {
			return _ege
		}
	}
	for _fea, _gefa := range _aada.StyleLbl {
		if _abb := _gefa.ValidateWithPath(_f.Sprintf("\u0025s\u002fS\u0074\u0079\u006c\u0065\u004c\u0062\u006c\u005b\u0025\u0064\u005d", path, _fea)); _abb != nil {
			return _abb
		}
	}
	if _aada.ExtLst != nil {
		if _cfgd := _aada.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _cfgd != nil {
			return _cfgd
		}
	}
	return nil
}
func (_ebeb *ST_ConnectorPoint) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_ebeb = 0
	case "\u0061\u0075\u0074\u006f":
		*_ebeb = 1
	case "\u0062\u0043\u0074\u0072":
		*_ebeb = 2
	case "\u0063\u0074\u0072":
		*_ebeb = 3
	case "\u006d\u0069\u0064\u004c":
		*_ebeb = 4
	case "\u006d\u0069\u0064\u0052":
		*_ebeb = 5
	case "\u0074\u0043\u0074\u0072":
		*_ebeb = 6
	case "\u0062\u004c":
		*_ebeb = 7
	case "\u0062\u0052":
		*_ebeb = 8
	case "\u0074\u004c":
		*_ebeb = 9
	case "\u0074\u0052":
		*_ebeb = 10
	case "\u0072\u0061\u0064\u0069\u0061\u006c":
		*_ebeb = 11
	}
	return nil
}
func (_abgd *CT_SDCategory) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0074\u0079\u0070\u0065"}, Value: _f.Sprintf("\u0025\u0076", _abgd.TypeAttr)})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0070\u0072\u0069"}, Value: _f.Sprintf("\u0025\u0076", _abgd.PriAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

// Validate validates the AG_ConstraintAttributes and its children
func (_cb *AG_ConstraintAttributes) Validate() error {
	return _cb.ValidateWithPath("\u0041\u0047\u005fCo\u006e\u0073\u0074\u0072\u0061\u0069\u006e\u0074\u0041\u0074\u0074\u0072\u0069\u0062\u0075\u0074\u0065\u0073")
}

// Validate validates the ColorsDefHdr and its children
func (_ffge *ColorsDefHdr) Validate() error {
	return _ffge.ValidateWithPath("\u0043\u006f\u006co\u0072\u0073\u0044\u0065\u0066\u0048\u0064\u0072")
}

type StyleDef struct{ CT_StyleDefinition }

func (_cfffa ST_Breakpoint) String() string {
	switch _cfffa {
	case 0:
		return ""
	case 1:
		return "\u0065\u006e\u0064\u0043\u006e\u0076"
	case 2:
		return "\u0062\u0061\u006c"
	case 3:
		return "\u0066\u0069\u0078e\u0064"
	}
	return ""
}

// ValidateWithPath validates the CT_CxnList and its children, prefixing error messages with path
func (_dgbd *CT_CxnList) ValidateWithPath(path string) error {
	for _abbc, _gfg := range _dgbd.Cxn {
		if _dcfa := _gfg.ValidateWithPath(_f.Sprintf("\u0025\u0073\u002f\u0043\u0078\u006e\u005b\u0025\u0064\u005d", path, _abbc)); _dcfa != nil {
			return _dcfa
		}
	}
	return nil
}
func (_bbddb ST_CxnType) String() string {
	switch _bbddb {
	case 0:
		return ""
	case 1:
		return "\u0070\u0061\u0072O\u0066"
	case 2:
		return "\u0070\u0072\u0065\u0073\u004f\u0066"
	case 3:
		return "\u0070r\u0065\u0073\u0050\u0061\u0072\u004ff"
	case 4:
		return "\u0075\u006e\u006b\u006eow\u006e\u0052\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070"
	}
	return ""
}
func (_gaeee ST_HierarchyAlignment) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_dcdb := _d.Attr{}
	_dcdb.Name = name
	switch _gaeee {
	case ST_HierarchyAlignmentUnset:
		_dcdb.Value = ""
	case ST_HierarchyAlignmentTL:
		_dcdb.Value = "\u0074\u004c"
	case ST_HierarchyAlignmentTR:
		_dcdb.Value = "\u0074\u0052"
	case ST_HierarchyAlignmentTCtrCh:
		_dcdb.Value = "\u0074\u0043\u0074\u0072\u0043\u0068"
	case ST_HierarchyAlignmentTCtrDes:
		_dcdb.Value = "\u0074C\u0074\u0072\u0044\u0065\u0073"
	case ST_HierarchyAlignmentBL:
		_dcdb.Value = "\u0062\u004c"
	case ST_HierarchyAlignmentBR:
		_dcdb.Value = "\u0062\u0052"
	case ST_HierarchyAlignmentBCtrCh:
		_dcdb.Value = "\u0062\u0043\u0074\u0072\u0043\u0068"
	case ST_HierarchyAlignmentBCtrDes:
		_dcdb.Value = "\u0062C\u0074\u0072\u0044\u0065\u0073"
	case ST_HierarchyAlignmentLT:
		_dcdb.Value = "\u006c\u0054"
	case ST_HierarchyAlignmentLB:
		_dcdb.Value = "\u006c\u0042"
	case ST_HierarchyAlignmentLCtrCh:
		_dcdb.Value = "\u006c\u0043\u0074\u0072\u0043\u0068"
	case ST_HierarchyAlignmentLCtrDes:
		_dcdb.Value = "\u006cC\u0074\u0072\u0044\u0065\u0073"
	case ST_HierarchyAlignmentRT:
		_dcdb.Value = "\u0072\u0054"
	case ST_HierarchyAlignmentRB:
		_dcdb.Value = "\u0072\u0042"
	case ST_HierarchyAlignmentRCtrCh:
		_dcdb.Value = "\u0072\u0043\u0074\u0072\u0043\u0068"
	case ST_HierarchyAlignmentRCtrDes:
		_dcdb.Value = "\u0072C\u0074\u0072\u0044\u0065\u0073"
	}
	return _dcdb, nil
}
func (_ggddc *ST_ChildDirection) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_ggddc = 0
	case "\u0068\u006f\u0072\u007a":
		*_ggddc = 1
	case "\u0076\u0065\u0072\u0074":
		*_ggddc = 2
	}
	return nil
}

const (
	ST_ArrowheadStyleUnset ST_ArrowheadStyle = 0
	ST_ArrowheadStyleAuto  ST_ArrowheadStyle = 1
	ST_ArrowheadStyleArr   ST_ArrowheadStyle = 2
	ST_ArrowheadStyleNoArr ST_ArrowheadStyle = 3
)

func (_dddgcb *ST_TextAnchorHorizontal) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_dddde, _bbaa := d.Token()
	if _bbaa != nil {
		return _bbaa
	}
	if _affca, _afffe := _dddde.(_d.EndElement); _afffe && _affca.Name == start.Name {
		*_dddgcb = 1
		return nil
	}
	if _ecge, _bggba := _dddde.(_d.CharData); !_bggba {
		return _f.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _dddde)
	} else {
		switch string(_ecge) {
		case "":
			*_dddgcb = 0
		case "\u006e\u006f\u006e\u0065":
			*_dddgcb = 1
		case "\u0063\u0074\u0072":
			*_dddgcb = 2
		}
	}
	_dddde, _bbaa = d.Token()
	if _bbaa != nil {
		return _bbaa
	}
	if _debag, _bbcbd := _dddde.(_d.EndElement); _bbcbd && _debag.Name == start.Name {
		return nil
	}
	return _f.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _dddde)
}
func (_fggg *ST_FunctionArgument) ValidateWithPath(path string) error {
	_fcfbeb := []string{}
	if _fggg.ST_VariableType != ST_VariableTypeUnset {
		_fcfbeb = append(_fcfbeb, "\u0053T\u005fV\u0061\u0072\u0069\u0061\u0062\u006c\u0065\u0054\u0079\u0070\u0065")
	}
	if len(_fcfbeb) > 1 {
		return _f.Errorf("%\u0073\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u006d\u0065\u006d\u0062\u0065r\u0073\u0020\u0073e\u0074:\u0020\u0025\u0076", path, _fcfbeb)
	}
	return nil
}
func (_ffae *CT_PresentationOf) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _decb := range start.Attr {
		if _decb.Name.Local == "\u0061\u0078\u0069\u0073" {
			_bgbf, _cfee := ParseSliceST_AxisTypes(_decb.Value)
			if _cfee != nil {
				return _cfee
			}
			_ffae.AxisAttr = &_bgbf
			continue
		}
		if _decb.Name.Local == "\u0070\u0074\u0054\u0079\u0070\u0065" {
			_addb, _cgbe := ParseSliceST_ElementTypes(_decb.Value)
			if _cgbe != nil {
				return _cgbe
			}
			_ffae.PtTypeAttr = &_addb
			continue
		}
		if _decb.Name.Local == "\u0068\u0069\u0064\u0065\u004c\u0061\u0073\u0074\u0054\u0072\u0061\u006e\u0073" {
			_gbedc, _gbbf := ParseSliceST_Booleans(_decb.Value)
			if _gbbf != nil {
				return _gbbf
			}
			_ffae.HideLastTransAttr = &_gbedc
			continue
		}
		if _decb.Name.Local == "\u0073\u0074" {
			_bbgg, _aead := ParseSliceST_Ints(_decb.Value)
			if _aead != nil {
				return _aead
			}
			_ffae.StAttr = &_bbgg
			continue
		}
		if _decb.Name.Local == "\u0063\u006e\u0074" {
			_fcba, _ddcaa := ParseSliceST_UnsignedInts(_decb.Value)
			if _ddcaa != nil {
				return _ddcaa
			}
			_ffae.CntAttr = &_fcba
			continue
		}
		if _decb.Name.Local == "\u0073\u0074\u0065\u0070" {
			_ccfc, _ddbe := ParseSliceST_Ints(_decb.Value)
			if _ddbe != nil {
				return _ddbe
			}
			_ffae.StepAttr = &_ccfc
			continue
		}
	}
_gfce:
	for {
		_bbcbg, _cebg := d.Token()
		if _cebg != nil {
			return _cebg
		}
		switch _faeg := _bbcbg.(type) {
		case _d.StartElement:
			switch _faeg.Name {
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_ffae.ExtLst = _bc.NewCT_OfficeArtExtensionList()
				if _bebd := d.DecodeElement(_ffae.ExtLst, &_faeg); _bebd != nil {
					return _bebd
				}
			default:
				_b.Log.Debug("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0050\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e\u004f\u0066\u0020\u0025\u0076", _faeg.Name)
				if _afcd := d.Skip(); _afcd != nil {
					return _afcd
				}
			}
		case _d.EndElement:
			break _gfce
		case _d.CharData:
		}
	}
	return nil
}
func (_geedf ST_Offset) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_geedf.String(), start)
}
func (_ggg *CT_ChildMax) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _ggg.ValAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0076\u0061\u006c"}, Value: _f.Sprintf("\u0025\u0076", *_ggg.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

const (
	ST_FallbackDimensionUnset ST_FallbackDimension = 0
	ST_FallbackDimension1D    ST_FallbackDimension = 1
	ST_FallbackDimension2D    ST_FallbackDimension = 2
)

type CT_DiagramDefinitionHeaderLst struct{ LayoutDefHdr []*CT_DiagramDefinitionHeader }

func (_bfgaa ST_NodeVerticalAlignment) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_fegg := _d.Attr{}
	_fegg.Name = name
	switch _bfgaa {
	case ST_NodeVerticalAlignmentUnset:
		_fegg.Value = ""
	case ST_NodeVerticalAlignmentT:
		_fegg.Value = "\u0074"
	case ST_NodeVerticalAlignmentMid:
		_fegg.Value = "\u006d\u0069\u0064"
	case ST_NodeVerticalAlignmentB:
		_fegg.Value = "\u0062"
	}
	return _fegg, nil
}
func (_gced *CT_CxnList) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _gced.Cxn != nil {
		_gdec := _d.StartElement{Name: _d.Name{Local: "\u0063\u0078\u006e"}}
		for _, _ebg := range _gced.Cxn {
			e.EncodeElement(_ebg, _gdec)
		}
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

type ST_ChildAlignment byte

func (_aggge ST_TextDirection) String() string {
	switch _aggge {
	case 0:
		return ""
	case 1:
		return "\u0066\u0072\u006fm\u0054"
	case 2:
		return "\u0066\u0072\u006fm\u0042"
	}
	return ""
}
func (_ccegd ST_RotationPath) Validate() error { return _ccegd.ValidateWithPath("") }
func (_bdceg *ST_FlowDirection) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_fcae, _bgdd := d.Token()
	if _bgdd != nil {
		return _bgdd
	}
	if _fgaea, _fagfc := _fcae.(_d.EndElement); _fagfc && _fgaea.Name == start.Name {
		*_bdceg = 1
		return nil
	}
	if _ccfcg, _cebfb := _fcae.(_d.CharData); !_cebfb {
		return _f.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _fcae)
	} else {
		switch string(_ccfcg) {
		case "":
			*_bdceg = 0
		case "\u0072\u006f\u0077":
			*_bdceg = 1
		case "\u0063\u006f\u006c":
			*_bdceg = 2
		}
	}
	_fcae, _bgdd = d.Token()
	if _bgdd != nil {
		return _bgdd
	}
	if _cdbcg, _gebc := _fcae.(_d.EndElement); _gebc && _cdbcg.Name == start.Name {
		return nil
	}
	return _f.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _fcae)
}
func (_decg *CT_CTName) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _ggcd := range start.Attr {
		if _ggcd.Name.Local == "\u006c\u0061\u006e\u0067" {
			_cggfb, _gbec := _ggcd.Value, error(nil)
			if _gbec != nil {
				return _gbec
			}
			_decg.LangAttr = &_cggfb
			continue
		}
		if _ggcd.Name.Local == "\u0076\u0061\u006c" {
			_cbab, _faf := _ggcd.Value, error(nil)
			if _faf != nil {
				return _faf
			}
			_decg.ValAttr = _cbab
			continue
		}
	}
	for {
		_cab, _dbba := d.Token()
		if _dbba != nil {
			return _f.Errorf("p\u0061\u0072\u0073\u0069ng\u0020C\u0054\u005f\u0043\u0054\u004ea\u006d\u0065\u003a\u0020\u0025\u0073", _dbba)
		}
		if _cafe, _gagf := _cab.(_d.EndElement); _gagf && _cafe.Name == start.Name {
			break
		}
	}
	return nil
}
func (_dgadf ST_TextAnchorVertical) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_fcefa := _d.Attr{}
	_fcefa.Name = name
	switch _dgadf {
	case ST_TextAnchorVerticalUnset:
		_fcefa.Value = ""
	case ST_TextAnchorVerticalT:
		_fcefa.Value = "\u0074"
	case ST_TextAnchorVerticalMid:
		_fcefa.Value = "\u006d\u0069\u0064"
	case ST_TextAnchorVerticalB:
		_fcefa.Value = "\u0062"
	}
	return _fcefa, nil
}
func (_bcca ST_ClrAppMethod) Validate() error { return _bcca.ValidateWithPath("") }

type CT_Algorithm struct {
	TypeAttr ST_AlgorithmType
	RevAttr  *uint32
	Param    []*CT_Parameter
	ExtLst   *_bc.CT_OfficeArtExtensionList
}

func (_agcc *CT_Constraint) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	if _agcc.OpAttr != ST_BoolOperatorUnset {
		_bdbf, _abde := _agcc.OpAttr.MarshalXMLAttr(_d.Name{Local: "\u006f\u0070"})
		if _abde != nil {
			return _abde
		}
		start.Attr = append(start.Attr, _bdbf)
	}
	if _agcc.ValAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0076\u0061\u006c"}, Value: _f.Sprintf("\u0025\u0076", *_agcc.ValAttr)})
	}
	if _agcc.FactAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0066\u0061\u0063\u0074"}, Value: _f.Sprintf("\u0025\u0076", *_agcc.FactAttr)})
	}
	if _agcc.TypeAttr != ST_ConstraintTypeUnset {
		_dgab, _gbea := _agcc.TypeAttr.MarshalXMLAttr(_d.Name{Local: "\u0074\u0079\u0070\u0065"})
		if _gbea != nil {
			return _gbea
		}
		start.Attr = append(start.Attr, _dgab)
	}
	if _agcc.ForAttr != ST_ConstraintRelationshipUnset {
		_fdgf, _ffcd := _agcc.ForAttr.MarshalXMLAttr(_d.Name{Local: "\u0066\u006f\u0072"})
		if _ffcd != nil {
			return _ffcd
		}
		start.Attr = append(start.Attr, _fdgf)
	}
	if _agcc.ForNameAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0066o\u0072\u004e\u0061\u006d\u0065"}, Value: _f.Sprintf("\u0025\u0076", *_agcc.ForNameAttr)})
	}
	if _agcc.PtTypeAttr != ST_ElementTypeUnset {
		_facf, _gcfc := _agcc.PtTypeAttr.MarshalXMLAttr(_d.Name{Local: "\u0070\u0074\u0054\u0079\u0070\u0065"})
		if _gcfc != nil {
			return _gcfc
		}
		start.Attr = append(start.Attr, _facf)
	}
	if _agcc.RefTypeAttr != ST_ConstraintTypeUnset {
		_cccb, _fdd := _agcc.RefTypeAttr.MarshalXMLAttr(_d.Name{Local: "\u0072e\u0066\u0054\u0079\u0070\u0065"})
		if _fdd != nil {
			return _fdd
		}
		start.Attr = append(start.Attr, _cccb)
	}
	if _agcc.RefForAttr != ST_ConstraintRelationshipUnset {
		_gefc, _cddd := _agcc.RefForAttr.MarshalXMLAttr(_d.Name{Local: "\u0072\u0065\u0066\u0046\u006f\u0072"})
		if _cddd != nil {
			return _cddd
		}
		start.Attr = append(start.Attr, _gefc)
	}
	if _agcc.RefForNameAttr != nil {
		start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0072\u0065\u0066\u0046\u006f\u0072\u004e\u0061\u006d\u0065"}, Value: _f.Sprintf("\u0025\u0076", *_agcc.RefForNameAttr)})
	}
	if _agcc.RefPtTypeAttr != ST_ElementTypeUnset {
		_gcgg, _gaaf := _agcc.RefPtTypeAttr.MarshalXMLAttr(_d.Name{Local: "\u0072e\u0066\u0050\u0074\u0054\u0079\u0070e"})
		if _gaaf != nil {
			return _gaaf
		}
		start.Attr = append(start.Attr, _gcgg)
	}
	e.EncodeToken(start)
	if _agcc.ExtLst != nil {
		_dcfc := _d.StartElement{Name: _d.Name{Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_agcc.ExtLst, _dcfc)
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_SampleData and its children
func (_agbg *CT_SampleData) Validate() error {
	return _agbg.ValidateWithPath("\u0043\u0054\u005f\u0053\u0061\u006d\u0070\u006c\u0065\u0044\u0061\u0074\u0061")
}

// Validate validates the CT_CxnList and its children
func (_add *CT_CxnList) Validate() error {
	return _add.ValidateWithPath("\u0043\u0054\u005f\u0043\u0078\u006e\u004c\u0069\u0073\u0074")
}
func (_gddad ST_Offset) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_eaecf := _d.Attr{}
	_eaecf.Name = name
	switch _gddad {
	case ST_OffsetUnset:
		_eaecf.Value = ""
	case ST_OffsetCtr:
		_eaecf.Value = "\u0063\u0074\u0072"
	case ST_OffsetOff:
		_eaecf.Value = "\u006f\u0066\u0066"
	}
	return _eaecf, nil
}

const (
	ST_VerticalAlignmentUnset ST_VerticalAlignment = 0
	ST_VerticalAlignmentT     ST_VerticalAlignment = 1
	ST_VerticalAlignmentMid   ST_VerticalAlignment = 2
	ST_VerticalAlignmentB     ST_VerticalAlignment = 3
	ST_VerticalAlignmentNone  ST_VerticalAlignment = 4
)

func (_edbcf ST_ClrAppMethod) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_cgdd := _d.Attr{}
	_cgdd.Name = name
	switch _edbcf {
	case ST_ClrAppMethodUnset:
		_cgdd.Value = ""
	case ST_ClrAppMethodSpan:
		_cgdd.Value = "\u0073\u0070\u0061\u006e"
	case ST_ClrAppMethodCycle:
		_cgdd.Value = "\u0063\u0079\u0063l\u0065"
	case ST_ClrAppMethodRepeat:
		_cgdd.Value = "\u0072\u0065\u0070\u0065\u0061\u0074"
	}
	return _cgdd, nil
}
func (_bcdf *CT_Otherwise) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _dgdb := range start.Attr {
		if _dgdb.Name.Local == "\u006e\u0061\u006d\u0065" {
			_bgcaa, _daee := _dgdb.Value, error(nil)
			if _daee != nil {
				return _daee
			}
			_bcdf.NameAttr = &_bgcaa
			continue
		}
	}
_dgdbc:
	for {
		_gegg, _aebc := d.Token()
		if _aebc != nil {
			return _aebc
		}
		switch _gcac := _gegg.(type) {
		case _d.StartElement:
			switch _gcac.Name {
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0061\u006c\u0067"}:
				_daebc := NewCT_Algorithm()
				if _gage := d.DecodeElement(_daebc, &_gcac); _gage != nil {
					return _gage
				}
				_bcdf.Alg = append(_bcdf.Alg, _daebc)
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0073\u0068\u0061p\u0065"}:
				_befe := NewCT_Shape()
				if _dcec := d.DecodeElement(_befe, &_gcac); _dcec != nil {
					return _dcec
				}
				_bcdf.Shape = append(_bcdf.Shape, _befe)
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0070\u0072\u0065\u0073\u004f\u0066"}:
				_eebaa := NewCT_PresentationOf()
				if _agfe := d.DecodeElement(_eebaa, &_gcac); _agfe != nil {
					return _agfe
				}
				_bcdf.PresOf = append(_bcdf.PresOf, _eebaa)
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063o\u006e\u0073\u0074\u0072\u004c\u0073t"}:
				_aeaba := NewCT_Constraints()
				if _adg := d.DecodeElement(_aeaba, &_gcac); _adg != nil {
					return _adg
				}
				_bcdf.ConstrLst = append(_bcdf.ConstrLst, _aeaba)
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0072u\u006c\u0065\u004c\u0073\u0074"}:
				_eacc := NewCT_Rules()
				if _ebca := d.DecodeElement(_eacc, &_gcac); _ebca != nil {
					return _ebca
				}
				_bcdf.RuleLst = append(_bcdf.RuleLst, _eacc)
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0066o\u0072\u0045\u0061\u0063\u0068"}:
				_dbcf := NewCT_ForEach()
				if _decef := d.DecodeElement(_dbcf, &_gcac); _decef != nil {
					return _decef
				}
				_bcdf.ForEach = append(_bcdf.ForEach, _dbcf)
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u006c\u0061\u0079\u006f\u0075\u0074\u004e\u006f\u0064\u0065"}:
				_cdfc := NewCT_LayoutNode()
				if _eaeec := d.DecodeElement(_cdfc, &_gcac); _eaeec != nil {
					return _eaeec
				}
				_bcdf.LayoutNode = append(_bcdf.LayoutNode, _cdfc)
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0068\u006f\u006f\u0073\u0065"}:
				_cgcb := NewCT_Choose()
				if _bfdfa := d.DecodeElement(_cgcb, &_gcac); _bfdfa != nil {
					return _bfdfa
				}
				_bcdf.Choose = append(_bcdf.Choose, _cgcb)
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_cbca := _bc.NewCT_OfficeArtExtensionList()
				if _eddbf := d.DecodeElement(_cbca, &_gcac); _eddbf != nil {
					return _eddbf
				}
				_bcdf.ExtLst = append(_bcdf.ExtLst, _cbca)
			default:
				_b.Log.Debug("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075n\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054_O\u0074\u0068e\u0072\u0077\u0069\u0073\u0065\u0020\u0025\u0076", _gcac.Name)
				if _cafd := d.Skip(); _cafd != nil {
					return _cafd
				}
			}
		case _d.EndElement:
			break _dgdbc
		case _d.CharData:
		}
	}
	return nil
}
func (_dbaf *CT_PtList) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	e.EncodeToken(start)
	if _dbaf.Pt != nil {
		_bfdc := _d.StartElement{Name: _d.Name{Local: "\u0070\u0074"}}
		for _, _cebcg := range _dbaf.Pt {
			e.EncodeElement(_cebcg, _bfdc)
		}
	}
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_dcebd ST_ChildDirection) MarshalXMLAttr(name _d.Name) (_d.Attr, error) {
	_dead := _d.Attr{}
	_dead.Name = name
	switch _dcebd {
	case ST_ChildDirectionUnset:
		_dead.Value = ""
	case ST_ChildDirectionHorz:
		_dead.Value = "\u0068\u006f\u0072\u007a"
	case ST_ChildDirectionVert:
		_dead.Value = "\u0076\u0065\u0072\u0074"
	}
	return _dead, nil
}
func (_fafb *CT_Parameter) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	_cgecc, _aceg := _fafb.TypeAttr.MarshalXMLAttr(_d.Name{Local: "\u0074\u0079\u0070\u0065"})
	if _aceg != nil {
		return _aceg
	}
	start.Attr = append(start.Attr, _cgecc)
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0076\u0061\u006c"}, Value: _f.Sprintf("\u0025\u0076", _fafb.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}

type CT_ElemPropSet struct {
	PresAssocIDAttr          *ST_ModelId
	PresNameAttr             *string
	PresStyleLblAttr         *string
	PresStyleIdxAttr         *int32
	PresStyleCntAttr         *int32
	LoTypeIdAttr             *string
	LoCatIdAttr              *string
	QsTypeIdAttr             *string
	QsCatIdAttr              *string
	CsTypeIdAttr             *string
	CsCatIdAttr              *string
	Coherent3DOffAttr        *bool
	PhldrTAttr               *string
	PhldrAttr                *bool
	CustAngAttr              *int32
	CustFlipVertAttr         *bool
	CustFlipHorAttr          *bool
	CustSzXAttr              *int32
	CustSzYAttr              *int32
	CustScaleXAttr           *ST_PrSetCustVal
	CustScaleYAttr           *ST_PrSetCustVal
	CustTAttr                *bool
	CustLinFactXAttr         *ST_PrSetCustVal
	CustLinFactYAttr         *ST_PrSetCustVal
	CustLinFactNeighborXAttr *ST_PrSetCustVal
	CustLinFactNeighborYAttr *ST_PrSetCustVal
	CustRadScaleRadAttr      *ST_PrSetCustVal
	CustRadScaleIncAttr      *ST_PrSetCustVal
	PresLayoutVars           *CT_LayoutVariablePropertySet
	Style                    *_bc.CT_ShapeStyle
}

const (
	ST_DirectionUnset ST_Direction = 0
	ST_DirectionNorm  ST_Direction = 1
	ST_DirectionRev   ST_Direction = 2
)

// ValidateWithPath validates the CT_CTCategory and its children, prefixing error messages with path
func (_dbgg *CT_CTCategory) ValidateWithPath(path string) error { return nil }
func NewAG_IteratorAttributes() *AG_IteratorAttributes          { _cgg := &AG_IteratorAttributes{}; return _cgg }
func (_feace *ST_BendPoint) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_feace = 0
	case "\u0062\u0065\u0067":
		*_feace = 1
	case "\u0064\u0065\u0066":
		*_feace = 2
	case "\u0065\u006e\u0064":
		*_feace = 3
	}
	return nil
}
func (_ceage *ST_VariableType) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_bgfa, _defcd := d.Token()
	if _defcd != nil {
		return _defcd
	}
	if _abff, _aaaa := _bgfa.(_d.EndElement); _aaaa && _abff.Name == start.Name {
		*_ceage = 1
		return nil
	}
	if _aabgg, _dfedf := _bgfa.(_d.CharData); !_dfedf {
		return _f.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _bgfa)
	} else {
		switch string(_aabgg) {
		case "":
			*_ceage = 0
		case "\u006e\u006f\u006e\u0065":
			*_ceage = 1
		case "\u006f\u0072\u0067\u0043\u0068\u0061\u0072\u0074":
			*_ceage = 2
		case "\u0063\u0068\u004da\u0078":
			*_ceage = 3
		case "\u0063\u0068\u0050\u0072\u0065\u0066":
			*_ceage = 4
		case "\u0062\u0075\u006c\u0045\u006e\u0061\u0062\u006c\u0065\u0064":
			*_ceage = 5
		case "\u0064\u0069\u0072":
			*_ceage = 6
		case "\u0068\u0069\u0065\u0072\u0042\u0072\u0061\u006e\u0063\u0068":
			*_ceage = 7
		case "\u0061n\u0069\u006d\u004f\u006e\u0065":
			*_ceage = 8
		case "\u0061n\u0069\u006d\u004c\u0076\u006c":
			*_ceage = 9
		case "\u0072\u0065\u0073\u0069\u007a\u0065\u0048\u0061\u006e\u0064\u006c\u0065\u0073":
			*_ceage = 10
		}
	}
	_bgfa, _defcd = d.Token()
	if _defcd != nil {
		return _defcd
	}
	if _bafgb, _egdgc := _bgfa.(_d.EndElement); _egdgc && _bafgb.Name == start.Name {
		return nil
	}
	return _f.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _bgfa)
}
func (_bfegd ST_ChildDirection) ValidateWithPath(path string) error {
	switch _bfegd {
	case 0, 1, 2:
	default:
		return _f.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_bfegd))
	}
	return nil
}
func (_eecde *ST_DiagramTextAlignment) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_bebaa, _fbbae := d.Token()
	if _fbbae != nil {
		return _fbbae
	}
	if _fgaaa, _dfcdg := _bebaa.(_d.EndElement); _dfcdg && _fgaaa.Name == start.Name {
		*_eecde = 1
		return nil
	}
	if _cfbed, _beeb := _bebaa.(_d.CharData); !_beeb {
		return _f.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _bebaa)
	} else {
		switch string(_cfbed) {
		case "":
			*_eecde = 0
		case "\u006c":
			*_eecde = 1
		case "\u0063\u0074\u0072":
			*_eecde = 2
		case "\u0072":
			*_eecde = 3
		}
	}
	_bebaa, _fbbae = d.Token()
	if _fbbae != nil {
		return _fbbae
	}
	if _cfcb, _edcbd := _bebaa.(_d.EndElement); _edcbd && _cfcb.Name == start.Name {
		return nil
	}
	return _f.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _bebaa)
}
func (_eegbc ST_FunctionArgument) String() string {
	if _eegbc.ST_VariableType != ST_VariableTypeUnset {
		return _eegbc.ST_VariableType.String()
	}
	return ""
}

type ST_StartingElement byte

func NewCT_Adj() *CT_Adj { _efdc := &CT_Adj{}; _efdc.IdxAttr = 1; return _efdc }
func (_cdbf ST_ArrowheadStyle) ValidateWithPath(path string) error {
	switch _cdbf {
	case 0, 1, 2, 3:
	default:
		return _f.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_cdbf))
	}
	return nil
}
func (_dbcg *LayoutDef) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0078\u006d\u006cn\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0061"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0078\u006d\u006c\u006e\u0073\u003a\u0064\u0069"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0072"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"}, Value: "\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"})
	start.Name.Local = "\u006ca\u0079\u006f\u0075\u0074\u0044\u0065f"
	return _dbcg.CT_DiagramDefinition.MarshalXML(e, start)
}
func (_geaab ST_FlowDirection) String() string {
	switch _geaab {
	case 0:
		return ""
	case 1:
		return "\u0072\u006f\u0077"
	case 2:
		return "\u0063\u006f\u006c"
	}
	return ""
}

// Validate validates the CT_ChildMax and its children
func (_ggcf *CT_ChildMax) Validate() error {
	return _ggcf.ValidateWithPath("C\u0054\u005f\u0043\u0068\u0069\u006c\u0064\u004d\u0061\u0078")
}
func (_ecedg ST_GrowDirection) String() string {
	switch _ecedg {
	case 0:
		return ""
	case 1:
		return "\u0074\u004c"
	case 2:
		return "\u0074\u0052"
	case 3:
		return "\u0062\u004c"
	case 4:
		return "\u0062\u0052"
	}
	return ""
}
func (_cce *CT_CTCategory) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0074\u0079\u0070\u0065"}, Value: _f.Sprintf("\u0025\u0076", _cce.TypeAttr)})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0070\u0072\u0069"}, Value: _f.Sprintf("\u0025\u0076", _cce.PriAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_d.EndElement{Name: start.Name})
	return nil
}
func (_ccebg ST_CenterShapeMapping) Validate() error { return _ccebg.ValidateWithPath("") }
func (_bbbb ST_ConstraintType) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_bbbb.String(), start)
}
func (_eafge ST_FunctionOperator) Validate() error { return _eafge.ValidateWithPath("") }
func (_effbfb ST_AutoTextRotation) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_effbfb.String(), start)
}

type ST_TextDirection byte

// ValidateWithPath validates the CT_BulletEnabled and its children, prefixing error messages with path
func (_cea *CT_BulletEnabled) ValidateWithPath(path string) error { return nil }
func (_fcffd ST_FlowDirection) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_fcffd.String(), start)
}
func NewCT_Category() *CT_Category { _ffad := &CT_Category{}; return _ffad }
func (_fffd *ST_ConstraintRelationship) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_fgeag, _fagcf := d.Token()
	if _fagcf != nil {
		return _fagcf
	}
	if _gfegb, _fafc := _fgeag.(_d.EndElement); _fafc && _gfegb.Name == start.Name {
		*_fffd = 1
		return nil
	}
	if _aecf, _ddcfe := _fgeag.(_d.CharData); !_ddcfe {
		return _f.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _fgeag)
	} else {
		switch string(_aecf) {
		case "":
			*_fffd = 0
		case "\u0073\u0065\u006c\u0066":
			*_fffd = 1
		case "\u0063\u0068":
			*_fffd = 2
		case "\u0064\u0065\u0073":
			*_fffd = 3
		}
	}
	_fgeag, _fagcf = d.Token()
	if _fagcf != nil {
		return _fagcf
	}
	if _agfef, _acee := _fgeag.(_d.EndElement); _acee && _agfef.Name == start.Name {
		return nil
	}
	return _f.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _fgeag)
}

// ValidateWithPath validates the CT_StyleDefinitionHeaderLst and its children, prefixing error messages with path
func (_bbccff *CT_StyleDefinitionHeaderLst) ValidateWithPath(path string) error {
	for _gdge, _cbag := range _bbccff.StyleDefHdr {
		if _cfeae := _cbag.ValidateWithPath(_f.Sprintf("\u0025s\u002fS\u0074\u0079\u006c\u0065\u0044e\u0066\u0048d\u0072\u005b\u0025\u0064\u005d", path, _gdge)); _cfeae != nil {
			return _cfeae
		}
	}
	return nil
}
func (_cdadb ST_PyramidAccentPosition) Validate() error { return _cdadb.ValidateWithPath("") }

// Validate validates the LayoutDefHdr and its children
func (_fedg *LayoutDefHdr) Validate() error {
	return _fedg.ValidateWithPath("\u004c\u0061\u0079o\u0075\u0074\u0044\u0065\u0066\u0048\u0064\u0072")
}
func (_gafg ST_DiagramTextAlignment) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_gafg.String(), start)
}

type ST_AnimLvlStr byte

func (_gged *CT_SDCategory) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _gfdf := range start.Attr {
		if _gfdf.Name.Local == "\u0074\u0079\u0070\u0065" {
			_fddd, _acce := _gfdf.Value, error(nil)
			if _acce != nil {
				return _acce
			}
			_gged.TypeAttr = _fddd
			continue
		}
		if _gfdf.Name.Local == "\u0070\u0072\u0069" {
			_dfag, _aafge := _gb.ParseUint(_gfdf.Value, 10, 32)
			if _aafge != nil {
				return _aafge
			}
			_gged.PriAttr = uint32(_dfag)
			continue
		}
	}
	for {
		_egff, _geae := d.Token()
		if _geae != nil {
			return _f.Errorf("\u0070a\u0072\u0073\u0069\u006eg\u0020\u0043\u0054\u005f\u0053D\u0043a\u0074e\u0067\u006f\u0072\u0079\u003a\u0020\u0025s", _geae)
		}
		if _egad, _bfbgb := _egff.(_d.EndElement); _bfbgb && _egad.Name == start.Name {
			break
		}
	}
	return nil
}

type ST_AlgorithmType byte

// ValidateWithPath validates the CT_AnimLvl and its children, prefixing error messages with path
func (_bg *CT_AnimLvl) ValidateWithPath(path string) error {
	if _cgd := _bg.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _cgd != nil {
		return _cgd
	}
	return nil
}
func (_aecdf ST_HueDir) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_aecdf.String(), start)
}

type ST_GrowDirection byte

func ParseUnionST_ModelId(s string) (ST_ModelId, error) { return ST_ModelId{}, nil }

type CT_AnimLvl struct{ ValAttr ST_AnimLvlStr }

func (_dgcg *RelIds) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0078\u006d\u006cn\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0061"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0078\u006d\u006c\u006e\u0073\u003a\u0064\u0069"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0072"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073"})
	start.Attr = append(start.Attr, _d.Attr{Name: _d.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"}, Value: "\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"})
	start.Name.Local = "\u0072\u0065\u006c\u0049\u0064\u0073"
	return _dgcg.CT_RelIds.MarshalXML(e, start)
}
func NewCT_BulletEnabled() *CT_BulletEnabled { _agc := &CT_BulletEnabled{}; return _agc }

type CT_Shape struct {
	RotAttr       *float64
	TypeAttr      *ST_LayoutShapeType
	BlipAttr      *string
	ZOrderOffAttr *int32
	HideGeomAttr  *bool
	LkTxEntryAttr *bool
	BlipPhldrAttr *bool
	AdjLst        *CT_AdjLst
	ExtLst        *_bc.CT_OfficeArtExtensionList
}

const (
	ST_HierBranchStyleUnset ST_HierBranchStyle = 0
	ST_HierBranchStyleL     ST_HierBranchStyle = 1
	ST_HierBranchStyleR     ST_HierBranchStyle = 2
	ST_HierBranchStyleHang  ST_HierBranchStyle = 3
	ST_HierBranchStyleStd   ST_HierBranchStyle = 4
	ST_HierBranchStyleInit  ST_HierBranchStyle = 5
)

// Validate validates the CT_ElemPropSet and its children
func (_fbgf *CT_ElemPropSet) Validate() error {
	return _fbgf.ValidateWithPath("\u0043\u0054\u005f\u0045\u006c\u0065\u006d\u0050\u0072o\u0070\u0053\u0065\u0074")
}

type ST_ArrowheadStyle byte

func (_dfcg *CT_DataModel) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	_dfcg.PtLst = NewCT_PtList()
_ddbd:
	for {
		_cedc, _cfga := d.Token()
		if _cfga != nil {
			return _cfga
		}
		switch _fec := _cedc.(type) {
		case _d.StartElement:
			switch _fec.Name {
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0070\u0074\u004cs\u0074"}:
				if _ccf := d.DecodeElement(_dfcg.PtLst, &_fec); _ccf != nil {
					return _ccf
				}
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0078\u006e\u004c\u0073\u0074"}:
				_dfcg.CxnLst = NewCT_CxnList()
				if _cgcg := d.DecodeElement(_dfcg.CxnLst, &_fec); _cgcg != nil {
					return _cgcg
				}
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0062\u0067"}:
				_dfcg.Bg = _bc.NewCT_BackgroundFormatting()
				if _daac := d.DecodeElement(_dfcg.Bg, &_fec); _daac != nil {
					return _daac
				}
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0077\u0068\u006fl\u0065"}:
				_dfcg.Whole = _bc.NewCT_WholeE2oFormatting()
				if _abdb := d.DecodeElement(_dfcg.Whole, &_fec); _abdb != nil {
					return _abdb
				}
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_dfcg.ExtLst = _bc.NewCT_OfficeArtExtensionList()
				if _acdc := d.DecodeElement(_dfcg.ExtLst, &_fec); _acdc != nil {
					return _acdc
				}
			default:
				_b.Log.Debug("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075n\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054_D\u0061\u0074a\u004d\u006f\u0064\u0065\u006c\u0020\u0025\u0076", _fec.Name)
				if _fecc := d.Skip(); _fecc != nil {
					return _fecc
				}
			}
		case _d.EndElement:
			break _ddbd
		case _d.CharData:
		}
	}
	return nil
}
func (_egbgg *ST_SecondaryLinearDirection) UnmarshalXMLAttr(attr _d.Attr) error {
	switch attr.Value {
	case "":
		*_egbgg = 0
	case "\u006e\u006f\u006e\u0065":
		*_egbgg = 1
	case "\u0066\u0072\u006fm\u004c":
		*_egbgg = 2
	case "\u0066\u0072\u006fm\u0052":
		*_egbgg = 3
	case "\u0066\u0072\u006fm\u0054":
		*_egbgg = 4
	case "\u0066\u0072\u006fm\u0042":
		*_egbgg = 5
	}
	return nil
}

// Validate validates the CT_AnimLvl and its children
func (_eddc *CT_AnimLvl) Validate() error {
	return _eddc.ValidateWithPath("\u0043\u0054\u005f\u0041\u006e\u0069\u006d\u004c\u0076\u006c")
}
func ParseUnionST_ParameterVal(s string) (ST_ParameterVal, error) { return ST_ParameterVal{}, nil }
func (_cbde ST_ChildOrderType) String() string {
	switch _cbde {
	case 0:
		return ""
	case 1:
		return "\u0062"
	case 2:
		return "\u0074"
	}
	return ""
}
func (_efeb ST_TextDirection) Validate() error { return _efeb.ValidateWithPath("") }
func (_adcga ST_PtType) MarshalXML(e *_d.Encoder, start _d.StartElement) error {
	return e.EncodeElement(_adcga.String(), start)
}

// ValidateWithPath validates the CT_StyleDefinitionHeader and its children, prefixing error messages with path
func (_cfecg *CT_StyleDefinitionHeader) ValidateWithPath(path string) error {
	for _ggfb, _debac := range _cfecg.Title {
		if _ccbd := _debac.ValidateWithPath(_f.Sprintf("\u0025\u0073\u002fT\u0069\u0074\u006c\u0065\u005b\u0025\u0064\u005d", path, _ggfb)); _ccbd != nil {
			return _ccbd
		}
	}
	for _abad, _ebeef := range _cfecg.Desc {
		if _eecge := _ebeef.ValidateWithPath(_f.Sprintf("%\u0073\u002f\u0044\u0065\u0073\u0063\u005b\u0025\u0064\u005d", path, _abad)); _eecge != nil {
			return _eecge
		}
	}
	if _cfecg.CatLst != nil {
		if _bacd := _cfecg.CatLst.ValidateWithPath(path + "\u002fC\u0061\u0074\u004c\u0073\u0074"); _bacd != nil {
			return _bacd
		}
	}
	if _cfecg.ExtLst != nil {
		if _cgecf := _cfecg.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _cgecf != nil {
			return _cgecf
		}
	}
	return nil
}

const (
	ST_SecondaryChildAlignmentUnset ST_SecondaryChildAlignment = 0
	ST_SecondaryChildAlignmentNone  ST_SecondaryChildAlignment = 1
	ST_SecondaryChildAlignmentT     ST_SecondaryChildAlignment = 2
	ST_SecondaryChildAlignmentB     ST_SecondaryChildAlignment = 3
	ST_SecondaryChildAlignmentL     ST_SecondaryChildAlignment = 4
	ST_SecondaryChildAlignmentR     ST_SecondaryChildAlignment = 5
)

func init() {
	_e.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043T\u005f\u0043\u0054\u004e\u0061\u006de", NewCT_CTName)
	_e.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054_\u0043\u0054\u0044e\u0073\u0063\u0072\u0069\u0070\u0074\u0069\u006f\u006e", NewCT_CTDescription)
	_e.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u0043\u0054\u0043\u0061\u0074\u0065\u0067\u006f\u0072\u0079", NewCT_CTCategory)
	_e.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043T\u005fC\u0054\u0043\u0061\u0074\u0065\u0067\u006f\u0072\u0069\u0065\u0073", NewCT_CTCategories)
	_e.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043T\u005f\u0043\u006f\u006c\u006f\u0072s", NewCT_Colors)
	_e.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043T\u005fC\u0054\u0053\u0074\u0079\u006c\u0065\u004c\u0061\u0062\u0065\u006c", NewCT_CTStyleLabel)
	_e.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u0043\u006f\u006c\u006f\u0072\u0054\u0072\u0061\u006es\u0066\u006f\u0072\u006d", NewCT_ColorTransform)
	_e.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005fCo\u006c\u006f\u0072\u0054\u0072\u0061\u006e\u0073\u0066\u006f\u0072\u006d\u0048\u0065\u0061\u0064\u0065\u0072", NewCT_ColorTransformHeader)
	_e.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u0043\u006f\u006c\u006f\u0072\u0054\u0072\u0061n\u0073\u0066\u006f\u0072\u006d\u0048\u0065\u0061\u0064\u0065r\u004c\u0073\u0074", NewCT_ColorTransformHeaderLst)
	_e.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005fP\u0074", NewCT_Pt)
	_e.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043T\u005f\u0050\u0074\u004c\u0069\u0073t", NewCT_PtList)
	_e.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u0043\u0078\u006e", NewCT_Cxn)
	_e.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u0043\u0078\u006e\u004c\u0069\u0073\u0074", NewCT_CxnList)
	_e.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005fD\u0061\u0074\u0061\u004d\u006f\u0064\u0065\u006c", NewCT_DataModel)
	_e.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u0043\u006f\u006e\u0073\u0074\u0072\u0061\u0069\u006e\u0074", NewCT_Constraint)
	_e.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u0043\u006f\u006e\u0073\u0074\u0072a\u0069\u006e\u0074\u0073", NewCT_Constraints)
	_e.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u004e\u0075\u006d\u0065\u0072\u0069c\u0052\u0075\u006c\u0065", NewCT_NumericRule)
	_e.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u0052\u0075\u006c\u0065\u0073", NewCT_Rules)
	_e.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u0050\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074i\u006f\u006e\u004f\u0066", NewCT_PresentationOf)
	_e.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u0041\u0064\u006a", NewCT_Adj)
	_e.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043T\u005f\u0041\u0064\u006a\u004c\u0073t", NewCT_AdjLst)
	_e.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u0053\u0068\u0061\u0070\u0065", NewCT_Shape)
	_e.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005fP\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072", NewCT_Parameter)
	_e.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005fA\u006c\u0067\u006f\u0072\u0069\u0074\u0068\u006d", NewCT_Algorithm)
	_e.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u004c\u0061\u0079\u006f\u0075\u0074\u004e\u006f\u0064\u0065", NewCT_LayoutNode)
	_e.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u0046\u006f\u0072\u0045\u0061\u0063\u0068", NewCT_ForEach)
	_e.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043T\u005f\u0057\u0068\u0065\u006e", NewCT_When)
	_e.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005fO\u0074\u0068\u0065\u0072\u0077\u0069\u0073\u0065", NewCT_Otherwise)
	_e.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043T\u005f\u0043\u0068\u006f\u006f\u0073e", NewCT_Choose)
	_e.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u0053\u0061\u006d\u0070\u006c\u0065\u0044\u0061\u0074\u0061", NewCT_SampleData)
	_e.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "C\u0054\u005f\u0043\u0061\u0074\u0065\u0067\u006f\u0072\u0079", NewCT_Category)
	_e.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u0043\u0061\u0074\u0065\u0067\u006f\u0072\u0069\u0065\u0073", NewCT_Categories)
	_e.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043T\u005f\u004e\u0061\u006d\u0065", NewCT_Name)
	_e.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u0044\u0065\u0073\u0063\u0072\u0069p\u0074\u0069\u006f\u006e", NewCT_Description)
	_e.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "C\u0054_\u0044\u0069\u0061\u0067\u0072\u0061\u006d\u0044e\u0066\u0069\u006e\u0069ti\u006f\u006e", NewCT_DiagramDefinition)
	_e.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u0044\u0069\u0061\u0067\u0072\u0061\u006d\u0044e\u0066\u0069\u006e\u0069\u0074\u0069\u006f\u006e\u0048\u0065a\u0064\u0065\u0072", NewCT_DiagramDefinitionHeader)
	_e.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054_\u0044\u0069\u0061\u0067\u0072\u0061\u006d\u0044\u0065\u0066\u0069\u006e\u0069\u0074\u0069\u006f\u006e\u0048\u0065\u0061\u0064\u0065rL\u0073\u0074", NewCT_DiagramDefinitionHeaderLst)
	_e.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043T\u005f\u0052\u0065\u006c\u0049\u0064s", NewCT_RelIds)
	_e.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u0045\u006c\u0065\u006d\u0050\u0072o\u0070\u0053\u0065\u0074", NewCT_ElemPropSet)
	_e.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "C\u0054\u005f\u004f\u0072\u0067\u0043\u0068\u0061\u0072\u0074", NewCT_OrgChart)
	_e.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "C\u0054\u005f\u0043\u0068\u0069\u006c\u0064\u004d\u0061\u0078", NewCT_ChildMax)
	_e.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005fC\u0068\u0069\u006c\u0064\u0050\u0072\u0065\u0066", NewCT_ChildPref)
	_e.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054_\u0042\u0075\u006cl\u0065\u0074\u0045\u006e\u0061\u0062\u006c\u0065\u0064", NewCT_BulletEnabled)
	_e.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005fD\u0069\u0072\u0065\u0063\u0074\u0069\u006f\u006e", NewCT_Direction)
	_e.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043T\u005fH\u0069\u0065\u0072\u0042\u0072a\u006e\u0063h\u0053\u0074\u0079\u006c\u0065", NewCT_HierBranchStyle)
	_e.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u0041\u006e\u0069\u006d\u004f\u006e\u0065", NewCT_AnimOne)
	_e.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u0041\u006e\u0069\u006d\u004c\u0076\u006c", NewCT_AnimLvl)
	_e.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054_\u0052\u0065\u0073i\u007a\u0065\u0048\u0061\u006e\u0064\u006c\u0065\u0073", NewCT_ResizeHandles)
	_e.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u004ca\u0079\u006f\u0075\u0074\u0056\u0061\u0072\u0069\u0061\u0062l\u0065P\u0072\u006f\u0070\u0065\u0072\u0074\u0079S\u0065\u0074", NewCT_LayoutVariablePropertySet)
	_e.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043T\u005f\u0053\u0044\u004e\u0061\u006de", NewCT_SDName)
	_e.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054_\u0053\u0044\u0044e\u0073\u0063\u0072\u0069\u0070\u0074\u0069\u006f\u006e", NewCT_SDDescription)
	_e.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u0053\u0044\u0043\u0061\u0074\u0065\u0067\u006f\u0072\u0079", NewCT_SDCategory)
	_e.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043T\u005fS\u0044\u0043\u0061\u0074\u0065\u0067\u006f\u0072\u0069\u0065\u0073", NewCT_SDCategories)
	_e.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005fT\u0065\u0078\u0074\u0050\u0072\u006f\u0070\u0073", NewCT_TextProps)
	_e.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u0053\u0074\u0079\u006c\u0065\u004c\u0061\u0062\u0065\u006c", NewCT_StyleLabel)
	_e.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043T\u005fS\u0074\u0079\u006c\u0065\u0044e\u0066\u0069n\u0069\u0074\u0069\u006f\u006e", NewCT_StyleDefinition)
	_e.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043T\u005f\u0053\u0074\u0079\u006c\u0065\u0044\u0065\u0066\u0069\u006ei\u0074\u0069\u006f\u006e\u0048\u0065\u0061\u0064\u0065\u0072", NewCT_StyleDefinitionHeader)
	_e.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "C\u0054\u005f\u0053\u0074\u0079\u006ce\u0044\u0065\u0066\u0069\u006e\u0069\u0074\u0069\u006fn\u0048\u0065\u0061d\u0065r\u004c\u0073\u0074", NewCT_StyleDefinitionHeaderLst)
	_e.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0063o\u006c\u006f\u0072\u0073\u0044\u0065f", NewColorsDef)
	_e.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0063\u006f\u006co\u0072\u0073\u0044\u0065\u0066\u0048\u0064\u0072", NewColorsDefHdr)
	_e.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0063o\u006co\u0072\u0073\u0044\u0065\u0066\u0048\u0064\u0072\u004c\u0073\u0074", NewColorsDefHdrLst)
	_e.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0064a\u0074\u0061\u004d\u006f\u0064\u0065l", NewDataModel)
	_e.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u006ca\u0079\u006f\u0075\u0074\u0044\u0065f", NewLayoutDef)
	_e.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u006c\u0061\u0079o\u0075\u0074\u0044\u0065\u0066\u0048\u0064\u0072", NewLayoutDefHdr)
	_e.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u006ca\u0079o\u0075\u0074\u0044\u0065\u0066\u0048\u0064\u0072\u004c\u0073\u0074", NewLayoutDefHdrLst)
	_e.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0072\u0065\u006c\u0049\u0064\u0073", NewRelIds)
	_e.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0073\u0074\u0079\u006c\u0065\u0044\u0065\u0066", NewStyleDef)
	_e.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "s\u0074\u0079\u006c\u0065\u0044\u0065\u0066\u0048\u0064\u0072", NewStyleDefHdr)
	_e.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0073\u0074\u0079\u006c\u0065\u0044\u0065\u0066\u0048d\u0072\u004c\u0073\u0074", NewStyleDefHdrLst)
	_e.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "A\u0047\u005f\u0049\u0074er\u0061t\u006f\u0072\u0041\u0074\u0074r\u0069\u0062\u0075\u0074\u0065\u0073", NewAG_IteratorAttributes)
	_e.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0041\u0047\u005fCo\u006e\u0073\u0074\u0072\u0061\u0069\u006e\u0074\u0041\u0074\u0074\u0072\u0069\u0062\u0075\u0074\u0065\u0073", NewAG_ConstraintAttributes)
	_e.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0041\u0047\u005f\u0043\u006f\u006e\u0073\u0074\u0072\u0061\u0069n\u0074\u0052\u0065\u0066\u0041\u0074\u0074\u0072\u0069\u0062u\u0074\u0065\u0073", NewAG_ConstraintRefAttributes)
}

// ValidateWithPath validates the CT_Choose and its children, prefixing error messages with path
func (_efdd *CT_Choose) ValidateWithPath(path string) error {
	for _eaea, _aaae := range _efdd.If {
		if _dcb := _aaae.ValidateWithPath(_f.Sprintf("\u0025s\u002f\u0049\u0066\u005b\u0025\u0064]", path, _eaea)); _dcb != nil {
			return _dcb
		}
	}
	if _efdd.Else != nil {
		if _dfg := _efdd.Else.ValidateWithPath(path + "\u002f\u0045\u006cs\u0065"); _dfg != nil {
			return _dfg
		}
	}
	return nil
}
func NewAG_ConstraintRefAttributes() *AG_ConstraintRefAttributes {
	_gbd := &AG_ConstraintRefAttributes{}
	return _gbd
}
func NewCT_ChildPref() *CT_ChildPref { _gbb := &CT_ChildPref{}; return _gbb }

const (
	ST_AnimLvlStrUnset ST_AnimLvlStr = 0
	ST_AnimLvlStrNone  ST_AnimLvlStr = 1
	ST_AnimLvlStrLvl   ST_AnimLvlStr = 2
	ST_AnimLvlStrCtr   ST_AnimLvlStr = 3
)

func (_dbgb *CT_ColorTransformHeader) UnmarshalXML(d *_d.Decoder, start _d.StartElement) error {
	for _, _ecf := range start.Attr {
		if _ecf.Name.Local == "\u0075\u006e\u0069\u0071\u0075\u0065\u0049\u0064" {
			_fccf, _fbed := _ecf.Value, error(nil)
			if _fbed != nil {
				return _fbed
			}
			_dbgb.UniqueIdAttr = _fccf
			continue
		}
		if _ecf.Name.Local == "\u006d\u0069\u006e\u0056\u0065\u0072" {
			_bbcc, _eaag := _ecf.Value, error(nil)
			if _eaag != nil {
				return _eaag
			}
			_dbgb.MinVerAttr = &_bbcc
			continue
		}
		if _ecf.Name.Local == "\u0072\u0065\u0073I\u0064" {
			_bgb, _cgffa := _gb.ParseInt(_ecf.Value, 10, 32)
			if _cgffa != nil {
				return _cgffa
			}
			_dfcc := int32(_bgb)
			_dbgb.ResIdAttr = &_dfcc
			continue
		}
	}
_dafa:
	for {
		_adcg, _afeg := d.Token()
		if _afeg != nil {
			return _afeg
		}
		switch _eafc := _adcg.(type) {
		case _d.StartElement:
			switch _eafc.Name {
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0074\u0069\u0074l\u0065"}:
				_dfaf := NewCT_CTName()
				if _ffed := d.DecodeElement(_dfaf, &_eafc); _ffed != nil {
					return _ffed
				}
				_dbgb.Title = append(_dbgb.Title, _dfaf)
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0064\u0065\u0073\u0063"}:
				_dcbe := NewCT_CTDescription()
				if _affa := d.DecodeElement(_dcbe, &_eafc); _affa != nil {
					return _affa
				}
				_dbgb.Desc = append(_dbgb.Desc, _dcbe)
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0061\u0074\u004c\u0073\u0074"}:
				_dbgb.CatLst = NewCT_CTCategories()
				if _babe := d.DecodeElement(_dbgb.CatLst, &_eafc); _babe != nil {
					return _babe
				}
			case _d.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_dbgb.ExtLst = _bc.NewCT_OfficeArtExtensionList()
				if _efg := d.DecodeElement(_dbgb.ExtLst, &_eafc); _efg != nil {
					return _efg
				}
			default:
				_b.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006fn\u0020\u0043\u0054\u005f\u0043\u006f\u006c\u006f\u0072\u0054\u0072\u0061\u006es\u0066\u006f\u0072\u006d\u0048\u0065a\u0064\u0065\u0072 \u0025\u0076", _eafc.Name)
				if _bdg := d.Skip(); _bdg != nil {
					return _bdg
				}
			}
		case _d.EndElement:
			break _dafa
		case _d.CharData:
		}
	}
	return nil
}
