//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package math

import (
	_dd "encoding/xml"
	_a "fmt"
	_ddg "github.com/sanhuanshisanshao/unioffice"
	_c "github.com/sanhuanshisanshao/unioffice/common/logger"
	_g "github.com/sanhuanshisanshao/unioffice/schema/soo/ofc/sharedTypes"
	_f "strconv"
)

func (_acgb *CT_LimLow) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
	_acgb.E = NewCT_OMathArg()
	_acgb.Lim = NewCT_OMathArg()
_afbef:
	for {
		_ege, _faef := d.Token()
		if _faef != nil {
			return _faef
		}
		switch _fde := _ege.(type) {
		case _dd.StartElement:
			switch _fde.Name {
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u006c\u0069\u006d\u004c\u006f\u0077\u0050\u0072"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u006c\u0069\u006d\u004c\u006f\u0077\u0050\u0072"}:
				_acgb.LimLowPr = NewCT_LimLowPr()
				if _badc := d.DecodeElement(_acgb.LimLowPr, &_fde); _badc != nil {
					return _badc
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0065"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0065"}:
				if _cdfb := d.DecodeElement(_acgb.E, &_fde); _cdfb != nil {
					return _cdfb
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u006c\u0069\u006d"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u006c\u0069\u006d"}:
				if _dedd := d.DecodeElement(_acgb.Lim, &_fde); _dedd != nil {
					return _dedd
				}
			default:
				_c.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u004c\u0069\u006dL\u006f\u0077 \u0025\u0076", _fde.Name)
				if _gfa := d.Skip(); _gfa != nil {
					return _gfa
				}
			}
		case _dd.EndElement:
			break _afbef
		case _dd.CharData:
		}
	}
	return nil
}

// Validate validates the CT_Nary and its children
func (_degfa *CT_Nary) Validate() error {
	return _degfa.ValidateWithPath("\u0043T\u005f\u004e\u0061\u0072\u0079")
}
func (_gccg *CT_Phant) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
	_gccg.E = NewCT_OMathArg()
_fgabf:
	for {
		_cabeb, _fcga := d.Token()
		if _fcga != nil {
			return _fcga
		}
		switch _effb := _cabeb.(type) {
		case _dd.StartElement:
			switch _effb.Name {
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0070h\u0061\u006e\u0074\u0050\u0072"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0070h\u0061\u006e\u0074\u0050\u0072"}:
				_gccg.PhantPr = NewCT_PhantPr()
				if _gdcg := d.DecodeElement(_gccg.PhantPr, &_effb); _gdcg != nil {
					return _gdcg
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0065"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0065"}:
				if _agcb := d.DecodeElement(_gccg.E, &_effb); _agcb != nil {
					return _agcb
				}
			default:
				_c.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006eg\u0020\u0075\u006es\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0050\u0068\u0061\u006e\u0074\u0020\u0025\u0076", _effb.Name)
				if _cfca := d.Skip(); _cfca != nil {
					return _cfca
				}
			}
		case _dd.EndElement:
			break _fgabf
		case _dd.CharData:
		}
	}
	return nil
}

// Validate validates the CT_Script and its children
func (_gega *CT_Script) Validate() error {
	return _gega.ValidateWithPath("\u0043T\u005f\u0053\u0063\u0072\u0069\u0070t")
}

type CT_UnSignedInteger struct{ ValAttr uint32 }

// Validate validates the CT_MCPr and its children
func (_gcdd *CT_MCPr) Validate() error {
	return _gcdd.ValidateWithPath("\u0043T\u005f\u004d\u0043\u0050\u0072")
}

// ValidateWithPath validates the CT_TopBot and its children, prefixing error messages with path
func (_dgfgb *CT_TopBot) ValidateWithPath(path string) error {
	if _dgfgb.ValAttr == ST_TopBotUnset {
		return _a.Errorf("\u0025\u0073\u002fV\u0061\u006c\u0041\u0074t\u0072\u0020\u0069\u0073\u0020\u0061\u0020m\u0061\u006e\u0064\u0061\u0074\u006f\u0072\u0079\u0020\u0066\u0069\u0065\u006c\u0064", path)
	}
	if _cdag := _dgfgb.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _cdag != nil {
		return _cdag
	}
	return nil
}

type CT_SSub struct {
	SSubPr *CT_SSubPr
	E      *CT_OMathArg
	Sub    *CT_OMathArg
}

func (_edbe *CT_FPr) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	e.EncodeToken(start)
	if _edbe.Type != nil {
		_gbfc := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0074\u0079\u0070\u0065"}}
		e.EncodeElement(_edbe.Type, _gbfc)
	}
	if _edbe.CtrlPr != nil {
		_efc := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0063\u0074\u0072\u006c\u0050\u0072"}}
		e.EncodeElement(_edbe.CtrlPr, _efc)
	}
	e.EncodeToken(_dd.EndElement{Name: start.Name})
	return nil
}
func (_ddebg *CT_TwipsMeasure) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	start.Attr = append(start.Attr, _dd.Attr{Name: _dd.Name{Local: "\u006d\u003a\u0076a\u006c"}, Value: _a.Sprintf("\u0025\u0076", _ddebg.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_dd.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_MCS and its children, prefixing error messages with path
func (_bgba *CT_MCS) ValidateWithPath(path string) error {
	for _dgad, _efgc := range _bgba.Mc {
		if _dcdg := _efgc.ValidateWithPath(_a.Sprintf("\u0025s\u002f\u004d\u0063\u005b\u0025\u0064]", path, _dgad)); _dcdg != nil {
			return _dcdg
		}
	}
	return nil
}
func (_fagf *CT_OMathArgPr) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
_ecbab:
	for {
		_dfga, _bbde := d.Token()
		if _bbde != nil {
			return _bbde
		}
		switch _cefg := _dfga.(type) {
		case _dd.StartElement:
			switch _cefg.Name {
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0061\u0072\u0067S\u007a"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0061\u0072\u0067S\u007a"}:
				_fagf.ArgSz = NewCT_Integer2()
				if _cabd := d.DecodeElement(_fagf.ArgSz, &_cefg); _cabd != nil {
					return _cabd
				}
			default:
				_c.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u004fM\u0061\u0074\u0068\u0041\u0072\u0067\u0050\u0072 \u0025\u0076", _cefg.Name)
				if _fbca := d.Skip(); _fbca != nil {
					return _fbca
				}
			}
		case _dd.EndElement:
			break _ecbab
		case _dd.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_OMathPara and its children, prefixing error messages with path
func (_fadb *CT_OMathPara) ValidateWithPath(path string) error {
	if _fadb.OMathParaPr != nil {
		if _abcf := _fadb.OMathParaPr.ValidateWithPath(path + "\u002f\u004f\u004da\u0074\u0068\u0050\u0061\u0072\u0061\u0050\u0072"); _abcf != nil {
			return _abcf
		}
	}
	for _adaf, _adbdb := range _fadb.OMath {
		if _bccg := _adbdb.ValidateWithPath(_a.Sprintf("\u0025\u0073\u002fO\u004d\u0061\u0074\u0068\u005b\u0025\u0064\u005d", path, _adaf)); _bccg != nil {
			return _bccg
		}
	}
	return nil
}
func (_aaef *CT_SpacingRule) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
	_aaef.ValAttr = 0
	for _, _aeeaa := range start.Attr {
		if _aeeaa.Name.Local == "\u0076\u0061\u006c" {
			_cbgbf, _ffcef := _f.ParseInt(_aeeaa.Value, 10, 64)
			if _ffcef != nil {
				return _ffcef
			}
			_aaef.ValAttr = _cbgbf
			continue
		}
	}
	for {
		_adda, _efagf := d.Token()
		if _efagf != nil {
			return _a.Errorf("\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fS\u0070\u0061\u0063\u0069\u006e\u0067\u0052\u0075\u006c\u0065:\u0020\u0025\u0073", _efagf)
		}
		if _fgge, _cfef := _adda.(_dd.EndElement); _cfef && _fgge.Name == start.Name {
			break
		}
	}
	return nil
}

// ValidateWithPath validates the CT_Func and its children, prefixing error messages with path
func (_ggd *CT_Func) ValidateWithPath(path string) error {
	if _ggd.FuncPr != nil {
		if _cfbe := _ggd.FuncPr.ValidateWithPath(path + "\u002fF\u0075\u006e\u0063\u0050\u0072"); _cfbe != nil {
			return _cfbe
		}
	}
	if _gcbe := _ggd.FName.ValidateWithPath(path + "\u002f\u0046\u004e\u0061\u006d\u0065"); _gcbe != nil {
		return _gcbe
	}
	if _geae := _ggd.E.ValidateWithPath(path + "\u002f\u0045"); _geae != nil {
		return _geae
	}
	return nil
}

// ValidateWithPath validates the OMathPara and its children, prefixing error messages with path
func (_ffdg *OMathPara) ValidateWithPath(path string) error {
	if _dfbfb := _ffdg.CT_OMathPara.ValidateWithPath(path); _dfbfb != nil {
		return _dfbfb
	}
	return nil
}

type CT_RChoice struct{ T []*CT_Text }

// ValidateWithPath validates the CT_BorderBoxPr and its children, prefixing error messages with path
func (_ceg *CT_BorderBoxPr) ValidateWithPath(path string) error {
	if _ceg.HideTop != nil {
		if _cffg := _ceg.HideTop.ValidateWithPath(path + "\u002f\u0048\u0069\u0064\u0065\u0054\u006f\u0070"); _cffg != nil {
			return _cffg
		}
	}
	if _ceg.HideBot != nil {
		if _bggc := _ceg.HideBot.ValidateWithPath(path + "\u002f\u0048\u0069\u0064\u0065\u0042\u006f\u0074"); _bggc != nil {
			return _bggc
		}
	}
	if _ceg.HideLeft != nil {
		if _ba := _ceg.HideLeft.ValidateWithPath(path + "\u002fH\u0069\u0064\u0065\u004c\u0065\u0066t"); _ba != nil {
			return _ba
		}
	}
	if _ceg.HideRight != nil {
		if _afe := _ceg.HideRight.ValidateWithPath(path + "\u002f\u0048\u0069\u0064\u0065\u0052\u0069\u0067\u0068\u0074"); _afe != nil {
			return _afe
		}
	}
	if _ceg.StrikeH != nil {
		if _aac := _ceg.StrikeH.ValidateWithPath(path + "\u002f\u0053\u0074\u0072\u0069\u006b\u0065\u0048"); _aac != nil {
			return _aac
		}
	}
	if _ceg.StrikeV != nil {
		if _abc := _ceg.StrikeV.ValidateWithPath(path + "\u002f\u0053\u0074\u0072\u0069\u006b\u0065\u0056"); _abc != nil {
			return _abc
		}
	}
	if _ceg.StrikeBLTR != nil {
		if _adeg := _ceg.StrikeBLTR.ValidateWithPath(path + "/\u0053\u0074\u0072\u0069\u006b\u0065\u0042\u004c\u0054\u0052"); _adeg != nil {
			return _adeg
		}
	}
	if _ceg.StrikeTLBR != nil {
		if _aegd := _ceg.StrikeTLBR.ValidateWithPath(path + "/\u0053\u0074\u0072\u0069\u006b\u0065\u0054\u004c\u0042\u0052"); _aegd != nil {
			return _aegd
		}
	}
	if _ceg.CtrlPr != nil {
		if _gga := _ceg.CtrlPr.ValidateWithPath(path + "\u002fC\u0074\u0072\u006c\u0050\u0072"); _gga != nil {
			return _gga
		}
	}
	return nil
}

type CT_NaryPr struct {
	Chr     *CT_Char
	LimLoc  *CT_LimLoc
	Grow    *CT_OnOff
	SubHide *CT_OnOff
	SupHide *CT_OnOff
	CtrlPr  *CT_CtrlPr
}

func NewCT_EqArr() *CT_EqArr { _egga := &CT_EqArr{}; return _egga }
func (_bfba *CT_Integer2) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	start.Attr = append(start.Attr, _dd.Attr{Name: _dd.Name{Local: "\u006d\u003a\u0076a\u006c"}, Value: _a.Sprintf("\u0025\u0076", _bfba.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_dd.EndElement{Name: start.Name})
	return nil
}
func (_eed *CT_Integer2) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
	_eed.ValAttr = -2
	for _, _dge := range start.Attr {
		if _dge.Name.Local == "\u0076\u0061\u006c" {
			_cfd, _dgc := _f.ParseInt(_dge.Value, 10, 64)
			if _dgc != nil {
				return _dgc
			}
			_eed.ValAttr = _cfd
			continue
		}
	}
	for {
		_agc, _dag := d.Token()
		if _dag != nil {
			return _a.Errorf("\u0070\u0061\u0072si\u006e\u0067\u0020\u0043\u0054\u005f\u0049\u006e\u0074\u0065\u0067\u0065\u0072\u0032\u003a\u0020\u0025\u0073", _dag)
		}
		if _aadd, _fdae := _agc.(_dd.EndElement); _fdae && _aadd.Name == start.Name {
			break
		}
	}
	return nil
}
func (_dacc *CT_MCPr) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
_daag:
	for {
		_dgee, _ecbb := d.Token()
		if _ecbb != nil {
			return _ecbb
		}
		switch _geeb := _dgee.(type) {
		case _dd.StartElement:
			switch _geeb.Name {
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0063\u006f\u0075n\u0074"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0063\u006f\u0075n\u0074"}:
				_dacc.Count = NewCT_Integer255()
				if _daad := d.DecodeElement(_dacc.Count, &_geeb); _daad != nil {
					return _daad
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u006d\u0063\u004a\u0063"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u006d\u0063\u004a\u0063"}:
				_dacc.McJc = NewCT_XAlign()
				if _dgdg := d.DecodeElement(_dacc.McJc, &_geeb); _dgdg != nil {
					return _dgdg
				}
			default:
				_c.Log.Debug("\u0073\u006b\u0069p\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043T\u005f\u004d\u0043\u0050\u0072\u0020\u0025\u0076", _geeb.Name)
				if _dabc := d.Skip(); _dabc != nil {
					return _dabc
				}
			}
		case _dd.EndElement:
			break _daag
		case _dd.CharData:
		}
	}
	return nil
}
func (_aecf *CT_SSubSup) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	e.EncodeToken(start)
	if _aecf.SSubSupPr != nil {
		_cegef := _dd.StartElement{Name: _dd.Name{Local: "m\u003a\u0073\u0053\u0075\u0062\u0053\u0075\u0070\u0050\u0072"}}
		e.EncodeElement(_aecf.SSubSupPr, _cegef)
	}
	_dddgc := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0065"}}
	e.EncodeElement(_aecf.E, _dddgc)
	_ddfb := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0073u\u0062"}}
	e.EncodeElement(_aecf.Sub, _ddfb)
	_dedg := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0073u\u0070"}}
	e.EncodeElement(_aecf.Sup, _dedg)
	e.EncodeToken(_dd.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_LimLowPr and its children
func (_afeg *CT_LimLowPr) Validate() error {
	return _afeg.ValidateWithPath("C\u0054\u005f\u004c\u0069\u006d\u004c\u006f\u0077\u0050\u0072")
}
func (_cgae *CT_Style) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
	for _, _bbgbe := range start.Attr {
		if _bbgbe.Name.Local == "\u0076\u0061\u006c" {
			_cgae.ValAttr.UnmarshalXMLAttr(_bbgbe)
			continue
		}
	}
	for {
		_cadc, _cgegf := d.Token()
		if _cgegf != nil {
			return _a.Errorf("p\u0061r\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fS\u0074\u0079\u006c\u0065: \u0025\u0073", _cgegf)
		}
		if _aeec, _cedf := _cadc.(_dd.EndElement); _cedf && _aeec.Name == start.Name {
			break
		}
	}
	return nil
}

type CT_Rad struct {
	RadPr *CT_RadPr
	Deg   *CT_OMathArg
	E     *CT_OMathArg
}

func ParseUnionST_TwipsMeasure(s string) (_g.ST_TwipsMeasure, error) {
	_ccbc := _g.ST_TwipsMeasure{}
	if _g.ST_PositiveUniversalMeasurePatternRe.MatchString(s) {
		_ccbc.ST_PositiveUniversalMeasure = &s
	} else {
		_gggg, _gfgbg := _f.ParseFloat(s, 64)
		if _gfgbg != nil {
			return _ccbc, _a.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0025\u0073\u0020\u0061\u0073\u0020\u0075\u0069\u006e\u0074\u003a\u0020%\u0073", s, _gfgbg)
		}
		_ccbc.ST_UnsignedDecimalNumber = _ddg.Uint64(uint64(_gggg))
	}
	return _ccbc, nil
}

type CT_XAlign struct{ ValAttr _g.ST_XAlign }

// Validate validates the CT_LimLoc and its children
func (_dcab *CT_LimLoc) Validate() error {
	return _dcab.ValidateWithPath("\u0043T\u005f\u004c\u0069\u006d\u004c\u006fc")
}
func (_fgg *CT_OMathPara) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
_ccda:
	for {
		_eeee, _gfgcc := d.Token()
		if _gfgcc != nil {
			return _gfgcc
		}
		switch _effe := _eeee.(type) {
		case _dd.StartElement:
			switch _effe.Name {
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "o\u004d\u0061\u0074\u0068\u0050\u0061\u0072\u0061\u0050\u0072"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "o\u004d\u0061\u0074\u0068\u0050\u0061\u0072\u0061\u0050\u0072"}:
				_fgg.OMathParaPr = NewCT_OMathParaPr()
				if _cbaba := d.DecodeElement(_fgg.OMathParaPr, &_effe); _cbaba != nil {
					return _cbaba
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u006f\u004d\u0061t\u0068"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u006f\u004d\u0061t\u0068"}:
				_gfga := NewCT_OMath()
				if _ega := d.DecodeElement(_gfga, &_effe); _ega != nil {
					return _ega
				}
				_fgg.OMath = append(_fgg.OMath, _gfga)
			default:
				_c.Log.Debug("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075n\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054_O\u004d\u0061t\u0068\u0050\u0061\u0072\u0061\u0020\u0025\u0076", _effe.Name)
				if _bcg := d.Skip(); _bcg != nil {
					return _bcg
				}
			}
		case _dd.EndElement:
			break _ccda
		case _dd.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_D and its children, prefixing error messages with path
func (_bgdg *CT_D) ValidateWithPath(path string) error {
	if _bgdg.DPr != nil {
		if _gecg := _bgdg.DPr.ValidateWithPath(path + "\u002f\u0044\u0050\u0072"); _gecg != nil {
			return _gecg
		}
	}
	for _ccce, _edc := range _bgdg.E {
		if _cga := _edc.ValidateWithPath(_a.Sprintf("\u0025\u0073\u002f\u0045\u005b\u0025\u0064\u005d", path, _ccce)); _cga != nil {
			return _cga
		}
	}
	return nil
}
func (_bdefe ST_Jc) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	return e.EncodeElement(_bdefe.String(), start)
}
func (_bbcge *CT_NaryPr) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	e.EncodeToken(start)
	if _bbcge.Chr != nil {
		_gfef := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0063h\u0072"}}
		e.EncodeElement(_bbcge.Chr, _gfef)
	}
	if _bbcge.LimLoc != nil {
		_eace := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u006c\u0069\u006d\u004c\u006f\u0063"}}
		e.EncodeElement(_bbcge.LimLoc, _eace)
	}
	if _bbcge.Grow != nil {
		_bcfd := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0067\u0072\u006f\u0077"}}
		e.EncodeElement(_bbcge.Grow, _bcfd)
	}
	if _bbcge.SubHide != nil {
		_dce := _dd.StartElement{Name: _dd.Name{Local: "\u006d:\u0073\u0075\u0062\u0048\u0069\u0064e"}}
		e.EncodeElement(_bbcge.SubHide, _dce)
	}
	if _bbcge.SupHide != nil {
		_aabc := _dd.StartElement{Name: _dd.Name{Local: "\u006d:\u0073\u0075\u0070\u0048\u0069\u0064e"}}
		e.EncodeElement(_bbcge.SupHide, _aabc)
	}
	if _bbcge.CtrlPr != nil {
		_dfac := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0063\u0074\u0072\u006c\u0050\u0072"}}
		e.EncodeElement(_bbcge.CtrlPr, _dfac)
	}
	e.EncodeToken(_dd.EndElement{Name: start.Name})
	return nil
}
func NewCT_CtrlPr() *CT_CtrlPr { _ecda := &CT_CtrlPr{}; return _ecda }

// Validate validates the CT_Style and its children
func (_ceebg *CT_Style) Validate() error {
	return _ceebg.ValidateWithPath("\u0043\u0054\u005f\u0053\u0074\u0079\u006c\u0065")
}
func (_ggbc *CT_Shp) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
	_ggbc.ValAttr = ST_Shp(1)
	for _, _gfdb := range start.Attr {
		if _gfdb.Name.Local == "\u0076\u0061\u006c" {
			_ggbc.ValAttr.UnmarshalXMLAttr(_gfdb)
			continue
		}
	}
	for {
		_bcbec, _acge := d.Token()
		if _acge != nil {
			return _a.Errorf("\u0070a\u0072s\u0069\u006e\u0067\u0020\u0043T\u005f\u0053h\u0070\u003a\u0020\u0025\u0073", _acge)
		}
		if _aaccbg, _gbbb := _bcbec.(_dd.EndElement); _gbbb && _aaccbg.Name == start.Name {
			break
		}
	}
	return nil
}

type CT_Integer2 struct{ ValAttr int64 }

func (_eagf *CT_SPre) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
	_eagf.Sub = NewCT_OMathArg()
	_eagf.Sup = NewCT_OMathArg()
	_eagf.E = NewCT_OMathArg()
_fegbd:
	for {
		_cafdg, _caafe := d.Token()
		if _caafe != nil {
			return _caafe
		}
		switch _fadgc := _cafdg.(type) {
		case _dd.StartElement:
			switch _fadgc.Name {
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0073\u0050\u0072\u0065\u0050\u0072"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0073\u0050\u0072\u0065\u0050\u0072"}:
				_eagf.SPrePr = NewCT_SPrePr()
				if _bege := d.DecodeElement(_eagf.SPrePr, &_fadgc); _bege != nil {
					return _bege
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0073\u0075\u0062"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0073\u0075\u0062"}:
				if _baacb := d.DecodeElement(_eagf.Sub, &_fadgc); _baacb != nil {
					return _baacb
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0073\u0075\u0070"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0073\u0075\u0070"}:
				if _dgbe := d.DecodeElement(_eagf.Sup, &_fadgc); _dgbe != nil {
					return _dgbe
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0065"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0065"}:
				if _egde := d.DecodeElement(_eagf.E, &_fadgc); _egde != nil {
					return _egde
				}
			default:
				_c.Log.Debug("\u0073\u006b\u0069p\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043T\u005f\u0053\u0050\u0072\u0065\u0020\u0025\u0076", _fadgc.Name)
				if _acfa := d.Skip(); _acfa != nil {
					return _acfa
				}
			}
		case _dd.EndElement:
			break _fegbd
		case _dd.CharData:
		}
	}
	return nil
}
func (_gegbd ST_Shp) Validate() error { return _gegbd.ValidateWithPath("") }
func (_gdfc *CT_String) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
	for _, _fede := range start.Attr {
		if _fede.Name.Local == "\u0076\u0061\u006c" {
			_gbbc, _dcad := _fede.Value, error(nil)
			if _dcad != nil {
				return _dcad
			}
			_gdfc.ValAttr = &_gbbc
			continue
		}
	}
	for {
		_ddfe, _fagc := d.Token()
		if _fagc != nil {
			return _a.Errorf("p\u0061\u0072\u0073\u0069ng\u0020C\u0054\u005f\u0053\u0074\u0072i\u006e\u0067\u003a\u0020\u0025\u0073", _fagc)
		}
		if _cbcgg, _gcfg := _ddfe.(_dd.EndElement); _gcfg && _cbcgg.Name == start.Name {
			break
		}
	}
	return nil
}
func (_cged *CT_FPr) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
_cdf:
	for {
		_cgc, _daf := d.Token()
		if _daf != nil {
			return _daf
		}
		switch _eabf := _cgc.(type) {
		case _dd.StartElement:
			switch _eabf.Name {
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0074\u0079\u0070\u0065"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0074\u0079\u0070\u0065"}:
				_cged.Type = NewCT_FType()
				if _ggg := d.DecodeElement(_cged.Type, &_eabf); _ggg != nil {
					return _ggg
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0063\u0074\u0072\u006c\u0050\u0072"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0063\u0074\u0072\u006c\u0050\u0072"}:
				_cged.CtrlPr = NewCT_CtrlPr()
				if _gac := d.DecodeElement(_cged.CtrlPr, &_eabf); _gac != nil {
					return _gac
				}
			default:
				_c.Log.Debug("\u0073\u006b\u0069\u0070\u0070i\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0046\u0050\u0072\u0020\u0025\u0076", _eabf.Name)
				if _gcb := d.Skip(); _gcb != nil {
					return _gcb
				}
			}
		case _dd.EndElement:
			break _cdf
		case _dd.CharData:
		}
	}
	return nil
}
func NewCT_BarPr() *CT_BarPr { _bda := &CT_BarPr{}; return _bda }

const (
	ST_StyleUnset ST_Style = 0
	ST_StyleP     ST_Style = 1
	ST_StyleB     ST_Style = 2
	ST_StyleI     ST_Style = 3
	ST_StyleBi    ST_Style = 4
)

// Validate validates the CT_TopBot and its children
func (_gdcf *CT_TopBot) Validate() error {
	return _gdcf.ValidateWithPath("\u0043T\u005f\u0054\u006f\u0070\u0042\u006ft")
}

type CT_Char struct{ ValAttr string }
type CT_OMathArg struct {
	ArgPr                *CT_OMathArgPr
	EG_OMathMathElements []*EG_OMathMathElements
	CtrlPr               *CT_CtrlPr
}

// Validate validates the CT_PhantPr and its children
func (_accc *CT_PhantPr) Validate() error {
	return _accc.ValidateWithPath("\u0043\u0054\u005f\u0050\u0068\u0061\u006e\u0074\u0050\u0072")
}
func (_ccga *CT_SSubSupPr) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
_bgcb:
	for {
		_bdcd, _dccb := d.Token()
		if _dccb != nil {
			return _dccb
		}
		switch _afbd := _bdcd.(type) {
		case _dd.StartElement:
			switch _afbd.Name {
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0061\u006c\u006e\u0053\u0063\u0072"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0061\u006c\u006e\u0053\u0063\u0072"}:
				_ccga.AlnScr = NewCT_OnOff()
				if _agcg := d.DecodeElement(_ccga.AlnScr, &_afbd); _agcg != nil {
					return _agcg
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0063\u0074\u0072\u006c\u0050\u0072"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0063\u0074\u0072\u006c\u0050\u0072"}:
				_ccga.CtrlPr = NewCT_CtrlPr()
				if _gdfa := d.DecodeElement(_ccga.CtrlPr, &_afbd); _gdfa != nil {
					return _gdfa
				}
			default:
				_c.Log.Debug("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075n\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054_S\u0053\u0075b\u0053\u0075\u0070\u0050\u0072\u0020\u0025\u0076", _afbd.Name)
				if _bdbff := d.Skip(); _bdbff != nil {
					return _bdbff
				}
			}
		case _dd.EndElement:
			break _bgcb
		case _dd.CharData:
		}
	}
	return nil
}
func (_dfgbd *CT_Script) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	if _dfgbd.ValAttr != ST_ScriptUnset {
		_cdbbf, _fcag := _dfgbd.ValAttr.MarshalXMLAttr(_dd.Name{Local: "\u006d\u003a\u0076a\u006c"})
		if _fcag != nil {
			return _fcag
		}
		start.Attr = append(start.Attr, _cdbbf)
	}
	e.EncodeToken(start)
	e.EncodeToken(_dd.EndElement{Name: start.Name})
	return nil
}
func NewCT_OMathPara() *CT_OMathPara { _fefgc := &CT_OMathPara{}; return _fefgc }
func NewCT_Func() *CT_Func {
	_gag := &CT_Func{}
	_gag.FName = NewCT_OMathArg()
	_gag.E = NewCT_OMathArg()
	return _gag
}

// ValidateWithPath validates the CT_PhantPr and its children, prefixing error messages with path
func (_acec *CT_PhantPr) ValidateWithPath(path string) error {
	if _acec.Show != nil {
		if _deea := _acec.Show.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077"); _deea != nil {
			return _deea
		}
	}
	if _acec.ZeroWid != nil {
		if _eaeb := _acec.ZeroWid.ValidateWithPath(path + "\u002f\u005a\u0065\u0072\u006f\u0057\u0069\u0064"); _eaeb != nil {
			return _eaeb
		}
	}
	if _acec.ZeroAsc != nil {
		if _cfac := _acec.ZeroAsc.ValidateWithPath(path + "\u002f\u005a\u0065\u0072\u006f\u0041\u0073\u0063"); _cfac != nil {
			return _cfac
		}
	}
	if _acec.ZeroDesc != nil {
		if _cdcc := _acec.ZeroDesc.ValidateWithPath(path + "\u002fZ\u0065\u0072\u006f\u0044\u0065\u0073c"); _cdcc != nil {
			return _cdcc
		}
	}
	if _acec.Transp != nil {
		if _aefd := _acec.Transp.ValidateWithPath(path + "\u002fT\u0072\u0061\u006e\u0073\u0070"); _aefd != nil {
			return _aefd
		}
	}
	if _acec.CtrlPr != nil {
		if _fcecgd := _acec.CtrlPr.ValidateWithPath(path + "\u002fC\u0074\u0072\u006c\u0050\u0072"); _fcecgd != nil {
			return _fcecgd
		}
	}
	return nil
}
func (_gbad *CT_R) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
_cebff:
	for {
		_cffge, _gdca := d.Token()
		if _gdca != nil {
			return _gdca
		}
		switch _cbdcc := _cffge.(type) {
		case _dd.StartElement:
			switch _cbdcc.Name {
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0072\u0050\u0072"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0072\u0050\u0072"}:
				_gbad.RPr = NewCT_RPR()
				if _ecbbg := d.DecodeElement(_gbad.RPr, &_cbdcc); _ecbbg != nil {
					return _ecbbg
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0074"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0074"}:
				_ddbbc := NewCT_RChoice()
				if _aeaf := d.DecodeElement(&_ddbbc.T, &_cbdcc); _aeaf != nil {
					return _aeaf
				}
				_gbad.Choice = append(_gbad.Choice, _ddbbc)
			default:
				_c.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054_\u0052\u0020\u0025\u0076", _cbdcc.Name)
				if _ceee := d.Skip(); _ceee != nil {
					return _ceee
				}
			}
		case _dd.EndElement:
			break _cebff
		case _dd.CharData:
		}
	}
	return nil
}

type CT_F struct {
	FPr *CT_FPr
	Num *CT_OMathArg
	Den *CT_OMathArg
}

func (_fcd *CT_BorderBoxPr) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	e.EncodeToken(start)
	if _fcd.HideTop != nil {
		_fga := _dd.StartElement{Name: _dd.Name{Local: "\u006d:\u0068\u0069\u0064\u0065\u0054\u006fp"}}
		e.EncodeElement(_fcd.HideTop, _fga)
	}
	if _fcd.HideBot != nil {
		_dfe := _dd.StartElement{Name: _dd.Name{Local: "\u006d:\u0068\u0069\u0064\u0065\u0042\u006ft"}}
		e.EncodeElement(_fcd.HideBot, _dfe)
	}
	if _fcd.HideLeft != nil {
		_fgab := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0068\u0069\u0064\u0065\u004c\u0065\u0066\u0074"}}
		e.EncodeElement(_fcd.HideLeft, _fgab)
	}
	if _fcd.HideRight != nil {
		_fb := _dd.StartElement{Name: _dd.Name{Local: "m\u003a\u0068\u0069\u0064\u0065\u0052\u0069\u0067\u0068\u0074"}}
		e.EncodeElement(_fcd.HideRight, _fb)
	}
	if _fcd.StrikeH != nil {
		_fbf := _dd.StartElement{Name: _dd.Name{Local: "\u006d:\u0073\u0074\u0072\u0069\u006b\u0065H"}}
		e.EncodeElement(_fcd.StrikeH, _fbf)
	}
	if _fcd.StrikeV != nil {
		_fff := _dd.StartElement{Name: _dd.Name{Local: "\u006d:\u0073\u0074\u0072\u0069\u006b\u0065V"}}
		e.EncodeElement(_fcd.StrikeV, _fff)
	}
	if _fcd.StrikeBLTR != nil {
		_cfg := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0073t\u0072\u0069\u006b\u0065\u0042\u004c\u0054\u0052"}}
		e.EncodeElement(_fcd.StrikeBLTR, _cfg)
	}
	if _fcd.StrikeTLBR != nil {
		_ea := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0073t\u0072\u0069\u006b\u0065\u0054\u004c\u0042\u0052"}}
		e.EncodeElement(_fcd.StrikeTLBR, _ea)
	}
	if _fcd.CtrlPr != nil {
		_cdg := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0063\u0074\u0072\u006c\u0050\u0072"}}
		e.EncodeElement(_fcd.CtrlPr, _cdg)
	}
	e.EncodeToken(_dd.EndElement{Name: start.Name})
	return nil
}
func NewCT_RChoice() *CT_RChoice { _cbeac := &CT_RChoice{}; return _cbeac }

type CT_BreakBin struct{ ValAttr ST_BreakBin }

// Validate validates the CT_BreakBin and its children
func (_bbcb *CT_BreakBin) Validate() error {
	return _bbcb.ValidateWithPath("C\u0054\u005f\u0042\u0072\u0065\u0061\u006b\u0042\u0069\u006e")
}

// Validate validates the EG_ScriptStyle and its children
func (_gead *EG_ScriptStyle) Validate() error {
	return _gead.ValidateWithPath("\u0045\u0047\u005f\u0053\u0063\u0072\u0069\u0070\u0074S\u0074\u0079\u006c\u0065")
}

// Validate validates the CT_Phant and its children
func (_egdbb *CT_Phant) Validate() error {
	return _egdbb.ValidateWithPath("\u0043\u0054\u005f\u0050\u0068\u0061\u006e\u0074")
}

type CT_AccPr struct {
	Chr    *CT_Char
	CtrlPr *CT_CtrlPr
}
type CT_EqArr struct {
	EqArrPr *CT_EqArrPr
	E       []*CT_OMathArg
}

func (_agfd *CT_D) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
_eab:
	for {
		_ddgg, _fgf := d.Token()
		if _fgf != nil {
			return _fgf
		}
		switch _dfb := _ddgg.(type) {
		case _dd.StartElement:
			switch _dfb.Name {
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0064\u0050\u0072"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0064\u0050\u0072"}:
				_agfd.DPr = NewCT_DPr()
				if _aacc := d.DecodeElement(_agfd.DPr, &_dfb); _aacc != nil {
					return _aacc
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0065"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0065"}:
				_efd := NewCT_OMathArg()
				if _ffg := d.DecodeElement(_efd, &_dfb); _ffg != nil {
					return _ffg
				}
				_agfd.E = append(_agfd.E, _efd)
			default:
				_c.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054_\u0044\u0020\u0025\u0076", _dfb.Name)
				if _ggca := d.Skip(); _ggca != nil {
					return _ggca
				}
			}
		case _dd.EndElement:
			break _eab
		case _dd.CharData:
		}
	}
	return nil
}

type CT_MPr struct {
	BaseJc  *CT_YAlign
	PlcHide *CT_OnOff
	RSpRule *CT_SpacingRule
	CGpRule *CT_SpacingRule
	RSp     *CT_UnSignedInteger
	CSp     *CT_UnSignedInteger
	CGp     *CT_UnSignedInteger
	Mcs     *CT_MCS
	CtrlPr  *CT_CtrlPr
}

func NewCT_SSupPr() *CT_SSupPr { _gbafc := &CT_SSupPr{}; return _gbafc }

type OMath struct{ CT_OMath }

func (_gdcga *EG_ScriptStyle) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
_gacg:
	for {
		_aeeg, _dbdg := d.Token()
		if _dbdg != nil {
			return _dbdg
		}
		switch _gcaag := _aeeg.(type) {
		case _dd.StartElement:
			switch _gcaag.Name {
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0073\u0063\u0072"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0073\u0063\u0072"}:
				_gdcga.Scr = NewCT_Script()
				if _acgc := d.DecodeElement(_gdcga.Scr, &_gcaag); _acgc != nil {
					return _acgc
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0073\u0074\u0079"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0073\u0074\u0079"}:
				_gdcga.Sty = NewCT_Style()
				if _gcbdd := d.DecodeElement(_gdcga.Sty, &_gcaag); _gcbdd != nil {
					return _gcbdd
				}
			default:
				_c.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069n\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006et\u0020\u006f\u006e\u0020\u0045\u0047\u005f\u0053\u0063\u0072\u0069\u0070\u0074\u0053t\u0079l\u0065\u0020\u0025\u0076", _gcaag.Name)
				if _gegaa := d.Skip(); _gegaa != nil {
					return _gegaa
				}
			}
		case _dd.EndElement:
			break _gacg
		case _dd.CharData:
		}
	}
	return nil
}
func (_gff *CT_CtrlPr) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	e.EncodeToken(start)
	e.EncodeToken(_dd.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_GroupChrPr and its children
func (_fcfg *CT_GroupChrPr) Validate() error {
	return _fcfg.ValidateWithPath("\u0043\u0054\u005f\u0047\u0072\u006f\u0075\u0070\u0043\u0068\u0072\u0050\u0072")
}

// ValidateWithPath validates the CT_Bar and its children, prefixing error messages with path
func (_acb *CT_Bar) ValidateWithPath(path string) error {
	if _acb.BarPr != nil {
		if _cbag := _acb.BarPr.ValidateWithPath(path + "\u002f\u0042\u0061\u0072\u0050\u0072"); _cbag != nil {
			return _cbag
		}
	}
	if _ag := _acb.E.ValidateWithPath(path + "\u002f\u0045"); _ag != nil {
		return _ag
	}
	return nil
}

// ValidateWithPath validates the CT_MPr and its children, prefixing error messages with path
func (_abb *CT_MPr) ValidateWithPath(path string) error {
	if _abb.BaseJc != nil {
		if _bfeac := _abb.BaseJc.ValidateWithPath(path + "\u002fB\u0061\u0073\u0065\u004a\u0063"); _bfeac != nil {
			return _bfeac
		}
	}
	if _abb.PlcHide != nil {
		if _gece := _abb.PlcHide.ValidateWithPath(path + "\u002f\u0050\u006c\u0063\u0048\u0069\u0064\u0065"); _gece != nil {
			return _gece
		}
	}
	if _abb.RSpRule != nil {
		if _efgcf := _abb.RSpRule.ValidateWithPath(path + "\u002f\u0052\u0053\u0070\u0052\u0075\u006c\u0065"); _efgcf != nil {
			return _efgcf
		}
	}
	if _abb.CGpRule != nil {
		if _eee := _abb.CGpRule.ValidateWithPath(path + "\u002f\u0043\u0047\u0070\u0052\u0075\u006c\u0065"); _eee != nil {
			return _eee
		}
	}
	if _abb.RSp != nil {
		if _aacd := _abb.RSp.ValidateWithPath(path + "\u002f\u0052\u0053\u0070"); _aacd != nil {
			return _aacd
		}
	}
	if _abb.CSp != nil {
		if _babg := _abb.CSp.ValidateWithPath(path + "\u002f\u0043\u0053\u0070"); _babg != nil {
			return _babg
		}
	}
	if _abb.CGp != nil {
		if _bdaaa := _abb.CGp.ValidateWithPath(path + "\u002f\u0043\u0047\u0070"); _bdaaa != nil {
			return _bdaaa
		}
	}
	if _abb.Mcs != nil {
		if _abg := _abb.Mcs.ValidateWithPath(path + "\u002f\u004d\u0063\u0073"); _abg != nil {
			return _abg
		}
	}
	if _abb.CtrlPr != nil {
		if _cbaa := _abb.CtrlPr.ValidateWithPath(path + "\u002fC\u0074\u0072\u006c\u0050\u0072"); _cbaa != nil {
			return _cbaa
		}
	}
	return nil
}
func (_aaccb *CT_Func) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	e.EncodeToken(start)
	if _aaccb.FuncPr != nil {
		_adcg := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0066\u0075\u006e\u0063\u0050\u0072"}}
		e.EncodeElement(_aaccb.FuncPr, _adcg)
	}
	_bafd := _dd.StartElement{Name: _dd.Name{Local: "\u006d:\u0066\u004e\u0061\u006d\u0065"}}
	e.EncodeElement(_aaccb.FName, _bafd)
	_ged := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0065"}}
	e.EncodeElement(_aaccb.E, _ged)
	e.EncodeToken(_dd.EndElement{Name: start.Name})
	return nil
}
func (_gdff *CT_OMathParaPr) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
_bdefa:
	for {
		_defd, _fbeae := d.Token()
		if _fbeae != nil {
			return _fbeae
		}
		switch _dbef := _defd.(type) {
		case _dd.StartElement:
			switch _dbef.Name {
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u006a\u0063"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u006a\u0063"}:
				_gdff.Jc = NewCT_OMathJc()
				if _cegc := d.DecodeElement(_gdff.Jc, &_dbef); _cegc != nil {
					return _cegc
				}
			default:
				_c.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069n\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006et\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u004f\u004d\u0061\u0074\u0068\u0050\u0061r\u0061P\u0072\u0020\u0025\u0076", _dbef.Name)
				if _gecc := d.Skip(); _gecc != nil {
					return _gecc
				}
			}
		case _dd.EndElement:
			break _bdefa
		case _dd.CharData:
		}
	}
	return nil
}
func (_ffdc *CT_RPR) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	e.EncodeToken(start)
	if _ffdc.Lit != nil {
		_bfge := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u006ci\u0074"}}
		e.EncodeElement(_ffdc.Lit, _bfge)
	}
	if _ffdc.Choice != nil {
		_ffdc.Choice.MarshalXML(e, _dd.StartElement{})
	}
	if _ffdc.Brk != nil {
		_ffcb := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0062r\u006b"}}
		e.EncodeElement(_ffdc.Brk, _ffcb)
	}
	if _ffdc.Aln != nil {
		_afeb := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0061l\u006e"}}
		e.EncodeElement(_ffdc.Aln, _afeb)
	}
	e.EncodeToken(_dd.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_MC and its children, prefixing error messages with path
func (_ddge *CT_MC) ValidateWithPath(path string) error {
	if _ddge.McPr != nil {
		if _eeff := _ddge.McPr.ValidateWithPath(path + "\u002f\u004d\u0063P\u0072"); _eeff != nil {
			return _eeff
		}
	}
	return nil
}
func (_dec *CT_EqArr) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
_dbbf:
	for {
		_dba, _ffe := d.Token()
		if _ffe != nil {
			return _ffe
		}
		switch _ddc := _dba.(type) {
		case _dd.StartElement:
			switch _ddc.Name {
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0065q\u0041\u0072\u0072\u0050\u0072"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0065q\u0041\u0072\u0072\u0050\u0072"}:
				_dec.EqArrPr = NewCT_EqArrPr()
				if _bbge := d.DecodeElement(_dec.EqArrPr, &_ddc); _bbge != nil {
					return _bbge
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0065"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0065"}:
				_bfa := NewCT_OMathArg()
				if _gfe := d.DecodeElement(_bfa, &_ddc); _gfe != nil {
					return _gfe
				}
				_dec.E = append(_dec.E, _bfa)
			default:
				_c.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006eg\u0020\u0075\u006es\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0045\u0071\u0041\u0072\u0072\u0020\u0025\u0076", _ddc.Name)
				if _fae := d.Skip(); _fae != nil {
					return _fae
				}
			}
		case _dd.EndElement:
			break _dbbf
		case _dd.CharData:
		}
	}
	return nil
}
func (_ggabd *CT_XAlign) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
	_ggabd.ValAttr = _g.ST_XAlign(1)
	for _, _gedaf := range start.Attr {
		if _gedaf.Name.Local == "\u0076\u0061\u006c" {
			_ggabd.ValAttr.UnmarshalXMLAttr(_gedaf)
			continue
		}
	}
	for {
		_baacg, _ffba := d.Token()
		if _ffba != nil {
			return _a.Errorf("p\u0061\u0072\u0073\u0069ng\u0020C\u0054\u005f\u0058\u0041\u006ci\u0067\u006e\u003a\u0020\u0025\u0073", _ffba)
		}
		if _efcd, _bcec := _baacg.(_dd.EndElement); _bcec && _efcd.Name == start.Name {
			break
		}
	}
	return nil
}

// Validate validates the CT_RPR and its children
func (_bfdd *CT_RPR) Validate() error {
	return _bfdd.ValidateWithPath("\u0043\u0054\u005f\u0052\u0050\u0052")
}

type CT_FPr struct {
	Type   *CT_FType
	CtrlPr *CT_CtrlPr
}

// Validate validates the CT_Box and its children
func (_eae *CT_Box) Validate() error {
	return _eae.ValidateWithPath("\u0043\u0054\u005f\u0042\u006f\u0078")
}
func (_ecga ST_BreakBinSub) String() string {
	switch _ecga {
	case 0:
		return ""
	case 1:
		return "\u002d\u002d"
	case 2:
		return "\u002d\u002b"
	case 3:
		return "\u002b\u002d"
	}
	return ""
}
func (_dfbfg *ST_Jc) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
	_fgdf, _fcdfg := d.Token()
	if _fcdfg != nil {
		return _fcdfg
	}
	if _ddbbb, _afec := _fgdf.(_dd.EndElement); _afec && _ddbbb.Name == start.Name {
		*_dfbfg = 1
		return nil
	}
	if _fcbc, _cfage := _fgdf.(_dd.CharData); !_cfage {
		return _a.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _fgdf)
	} else {
		switch string(_fcbc) {
		case "":
			*_dfbfg = 0
		case "\u006c\u0065\u0066\u0074":
			*_dfbfg = 1
		case "\u0072\u0069\u0067h\u0074":
			*_dfbfg = 2
		case "\u0063\u0065\u006e\u0074\u0065\u0072":
			*_dfbfg = 3
		case "c\u0065\u006e\u0074\u0065\u0072\u0047\u0072\u006f\u0075\u0070":
			*_dfbfg = 4
		}
	}
	_fgdf, _fcdfg = d.Token()
	if _fcdfg != nil {
		return _fcdfg
	}
	if _caeg, _dcee := _fgdf.(_dd.EndElement); _dcee && _caeg.Name == start.Name {
		return nil
	}
	return _a.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _fgdf)
}

type CT_YAlign struct{ ValAttr _g.ST_YAlign }

func (_dgef ST_Shp) ValidateWithPath(path string) error {
	switch _dgef {
	case 0, 1, 2:
	default:
		return _a.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_dgef))
	}
	return nil
}
func (_gfb *CT_BreakBin) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
	for _, _cfea := range start.Attr {
		if _cfea.Name.Local == "\u0076\u0061\u006c" {
			_gfb.ValAttr.UnmarshalXMLAttr(_cfea)
			continue
		}
	}
	for {
		_cbgd, _ed := d.Token()
		if _ed != nil {
			return _a.Errorf("\u0070\u0061\u0072si\u006e\u0067\u0020\u0043\u0054\u005f\u0042\u0072\u0065\u0061\u006b\u0042\u0069\u006e\u003a\u0020\u0025\u0073", _ed)
		}
		if _fbgg, _bcae := _cbgd.(_dd.EndElement); _bcae && _fbgg.Name == start.Name {
			break
		}
	}
	return nil
}

// Validate validates the CT_SPrePr and its children
func (_bfeef *CT_SPrePr) Validate() error {
	return _bfeef.ValidateWithPath("\u0043T\u005f\u0053\u0050\u0072\u0065\u0050r")
}

// ValidateWithPath validates the CT_Char and its children, prefixing error messages with path
func (_dad *CT_Char) ValidateWithPath(path string) error { return nil }
func NewCT_MR() *CT_MR                                   { _bacg := &CT_MR{}; return _bacg }
func NewCT_DPr() *CT_DPr                                 { _adc := &CT_DPr{}; return _adc }

type MathPr struct{ CT_MathPr }

func NewCT_Script() *CT_Script { _bcfc := &CT_Script{}; return _bcfc }
func (_gbeaa ST_BreakBin) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	return e.EncodeElement(_gbeaa.String(), start)
}
func (_fbege *CT_YAlign) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	_bdbc, _cabebb := _fbege.ValAttr.MarshalXMLAttr(_dd.Name{Local: "\u006d\u003a\u0076a\u006c"})
	if _cabebb != nil {
		return _cabebb
	}
	start.Attr = append(start.Attr, _bdbc)
	e.EncodeToken(start)
	e.EncodeToken(_dd.EndElement{Name: start.Name})
	return nil
}
func (_acc *CT_LimLow) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	e.EncodeToken(start)
	if _acc.LimLowPr != nil {
		_cgbe := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u006c\u0069\u006d\u004c\u006f\u0077\u0050\u0072"}}
		e.EncodeElement(_acc.LimLowPr, _cgbe)
	}
	_eedg := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0065"}}
	e.EncodeElement(_acc.E, _eedg)
	_cbab := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u006ci\u006d"}}
	e.EncodeElement(_acc.Lim, _cbab)
	e.EncodeToken(_dd.EndElement{Name: start.Name})
	return nil
}
func (_bead *CT_LimLowPr) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	e.EncodeToken(start)
	if _bead.CtrlPr != nil {
		_beg := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0063\u0074\u0072\u006c\u0050\u0072"}}
		e.EncodeElement(_bead.CtrlPr, _beg)
	}
	e.EncodeToken(_dd.EndElement{Name: start.Name})
	return nil
}

type CT_String struct{ ValAttr *string }

func (_bccb ST_Script) MarshalXMLAttr(name _dd.Name) (_dd.Attr, error) {
	_acgeb := _dd.Attr{}
	_acgeb.Name = name
	switch _bccb {
	case ST_ScriptUnset:
		_acgeb.Value = ""
	case ST_ScriptRoman:
		_acgeb.Value = "\u0072\u006f\u006da\u006e"
	case ST_ScriptScript:
		_acgeb.Value = "\u0073\u0063\u0072\u0069\u0070\u0074"
	case ST_ScriptFraktur:
		_acgeb.Value = "\u0066r\u0061\u006b\u0074\u0075\u0072"
	case ST_ScriptDouble_struck:
		_acgeb.Value = "\u0064\u006f\u0075\u0062\u006c\u0065\u002d\u0073\u0074\u0072\u0075\u0063\u006b"
	case ST_ScriptSans_serif:
		_acgeb.Value = "\u0073\u0061\u006e\u0073\u002d\u0073\u0065\u0072\u0069\u0066"
	case ST_ScriptMonospace:
		_acgeb.Value = "\u006do\u006e\u006f\u0073\u0070\u0061\u0063e"
	}
	return _acgeb, nil
}

type CT_BarPr struct {
	Pos    *CT_TopBot
	CtrlPr *CT_CtrlPr
}

func (_bgdd *CT_Func) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
	_bgdd.FName = NewCT_OMathArg()
	_bgdd.E = NewCT_OMathArg()
_ggbe:
	for {
		_eege, _adbf := d.Token()
		if _adbf != nil {
			return _adbf
		}
		switch _caef := _eege.(type) {
		case _dd.StartElement:
			switch _caef.Name {
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0066\u0075\u006e\u0063\u0050\u0072"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0066\u0075\u006e\u0063\u0050\u0072"}:
				_bgdd.FuncPr = NewCT_FuncPr()
				if _cceb := d.DecodeElement(_bgdd.FuncPr, &_caef); _cceb != nil {
					return _cceb
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0066\u004e\u0061m\u0065"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0066\u004e\u0061m\u0065"}:
				if _ace := d.DecodeElement(_bgdd.FName, &_caef); _ace != nil {
					return _ace
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0065"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0065"}:
				if _geg := d.DecodeElement(_bgdd.E, &_caef); _geg != nil {
					return _geg
				}
			default:
				_c.Log.Debug("\u0073\u006b\u0069p\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043T\u005f\u0046\u0075\u006e\u0063\u0020\u0025\u0076", _caef.Name)
				if _acfd := d.Skip(); _acfd != nil {
					return _acfd
				}
			}
		case _dd.EndElement:
			break _ggbe
		case _dd.CharData:
		}
	}
	return nil
}
func NewCT_OMathArg() *CT_OMathArg { _bdaf := &CT_OMathArg{}; return _bdaf }
func NewCT_YAlign() *CT_YAlign {
	_ffggf := &CT_YAlign{}
	_ffggf.ValAttr = _g.ST_YAlign(1)
	return _ffggf
}
func (_bebg *CT_Nary) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
	_bebg.Sub = NewCT_OMathArg()
	_bebg.Sup = NewCT_OMathArg()
	_bebg.E = NewCT_OMathArg()
_cacg:
	for {
		_aggg, _aaf := d.Token()
		if _aaf != nil {
			return _aaf
		}
		switch _gdeb := _aggg.(type) {
		case _dd.StartElement:
			switch _gdeb.Name {
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u006e\u0061\u0072\u0079\u0050\u0072"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u006e\u0061\u0072\u0079\u0050\u0072"}:
				_bebg.NaryPr = NewCT_NaryPr()
				if _aedd := d.DecodeElement(_bebg.NaryPr, &_gdeb); _aedd != nil {
					return _aedd
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0073\u0075\u0062"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0073\u0075\u0062"}:
				if _eece := d.DecodeElement(_bebg.Sub, &_gdeb); _eece != nil {
					return _eece
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0073\u0075\u0070"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0073\u0075\u0070"}:
				if _eacc := d.DecodeElement(_bebg.Sup, &_gdeb); _eacc != nil {
					return _eacc
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0065"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0065"}:
				if _cbec := d.DecodeElement(_bebg.E, &_gdeb); _cbec != nil {
					return _cbec
				}
			default:
				_c.Log.Debug("\u0073\u006b\u0069p\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043T\u005f\u004e\u0061\u0072\u0079\u0020\u0025\u0076", _gdeb.Name)
				if _cdfc := d.Skip(); _cdfc != nil {
					return _cdfc
				}
			}
		case _dd.EndElement:
			break _cacg
		case _dd.CharData:
		}
	}
	return nil
}

type CT_Script struct{ ValAttr ST_Script }

const (
	ST_TopBotUnset ST_TopBot = 0
	ST_TopBotTop   ST_TopBot = 1
	ST_TopBotBot   ST_TopBot = 2
)

type CT_SPre struct {
	SPrePr *CT_SPrePr
	Sub    *CT_OMathArg
	Sup    *CT_OMathArg
	E      *CT_OMathArg
}

// Validate validates the CT_XAlign and its children
func (_daga *CT_XAlign) Validate() error {
	return _daga.ValidateWithPath("\u0043T\u005f\u0058\u0041\u006c\u0069\u0067n")
}

type CT_DPr struct {
	BegChr *CT_Char
	SepChr *CT_Char
	EndChr *CT_Char
	Grow   *CT_OnOff
	Shp    *CT_Shp
	CtrlPr *CT_CtrlPr
}

func (_cbdb *CT_RChoice) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	if _cbdb.T != nil {
		_bdcb := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0074"}}
		for _, _gcbgg := range _cbdb.T {
			e.EncodeElement(_gcbgg, _bdcb)
		}
	}
	return nil
}

type CT_M struct {
	MPr *CT_MPr
	Mr  []*CT_MR
}

func (_dgcc ST_BreakBin) String() string {
	switch _dgcc {
	case 0:
		return ""
	case 1:
		return "\u0062\u0065\u0066\u006f\u0072\u0065"
	case 2:
		return "\u0061\u0066\u0074e\u0072"
	case 3:
		return "\u0072\u0065\u0070\u0065\u0061\u0074"
	}
	return ""
}
func NewCT_OMathParaPr() *CT_OMathParaPr { _dddcb := &CT_OMathParaPr{}; return _dddcb }

// ValidateWithPath validates the CT_Phant and its children, prefixing error messages with path
func (_gbgd *CT_Phant) ValidateWithPath(path string) error {
	if _gbgd.PhantPr != nil {
		if _fdfb := _gbgd.PhantPr.ValidateWithPath(path + "\u002f\u0050\u0068\u0061\u006e\u0074\u0050\u0072"); _fdfb != nil {
			return _fdfb
		}
	}
	if _babb := _gbgd.E.ValidateWithPath(path + "\u002f\u0045"); _babb != nil {
		return _babb
	}
	return nil
}

// ValidateWithPath validates the CT_SSubPr and its children, prefixing error messages with path
func (_dcce *CT_SSubPr) ValidateWithPath(path string) error {
	if _dcce.CtrlPr != nil {
		if _acaff := _dcce.CtrlPr.ValidateWithPath(path + "\u002fC\u0074\u0072\u006c\u0050\u0072"); _acaff != nil {
			return _acaff
		}
	}
	return nil
}
func (_bcc *CT_EqArr) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	e.EncodeToken(start)
	if _bcc.EqArrPr != nil {
		_fba := _dd.StartElement{Name: _dd.Name{Local: "\u006d:\u0065\u0071\u0041\u0072\u0072\u0050r"}}
		e.EncodeElement(_bcc.EqArrPr, _fba)
	}
	_dadf := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0065"}}
	for _, _bbgb := range _bcc.E {
		e.EncodeElement(_bbgb, _dadf)
	}
	e.EncodeToken(_dd.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_BarPr and its children, prefixing error messages with path
func (_ab *CT_BarPr) ValidateWithPath(path string) error {
	if _ab.Pos != nil {
		if _fee := _ab.Pos.ValidateWithPath(path + "\u002f\u0050\u006f\u0073"); _fee != nil {
			return _fee
		}
	}
	if _ab.CtrlPr != nil {
		if _gd := _ab.CtrlPr.ValidateWithPath(path + "\u002fC\u0074\u0072\u006c\u0050\u0072"); _gd != nil {
			return _gd
		}
	}
	return nil
}
func (_gadg *ST_BreakBinSub) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
	_cdfd, _dgcb := d.Token()
	if _dgcb != nil {
		return _dgcb
	}
	if _feeba, _bafgg := _cdfd.(_dd.EndElement); _bafgg && _feeba.Name == start.Name {
		*_gadg = 1
		return nil
	}
	if _ddcf, _bdefec := _cdfd.(_dd.CharData); !_bdefec {
		return _a.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _cdfd)
	} else {
		switch string(_ddcf) {
		case "":
			*_gadg = 0
		case "\u002d\u002d":
			*_gadg = 1
		case "\u002d\u002b":
			*_gadg = 2
		case "\u002b\u002d":
			*_gadg = 3
		}
	}
	_cdfd, _dgcb = d.Token()
	if _dgcb != nil {
		return _dgcb
	}
	if _gceb, _gabc := _cdfd.(_dd.EndElement); _gabc && _gceb.Name == start.Name {
		return nil
	}
	return _a.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _cdfd)
}
func NewCT_BreakBinSub() *CT_BreakBinSub { _dbf := &CT_BreakBinSub{}; return _dbf }
func NewCT_ManualBreak() *CT_ManualBreak { _efae := &CT_ManualBreak{}; return _efae }

// Validate validates the CT_SSupPr and its children
func (_faddf *CT_SSupPr) Validate() error {
	return _faddf.ValidateWithPath("\u0043T\u005f\u0053\u0053\u0075\u0070\u0050r")
}

type CT_Shp struct{ ValAttr ST_Shp }
type CT_SSupPr struct{ CtrlPr *CT_CtrlPr }

// ValidateWithPath validates the CT_SSubSupPr and its children, prefixing error messages with path
func (_adae *CT_SSubSupPr) ValidateWithPath(path string) error {
	if _adae.AlnScr != nil {
		if _dagga := _adae.AlnScr.ValidateWithPath(path + "\u002fA\u006c\u006e\u0053\u0063\u0072"); _dagga != nil {
			return _dagga
		}
	}
	if _adae.CtrlPr != nil {
		if _adfg := _adae.CtrlPr.ValidateWithPath(path + "\u002fC\u0074\u0072\u006c\u0050\u0072"); _adfg != nil {
			return _adfg
		}
	}
	return nil
}

// ValidateWithPath validates the CT_Text and its children, prefixing error messages with path
func (_ebdae *CT_Text) ValidateWithPath(path string) error { return nil }
func (_ebef *CT_Rad) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
	_ebef.Deg = NewCT_OMathArg()
	_ebef.E = NewCT_OMathArg()
_dbaaa:
	for {
		_fcc, _bgac := d.Token()
		if _bgac != nil {
			return _bgac
		}
		switch _eaae := _fcc.(type) {
		case _dd.StartElement:
			switch _eaae.Name {
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0072\u0061\u0064P\u0072"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0072\u0061\u0064P\u0072"}:
				_ebef.RadPr = NewCT_RadPr()
				if _cecee := d.DecodeElement(_ebef.RadPr, &_eaae); _cecee != nil {
					return _cecee
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0064\u0065\u0067"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0064\u0065\u0067"}:
				if _eceb := d.DecodeElement(_ebef.Deg, &_eaae); _eceb != nil {
					return _eceb
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0065"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0065"}:
				if _adag := d.DecodeElement(_ebef.E, &_eaae); _adag != nil {
					return _adag
				}
			default:
				_c.Log.Debug("\u0073\u006b\u0069\u0070\u0070i\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0052\u0061\u0064\u0020\u0025\u0076", _eaae.Name)
				if _ecebb := d.Skip(); _ecebb != nil {
					return _ecebb
				}
			}
		case _dd.EndElement:
			break _dbaaa
		case _dd.CharData:
		}
	}
	return nil
}
func (_cacc *EG_OMathMathElements) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
_acggg:
	for {
		_cecga, _gddb := d.Token()
		if _gddb != nil {
			return _gddb
		}
		switch _gacd := _cecga.(type) {
		case _dd.StartElement:
			switch _gacd.Name {
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0061\u0063\u0063"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0061\u0063\u0063"}:
				_cacc.Acc = NewCT_Acc()
				if _bdbeb := d.DecodeElement(_cacc.Acc, &_gacd); _bdbeb != nil {
					return _bdbeb
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0062\u0061\u0072"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0062\u0061\u0072"}:
				_cacc.Bar = NewCT_Bar()
				if _gdbfe := d.DecodeElement(_cacc.Bar, &_gacd); _gdbfe != nil {
					return _gdbfe
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0062\u006f\u0078"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0062\u006f\u0078"}:
				_cacc.Box = NewCT_Box()
				if _ededd := d.DecodeElement(_cacc.Box, &_gacd); _ededd != nil {
					return _ededd
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0062o\u0072\u0064\u0065\u0072\u0042\u006fx"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0062o\u0072\u0064\u0065\u0072\u0042\u006fx"}:
				_cacc.BorderBox = NewCT_BorderBox()
				if _abgd := d.DecodeElement(_cacc.BorderBox, &_gacd); _abgd != nil {
					return _abgd
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0064"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0064"}:
				_cacc.D = NewCT_D()
				if _ffdcd := d.DecodeElement(_cacc.D, &_gacd); _ffdcd != nil {
					return _ffdcd
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0065\u0071\u0041r\u0072"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0065\u0071\u0041r\u0072"}:
				_cacc.EqArr = NewCT_EqArr()
				if _babdf := d.DecodeElement(_cacc.EqArr, &_gacd); _babdf != nil {
					return _babdf
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0066"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0066"}:
				_cacc.F = NewCT_F()
				if _dagc := d.DecodeElement(_cacc.F, &_gacd); _dagc != nil {
					return _dagc
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0066\u0075\u006e\u0063"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0066\u0075\u006e\u0063"}:
				_cacc.Func = NewCT_Func()
				if _fbcab := d.DecodeElement(_cacc.Func, &_gacd); _fbcab != nil {
					return _fbcab
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0067\u0072\u006f\u0075\u0070\u0043\u0068\u0072"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0067\u0072\u006f\u0075\u0070\u0043\u0068\u0072"}:
				_cacc.GroupChr = NewCT_GroupChr()
				if _ecebf := d.DecodeElement(_cacc.GroupChr, &_gacd); _ecebf != nil {
					return _ecebf
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u006c\u0069\u006d\u004c\u006f\u0077"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u006c\u0069\u006d\u004c\u006f\u0077"}:
				_cacc.LimLow = NewCT_LimLow()
				if _feedf := d.DecodeElement(_cacc.LimLow, &_gacd); _feedf != nil {
					return _feedf
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u006c\u0069\u006d\u0055\u0070\u0070"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u006c\u0069\u006d\u0055\u0070\u0070"}:
				_cacc.LimUpp = NewCT_LimUpp()
				if _fgee := d.DecodeElement(_cacc.LimUpp, &_gacd); _fgee != nil {
					return _fgee
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u006d"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u006d"}:
				_cacc.M = NewCT_M()
				if _ggba := d.DecodeElement(_cacc.M, &_gacd); _ggba != nil {
					return _ggba
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u006e\u0061\u0072\u0079"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u006e\u0061\u0072\u0079"}:
				_cacc.Nary = NewCT_Nary()
				if _bbedd := d.DecodeElement(_cacc.Nary, &_gacd); _bbedd != nil {
					return _bbedd
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0070\u0068\u0061n\u0074"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0070\u0068\u0061n\u0074"}:
				_cacc.Phant = NewCT_Phant()
				if _decfd := d.DecodeElement(_cacc.Phant, &_gacd); _decfd != nil {
					return _decfd
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0072\u0061\u0064"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0072\u0061\u0064"}:
				_cacc.Rad = NewCT_Rad()
				if _cgeb := d.DecodeElement(_cacc.Rad, &_gacd); _cgeb != nil {
					return _cgeb
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0073\u0050\u0072\u0065"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0073\u0050\u0072\u0065"}:
				_cacc.SPre = NewCT_SPre()
				if _cdad := d.DecodeElement(_cacc.SPre, &_gacd); _cdad != nil {
					return _cdad
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0073\u0053\u0075\u0062"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0073\u0053\u0075\u0062"}:
				_cacc.SSub = NewCT_SSub()
				if _dfbff := d.DecodeElement(_cacc.SSub, &_gacd); _dfbff != nil {
					return _dfbff
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0073S\u0075\u0062\u0053\u0075\u0070"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0073S\u0075\u0062\u0053\u0075\u0070"}:
				_cacc.SSubSup = NewCT_SSubSup()
				if _bfcd := d.DecodeElement(_cacc.SSubSup, &_gacd); _bfcd != nil {
					return _bfcd
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0073\u0053\u0075\u0070"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0073\u0053\u0075\u0070"}:
				_cacc.SSup = NewCT_SSup()
				if _fgef := d.DecodeElement(_cacc.SSup, &_gacd); _fgef != nil {
					return _fgef
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0072"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0072"}:
				_cacc.R = NewCT_R()
				if _bcdd := d.DecodeElement(_cacc.R, &_gacd); _bcdd != nil {
					return _bcdd
				}
			default:
				_c.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006eg\u0020\u0075\u006es\u0075\u0070\u0070o\u0072\u0074e\u0064\u0020\u0065\u006c\u0065\u006de\u006et \u006f\u006e\u0020\u0045\u0047\u005f\u004f\u004d\u0061\u0074\u0068\u004d\u0061\u0074\u0068\u0045\u006c\u0065\u006d\u0065\u006e\u0074\u0073\u0020\u0025\u0076", _gacd.Name)
				if _feaeb := d.Skip(); _feaeb != nil {
					return _feaeb
				}
			}
		case _dd.EndElement:
			break _acggg
		case _dd.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_String and its children, prefixing error messages with path
func (_fece *CT_String) ValidateWithPath(path string) error { return nil }
func (_cbgg *CT_OnOff) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	if _cbgg.ValAttr != nil {
		start.Attr = append(start.Attr, _dd.Attr{Name: _dd.Name{Local: "\u006d\u003a\u0076a\u006c"}, Value: _a.Sprintf("\u0025\u0076", *_cbgg.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_dd.EndElement{Name: start.Name})
	return nil
}
func (_fbeg *CT_Text) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
	for _, _afdc := range start.Attr {
		if _afdc.Name.Space == "\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065" && _afdc.Name.Local == "\u0073\u0070\u0061c\u0065" {
			_caba, _gddf := _afdc.Value, error(nil)
			if _gddf != nil {
				return _gddf
			}
			_fbeg.SpaceAttr = &_caba
			continue
		}
	}
	for {
		_eegb, _cdga := d.Token()
		if _cdga != nil {
			return _a.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0043\u0054\u005f\u0054\u0065\u0078\u0074\u003a\u0020\u0025\u0073", _cdga)
		}
		if _gdebf, _agcbb := _eegb.(_dd.CharData); _agcbb {
			_fbeg.Content = string(_gdebf)
		}
		if _aaecf, _afca := _eegb.(_dd.EndElement); _afca && _aaecf.Name == start.Name {
			break
		}
	}
	return nil
}
func (_fbdf *CT_Char) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
	for _, _adg := range start.Attr {
		if _adg.Name.Local == "\u0076\u0061\u006c" {
			_cea, _eaea := _adg.Value, error(nil)
			if _eaea != nil {
				return _eaea
			}
			_fbdf.ValAttr = _cea
			continue
		}
	}
	for {
		_fcg, _efb := d.Token()
		if _efb != nil {
			return _a.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0043\u0054\u005f\u0043\u0068\u0061\u0072\u003a\u0020\u0025\u0073", _efb)
		}
		if _dfg, _egg := _fcg.(_dd.EndElement); _egg && _dfg.Name == start.Name {
			break
		}
	}
	return nil
}

// ValidateWithPath validates the CT_RPRChoice and its children, prefixing error messages with path
func (_bcda *CT_RPRChoice) ValidateWithPath(path string) error {
	if _bcda.Nor != nil {
		if _gbafg := _bcda.Nor.ValidateWithPath(path + "\u002f\u004e\u006f\u0072"); _gbafg != nil {
			return _gbafg
		}
	}
	return nil
}

// ValidateWithPath validates the CT_ManualBreak and its children, prefixing error messages with path
func (_cgda *CT_ManualBreak) ValidateWithPath(path string) error {
	if _cgda.AlnAtAttr != nil {
		if *_cgda.AlnAtAttr < 1 {
			return _a.Errorf("\u0025\u0073/\u006d\u002e\u0041\u006cn\u0041\u0074A\u0074\u0074\u0072\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u003e\u003d\u0020\u0031\u0020\u0028\u0068\u0061\u0076e\u0020\u0025\u0076\u0029", path, *_cgda.AlnAtAttr)
		}
		if *_cgda.AlnAtAttr > 255 {
			return _a.Errorf("\u0025\u0073\u002f\u006d\u002e\u0041\u006c\u006e\u0041\u0074\u0041\u0074\u0074r\u0020\u006d\u0075\u0073\u0074\u0020b\u0065\u0020\u003c\u003d\u0020\u0032\u0035\u0035\u0020\u0028\u0068\u0061\u0076e\u0020\u0025\u0076\u0029", path, *_cgda.AlnAtAttr)
		}
	}
	return nil
}

// Validate validates the CT_NaryPr and its children
func (_gfee *CT_NaryPr) Validate() error {
	return _gfee.ValidateWithPath("\u0043T\u005f\u004e\u0061\u0072\u0079\u0050r")
}
func (_gfbc *CT_OMathJc) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
	for _, _cfeab := range start.Attr {
		if _cfeab.Name.Local == "\u0076\u0061\u006c" {
			_gfbc.ValAttr.UnmarshalXMLAttr(_cfeab)
			continue
		}
	}
	for {
		_eaecg, _bgda := d.Token()
		if _bgda != nil {
			return _a.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0043\u0054\u005f\u004f\u004d\u0061\u0074\u0068\u004a\u0063\u003a\u0020%\u0073", _bgda)
		}
		if _dddc, _dedda := _eaecg.(_dd.EndElement); _dedda && _dddc.Name == start.Name {
			break
		}
	}
	return nil
}
func (_ggff *CT_OMathArg) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
_affbg:
	for {
		_gfgg, _bfac := d.Token()
		if _bfac != nil {
			return _bfac
		}
		switch _abcg := _gfgg.(type) {
		case _dd.StartElement:
			switch _abcg.Name {
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0061\u0072\u0067P\u0072"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0061\u0072\u0067P\u0072"}:
				_ggff.ArgPr = NewCT_OMathArgPr()
				if _gabed := d.DecodeElement(_ggff.ArgPr, &_abcg); _gabed != nil {
					return _gabed
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0061\u0063\u0063"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0061\u0063\u0063"}:
				_cecd := NewEG_OMathMathElements()
				_cecd.Acc = NewCT_Acc()
				if _fdd := d.DecodeElement(_cecd.Acc, &_abcg); _fdd != nil {
					return _fdd
				}
				_ggff.EG_OMathMathElements = append(_ggff.EG_OMathMathElements, _cecd)
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0062\u0061\u0072"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0062\u0061\u0072"}:
				_dbe := NewEG_OMathMathElements()
				_dbe.Bar = NewCT_Bar()
				if _ggaf := d.DecodeElement(_dbe.Bar, &_abcg); _ggaf != nil {
					return _ggaf
				}
				_ggff.EG_OMathMathElements = append(_ggff.EG_OMathMathElements, _dbe)
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0062\u006f\u0078"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0062\u006f\u0078"}:
				_dada := NewEG_OMathMathElements()
				_dada.Box = NewCT_Box()
				if _cabf := d.DecodeElement(_dada.Box, &_abcg); _cabf != nil {
					return _cabf
				}
				_ggff.EG_OMathMathElements = append(_ggff.EG_OMathMathElements, _dada)
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0062o\u0072\u0064\u0065\u0072\u0042\u006fx"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0062o\u0072\u0064\u0065\u0072\u0042\u006fx"}:
				_ggfg := NewEG_OMathMathElements()
				_ggfg.BorderBox = NewCT_BorderBox()
				if _cdgdc := d.DecodeElement(_ggfg.BorderBox, &_abcg); _cdgdc != nil {
					return _cdgdc
				}
				_ggff.EG_OMathMathElements = append(_ggff.EG_OMathMathElements, _ggfg)
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0064"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0064"}:
				_eaag := NewEG_OMathMathElements()
				_eaag.D = NewCT_D()
				if _gfae := d.DecodeElement(_eaag.D, &_abcg); _gfae != nil {
					return _gfae
				}
				_ggff.EG_OMathMathElements = append(_ggff.EG_OMathMathElements, _eaag)
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0065\u0071\u0041r\u0072"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0065\u0071\u0041r\u0072"}:
				_gabec := NewEG_OMathMathElements()
				_gabec.EqArr = NewCT_EqArr()
				if _abbc := d.DecodeElement(_gabec.EqArr, &_abcg); _abbc != nil {
					return _abbc
				}
				_ggff.EG_OMathMathElements = append(_ggff.EG_OMathMathElements, _gabec)
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0066"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0066"}:
				_fecd := NewEG_OMathMathElements()
				_fecd.F = NewCT_F()
				if _aga := d.DecodeElement(_fecd.F, &_abcg); _aga != nil {
					return _aga
				}
				_ggff.EG_OMathMathElements = append(_ggff.EG_OMathMathElements, _fecd)
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0066\u0075\u006e\u0063"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0066\u0075\u006e\u0063"}:
				_gcab := NewEG_OMathMathElements()
				_gcab.Func = NewCT_Func()
				if _ffgda := d.DecodeElement(_gcab.Func, &_abcg); _ffgda != nil {
					return _ffgda
				}
				_ggff.EG_OMathMathElements = append(_ggff.EG_OMathMathElements, _gcab)
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0067\u0072\u006f\u0075\u0070\u0043\u0068\u0072"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0067\u0072\u006f\u0075\u0070\u0043\u0068\u0072"}:
				_gbfcb := NewEG_OMathMathElements()
				_gbfcb.GroupChr = NewCT_GroupChr()
				if _fgda := d.DecodeElement(_gbfcb.GroupChr, &_abcg); _fgda != nil {
					return _fgda
				}
				_ggff.EG_OMathMathElements = append(_ggff.EG_OMathMathElements, _gbfcb)
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u006c\u0069\u006d\u004c\u006f\u0077"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u006c\u0069\u006d\u004c\u006f\u0077"}:
				_ffbd := NewEG_OMathMathElements()
				_ffbd.LimLow = NewCT_LimLow()
				if _gdgf := d.DecodeElement(_ffbd.LimLow, &_abcg); _gdgf != nil {
					return _gdgf
				}
				_ggff.EG_OMathMathElements = append(_ggff.EG_OMathMathElements, _ffbd)
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u006c\u0069\u006d\u0055\u0070\u0070"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u006c\u0069\u006d\u0055\u0070\u0070"}:
				_dcef := NewEG_OMathMathElements()
				_dcef.LimUpp = NewCT_LimUpp()
				if _feeb := d.DecodeElement(_dcef.LimUpp, &_abcg); _feeb != nil {
					return _feeb
				}
				_ggff.EG_OMathMathElements = append(_ggff.EG_OMathMathElements, _dcef)
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u006d"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u006d"}:
				_abcd := NewEG_OMathMathElements()
				_abcd.M = NewCT_M()
				if _adgbb := d.DecodeElement(_abcd.M, &_abcg); _adgbb != nil {
					return _adgbb
				}
				_ggff.EG_OMathMathElements = append(_ggff.EG_OMathMathElements, _abcd)
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u006e\u0061\u0072\u0079"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u006e\u0061\u0072\u0079"}:
				_ceeb := NewEG_OMathMathElements()
				_ceeb.Nary = NewCT_Nary()
				if _dggb := d.DecodeElement(_ceeb.Nary, &_abcg); _dggb != nil {
					return _dggb
				}
				_ggff.EG_OMathMathElements = append(_ggff.EG_OMathMathElements, _ceeb)
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0070\u0068\u0061n\u0074"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0070\u0068\u0061n\u0074"}:
				_eff := NewEG_OMathMathElements()
				_eff.Phant = NewCT_Phant()
				if _ebg := d.DecodeElement(_eff.Phant, &_abcg); _ebg != nil {
					return _ebg
				}
				_ggff.EG_OMathMathElements = append(_ggff.EG_OMathMathElements, _eff)
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0072\u0061\u0064"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0072\u0061\u0064"}:
				_ecfab := NewEG_OMathMathElements()
				_ecfab.Rad = NewCT_Rad()
				if _egcgc := d.DecodeElement(_ecfab.Rad, &_abcg); _egcgc != nil {
					return _egcgc
				}
				_ggff.EG_OMathMathElements = append(_ggff.EG_OMathMathElements, _ecfab)
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0073\u0050\u0072\u0065"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0073\u0050\u0072\u0065"}:
				_acada := NewEG_OMathMathElements()
				_acada.SPre = NewCT_SPre()
				if _ebbb := d.DecodeElement(_acada.SPre, &_abcg); _ebbb != nil {
					return _ebbb
				}
				_ggff.EG_OMathMathElements = append(_ggff.EG_OMathMathElements, _acada)
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0073\u0053\u0075\u0062"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0073\u0053\u0075\u0062"}:
				_dbcb := NewEG_OMathMathElements()
				_dbcb.SSub = NewCT_SSub()
				if _bdgb := d.DecodeElement(_dbcb.SSub, &_abcg); _bdgb != nil {
					return _bdgb
				}
				_ggff.EG_OMathMathElements = append(_ggff.EG_OMathMathElements, _dbcb)
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0073S\u0075\u0062\u0053\u0075\u0070"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0073S\u0075\u0062\u0053\u0075\u0070"}:
				_ece := NewEG_OMathMathElements()
				_ece.SSubSup = NewCT_SSubSup()
				if _fafc := d.DecodeElement(_ece.SSubSup, &_abcg); _fafc != nil {
					return _fafc
				}
				_ggff.EG_OMathMathElements = append(_ggff.EG_OMathMathElements, _ece)
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0073\u0053\u0075\u0070"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0073\u0053\u0075\u0070"}:
				_cbce := NewEG_OMathMathElements()
				_cbce.SSup = NewCT_SSup()
				if _bdca := d.DecodeElement(_cbce.SSup, &_abcg); _bdca != nil {
					return _bdca
				}
				_ggff.EG_OMathMathElements = append(_ggff.EG_OMathMathElements, _cbce)
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0072"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0072"}:
				_fdc := NewEG_OMathMathElements()
				_fdc.R = NewCT_R()
				if _dee := d.DecodeElement(_fdc.R, &_abcg); _dee != nil {
					return _dee
				}
				_ggff.EG_OMathMathElements = append(_ggff.EG_OMathMathElements, _fdc)
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0063\u0074\u0072\u006c\u0050\u0072"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0063\u0074\u0072\u006c\u0050\u0072"}:
				_ggff.CtrlPr = NewCT_CtrlPr()
				if _efccg := d.DecodeElement(_ggff.CtrlPr, &_abcg); _efccg != nil {
					return _efccg
				}
			default:
				_c.Log.Debug("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u004f\u004d\u0061\u0074\u0068\u0041\u0072\u0067\u0020\u0025\u0076", _abcg.Name)
				if _feaba := d.Skip(); _feaba != nil {
					return _feaba
				}
			}
		case _dd.EndElement:
			break _affbg
		case _dd.CharData:
		}
	}
	return nil
}
func (_acea ST_Shp) String() string {
	switch _acea {
	case 0:
		return ""
	case 1:
		return "\u0063\u0065\u006e\u0074\u0065\u0072\u0065\u0064"
	case 2:
		return "\u006d\u0061\u0074c\u0068"
	}
	return ""
}
func (_cbgb *CT_FType) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	_daea, _baf := _cbgb.ValAttr.MarshalXMLAttr(_dd.Name{Local: "\u006d\u003a\u0076a\u006c"})
	if _baf != nil {
		return _baf
	}
	start.Attr = append(start.Attr, _daea)
	e.EncodeToken(start)
	e.EncodeToken(_dd.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_BarPr and its children
func (_aeg *CT_BarPr) Validate() error {
	return _aeg.ValidateWithPath("\u0043\u0054\u005f\u0042\u0061\u0072\u0050\u0072")
}
func (_fcb *CT_CtrlPr) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
	for {
		_adbd, _egd := d.Token()
		if _egd != nil {
			return _a.Errorf("p\u0061\u0072\u0073\u0069ng\u0020C\u0054\u005f\u0043\u0074\u0072l\u0050\u0072\u003a\u0020\u0025\u0073", _egd)
		}
		if _efa, _egdb := _adbd.(_dd.EndElement); _egdb && _efa.Name == start.Name {
			break
		}
	}
	return nil
}
func (_fffa *ST_Style) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
	_ggcab, _bgff := d.Token()
	if _bgff != nil {
		return _bgff
	}
	if _aagd, _egbc := _ggcab.(_dd.EndElement); _egbc && _aagd.Name == start.Name {
		*_fffa = 1
		return nil
	}
	if _deca, _abde := _ggcab.(_dd.CharData); !_abde {
		return _a.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _ggcab)
	} else {
		switch string(_deca) {
		case "":
			*_fffa = 0
		case "\u0070":
			*_fffa = 1
		case "\u0062":
			*_fffa = 2
		case "\u0069":
			*_fffa = 3
		case "\u0062\u0069":
			*_fffa = 4
		}
	}
	_ggcab, _bgff = d.Token()
	if _bgff != nil {
		return _bgff
	}
	if _fcac, _bbcgb := _ggcab.(_dd.EndElement); _bbcgb && _fcac.Name == start.Name {
		return nil
	}
	return _a.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _ggcab)
}

type CT_LimLowPr struct{ CtrlPr *CT_CtrlPr }

func (_eddb *CT_Phant) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	e.EncodeToken(start)
	if _eddb.PhantPr != nil {
		_cdfcg := _dd.StartElement{Name: _dd.Name{Local: "\u006d:\u0070\u0068\u0061\u006e\u0074\u0050r"}}
		e.EncodeElement(_eddb.PhantPr, _cdfcg)
	}
	_efgd := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0065"}}
	e.EncodeElement(_eddb.E, _efgd)
	e.EncodeToken(_dd.EndElement{Name: start.Name})
	return nil
}

type CT_OnOff struct{ ValAttr *_g.ST_OnOff }

func NewCT_LimUppPr() *CT_LimUppPr { _ccdg := &CT_LimUppPr{}; return _ccdg }
func (_dgdgd *CT_NaryPr) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
_ead:
	for {
		_ggdd, _dabe := d.Token()
		if _dabe != nil {
			return _dabe
		}
		switch _baaa := _ggdd.(type) {
		case _dd.StartElement:
			switch _baaa.Name {
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0063\u0068\u0072"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0063\u0068\u0072"}:
				_dgdgd.Chr = NewCT_Char()
				if _addd := d.DecodeElement(_dgdgd.Chr, &_baaa); _addd != nil {
					return _addd
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u006c\u0069\u006d\u004c\u006f\u0063"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u006c\u0069\u006d\u004c\u006f\u0063"}:
				_dgdgd.LimLoc = NewCT_LimLoc()
				if _cacb := d.DecodeElement(_dgdgd.LimLoc, &_baaa); _cacb != nil {
					return _cacb
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0067\u0072\u006f\u0077"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0067\u0072\u006f\u0077"}:
				_dgdgd.Grow = NewCT_OnOff()
				if _fgdg := d.DecodeElement(_dgdgd.Grow, &_baaa); _fgdg != nil {
					return _fgdg
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0073u\u0062\u0048\u0069\u0064\u0065"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0073u\u0062\u0048\u0069\u0064\u0065"}:
				_dgdgd.SubHide = NewCT_OnOff()
				if _gaae := d.DecodeElement(_dgdgd.SubHide, &_baaa); _gaae != nil {
					return _gaae
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0073u\u0070\u0048\u0069\u0064\u0065"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0073u\u0070\u0048\u0069\u0064\u0065"}:
				_dgdgd.SupHide = NewCT_OnOff()
				if _eddf := d.DecodeElement(_dgdgd.SupHide, &_baaa); _eddf != nil {
					return _eddf
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0063\u0074\u0072\u006c\u0050\u0072"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0063\u0074\u0072\u006c\u0050\u0072"}:
				_dgdgd.CtrlPr = NewCT_CtrlPr()
				if _cbcg := d.DecodeElement(_dgdgd.CtrlPr, &_baaa); _cbcg != nil {
					return _cbcg
				}
			default:
				_c.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u004e\u0061\u0072y\u0050\u0072 \u0025\u0076", _baaa.Name)
				if _agdbb := d.Skip(); _agdbb != nil {
					return _agdbb
				}
			}
		case _dd.EndElement:
			break _ead
		case _dd.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_SSub and its children, prefixing error messages with path
func (_acaaf *CT_SSub) ValidateWithPath(path string) error {
	if _acaaf.SSubPr != nil {
		if _beffa := _acaaf.SSubPr.ValidateWithPath(path + "\u002fS\u0053\u0075\u0062\u0050\u0072"); _beffa != nil {
			return _beffa
		}
	}
	if _beadc := _acaaf.E.ValidateWithPath(path + "\u002f\u0045"); _beadc != nil {
		return _beadc
	}
	if _gcec := _acaaf.Sub.ValidateWithPath(path + "\u002f\u0053\u0075\u0062"); _gcec != nil {
		return _gcec
	}
	return nil
}
func NewCT_MC() *CT_MC { _gbbe := &CT_MC{}; return _gbbe }

type CT_CtrlPr struct{}

func (_beef *CT_RPR) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
_fdgd:
	for {
		_facc, _edfc := d.Token()
		if _edfc != nil {
			return _edfc
		}
		switch _cdaa := _facc.(type) {
		case _dd.StartElement:
			switch _cdaa.Name {
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u006c\u0069\u0074"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u006c\u0069\u0074"}:
				_beef.Lit = NewCT_OnOff()
				if _cdgb := d.DecodeElement(_beef.Lit, &_cdaa); _cdgb != nil {
					return _cdgb
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u006e\u006f\u0072"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u006e\u006f\u0072"}:
				_beef.Choice = NewCT_RPRChoice()
				if _bgcd := d.DecodeElement(&_beef.Choice.Nor, &_cdaa); _bgcd != nil {
					return _bgcd
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0062\u0072\u006b"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0062\u0072\u006b"}:
				_beef.Brk = NewCT_ManualBreak()
				if _affbf := d.DecodeElement(_beef.Brk, &_cdaa); _affbf != nil {
					return _affbf
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0061\u006c\u006e"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0061\u006c\u006e"}:
				_beef.Aln = NewCT_OnOff()
				if _fdag := d.DecodeElement(_beef.Aln, &_cdaa); _fdag != nil {
					return _fdag
				}
			default:
				_c.Log.Debug("\u0073\u006b\u0069\u0070\u0070i\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0052\u0050\u0052\u0020\u0025\u0076", _cdaa.Name)
				if _bfbad := d.Skip(); _bfbad != nil {
					return _bfbad
				}
			}
		case _dd.EndElement:
			break _fdgd
		case _dd.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_YAlign and its children, prefixing error messages with path
func (_fcab *CT_YAlign) ValidateWithPath(path string) error {
	if _fcab.ValAttr == _g.ST_YAlignUnset {
		return _a.Errorf("\u0025\u0073\u002fV\u0061\u006c\u0041\u0074t\u0072\u0020\u0069\u0073\u0020\u0061\u0020m\u0061\u006e\u0064\u0061\u0074\u006f\u0072\u0079\u0020\u0066\u0069\u0065\u006c\u0064", path)
	}
	if _agbg := _fcab.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _agbg != nil {
		return _agbg
	}
	return nil
}

// Validate validates the CT_Rad and its children
func (_ebccg *CT_Rad) Validate() error {
	return _ebccg.ValidateWithPath("\u0043\u0054\u005f\u0052\u0061\u0064")
}

type CT_SSubSupPr struct {
	AlnScr *CT_OnOff
	CtrlPr *CT_CtrlPr
}
type CT_MathPr struct {
	MathFont  *CT_String
	BrkBin    *CT_BreakBin
	BrkBinSub *CT_BreakBinSub
	SmallFrac *CT_OnOff
	DispDef   *CT_OnOff
	LMargin   *CT_TwipsMeasure
	RMargin   *CT_TwipsMeasure
	DefJc     *CT_OMathJc
	PreSp     *CT_TwipsMeasure
	PostSp    *CT_TwipsMeasure
	InterSp   *CT_TwipsMeasure
	IntraSp   *CT_TwipsMeasure
	Choice    *CT_MathPrChoice
	IntLim    *CT_LimLoc
	NaryLim   *CT_LimLoc
}

func (_badca *CT_LimUppPr) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
_dggd:
	for {
		_affb, _cbea := d.Token()
		if _cbea != nil {
			return _cbea
		}
		switch _bab := _affb.(type) {
		case _dd.StartElement:
			switch _bab.Name {
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0063\u0074\u0072\u006c\u0050\u0072"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0063\u0074\u0072\u006c\u0050\u0072"}:
				_badca.CtrlPr = NewCT_CtrlPr()
				if _feab := d.DecodeElement(_badca.CtrlPr, &_bab); _feab != nil {
					return _feab
				}
			default:
				_c.Log.Debug("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u004c\u0069\u006d\u0055\u0070\u0070\u0050\u0072\u0020\u0025\u0076", _bab.Name)
				if _gfab := d.Skip(); _gfab != nil {
					return _gfab
				}
			}
		case _dd.EndElement:
			break _dggd
		case _dd.CharData:
		}
	}
	return nil
}
func (_egce *CT_MathPrChoice) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
_bbgg:
	for {
		_daeaa, _eded := d.Token()
		if _eded != nil {
			return _eded
		}
		switch _cadd := _daeaa.(type) {
		case _dd.StartElement:
			switch _cadd.Name {
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0077\u0072\u0061\u0070\u0049\u006e\u0064\u0065\u006e\u0074"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0077\u0072\u0061\u0070\u0049\u006e\u0064\u0065\u006e\u0074"}:
				_egce.WrapIndent = NewCT_TwipsMeasure()
				if _afege := d.DecodeElement(_egce.WrapIndent, &_cadd); _afege != nil {
					return _afege
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0077r\u0061\u0070\u0052\u0069\u0067\u0068t"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0077r\u0061\u0070\u0052\u0069\u0067\u0068t"}:
				_egce.WrapRight = NewCT_OnOff()
				if _bcab := d.DecodeElement(_egce.WrapRight, &_cadd); _bcab != nil {
					return _bcab
				}
			default:
				_c.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074e\u0064\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u004d\u0061\u0074h\u0050\u0072\u0043\u0068\u006f\u0069\u0063\u0065\u0020\u0025\u0076", _cadd.Name)
				if _egcc := d.Skip(); _egcc != nil {
					return _egcc
				}
			}
		case _dd.EndElement:
			break _bbgg
		case _dd.CharData:
		}
	}
	return nil
}
func (_ggegc *CT_MR) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	e.EncodeToken(start)
	_gae := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0065"}}
	for _, _bfeacf := range _ggegc.E {
		e.EncodeElement(_bfeacf, _gae)
	}
	e.EncodeToken(_dd.EndElement{Name: start.Name})
	return nil
}
func NewEG_ScriptStyle() *EG_ScriptStyle { _gfff := &EG_ScriptStyle{}; return _gfff }

// Validate validates the CT_D and its children
func (_cffa *CT_D) Validate() error { return _cffa.ValidateWithPath("\u0043\u0054\u005f\u0044") }
func (_bbda *CT_RadPr) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
_bgaa:
	for {
		_cecba, _ddeg := d.Token()
		if _ddeg != nil {
			return _ddeg
		}
		switch _gceg := _cecba.(type) {
		case _dd.StartElement:
			switch _gceg.Name {
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0064e\u0067\u0048\u0069\u0064\u0065"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0064e\u0067\u0048\u0069\u0064\u0065"}:
				_bbda.DegHide = NewCT_OnOff()
				if _gcddg := d.DecodeElement(_bbda.DegHide, &_gceg); _gcddg != nil {
					return _gcddg
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0063\u0074\u0072\u006c\u0050\u0072"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0063\u0074\u0072\u006c\u0050\u0072"}:
				_bbda.CtrlPr = NewCT_CtrlPr()
				if _aegg := d.DecodeElement(_bbda.CtrlPr, &_gceg); _aegg != nil {
					return _aegg
				}
			default:
				_c.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006eg\u0020\u0075\u006es\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0052\u0061\u0064\u0050\u0072\u0020\u0025\u0076", _gceg.Name)
				if _ddag := d.Skip(); _ddag != nil {
					return _ddag
				}
			}
		case _dd.EndElement:
			break _bgaa
		case _dd.CharData:
		}
	}
	return nil
}
func (_bdea *CT_UnSignedInteger) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
	for _, _ccab := range start.Attr {
		if _ccab.Name.Local == "\u0076\u0061\u006c" {
			_fffc, _gfdd := _f.ParseUint(_ccab.Value, 10, 32)
			if _gfdd != nil {
				return _gfdd
			}
			_bdea.ValAttr = uint32(_fffc)
			continue
		}
	}
	for {
		_abef, _gdae := d.Token()
		if _gdae != nil {
			return _a.Errorf("\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054_\u0055\u006e\u0053\u0069\u0067\u006e\u0065d\u0049\u006e\u0074\u0065\u0067\u0065\u0072\u003a\u0020\u0025\u0073", _gdae)
		}
		if _abdd, _gafc := _abef.(_dd.EndElement); _gafc && _abdd.Name == start.Name {
			break
		}
	}
	return nil
}
func NewCT_String() *CT_String { _bccf := &CT_String{}; return _bccf }

// ValidateWithPath validates the CT_AccPr and its children, prefixing error messages with path
func (_bbg *CT_AccPr) ValidateWithPath(path string) error {
	if _bbg.Chr != nil {
		if _bce := _bbg.Chr.ValidateWithPath(path + "\u002f\u0043\u0068\u0072"); _bce != nil {
			return _bce
		}
	}
	if _bbg.CtrlPr != nil {
		if _cd := _bbg.CtrlPr.ValidateWithPath(path + "\u002fC\u0074\u0072\u006c\u0050\u0072"); _cd != nil {
			return _cd
		}
	}
	return nil
}

type OMathPara struct{ CT_OMathPara }

func (_agf *CT_BreakBinSub) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
	for _, _afee := range start.Attr {
		if _afee.Name.Local == "\u0076\u0061\u006c" {
			_agf.ValAttr.UnmarshalXMLAttr(_afee)
			continue
		}
	}
	for {
		_fgd, _ecd := d.Token()
		if _ecd != nil {
			return _a.Errorf("\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fB\u0072\u0065\u0061\u006b\u0042\u0069\u006e\u0053\u0075\u0062:\u0020\u0025\u0073", _ecd)
		}
		if _bfe, _aae := _fgd.(_dd.EndElement); _aae && _bfe.Name == start.Name {
			break
		}
	}
	return nil
}

// Validate validates the CT_MR and its children
func (_aaca *CT_MR) Validate() error { return _aaca.ValidateWithPath("\u0043\u0054\u005fM\u0052") }

type CT_MCS struct{ Mc []*CT_MC }

func (_fcec *CT_Char) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	start.Attr = append(start.Attr, _dd.Attr{Name: _dd.Name{Local: "\u006d\u003a\u0076a\u006c"}, Value: _a.Sprintf("\u0025\u0076", _fcec.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_dd.EndElement{Name: start.Name})
	return nil
}
func (_dadac *EG_OMathElements) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
_gcea:
	for {
		_aagb, _ddgdb := d.Token()
		if _ddgdb != nil {
			return _ddgdb
		}
		switch _edcd := _aagb.(type) {
		case _dd.StartElement:
			switch _edcd.Name {
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0061\u0063\u0063"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0061\u0063\u0063"}:
				_eeeeg := NewEG_OMathMathElements()
				_eeeeg.Acc = NewCT_Acc()
				if _efcda := d.DecodeElement(_eeeeg.Acc, &_edcd); _efcda != nil {
					return _efcda
				}
				_dadac.EG_OMathMathElements = append(_dadac.EG_OMathMathElements, _eeeeg)
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0062\u0061\u0072"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0062\u0061\u0072"}:
				_bgcef := NewEG_OMathMathElements()
				_bgcef.Bar = NewCT_Bar()
				if _dfdb := d.DecodeElement(_bgcef.Bar, &_edcd); _dfdb != nil {
					return _dfdb
				}
				_dadac.EG_OMathMathElements = append(_dadac.EG_OMathMathElements, _bgcef)
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0062\u006f\u0078"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0062\u006f\u0078"}:
				_bbag := NewEG_OMathMathElements()
				_bbag.Box = NewCT_Box()
				if _edaa := d.DecodeElement(_bbag.Box, &_edcd); _edaa != nil {
					return _edaa
				}
				_dadac.EG_OMathMathElements = append(_dadac.EG_OMathMathElements, _bbag)
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0062o\u0072\u0064\u0065\u0072\u0042\u006fx"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0062o\u0072\u0064\u0065\u0072\u0042\u006fx"}:
				_beced := NewEG_OMathMathElements()
				_beced.BorderBox = NewCT_BorderBox()
				if _aacb := d.DecodeElement(_beced.BorderBox, &_edcd); _aacb != nil {
					return _aacb
				}
				_dadac.EG_OMathMathElements = append(_dadac.EG_OMathMathElements, _beced)
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0064"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0064"}:
				_edgd := NewEG_OMathMathElements()
				_edgd.D = NewCT_D()
				if _dgafg := d.DecodeElement(_edgd.D, &_edcd); _dgafg != nil {
					return _dgafg
				}
				_dadac.EG_OMathMathElements = append(_dadac.EG_OMathMathElements, _edgd)
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0065\u0071\u0041r\u0072"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0065\u0071\u0041r\u0072"}:
				_acdeg := NewEG_OMathMathElements()
				_acdeg.EqArr = NewCT_EqArr()
				if _eabg := d.DecodeElement(_acdeg.EqArr, &_edcd); _eabg != nil {
					return _eabg
				}
				_dadac.EG_OMathMathElements = append(_dadac.EG_OMathMathElements, _acdeg)
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0066"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0066"}:
				_bcbed := NewEG_OMathMathElements()
				_bcbed.F = NewCT_F()
				if _cbgbc := d.DecodeElement(_bcbed.F, &_edcd); _cbgbc != nil {
					return _cbgbc
				}
				_dadac.EG_OMathMathElements = append(_dadac.EG_OMathMathElements, _bcbed)
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0066\u0075\u006e\u0063"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0066\u0075\u006e\u0063"}:
				_dbdd := NewEG_OMathMathElements()
				_dbdd.Func = NewCT_Func()
				if _eefbf := d.DecodeElement(_dbdd.Func, &_edcd); _eefbf != nil {
					return _eefbf
				}
				_dadac.EG_OMathMathElements = append(_dadac.EG_OMathMathElements, _dbdd)
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0067\u0072\u006f\u0075\u0070\u0043\u0068\u0072"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0067\u0072\u006f\u0075\u0070\u0043\u0068\u0072"}:
				_ggfc := NewEG_OMathMathElements()
				_ggfc.GroupChr = NewCT_GroupChr()
				if _efgcc := d.DecodeElement(_ggfc.GroupChr, &_edcd); _efgcc != nil {
					return _efgcc
				}
				_dadac.EG_OMathMathElements = append(_dadac.EG_OMathMathElements, _ggfc)
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u006c\u0069\u006d\u004c\u006f\u0077"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u006c\u0069\u006d\u004c\u006f\u0077"}:
				_bgeab := NewEG_OMathMathElements()
				_bgeab.LimLow = NewCT_LimLow()
				if _gebg := d.DecodeElement(_bgeab.LimLow, &_edcd); _gebg != nil {
					return _gebg
				}
				_dadac.EG_OMathMathElements = append(_dadac.EG_OMathMathElements, _bgeab)
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u006c\u0069\u006d\u0055\u0070\u0070"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u006c\u0069\u006d\u0055\u0070\u0070"}:
				_bdfd := NewEG_OMathMathElements()
				_bdfd.LimUpp = NewCT_LimUpp()
				if _eebd := d.DecodeElement(_bdfd.LimUpp, &_edcd); _eebd != nil {
					return _eebd
				}
				_dadac.EG_OMathMathElements = append(_dadac.EG_OMathMathElements, _bdfd)
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u006d"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u006d"}:
				_cdbe := NewEG_OMathMathElements()
				_cdbe.M = NewCT_M()
				if _bcbd := d.DecodeElement(_cdbe.M, &_edcd); _bcbd != nil {
					return _bcbd
				}
				_dadac.EG_OMathMathElements = append(_dadac.EG_OMathMathElements, _cdbe)
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u006e\u0061\u0072\u0079"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u006e\u0061\u0072\u0079"}:
				_gggb := NewEG_OMathMathElements()
				_gggb.Nary = NewCT_Nary()
				if _ebac := d.DecodeElement(_gggb.Nary, &_edcd); _ebac != nil {
					return _ebac
				}
				_dadac.EG_OMathMathElements = append(_dadac.EG_OMathMathElements, _gggb)
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0070\u0068\u0061n\u0074"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0070\u0068\u0061n\u0074"}:
				_gdeec := NewEG_OMathMathElements()
				_gdeec.Phant = NewCT_Phant()
				if _efba := d.DecodeElement(_gdeec.Phant, &_edcd); _efba != nil {
					return _efba
				}
				_dadac.EG_OMathMathElements = append(_dadac.EG_OMathMathElements, _gdeec)
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0072\u0061\u0064"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0072\u0061\u0064"}:
				_aeaa := NewEG_OMathMathElements()
				_aeaa.Rad = NewCT_Rad()
				if _cddb := d.DecodeElement(_aeaa.Rad, &_edcd); _cddb != nil {
					return _cddb
				}
				_dadac.EG_OMathMathElements = append(_dadac.EG_OMathMathElements, _aeaa)
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0073\u0050\u0072\u0065"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0073\u0050\u0072\u0065"}:
				_dedf := NewEG_OMathMathElements()
				_dedf.SPre = NewCT_SPre()
				if _gbaa := d.DecodeElement(_dedf.SPre, &_edcd); _gbaa != nil {
					return _gbaa
				}
				_dadac.EG_OMathMathElements = append(_dadac.EG_OMathMathElements, _dedf)
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0073\u0053\u0075\u0062"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0073\u0053\u0075\u0062"}:
				_deec := NewEG_OMathMathElements()
				_deec.SSub = NewCT_SSub()
				if _edda := d.DecodeElement(_deec.SSub, &_edcd); _edda != nil {
					return _edda
				}
				_dadac.EG_OMathMathElements = append(_dadac.EG_OMathMathElements, _deec)
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0073S\u0075\u0062\u0053\u0075\u0070"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0073S\u0075\u0062\u0053\u0075\u0070"}:
				_daage := NewEG_OMathMathElements()
				_daage.SSubSup = NewCT_SSubSup()
				if _fefd := d.DecodeElement(_daage.SSubSup, &_edcd); _fefd != nil {
					return _fefd
				}
				_dadac.EG_OMathMathElements = append(_dadac.EG_OMathMathElements, _daage)
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0073\u0053\u0075\u0070"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0073\u0053\u0075\u0070"}:
				_ccge := NewEG_OMathMathElements()
				_ccge.SSup = NewCT_SSup()
				if _cfec := d.DecodeElement(_ccge.SSup, &_edcd); _cfec != nil {
					return _cfec
				}
				_dadac.EG_OMathMathElements = append(_dadac.EG_OMathMathElements, _ccge)
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0072"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0072"}:
				_beeff := NewEG_OMathMathElements()
				_beeff.R = NewCT_R()
				if _ggeba := d.DecodeElement(_beeff.R, &_edcd); _ggeba != nil {
					return _ggeba
				}
				_dadac.EG_OMathMathElements = append(_dadac.EG_OMathMathElements, _beeff)
			default:
				_c.Log.Debug("\u0073\u006b\u0069\u0070\u0070i\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0045\u0047\u005f\u004f\u004d\u0061\u0074\u0068\u0045\u006c\u0065\u006d\u0065\u006e\u0074\u0073\u0020\u0025v", _edcd.Name)
				if _gbaaf := d.Skip(); _gbaaf != nil {
					return _gbaaf
				}
			}
		case _dd.EndElement:
			break _gcea
		case _dd.CharData:
		}
	}
	return nil
}
func (_cfgde ST_FType) Validate() error { return _cfgde.ValidateWithPath("") }

type ST_LimLoc byte

// ValidateWithPath validates the CT_BorderBox and its children, prefixing error messages with path
func (_da *CT_BorderBox) ValidateWithPath(path string) error {
	if _da.BorderBoxPr != nil {
		if _caa := _da.BorderBoxPr.ValidateWithPath(path + "\u002f\u0042\u006fr\u0064\u0065\u0072\u0042\u006f\u0078\u0050\u0072"); _caa != nil {
			return _caa
		}
	}
	if _ce := _da.E.ValidateWithPath(path + "\u002f\u0045"); _ce != nil {
		return _ce
	}
	return nil
}
func (_gcbd *CT_M) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
_eaa:
	for {
		_bed, _gbcf := d.Token()
		if _gbcf != nil {
			return _gbcf
		}
		switch _cfdg := _bed.(type) {
		case _dd.StartElement:
			switch _cfdg.Name {
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u006d\u0050\u0072"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u006d\u0050\u0072"}:
				_gcbd.MPr = NewCT_MPr()
				if _ebdc := d.DecodeElement(_gcbd.MPr, &_cfdg); _ebdc != nil {
					return _ebdc
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u006d\u0072"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u006d\u0072"}:
				_aeab := NewCT_MR()
				if _bgdga := d.DecodeElement(_aeab, &_cfdg); _bgdga != nil {
					return _bgdga
				}
				_gcbd.Mr = append(_gcbd.Mr, _aeab)
			default:
				_c.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054_\u004d\u0020\u0025\u0076", _cfdg.Name)
				if _bebf := d.Skip(); _bebf != nil {
					return _bebf
				}
			}
		case _dd.EndElement:
			break _eaa
		case _dd.CharData:
		}
	}
	return nil
}
func (_edcgd ST_Style) MarshalXMLAttr(name _dd.Name) (_dd.Attr, error) {
	_gcga := _dd.Attr{}
	_gcga.Name = name
	switch _edcgd {
	case ST_StyleUnset:
		_gcga.Value = ""
	case ST_StyleP:
		_gcga.Value = "\u0070"
	case ST_StyleB:
		_gcga.Value = "\u0062"
	case ST_StyleI:
		_gcga.Value = "\u0069"
	case ST_StyleBi:
		_gcga.Value = "\u0062\u0069"
	}
	return _gcga, nil
}
func (_gc *CT_Acc) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	e.EncodeToken(start)
	if _gc.AccPr != nil {
		_e := _dd.StartElement{Name: _dd.Name{Local: "\u006d:\u0061\u0063\u0063\u0050\u0072"}}
		e.EncodeElement(_gc.AccPr, _e)
	}
	_dg := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0065"}}
	e.EncodeElement(_gc.E, _dg)
	e.EncodeToken(_dd.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_OnOff and its children
func (_daggg *CT_OnOff) Validate() error {
	return _daggg.ValidateWithPath("\u0043\u0054\u005f\u004f\u006e\u004f\u0066\u0066")
}

type CT_SSubPr struct{ CtrlPr *CT_CtrlPr }

func (_gffe *CT_PhantPr) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
_dfc:
	for {
		_dcbc, _aaddc := d.Token()
		if _aaddc != nil {
			return _aaddc
		}
		switch _egb := _dcbc.(type) {
		case _dd.StartElement:
			switch _egb.Name {
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0073\u0068\u006f\u0077"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0073\u0068\u006f\u0077"}:
				_gffe.Show = NewCT_OnOff()
				if _eefa := d.DecodeElement(_gffe.Show, &_egb); _eefa != nil {
					return _eefa
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u007ae\u0072\u006f\u0057\u0069\u0064"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u007ae\u0072\u006f\u0057\u0069\u0064"}:
				_gffe.ZeroWid = NewCT_OnOff()
				if _cfga := d.DecodeElement(_gffe.ZeroWid, &_egb); _cfga != nil {
					return _cfga
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u007ae\u0072\u006f\u0041\u0073\u0063"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u007ae\u0072\u006f\u0041\u0073\u0063"}:
				_gffe.ZeroAsc = NewCT_OnOff()
				if _gbef := d.DecodeElement(_gffe.ZeroAsc, &_egb); _gbef != nil {
					return _gbef
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u007a\u0065\u0072\u006f\u0044\u0065\u0073\u0063"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u007a\u0065\u0072\u006f\u0044\u0065\u0073\u0063"}:
				_gffe.ZeroDesc = NewCT_OnOff()
				if _bdfc := d.DecodeElement(_gffe.ZeroDesc, &_egb); _bdfc != nil {
					return _bdfc
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0074\u0072\u0061\u006e\u0073\u0070"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0074\u0072\u0061\u006e\u0073\u0070"}:
				_gffe.Transp = NewCT_OnOff()
				if _cebf := d.DecodeElement(_gffe.Transp, &_egb); _cebf != nil {
					return _cebf
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0063\u0074\u0072\u006c\u0050\u0072"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0063\u0074\u0072\u006c\u0050\u0072"}:
				_gffe.CtrlPr = NewCT_CtrlPr()
				if _abab := d.DecodeElement(_gffe.CtrlPr, &_egb); _abab != nil {
					return _abab
				}
			default:
				_c.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006ce\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005fP\u0068\u0061\u006e\u0074\u0050\u0072\u0020\u0025\u0076", _egb.Name)
				if _egee := d.Skip(); _egee != nil {
					return _egee
				}
			}
		case _dd.EndElement:
			break _dfc
		case _dd.CharData:
		}
	}
	return nil
}
func (_fecb ST_Style) ValidateWithPath(path string) error {
	switch _fecb {
	case 0, 1, 2, 3, 4:
	default:
		return _a.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_fecb))
	}
	return nil
}

// ValidateWithPath validates the CT_FuncPr and its children, prefixing error messages with path
func (_cbe *CT_FuncPr) ValidateWithPath(path string) error {
	if _cbe.CtrlPr != nil {
		if _ggeg := _cbe.CtrlPr.ValidateWithPath(path + "\u002fC\u0074\u0072\u006c\u0050\u0072"); _ggeg != nil {
			return _ggeg
		}
	}
	return nil
}
func (_edb *CT_F) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
	_edb.Num = NewCT_OMathArg()
	_edb.Den = NewCT_OMathArg()
_gee:
	for {
		_gfec, _bgfe := d.Token()
		if _bgfe != nil {
			return _bgfe
		}
		switch _gfbd := _gfec.(type) {
		case _dd.StartElement:
			switch _gfbd.Name {
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0066\u0050\u0072"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0066\u0050\u0072"}:
				_edb.FPr = NewCT_FPr()
				if _bdfb := d.DecodeElement(_edb.FPr, &_gfbd); _bdfb != nil {
					return _bdfb
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u006e\u0075\u006d"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u006e\u0075\u006d"}:
				if _fbee := d.DecodeElement(_edb.Num, &_gfbd); _fbee != nil {
					return _fbee
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0064\u0065\u006e"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0064\u0065\u006e"}:
				if _defe := d.DecodeElement(_edb.Den, &_gfbd); _defe != nil {
					return _defe
				}
			default:
				_c.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054_\u0046\u0020\u0025\u0076", _gfbd.Name)
				if _acac := d.Skip(); _acac != nil {
					return _acac
				}
			}
		case _dd.EndElement:
			break _gee
		case _dd.CharData:
		}
	}
	return nil
}
func (_fcaa *CT_MC) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
_ecca:
	for {
		_gdga, _dabg := d.Token()
		if _dabg != nil {
			return _dabg
		}
		switch _fbc := _gdga.(type) {
		case _dd.StartElement:
			switch _fbc.Name {
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u006d\u0063\u0050\u0072"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u006d\u0063\u0050\u0072"}:
				_fcaa.McPr = NewCT_MCPr()
				if _afdf := d.DecodeElement(_fcaa.McPr, &_fbc); _afdf != nil {
					return _afdf
				}
			default:
				_c.Log.Debug("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006fn \u0043\u0054\u005fM\u0043 \u0025\u0076", _fbc.Name)
				if _bde := d.Skip(); _bde != nil {
					return _bde
				}
			}
		case _dd.EndElement:
			break _ecca
		case _dd.CharData:
		}
	}
	return nil
}
func NewCT_EqArrPr() *CT_EqArrPr { _eag := &CT_EqArrPr{}; return _eag }

// ValidateWithPath validates the CT_OnOff and its children, prefixing error messages with path
func (_fdg *CT_OnOff) ValidateWithPath(path string) error {
	if _fdg.ValAttr != nil {
		if _eeeg := _fdg.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _eeeg != nil {
			return _eeeg
		}
	}
	return nil
}
func (_eecb ST_TopBot) String() string {
	switch _eecb {
	case 0:
		return ""
	case 1:
		return "\u0074\u006f\u0070"
	case 2:
		return "\u0062\u006f\u0074"
	}
	return ""
}
func (_gaa *CT_DPr) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	e.EncodeToken(start)
	if _gaa.BegChr != nil {
		_fdf := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0062\u0065\u0067\u0043\u0068\u0072"}}
		e.EncodeElement(_gaa.BegChr, _fdf)
	}
	if _gaa.SepChr != nil {
		_fbff := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0073\u0065\u0070\u0043\u0068\u0072"}}
		e.EncodeElement(_gaa.SepChr, _fbff)
	}
	if _gaa.EndChr != nil {
		_bea := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0065\u006e\u0064\u0043\u0068\u0072"}}
		e.EncodeElement(_gaa.EndChr, _bea)
	}
	if _gaa.Grow != nil {
		_deg := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0067\u0072\u006f\u0077"}}
		e.EncodeElement(_gaa.Grow, _deg)
	}
	if _gaa.Shp != nil {
		_dca := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0073h\u0070"}}
		e.EncodeElement(_gaa.Shp, _dca)
	}
	if _gaa.CtrlPr != nil {
		_bcb := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0063\u0074\u0072\u006c\u0050\u0072"}}
		e.EncodeElement(_gaa.CtrlPr, _bcb)
	}
	e.EncodeToken(_dd.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_RPRChoice and its children
func (_fgdc *CT_RPRChoice) Validate() error {
	return _fgdc.ValidateWithPath("\u0043\u0054\u005fR\u0050\u0052\u0043\u0068\u006f\u0069\u0063\u0065")
}

// ValidateWithPath validates the CT_SSubSup and its children, prefixing error messages with path
func (_bdge *CT_SSubSup) ValidateWithPath(path string) error {
	if _bdge.SSubSupPr != nil {
		if _edea := _bdge.SSubSupPr.ValidateWithPath(path + "\u002f\u0053\u0053\u0075\u0062\u0053\u0075\u0070\u0050\u0072"); _edea != nil {
			return _edea
		}
	}
	if _adac := _bdge.E.ValidateWithPath(path + "\u002f\u0045"); _adac != nil {
		return _adac
	}
	if _bgeg := _bdge.Sub.ValidateWithPath(path + "\u002f\u0053\u0075\u0062"); _bgeg != nil {
		return _bgeg
	}
	if _befb := _bdge.Sup.ValidateWithPath(path + "\u002f\u0053\u0075\u0070"); _befb != nil {
		return _befb
	}
	return nil
}
func (_fcbg ST_BreakBinSub) ValidateWithPath(path string) error {
	switch _fcbg {
	case 0, 1, 2, 3:
	default:
		return _a.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_fcbg))
	}
	return nil
}
func NewCT_SSub() *CT_SSub {
	_gdfb := &CT_SSub{}
	_gdfb.E = NewCT_OMathArg()
	_gdfb.Sub = NewCT_OMathArg()
	return _gdfb
}
func (_de *CT_AccPr) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
_bc:
	for {
		_cba, _aa := d.Token()
		if _aa != nil {
			return _aa
		}
		switch _db := _cba.(type) {
		case _dd.StartElement:
			switch _db.Name {
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0063\u0068\u0072"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0063\u0068\u0072"}:
				_de.Chr = NewCT_Char()
				if _cbf := d.DecodeElement(_de.Chr, &_db); _cbf != nil {
					return _cbf
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0063\u0074\u0072\u006c\u0050\u0072"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0063\u0074\u0072\u006c\u0050\u0072"}:
				_de.CtrlPr = NewCT_CtrlPr()
				if _ca := d.DecodeElement(_de.CtrlPr, &_db); _ca != nil {
					return _ca
				}
			default:
				_c.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006eg\u0020\u0075\u006es\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0041\u0063\u0063\u0050\u0072\u0020\u0025\u0076", _db.Name)
				if _gg := d.Skip(); _gg != nil {
					return _gg
				}
			}
		case _dd.EndElement:
			break _bc
		case _dd.CharData:
		}
	}
	return nil
}
func (_bcbg *CT_Text) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	if _bcbg.SpaceAttr != nil {
		start.Attr = append(start.Attr, _dd.Attr{Name: _dd.Name{Local: "\u0078m\u006c\u003a\u0073\u0070\u0061\u0063e"}, Value: _a.Sprintf("\u0025\u0076", *_bcbg.SpaceAttr)})
	}
	e.EncodeElement(_bcbg.Content, start)
	e.EncodeToken(_dd.EndElement{Name: start.Name})
	return nil
}

type CT_Phant struct {
	PhantPr *CT_PhantPr
	E       *CT_OMathArg
}

func (_cbc *CT_F) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	e.EncodeToken(start)
	if _cbc.FPr != nil {
		_cgd := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0066P\u0072"}}
		e.EncodeElement(_cbc.FPr, _cgd)
	}
	_eba := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u006eu\u006d"}}
	e.EncodeElement(_cbc.Num, _eba)
	_abcb := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0064e\u006e"}}
	e.EncodeElement(_cbc.Den, _abcb)
	e.EncodeToken(_dd.EndElement{Name: start.Name})
	return nil
}

type CT_PhantPr struct {
	Show     *CT_OnOff
	ZeroWid  *CT_OnOff
	ZeroAsc  *CT_OnOff
	ZeroDesc *CT_OnOff
	Transp   *CT_OnOff
	CtrlPr   *CT_CtrlPr
}

// Validate validates the CT_FPr and its children
func (_fbea *CT_FPr) Validate() error {
	return _fbea.ValidateWithPath("\u0043\u0054\u005f\u0046\u0050\u0072")
}
func (_dbd *CT_Rad) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	e.EncodeToken(start)
	if _dbd.RadPr != nil {
		_addf := _dd.StartElement{Name: _dd.Name{Local: "\u006d:\u0072\u0061\u0064\u0050\u0072"}}
		e.EncodeElement(_dbd.RadPr, _addf)
	}
	_eeab := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0064e\u0067"}}
	e.EncodeElement(_dbd.Deg, _eeab)
	_gfc := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0065"}}
	e.EncodeElement(_dbd.E, _gfc)
	e.EncodeToken(_dd.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_RChoice and its children
func (_faa *CT_RChoice) Validate() error {
	return _faa.ValidateWithPath("\u0043\u0054\u005f\u0052\u0043\u0068\u006f\u0069\u0063\u0065")
}

// Validate validates the CT_OMathParaPr and its children
func (_bgbfe *CT_OMathParaPr) Validate() error {
	return _bgbfe.ValidateWithPath("\u0043\u0054\u005f\u004f\u004d\u0061\u0074\u0068\u0050a\u0072\u0061\u0050\u0072")
}

// ValidateWithPath validates the CT_SPrePr and its children, prefixing error messages with path
func (_bgbb *CT_SPrePr) ValidateWithPath(path string) error {
	if _bgbb.CtrlPr != nil {
		if _dcfg := _bgbb.CtrlPr.ValidateWithPath(path + "\u002fC\u0074\u0072\u006c\u0050\u0072"); _dcfg != nil {
			return _dcfg
		}
	}
	return nil
}

const (
	ST_FTypeUnset ST_FType = 0
	ST_FTypeBar   ST_FType = 1
	ST_FTypeSkw   ST_FType = 2
	ST_FTypeLin   ST_FType = 3
	ST_FTypeNoBar ST_FType = 4
)

func (_fdb *CT_LimUppPr) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	e.EncodeToken(start)
	if _fdb.CtrlPr != nil {
		_abaa := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0063\u0074\u0072\u006c\u0050\u0072"}}
		e.EncodeElement(_fdb.CtrlPr, _abaa)
	}
	e.EncodeToken(_dd.EndElement{Name: start.Name})
	return nil
}

type CT_BoxPr struct {
	OpEmu   *CT_OnOff
	NoBreak *CT_OnOff
	Diff    *CT_OnOff
	Brk     *CT_ManualBreak
	Aln     *CT_OnOff
	CtrlPr  *CT_CtrlPr
}

func (_cbdc *CT_Integer255) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
	_cbdc.ValAttr = 1
	for _, _dfgb := range start.Attr {
		if _dfgb.Name.Local == "\u0076\u0061\u006c" {
			_adef, _cde := _f.ParseInt(_dfgb.Value, 10, 64)
			if _cde != nil {
				return _cde
			}
			_cbdc.ValAttr = _adef
			continue
		}
	}
	for {
		_fbef, _gagc := d.Token()
		if _gagc != nil {
			return _a.Errorf("\u0070a\u0072\u0073\u0069\u006eg\u0020\u0043\u0054\u005f\u0049n\u0074e\u0067e\u0072\u0032\u0035\u0035\u003a\u0020\u0025s", _gagc)
		}
		if _gfg, _edf := _fbef.(_dd.EndElement); _edf && _gfg.Name == start.Name {
			break
		}
	}
	return nil
}
func (_adeb *CT_Script) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
	for _, _gffb := range start.Attr {
		if _gffb.Name.Local == "\u0076\u0061\u006c" {
			_adeb.ValAttr.UnmarshalXMLAttr(_gffb)
			continue
		}
	}
	for {
		_bcbea, _afcd := d.Token()
		if _afcd != nil {
			return _a.Errorf("p\u0061\u0072\u0073\u0069ng\u0020C\u0054\u005f\u0053\u0063\u0072i\u0070\u0074\u003a\u0020\u0025\u0073", _afcd)
		}
		if _efad, _aabb := _bcbea.(_dd.EndElement); _aabb && _efad.Name == start.Name {
			break
		}
	}
	return nil
}

// Validate validates the CT_BorderBox and its children
func (_fc *CT_BorderBox) Validate() error {
	return _fc.ValidateWithPath("\u0043\u0054\u005fB\u006f\u0072\u0064\u0065\u0072\u0042\u006f\u0078")
}

// ValidateWithPath validates the CT_TwipsMeasure and its children, prefixing error messages with path
func (_bbded *CT_TwipsMeasure) ValidateWithPath(path string) error {
	if _efff := _bbded.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _efff != nil {
		return _efff
	}
	return nil
}
func NewCT_SSubPr() *CT_SSubPr { _agad := &CT_SSubPr{}; return _agad }
func (_dcdb *CT_OMathArgPr) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	e.EncodeToken(start)
	if _dcdb.ArgSz != nil {
		_afgd := _dd.StartElement{Name: _dd.Name{Local: "\u006d:\u0061\u0072\u0067\u0053\u007a"}}
		e.EncodeElement(_dcdb.ArgSz, _afgd)
	}
	e.EncodeToken(_dd.EndElement{Name: start.Name})
	return nil
}
func (_ggfbg *MathPr) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	start.Attr = append(start.Attr, _dd.Attr{Name: _dd.Name{Local: "\u0078\u006d\u006cn\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068"})
	start.Attr = append(start.Attr, _dd.Attr{Name: _dd.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u006d"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068"})
	start.Attr = append(start.Attr, _dd.Attr{Name: _dd.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a/\u002f\u0073\u0063\u0068\u0065m\u0061s\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067/\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002f\u0073\u0068\u0061\u0072e\u0064\u0054\u0079\u0070\u0065\u0073"})
	start.Attr = append(start.Attr, _dd.Attr{Name: _dd.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0077"}, Value: "ht\u0074\u0070:\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063\u0065s\u0073i\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u00306\u002fm\u0061\u0069n"})
	start.Attr = append(start.Attr, _dd.Attr{Name: _dd.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"}, Value: "\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"})
	start.Name.Local = "\u006d\u003a\u006d\u0061\u0074\u0068\u0050\u0072"
	return _ggfbg.CT_MathPr.MarshalXML(e, start)
}

// Validate validates the CT_SSubSupPr and its children
func (_gaagf *CT_SSubSupPr) Validate() error {
	return _gaagf.ValidateWithPath("\u0043\u0054\u005fS\u0053\u0075\u0062\u0053\u0075\u0070\u0050\u0072")
}

// Validate validates the CT_MPr and its children
func (_dddg *CT_MPr) Validate() error {
	return _dddg.ValidateWithPath("\u0043\u0054\u005f\u004d\u0050\u0072")
}
func NewCT_OMathArgPr() *CT_OMathArgPr { _gagfa := &CT_OMathArgPr{}; return _gagfa }
func (_bgbf *CT_BreakBinSub) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	if _bgbf.ValAttr != ST_BreakBinSubUnset {
		_ebdd, _aeea := _bgbf.ValAttr.MarshalXMLAttr(_dd.Name{Local: "\u006d\u003a\u0076a\u006c"})
		if _aeea != nil {
			return _aeea
		}
		start.Attr = append(start.Attr, _ebdd)
	}
	e.EncodeToken(start)
	e.EncodeToken(_dd.EndElement{Name: start.Name})
	return nil
}
func (_eacce ST_Shp) MarshalXMLAttr(name _dd.Name) (_dd.Attr, error) {
	_cfbg := _dd.Attr{}
	_cfbg.Name = name
	switch _eacce {
	case ST_ShpUnset:
		_cfbg.Value = ""
	case ST_ShpCentered:
		_cfbg.Value = "\u0063\u0065\u006e\u0074\u0065\u0072\u0065\u0064"
	case ST_ShpMatch:
		_cfbg.Value = "\u006d\u0061\u0074c\u0068"
	}
	return _cfbg, nil
}

type CT_MC struct{ McPr *CT_MCPr }

// ValidateWithPath validates the CT_DPr and its children, prefixing error messages with path
func (_acf *CT_DPr) ValidateWithPath(path string) error {
	if _acf.BegChr != nil {
		if _ecf := _acf.BegChr.ValidateWithPath(path + "\u002fB\u0065\u0067\u0043\u0068\u0072"); _ecf != nil {
			return _ecf
		}
	}
	if _acf.SepChr != nil {
		if _dcd := _acf.SepChr.ValidateWithPath(path + "\u002fS\u0065\u0070\u0043\u0068\u0072"); _dcd != nil {
			return _dcd
		}
	}
	if _acf.EndChr != nil {
		if _aca := _acf.EndChr.ValidateWithPath(path + "\u002fE\u006e\u0064\u0043\u0068\u0072"); _aca != nil {
			return _aca
		}
	}
	if _acf.Grow != nil {
		if _cgg := _acf.Grow.ValidateWithPath(path + "\u002f\u0047\u0072o\u0077"); _cgg != nil {
			return _cgg
		}
	}
	if _acf.Shp != nil {
		if _agg := _acf.Shp.ValidateWithPath(path + "\u002f\u0053\u0068\u0070"); _agg != nil {
			return _agg
		}
	}
	if _acf.CtrlPr != nil {
		if _aggd := _acf.CtrlPr.ValidateWithPath(path + "\u002fC\u0074\u0072\u006c\u0050\u0072"); _aggd != nil {
			return _aggd
		}
	}
	return nil
}
func (_fad *CT_Box) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	e.EncodeToken(start)
	if _fad.BoxPr != nil {
		_cdgd := _dd.StartElement{Name: _dd.Name{Local: "\u006d:\u0062\u006f\u0078\u0050\u0072"}}
		e.EncodeElement(_fad.BoxPr, _cdgd)
	}
	_gdc := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0065"}}
	e.EncodeElement(_fad.E, _gdc)
	e.EncodeToken(_dd.EndElement{Name: start.Name})
	return nil
}
func NewOMathPara() *OMathPara {
	_bdead := &OMathPara{}
	_bdead.CT_OMathPara = *NewCT_OMathPara()
	return _bdead
}
func (_gaca *CT_Shp) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	_bgec, _dfbg := _gaca.ValAttr.MarshalXMLAttr(_dd.Name{Local: "\u006d\u003a\u0076a\u006c"})
	if _dfbg != nil {
		return _dfbg
	}
	start.Attr = append(start.Attr, _bgec)
	e.EncodeToken(start)
	e.EncodeToken(_dd.EndElement{Name: start.Name})
	return nil
}
func (_ebed *CT_SSupPr) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
_cdeca:
	for {
		_gef, _aggb := d.Token()
		if _aggb != nil {
			return _aggb
		}
		switch _ceec := _gef.(type) {
		case _dd.StartElement:
			switch _ceec.Name {
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0063\u0074\u0072\u006c\u0050\u0072"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0063\u0074\u0072\u006c\u0050\u0072"}:
				_ebed.CtrlPr = NewCT_CtrlPr()
				if _abgf := d.DecodeElement(_ebed.CtrlPr, &_ceec); _abgf != nil {
					return _abgf
				}
			default:
				_c.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u0053\u0053\u0075p\u0050\u0072 \u0025\u0076", _ceec.Name)
				if _bdbda := d.Skip(); _bdbda != nil {
					return _bdbda
				}
			}
		case _dd.EndElement:
			break _cdeca
		case _dd.CharData:
		}
	}
	return nil
}

// Validate validates the EG_OMathMathElements and its children
func (_dgce *EG_OMathMathElements) Validate() error {
	return _dgce.ValidateWithPath("E\u0047_\u004f\u004d\u0061\u0074\u0068\u004d\u0061\u0074h\u0045\u006c\u0065\u006den\u0074\u0073")
}

// Validate validates the CT_Bar and its children
func (_ac *CT_Bar) Validate() error {
	return _ac.ValidateWithPath("\u0043\u0054\u005f\u0042\u0061\u0072")
}
func (_aaab *CT_Integer255) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	start.Attr = append(start.Attr, _dd.Attr{Name: _dd.Name{Local: "\u006d\u003a\u0076a\u006c"}, Value: _a.Sprintf("\u0025\u0076", _aaab.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_dd.EndElement{Name: start.Name})
	return nil
}

type CT_Nary struct {
	NaryPr *CT_NaryPr
	Sub    *CT_OMathArg
	Sup    *CT_OMathArg
	E      *CT_OMathArg
}

func (_edgg *CT_TwipsMeasure) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
	for _, _eeed := range start.Attr {
		if _eeed.Name.Local == "\u0076\u0061\u006c" {
			_cbgf, _acfcca := ParseUnionST_TwipsMeasure(_eeed.Value)
			if _acfcca != nil {
				return _acfcca
			}
			_edgg.ValAttr = _cbgf
			continue
		}
	}
	for {
		_abee, _cafb := d.Token()
		if _cafb != nil {
			return _a.Errorf("p\u0061\u0072\u0073\u0069\u006e\u0067 \u0043\u0054\u005f\u0054\u0077\u0069\u0070\u0073\u004de\u0061\u0073\u0075r\u0065:\u0020\u0025\u0073", _cafb)
		}
		if _edag, _fgae := _abee.(_dd.EndElement); _fgae && _edag.Name == start.Name {
			break
		}
	}
	return nil
}
func (_befg *CT_FuncPr) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	e.EncodeToken(start)
	if _befg.CtrlPr != nil {
		_bgcg := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0063\u0074\u0072\u006c\u0050\u0072"}}
		e.EncodeElement(_befg.CtrlPr, _bgcg)
	}
	e.EncodeToken(_dd.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_LimLow and its children
func (_bba *CT_LimLow) Validate() error {
	return _bba.ValidateWithPath("\u0043T\u005f\u004c\u0069\u006d\u004c\u006fw")
}
func (_adgg *CT_OMath) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	e.EncodeToken(start)
	if _adgg.EG_OMathMathElements != nil {
		for _, _afg := range _adgg.EG_OMathMathElements {
			_afg.MarshalXML(e, _dd.StartElement{})
		}
	}
	e.EncodeToken(_dd.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_LimLoc and its children, prefixing error messages with path
func (_bggbf *CT_LimLoc) ValidateWithPath(path string) error {
	if _bggbf.ValAttr == ST_LimLocUnset {
		return _a.Errorf("\u0025\u0073\u002fV\u0061\u006c\u0041\u0074t\u0072\u0020\u0069\u0073\u0020\u0061\u0020m\u0061\u006e\u0064\u0061\u0074\u006f\u0072\u0079\u0020\u0066\u0069\u0065\u006c\u0064", path)
	}
	if _dcgf := _bggbf.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _dcgf != nil {
		return _dcgf
	}
	return nil
}

// ValidateWithPath validates the CT_LimUpp and its children, prefixing error messages with path
func (_affd *CT_LimUpp) ValidateWithPath(path string) error {
	if _affd.LimUppPr != nil {
		if _gde := _affd.LimUppPr.ValidateWithPath(path + "\u002fL\u0069\u006d\u0055\u0070\u0070\u0050r"); _gde != nil {
			return _gde
		}
	}
	if _dddb := _affd.E.ValidateWithPath(path + "\u002f\u0045"); _dddb != nil {
		return _dddb
	}
	if _cefb := _affd.Lim.ValidateWithPath(path + "\u002f\u004c\u0069\u006d"); _cefb != nil {
		return _cefb
	}
	return nil
}

// Validate validates the MathPr and its children
func (_cdcdf *MathPr) Validate() error {
	return _cdcdf.ValidateWithPath("\u004d\u0061\u0074\u0068\u0050\u0072")
}

type CT_TopBot struct{ ValAttr ST_TopBot }

func (_ebcc *CT_RPRChoice) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	if _ebcc.Nor != nil {
		_fade := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u006eo\u0072"}}
		e.EncodeElement(_ebcc.Nor, _fade)
	}
	return nil
}

type CT_Acc struct {
	AccPr *CT_AccPr
	E     *CT_OMathArg
}
type CT_TwipsMeasure struct{ ValAttr _g.ST_TwipsMeasure }

func (_fafb *CT_OMathPara) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	e.EncodeToken(start)
	if _fafb.OMathParaPr != nil {
		_gdde := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u006f\u004d\u0061\u0074\u0068\u0050\u0061\u0072\u0061\u0050\u0072"}}
		e.EncodeElement(_fafb.OMathParaPr, _gdde)
	}
	_gbaf := _dd.StartElement{Name: _dd.Name{Local: "\u006d:\u006f\u004d\u0061\u0074\u0068"}}
	for _, _beacd := range _fafb.OMath {
		e.EncodeElement(_beacd, _gbaf)
	}
	e.EncodeToken(_dd.EndElement{Name: start.Name})
	return nil
}
func NewEG_OMathMathElements() *EG_OMathMathElements {
	_gcege := &EG_OMathMathElements{}
	return _gcege
}
func (_cdcf *CT_OMathJc) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	if _cdcf.ValAttr != ST_JcUnset {
		_bece, _cecdf := _cdcf.ValAttr.MarshalXMLAttr(_dd.Name{Local: "\u006d\u003a\u0076a\u006c"})
		if _cecdf != nil {
			return _cecdf
		}
		start.Attr = append(start.Attr, _bece)
	}
	e.EncodeToken(start)
	e.EncodeToken(_dd.EndElement{Name: start.Name})
	return nil
}
func NewCT_Style() *CT_Style { _fabe := &CT_Style{}; return _fabe }
func (_eage *CT_LimUpp) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
	_eage.E = NewCT_OMathArg()
	_eage.Lim = NewCT_OMathArg()
_abf:
	for {
		_cdeb, _bfdf := d.Token()
		if _bfdf != nil {
			return _bfdf
		}
		switch _beb := _cdeb.(type) {
		case _dd.StartElement:
			switch _beb.Name {
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u006c\u0069\u006d\u0055\u0070\u0070\u0050\u0072"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u006c\u0069\u006d\u0055\u0070\u0070\u0050\u0072"}:
				_eage.LimUppPr = NewCT_LimUppPr()
				if _bgde := d.DecodeElement(_eage.LimUppPr, &_beb); _bgde != nil {
					return _bgde
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0065"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0065"}:
				if _dfgec := d.DecodeElement(_eage.E, &_beb); _dfgec != nil {
					return _dfgec
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u006c\u0069\u006d"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u006c\u0069\u006d"}:
				if _dadgf := d.DecodeElement(_eage.Lim, &_beb); _dadgf != nil {
					return _dadgf
				}
			default:
				_c.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u004c\u0069\u006dU\u0070\u0070 \u0025\u0076", _beb.Name)
				if _dacb := d.Skip(); _dacb != nil {
					return _dacb
				}
			}
		case _dd.EndElement:
			break _abf
		case _dd.CharData:
		}
	}
	return nil
}

// Validate validates the CT_SPre and its children
func (_ebbbc *CT_SPre) Validate() error {
	return _ebbbc.ValidateWithPath("\u0043T\u005f\u0053\u0050\u0072\u0065")
}
func NewCT_SpacingRule() *CT_SpacingRule { _bgbc := &CT_SpacingRule{}; _bgbc.ValAttr = 0; return _bgbc }

// Validate validates the OMathPara and its children
func (_adebc *OMathPara) Validate() error {
	return _adebc.ValidateWithPath("\u004fM\u0061\u0074\u0068\u0050\u0061\u0072a")
}

type CT_D struct {
	DPr *CT_DPr
	E   []*CT_OMathArg
}

func (_eagef ST_Shp) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	return e.EncodeElement(_eagef.String(), start)
}

// Validate validates the CT_TwipsMeasure and its children
func (_decf *CT_TwipsMeasure) Validate() error {
	return _decf.ValidateWithPath("\u0043T\u005fT\u0077\u0069\u0070\u0073\u004d\u0065\u0061\u0073\u0075\u0072\u0065")
}

// ValidateWithPath validates the CT_OMathArgPr and its children, prefixing error messages with path
func (_cdacd *CT_OMathArgPr) ValidateWithPath(path string) error {
	if _cdacd.ArgSz != nil {
		if _bafdd := _cdacd.ArgSz.ValidateWithPath(path + "\u002f\u0041\u0072\u0067\u0053\u007a"); _bafdd != nil {
			return _bafdd
		}
	}
	return nil
}
func (_agb *CT_BorderBox) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
	_agb.E = NewCT_OMathArg()
_gea:
	for {
		_gcf, _bee := d.Token()
		if _bee != nil {
			return _bee
		}
		switch _ebb := _gcf.(type) {
		case _dd.StartElement:
			switch _ebb.Name {
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "b\u006f\u0072\u0064\u0065\u0072\u0042\u006f\u0078\u0050\u0072"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "b\u006f\u0072\u0064\u0065\u0072\u0042\u006f\u0078\u0050\u0072"}:
				_agb.BorderBoxPr = NewCT_BorderBoxPr()
				if _fd := d.DecodeElement(_agb.BorderBoxPr, &_ebb); _fd != nil {
					return _fd
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0065"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0065"}:
				if _bge := d.DecodeElement(_agb.E, &_ebb); _bge != nil {
					return _bge
				}
			default:
				_c.Log.Debug("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075n\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054_B\u006f\u0072d\u0065\u0072\u0042\u006f\u0078\u0020\u0025\u0076", _ebb.Name)
				if _dcg := d.Skip(); _dcg != nil {
					return _dcg
				}
			}
		case _dd.EndElement:
			break _gea
		case _dd.CharData:
		}
	}
	return nil
}
func NewCT_SPre() *CT_SPre {
	_fbcg := &CT_SPre{}
	_fbcg.Sub = NewCT_OMathArg()
	_fbcg.Sup = NewCT_OMathArg()
	_fbcg.E = NewCT_OMathArg()
	return _fbcg
}

// ValidateWithPath validates the CT_CtrlPr and its children, prefixing error messages with path
func (_dde *CT_CtrlPr) ValidateWithPath(path string) error { return nil }
func NewCT_Text() *CT_Text                                 { _cagf := &CT_Text{}; return _cagf }
func NewCT_MathPrChoice() *CT_MathPrChoice                 { _bafdg := &CT_MathPrChoice{}; return _bafdg }
func (_gedd *OMathPara) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	start.Attr = append(start.Attr, _dd.Attr{Name: _dd.Name{Local: "\u0078\u006d\u006cn\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068"})
	start.Attr = append(start.Attr, _dd.Attr{Name: _dd.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u006d"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068"})
	start.Attr = append(start.Attr, _dd.Attr{Name: _dd.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a/\u002f\u0073\u0063\u0068\u0065m\u0061s\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067/\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002f\u0073\u0068\u0061\u0072e\u0064\u0054\u0079\u0070\u0065\u0073"})
	start.Attr = append(start.Attr, _dd.Attr{Name: _dd.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0077"}, Value: "ht\u0074\u0070:\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063\u0065s\u0073i\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u00306\u002fm\u0061\u0069n"})
	start.Attr = append(start.Attr, _dd.Attr{Name: _dd.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"}, Value: "\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"})
	start.Name.Local = "m\u003a\u006f\u004d\u0061\u0074\u0068\u0050\u0061\u0072\u0061"
	return _gedd.CT_OMathPara.MarshalXML(e, start)
}
func (_bdcf *CT_RChoice) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
_bfdb:
	for {
		_acfcc, _defc := d.Token()
		if _defc != nil {
			return _defc
		}
		switch _fcdfa := _acfcc.(type) {
		case _dd.StartElement:
			switch _fcdfa.Name {
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0074"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0074"}:
				_babfd := NewCT_Text()
				if _bdcbg := d.DecodeElement(_babfd, &_fcdfa); _bdcbg != nil {
					return _bdcbg
				}
				_bdcf.T = append(_bdcf.T, _babfd)
			default:
				_c.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006ce\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005fR\u0043\u0068\u006f\u0069\u0063\u0065\u0020\u0025\u0076", _fcdfa.Name)
				if _ecgb := d.Skip(); _ecgb != nil {
					return _ecgb
				}
			}
		case _dd.EndElement:
			break _bfdb
		case _dd.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_OMathArg and its children, prefixing error messages with path
func (_gcg *CT_OMathArg) ValidateWithPath(path string) error {
	if _gcg.ArgPr != nil {
		if _bgbag := _gcg.ArgPr.ValidateWithPath(path + "\u002f\u0041\u0072\u0067\u0050\u0072"); _bgbag != nil {
			return _bgbag
		}
	}
	for _cdac, _aeeab := range _gcg.EG_OMathMathElements {
		if _gcgb := _aeeab.ValidateWithPath(_a.Sprintf("%\u0073\u002f\u0045\u0047\u005f\u004fM\u0061\u0074\u0068\u004d\u0061\u0074\u0068\u0045\u006ce\u006d\u0065\u006et\u0073[\u0025\u0064\u005d", path, _cdac)); _gcgb != nil {
			return _gcgb
		}
	}
	if _gcg.CtrlPr != nil {
		if _dega := _gcg.CtrlPr.ValidateWithPath(path + "\u002fC\u0074\u0072\u006c\u0050\u0072"); _dega != nil {
			return _dega
		}
	}
	return nil
}

type CT_BorderBox struct {
	BorderBoxPr *CT_BorderBoxPr
	E           *CT_OMathArg
}

// ValidateWithPath validates the CT_BreakBin and its children, prefixing error messages with path
func (_fca *CT_BreakBin) ValidateWithPath(path string) error {
	if _gdg := _fca.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _gdg != nil {
		return _gdg
	}
	return nil
}

// Validate validates the CT_EqArr and its children
func (_dbae *CT_EqArr) Validate() error {
	return _dbae.ValidateWithPath("\u0043\u0054\u005f\u0045\u0071\u0041\u0072\u0072")
}
func NewCT_RPR() *CT_RPR { _daee := &CT_RPR{}; return _daee }

// ValidateWithPath validates the MathPr and its children, prefixing error messages with path
func (_fcff *MathPr) ValidateWithPath(path string) error {
	if _ceccf := _fcff.CT_MathPr.ValidateWithPath(path); _ceccf != nil {
		return _ceccf
	}
	return nil
}
func (_bffg *CT_MR) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
_bcbe:
	for {
		_cfc, _dfaf := d.Token()
		if _dfaf != nil {
			return _dfaf
		}
		switch _cafd := _cfc.(type) {
		case _dd.StartElement:
			switch _cafd.Name {
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0065"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0065"}:
				_acad := NewCT_OMathArg()
				if _bfee := d.DecodeElement(_acad, &_cafd); _bfee != nil {
					return _bfee
				}
				_bffg.E = append(_bffg.E, _acad)
			default:
				_c.Log.Debug("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006fn \u0043\u0054\u005fM\u0052 \u0025\u0076", _cafd.Name)
				if _gged := d.Skip(); _gged != nil {
					return _gged
				}
			}
		case _dd.EndElement:
			break _bcbe
		case _dd.CharData:
		}
	}
	return nil
}
func (_cg *CT_BorderBox) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	e.EncodeToken(start)
	if _cg.BorderBoxPr != nil {
		_eeg := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0062\u006f\u0072\u0064\u0065\u0072\u0042\u006f\u0078\u0050\u0072"}}
		e.EncodeElement(_cg.BorderBoxPr, _eeg)
	}
	_fg := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0065"}}
	e.EncodeElement(_cg.E, _fg)
	e.EncodeToken(_dd.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_DPr and its children
func (_cfgf *CT_DPr) Validate() error {
	return _cfgf.ValidateWithPath("\u0043\u0054\u005f\u0044\u0050\u0072")
}
func (_cgeg *CT_MC) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	e.EncodeToken(start)
	if _cgeg.McPr != nil {
		_gacf := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u006d\u0063\u0050\u0072"}}
		e.EncodeElement(_cgeg.McPr, _gacf)
	}
	e.EncodeToken(_dd.EndElement{Name: start.Name})
	return nil
}
func (_bdc *CT_AccPr) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	e.EncodeToken(start)
	if _bdc.Chr != nil {
		_eb := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0063h\u0072"}}
		e.EncodeElement(_bdc.Chr, _eb)
	}
	if _bdc.CtrlPr != nil {
		_af := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0063\u0074\u0072\u006c\u0050\u0072"}}
		e.EncodeElement(_bdc.CtrlPr, _af)
	}
	e.EncodeToken(_dd.EndElement{Name: start.Name})
	return nil
}
func NewOMath() *OMath { _cdca := &OMath{}; _cdca.CT_OMath = *NewCT_OMath(); return _cdca }

// ValidateWithPath validates the CT_OMathParaPr and its children, prefixing error messages with path
func (_cggb *CT_OMathParaPr) ValidateWithPath(path string) error {
	if _cggb.Jc != nil {
		if _gggd := _cggb.Jc.ValidateWithPath(path + "\u002f\u004a\u0063"); _gggd != nil {
			return _gggd
		}
	}
	return nil
}
func (_agdba *ST_TopBot) UnmarshalXMLAttr(attr _dd.Attr) error {
	switch attr.Value {
	case "":
		*_agdba = 0
	case "\u0074\u006f\u0070":
		*_agdba = 1
	case "\u0062\u006f\u0074":
		*_agdba = 2
	}
	return nil
}

type ST_Style byte
type EG_OMathMathElements struct {
	Acc       *CT_Acc
	Bar       *CT_Bar
	Box       *CT_Box
	BorderBox *CT_BorderBox
	D         *CT_D
	EqArr     *CT_EqArr
	F         *CT_F
	Func      *CT_Func
	GroupChr  *CT_GroupChr
	LimLow    *CT_LimLow
	LimUpp    *CT_LimUpp
	M         *CT_M
	Nary      *CT_Nary
	Phant     *CT_Phant
	Rad       *CT_Rad
	SPre      *CT_SPre
	SSub      *CT_SSub
	SSubSup   *CT_SSubSup
	SSup      *CT_SSup
	R         *CT_R
}

func (_gagga ST_BreakBin) Validate() error { return _gagga.ValidateWithPath("") }

// Validate validates the CT_MC and its children
func (_dddd *CT_MC) Validate() error { return _dddd.ValidateWithPath("\u0043\u0054\u005fM\u0043") }

// Validate validates the CT_Integer255 and its children
func (_ddbe *CT_Integer255) Validate() error {
	return _ddbe.ValidateWithPath("\u0043\u0054\u005f\u0049\u006e\u0074\u0065\u0067\u0065\u0072\u0032\u0035\u0035")
}

// Validate validates the CT_MathPr and its children
func (_fgfa *CT_MathPr) Validate() error {
	return _fgfa.ValidateWithPath("\u0043T\u005f\u004d\u0061\u0074\u0068\u0050r")
}

// Validate validates the CT_SSubPr and its children
func (_beee *CT_SSubPr) Validate() error {
	return _beee.ValidateWithPath("\u0043T\u005f\u0053\u0053\u0075\u0062\u0050r")
}
func (_ebccb ST_Style) Validate() error { return _ebccb.ValidateWithPath("") }
func (_gaba *CT_GroupChr) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
	_gaba.E = NewCT_OMathArg()
_ggge:
	for {
		_ada, _cfbf := d.Token()
		if _cfbf != nil {
			return _cfbf
		}
		switch _cef := _ada.(type) {
		case _dd.StartElement:
			switch _cef.Name {
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0067\u0072\u006f\u0075\u0070\u0043\u0068\u0072\u0050\u0072"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0067\u0072\u006f\u0075\u0070\u0043\u0068\u0072\u0050\u0072"}:
				_gaba.GroupChrPr = NewCT_GroupChrPr()
				if _bbe := d.DecodeElement(_gaba.GroupChrPr, &_cef); _bbe != nil {
					return _bbe
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0065"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0065"}:
				if _dadg := d.DecodeElement(_gaba.E, &_cef); _dadg != nil {
					return _dadg
				}
			default:
				_c.Log.Debug("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0047\u0072\u006f\u0075\u0070\u0043\u0068\u0072\u0020\u0025\u0076", _cef.Name)
				if _ffgb := d.Skip(); _ffgb != nil {
					return _ffgb
				}
			}
		case _dd.EndElement:
			break _ggge
		case _dd.CharData:
		}
	}
	return nil
}
func (_aaagb *CT_SPre) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	e.EncodeToken(start)
	if _aaagb.SPrePr != nil {
		_ebbcc := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0073\u0050\u0072\u0065\u0050\u0072"}}
		e.EncodeElement(_aaagb.SPrePr, _ebbcc)
	}
	_ggfa := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0073u\u0062"}}
	e.EncodeElement(_aaagb.Sub, _ggfa)
	_bedf := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0073u\u0070"}}
	e.EncodeElement(_aaagb.Sup, _bedf)
	_fdbc := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0065"}}
	e.EncodeElement(_aaagb.E, _fdbc)
	e.EncodeToken(_dd.EndElement{Name: start.Name})
	return nil
}

type CT_RPRChoice struct{ Nor *CT_OnOff }

// Validate validates the CT_LimUpp and its children
func (_bafg *CT_LimUpp) Validate() error {
	return _bafg.ValidateWithPath("\u0043T\u005f\u004c\u0069\u006d\u0055\u0070p")
}
func NewCT_Integer255() *CT_Integer255 { _bdgcf := &CT_Integer255{}; _bdgcf.ValAttr = 1; return _bdgcf }

// Validate validates the CT_GroupChr and its children
func (_cgcd *CT_GroupChr) Validate() error {
	return _cgcd.ValidateWithPath("C\u0054\u005f\u0047\u0072\u006f\u0075\u0070\u0043\u0068\u0072")
}

type CT_ManualBreak struct{ AlnAtAttr *int64 }

// Validate validates the CT_OMathArgPr and its children
func (_afbg *CT_OMathArgPr) Validate() error {
	return _afbg.ValidateWithPath("\u0043\u0054\u005f\u004f\u004d\u0061\u0074\u0068\u0041\u0072\u0067\u0050\u0072")
}
func NewCT_Acc() *CT_Acc { _cb := &CT_Acc{}; _cb.E = NewCT_OMathArg(); return _cb }

// Validate validates the CT_BoxPr and its children
func (_bfd *CT_BoxPr) Validate() error {
	return _bfd.ValidateWithPath("\u0043\u0054\u005f\u0042\u006f\u0078\u0050\u0072")
}
func NewCT_LimLow() *CT_LimLow {
	_ggcg := &CT_LimLow{}
	_ggcg.E = NewCT_OMathArg()
	_ggcg.Lim = NewCT_OMathArg()
	return _ggcg
}
func (_eec *CT_Bar) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	e.EncodeToken(start)
	if _eec.BarPr != nil {
		_fab := _dd.StartElement{Name: _dd.Name{Local: "\u006d:\u0062\u0061\u0072\u0050\u0072"}}
		e.EncodeElement(_eec.BarPr, _fab)
	}
	_bbf := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0065"}}
	e.EncodeElement(_eec.E, _bbf)
	e.EncodeToken(_dd.EndElement{Name: start.Name})
	return nil
}

type CT_SpacingRule struct{ ValAttr int64 }

func (_aegc *CT_OnOff) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
	for _, _badga := range start.Attr {
		if _badga.Name.Local == "\u0076\u0061\u006c" {
			_afcg, _ffa := ParseUnionST_OnOff(_badga.Value)
			if _ffa != nil {
				return _ffa
			}
			_aegc.ValAttr = &_afcg
			continue
		}
	}
	for {
		_bcdb, _dgda := d.Token()
		if _dgda != nil {
			return _a.Errorf("p\u0061r\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fO\u006e\u004f\u0066\u0066: \u0025\u0073", _dgda)
		}
		if _ffga, _faca := _bcdb.(_dd.EndElement); _faca && _ffga.Name == start.Name {
			break
		}
	}
	return nil
}
func (_cdgdb *CT_SPrePr) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
_gbdab:
	for {
		_acbfg, _dfd := d.Token()
		if _dfd != nil {
			return _dfd
		}
		switch _eggb := _acbfg.(type) {
		case _dd.StartElement:
			switch _eggb.Name {
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0063\u0074\u0072\u006c\u0050\u0072"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0063\u0074\u0072\u006c\u0050\u0072"}:
				_cdgdb.CtrlPr = NewCT_CtrlPr()
				if _afcf := d.DecodeElement(_cdgdb.CtrlPr, &_eggb); _afcf != nil {
					return _afcf
				}
			default:
				_c.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u0053\u0050\u0072e\u0050\u0072 \u0025\u0076", _eggb.Name)
				if _dccd := d.Skip(); _dccd != nil {
					return _dccd
				}
			}
		case _dd.EndElement:
			break _gbdab
		case _dd.CharData:
		}
	}
	return nil
}

// Validate validates the EG_OMathElements and its children
func (_fabac *EG_OMathElements) Validate() error {
	return _fabac.ValidateWithPath("\u0045\u0047_\u004f\u004d\u0061t\u0068\u0045\u006c\u0065\u006d\u0065\u006e\u0074\u0073")
}

type CT_RPR struct {
	Lit    *CT_OnOff
	Choice *CT_RPRChoice
	Brk    *CT_ManualBreak
	Aln    *CT_OnOff
}
type CT_Style struct{ ValAttr ST_Style }

func NewCT_FPr() *CT_FPr { _fcf := &CT_FPr{}; return _fcf }
func (_bbfa *CT_MCS) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	e.EncodeToken(start)
	_bgea := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u006d\u0063"}}
	for _, _dbc := range _bbfa.Mc {
		e.EncodeElement(_dbc, _bgea)
	}
	e.EncodeToken(_dd.EndElement{Name: start.Name})
	return nil
}
func (_ecdb ST_FType) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	return e.EncodeElement(_ecdb.String(), start)
}

// ValidateWithPath validates the CT_RadPr and its children, prefixing error messages with path
func (_gddd *CT_RadPr) ValidateWithPath(path string) error {
	if _gddd.DegHide != nil {
		if _fdcb := _gddd.DegHide.ValidateWithPath(path + "\u002f\u0044\u0065\u0067\u0048\u0069\u0064\u0065"); _fdcb != nil {
			return _fdcb
		}
	}
	if _gddd.CtrlPr != nil {
		if _begc := _gddd.CtrlPr.ValidateWithPath(path + "\u002fC\u0074\u0072\u006c\u0050\u0072"); _begc != nil {
			return _begc
		}
	}
	return nil
}

type CT_FType struct{ ValAttr ST_FType }

func NewCT_Phant() *CT_Phant { _gdac := &CT_Phant{}; _gdac.E = NewCT_OMathArg(); return _gdac }
func (_decg *CT_LimUpp) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	e.EncodeToken(start)
	if _decg.LimUppPr != nil {
		_debe := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u006c\u0069\u006d\u0055\u0070\u0070\u0050\u0072"}}
		e.EncodeElement(_decg.LimUppPr, _debe)
	}
	_bfgb := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0065"}}
	e.EncodeElement(_decg.E, _bfgb)
	_agdc := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u006ci\u006d"}}
	e.EncodeElement(_decg.Lim, _agdc)
	e.EncodeToken(_dd.EndElement{Name: start.Name})
	return nil
}
func (_gded *OMath) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	start.Attr = append(start.Attr, _dd.Attr{Name: _dd.Name{Local: "\u0078\u006d\u006cn\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068"})
	start.Attr = append(start.Attr, _dd.Attr{Name: _dd.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u006d"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068"})
	start.Attr = append(start.Attr, _dd.Attr{Name: _dd.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a/\u002f\u0073\u0063\u0068\u0065m\u0061s\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067/\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002f\u0073\u0068\u0061\u0072e\u0064\u0054\u0079\u0070\u0065\u0073"})
	start.Attr = append(start.Attr, _dd.Attr{Name: _dd.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0077"}, Value: "ht\u0074\u0070:\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063\u0065s\u0073i\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u00306\u002fm\u0061\u0069n"})
	start.Attr = append(start.Attr, _dd.Attr{Name: _dd.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"}, Value: "\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"})
	start.Name.Local = "\u006d:\u006f\u004d\u0061\u0074\u0068"
	return _gded.CT_OMath.MarshalXML(e, start)
}

type CT_EqArrPr struct {
	BaseJc  *CT_YAlign
	MaxDist *CT_OnOff
	ObjDist *CT_OnOff
	RSpRule *CT_SpacingRule
	RSp     *CT_UnSignedInteger
	CtrlPr  *CT_CtrlPr
}

func (_aafe *CT_SSub) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
	_aafe.E = NewCT_OMathArg()
	_aafe.Sub = NewCT_OMathArg()
_ggebb:
	for {
		_ecbd, _bcbb := d.Token()
		if _bcbb != nil {
			return _bcbb
		}
		switch _ceed := _ecbd.(type) {
		case _dd.StartElement:
			switch _ceed.Name {
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0073\u0053\u0075\u0062\u0050\u0072"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0073\u0053\u0075\u0062\u0050\u0072"}:
				_aafe.SSubPr = NewCT_SSubPr()
				if _eaff := d.DecodeElement(_aafe.SSubPr, &_ceed); _eaff != nil {
					return _eaff
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0065"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0065"}:
				if _fgaa := d.DecodeElement(_aafe.E, &_ceed); _fgaa != nil {
					return _fgaa
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0073\u0075\u0062"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0073\u0075\u0062"}:
				if _ebfg := d.DecodeElement(_aafe.Sub, &_ceed); _ebfg != nil {
					return _ebfg
				}
			default:
				_c.Log.Debug("\u0073\u006b\u0069p\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043T\u005f\u0053\u0053\u0075\u0062\u0020\u0025\u0076", _ceed.Name)
				if _aceb := d.Skip(); _aceb != nil {
					return _aceb
				}
			}
		case _dd.EndElement:
			break _ggebb
		case _dd.CharData:
		}
	}
	return nil
}

// Validate validates the CT_FuncPr and its children
func (_cfad *CT_FuncPr) Validate() error {
	return _cfad.ValidateWithPath("\u0043T\u005f\u0046\u0075\u006e\u0063\u0050r")
}
func (_gfd *CT_BreakBin) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	if _gfd.ValAttr != ST_BreakBinUnset {
		_cae, _fge := _gfd.ValAttr.MarshalXMLAttr(_dd.Name{Local: "\u006d\u003a\u0076a\u006c"})
		if _fge != nil {
			return _fge
		}
		start.Attr = append(start.Attr, _cae)
	}
	e.EncodeToken(start)
	e.EncodeToken(_dd.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_Shp and its children
func (_feae *CT_Shp) Validate() error {
	return _feae.ValidateWithPath("\u0043\u0054\u005f\u0053\u0068\u0070")
}

// Validate validates the CT_MathPrChoice and its children
func (_gbcg *CT_MathPrChoice) Validate() error {
	return _gbcg.ValidateWithPath("\u0043T\u005fM\u0061\u0074\u0068\u0050\u0072\u0043\u0068\u006f\u0069\u0063\u0065")
}

type CT_SSubSup struct {
	SSubSupPr *CT_SSubSupPr
	E         *CT_OMathArg
	Sub       *CT_OMathArg
	Sup       *CT_OMathArg
}

// ValidateWithPath validates the CT_EqArr and its children, prefixing error messages with path
func (_bac *CT_EqArr) ValidateWithPath(path string) error {
	if _bac.EqArrPr != nil {
		if _aace := _bac.EqArrPr.ValidateWithPath(path + "\u002f\u0045\u0071\u0041\u0072\u0072\u0050\u0072"); _aace != nil {
			return _aace
		}
	}
	for _cdab, _gffa := range _bac.E {
		if _dgdf := _gffa.ValidateWithPath(_a.Sprintf("\u0025\u0073\u002f\u0045\u005b\u0025\u0064\u005d", path, _cdab)); _dgdf != nil {
			return _dgdf
		}
	}
	return nil
}

// ValidateWithPath validates the CT_Box and its children, prefixing error messages with path
func (_baa *CT_Box) ValidateWithPath(path string) error {
	if _baa.BoxPr != nil {
		if _cgb := _baa.BoxPr.ValidateWithPath(path + "\u002f\u0042\u006f\u0078\u0050\u0072"); _cgb != nil {
			return _cgb
		}
	}
	if _fea := _baa.E.ValidateWithPath(path + "\u002f\u0045"); _fea != nil {
		return _fea
	}
	return nil
}

// ValidateWithPath validates the OMath and its children, prefixing error messages with path
func (_cfdd *OMath) ValidateWithPath(path string) error {
	if _decd := _cfdd.CT_OMath.ValidateWithPath(path); _decd != nil {
		return _decd
	}
	return nil
}

// Validate validates the CT_CtrlPr and its children
func (_bggb *CT_CtrlPr) Validate() error {
	return _bggb.ValidateWithPath("\u0043T\u005f\u0043\u0074\u0072\u006c\u0050r")
}
func (_cfff *CT_MathPr) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	e.EncodeToken(start)
	if _cfff.MathFont != nil {
		_fcfc := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u006d\u0061\u0074\u0068\u0046\u006f\u006e\u0074"}}
		e.EncodeElement(_cfff.MathFont, _fcfc)
	}
	if _cfff.BrkBin != nil {
		_agfb := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0062\u0072\u006b\u0042\u0069\u006e"}}
		e.EncodeElement(_cfff.BrkBin, _agfb)
	}
	if _cfff.BrkBinSub != nil {
		_dfbb := _dd.StartElement{Name: _dd.Name{Local: "m\u003a\u0062\u0072\u006b\u0042\u0069\u006e\u0053\u0075\u0062"}}
		e.EncodeElement(_cfff.BrkBinSub, _dfbb)
	}
	if _cfff.SmallFrac != nil {
		_geef := _dd.StartElement{Name: _dd.Name{Local: "m\u003a\u0073\u006d\u0061\u006c\u006c\u0046\u0072\u0061\u0063"}}
		e.EncodeElement(_cfff.SmallFrac, _geef)
	}
	if _cfff.DispDef != nil {
		_dgbf := _dd.StartElement{Name: _dd.Name{Local: "\u006d:\u0064\u0069\u0073\u0070\u0044\u0065f"}}
		e.EncodeElement(_cfff.DispDef, _dgbf)
	}
	if _cfff.LMargin != nil {
		_gdd := _dd.StartElement{Name: _dd.Name{Local: "\u006d:\u006c\u004d\u0061\u0072\u0067\u0069n"}}
		e.EncodeElement(_cfff.LMargin, _gdd)
	}
	if _cfff.RMargin != nil {
		_fafe := _dd.StartElement{Name: _dd.Name{Local: "\u006d:\u0072\u004d\u0061\u0072\u0067\u0069n"}}
		e.EncodeElement(_cfff.RMargin, _fafe)
	}
	if _cfff.DefJc != nil {
		_ffbb := _dd.StartElement{Name: _dd.Name{Local: "\u006d:\u0064\u0065\u0066\u004a\u0063"}}
		e.EncodeElement(_cfff.DefJc, _ffbb)
	}
	if _cfff.PreSp != nil {
		_bbea := _dd.StartElement{Name: _dd.Name{Local: "\u006d:\u0070\u0072\u0065\u0053\u0070"}}
		e.EncodeElement(_cfff.PreSp, _bbea)
	}
	if _cfff.PostSp != nil {
		_aeed := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0070\u006f\u0073\u0074\u0053\u0070"}}
		e.EncodeElement(_cfff.PostSp, _aeed)
	}
	if _cfff.InterSp != nil {
		_cag := _dd.StartElement{Name: _dd.Name{Local: "\u006d:\u0069\u006e\u0074\u0065\u0072\u0053p"}}
		e.EncodeElement(_cfff.InterSp, _cag)
	}
	if _cfff.IntraSp != nil {
		_fbga := _dd.StartElement{Name: _dd.Name{Local: "\u006d:\u0069\u006e\u0074\u0072\u0061\u0053p"}}
		e.EncodeElement(_cfff.IntraSp, _fbga)
	}
	if _cfff.Choice != nil {
		_cfff.Choice.MarshalXML(e, _dd.StartElement{})
	}
	if _cfff.IntLim != nil {
		_bafe := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0069\u006e\u0074\u004c\u0069\u006d"}}
		e.EncodeElement(_cfff.IntLim, _bafe)
	}
	if _cfff.NaryLim != nil {
		_gfed := _dd.StartElement{Name: _dd.Name{Local: "\u006d:\u006e\u0061\u0072\u0079\u004c\u0069m"}}
		e.EncodeElement(_cfff.NaryLim, _gfed)
	}
	e.EncodeToken(_dd.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_R and its children, prefixing error messages with path
func (_gdfd *CT_R) ValidateWithPath(path string) error {
	if _gdfd.RPr != nil {
		if _caab := _gdfd.RPr.ValidateWithPath(path + "\u002f\u0052\u0050\u0072"); _caab != nil {
			return _caab
		}
	}
	for _egcce, _dgec := range _gdfd.Choice {
		if _ggee := _dgec.ValidateWithPath(_a.Sprintf("\u0025\u0073\u002f\u0043\u0068\u006f\u0069\u0063\u0065\u005b\u0025\u0064\u005d", path, _egcce)); _ggee != nil {
			return _ggee
		}
	}
	return nil
}

// ValidateWithPath validates the EG_OMathElements and its children, prefixing error messages with path
func (_fdgc *EG_OMathElements) ValidateWithPath(path string) error {
	for _ebfd, _ffgga := range _fdgc.EG_OMathMathElements {
		if _cdda := _ffgga.ValidateWithPath(_a.Sprintf("%\u0073\u002f\u0045\u0047\u005f\u004fM\u0061\u0074\u0068\u004d\u0061\u0074\u0068\u0045\u006ce\u006d\u0065\u006et\u0073[\u0025\u0064\u005d", path, _ebfd)); _cdda != nil {
			return _cdda
		}
	}
	return nil
}
func (_dfef *CT_R) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	e.EncodeToken(start)
	if _dfef.RPr != nil {
		_dgca := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0072P\u0072"}}
		e.EncodeElement(_dfef.RPr, _dgca)
	}
	if _dfef.Choice != nil {
		for _, _ecbg := range _dfef.Choice {
			_ecbg.MarshalXML(e, _dd.StartElement{})
		}
	}
	e.EncodeToken(_dd.EndElement{Name: start.Name})
	return nil
}

type ST_BreakBin byte

const (
	ST_ScriptUnset         ST_Script = 0
	ST_ScriptRoman         ST_Script = 1
	ST_ScriptScript        ST_Script = 2
	ST_ScriptFraktur       ST_Script = 3
	ST_ScriptDouble_struck ST_Script = 4
	ST_ScriptSans_serif    ST_Script = 5
	ST_ScriptMonospace     ST_Script = 6
)

// ValidateWithPath validates the CT_GroupChr and its children, prefixing error messages with path
func (_efcf *CT_GroupChr) ValidateWithPath(path string) error {
	if _efcf.GroupChrPr != nil {
		if _ffec := _efcf.GroupChrPr.ValidateWithPath(path + "/\u0047\u0072\u006f\u0075\u0070\u0043\u0068\u0072\u0050\u0072"); _ffec != nil {
			return _ffec
		}
	}
	if _ceda := _efcf.E.ValidateWithPath(path + "\u002f\u0045"); _ceda != nil {
		return _ceda
	}
	return nil
}

type ST_FType byte

func NewCT_Rad() *CT_Rad {
	_ccg := &CT_Rad{}
	_ccg.Deg = NewCT_OMathArg()
	_ccg.E = NewCT_OMathArg()
	return _ccg
}

type CT_BreakBinSub struct{ ValAttr ST_BreakBinSub }

// Validate validates the CT_R and its children
func (_bdbf *CT_R) Validate() error { return _bdbf.ValidateWithPath("\u0043\u0054\u005f\u0052") }

// ValidateWithPath validates the CT_FPr and its children, prefixing error messages with path
func (_acg *CT_FPr) ValidateWithPath(path string) error {
	if _acg.Type != nil {
		if _cega := _acg.Type.ValidateWithPath(path + "\u002f\u0054\u0079p\u0065"); _cega != nil {
			return _cega
		}
	}
	if _acg.CtrlPr != nil {
		if _dgag := _acg.CtrlPr.ValidateWithPath(path + "\u002fC\u0074\u0072\u006c\u0050\u0072"); _dgag != nil {
			return _dgag
		}
	}
	return nil
}

// Validate validates the CT_OMathPara and its children
func (_ddgda *CT_OMathPara) Validate() error {
	return _ddgda.ValidateWithPath("\u0043\u0054\u005fO\u004d\u0061\u0074\u0068\u0050\u0061\u0072\u0061")
}

// Validate validates the CT_RadPr and its children
func (_cecbe *CT_RadPr) Validate() error {
	return _cecbe.ValidateWithPath("\u0043\u0054\u005f\u0052\u0061\u0064\u0050\u0072")
}
func NewCT_Box() *CT_Box { _ddf := &CT_Box{}; _ddf.E = NewCT_OMathArg(); return _ddf }
func (_dgbfa *CT_RadPr) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	e.EncodeToken(start)
	if _dgbfa.DegHide != nil {
		_gbda := _dd.StartElement{Name: _dd.Name{Local: "\u006d:\u0064\u0065\u0067\u0048\u0069\u0064e"}}
		e.EncodeElement(_dgbfa.DegHide, _gbda)
	}
	if _dgbfa.CtrlPr != nil {
		_fbcc := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0063\u0074\u0072\u006c\u0050\u0072"}}
		e.EncodeElement(_dgbfa.CtrlPr, _fbcc)
	}
	e.EncodeToken(_dd.EndElement{Name: start.Name})
	return nil
}

type ST_TopBot byte

func NewCT_FType() *CT_FType { _dae := &CT_FType{}; _dae.ValAttr = ST_FType(1); return _dae }

type CT_SSup struct {
	SSupPr *CT_SSupPr
	E      *CT_OMathArg
	Sup    *CT_OMathArg
}

func NewCT_BoxPr() *CT_BoxPr { _aab := &CT_BoxPr{}; return _aab }

// ValidateWithPath validates the CT_MCPr and its children, prefixing error messages with path
func (_aeba *CT_MCPr) ValidateWithPath(path string) error {
	if _aeba.Count != nil {
		if _dadb := _aeba.Count.ValidateWithPath(path + "\u002f\u0043\u006f\u0075\u006e\u0074"); _dadb != nil {
			return _dadb
		}
	}
	if _aeba.McJc != nil {
		if _bdef := _aeba.McJc.ValidateWithPath(path + "\u002f\u004d\u0063J\u0063"); _bdef != nil {
			return _bdef
		}
	}
	return nil
}
func (_adbc ST_LimLoc) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	return e.EncodeElement(_adbc.String(), start)
}

type CT_R struct {
	RPr    *CT_RPR
	Choice []*CT_RChoice
}
type CT_SPrePr struct{ CtrlPr *CT_CtrlPr }

// Validate validates the CT_BorderBoxPr and its children
func (_bga *CT_BorderBoxPr) Validate() error {
	return _bga.ValidateWithPath("\u0043\u0054\u005f\u0042\u006f\u0072\u0064\u0065\u0072B\u006f\u0078\u0050\u0072")
}
func (_cbagd *ST_FType) UnmarshalXMLAttr(attr _dd.Attr) error {
	switch attr.Value {
	case "":
		*_cbagd = 0
	case "\u0062\u0061\u0072":
		*_cbagd = 1
	case "\u0073\u006b\u0077":
		*_cbagd = 2
	case "\u006c\u0069\u006e":
		*_cbagd = 3
	case "\u006e\u006f\u0042a\u0072":
		*_cbagd = 4
	}
	return nil
}

// Validate validates the CT_Text and its children
func (_geee *CT_Text) Validate() error {
	return _geee.ValidateWithPath("\u0043T\u005f\u0054\u0065\u0078\u0074")
}
func NewCT_NaryPr() *CT_NaryPr { _ddfc := &CT_NaryPr{}; return _ddfc }
func (_dafa *ST_TopBot) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
	_gdbc, _ggcga := d.Token()
	if _ggcga != nil {
		return _ggcga
	}
	if _fcagg, _eaef := _gdbc.(_dd.EndElement); _eaef && _fcagg.Name == start.Name {
		*_dafa = 1
		return nil
	}
	if _dcgba, _geaed := _gdbc.(_dd.CharData); !_geaed {
		return _a.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _gdbc)
	} else {
		switch string(_dcgba) {
		case "":
			*_dafa = 0
		case "\u0074\u006f\u0070":
			*_dafa = 1
		case "\u0062\u006f\u0074":
			*_dafa = 2
		}
	}
	_gdbc, _ggcga = d.Token()
	if _ggcga != nil {
		return _ggcga
	}
	if _dfae, _acfbfb := _gdbc.(_dd.EndElement); _acfbfb && _dfae.Name == start.Name {
		return nil
	}
	return _a.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _gdbc)
}
func (_cdgg *CT_MCPr) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	e.EncodeToken(start)
	if _cdgg.Count != nil {
		_bbdc := _dd.StartElement{Name: _dd.Name{Local: "\u006d:\u0063\u006f\u0075\u006e\u0074"}}
		e.EncodeElement(_cdgg.Count, _bbdc)
	}
	if _cdgg.McJc != nil {
		_fcge := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u006d\u0063\u004a\u0063"}}
		e.EncodeElement(_cdgg.McJc, _fcge)
	}
	e.EncodeToken(_dd.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_UnSignedInteger and its children, prefixing error messages with path
func (_cbed *CT_UnSignedInteger) ValidateWithPath(path string) error { return nil }
func (_aadb *ST_BreakBin) UnmarshalXMLAttr(attr _dd.Attr) error {
	switch attr.Value {
	case "":
		*_aadb = 0
	case "\u0062\u0065\u0066\u006f\u0072\u0065":
		*_aadb = 1
	case "\u0061\u0066\u0074e\u0072":
		*_aadb = 2
	case "\u0072\u0065\u0070\u0065\u0061\u0074":
		*_aadb = 3
	}
	return nil
}
func NewCT_AccPr() *CT_AccPr { _fa := &CT_AccPr{}; return _fa }

// Validate validates the CT_Acc and its children
func (_cbd *CT_Acc) Validate() error {
	return _cbd.ValidateWithPath("\u0043\u0054\u005f\u0041\u0063\u0063")
}
func (_cgad ST_Style) String() string {
	switch _cgad {
	case 0:
		return ""
	case 1:
		return "\u0070"
	case 2:
		return "\u0062"
	case 3:
		return "\u0069"
	case 4:
		return "\u0062\u0069"
	}
	return ""
}

// ValidateWithPath validates the CT_F and its children, prefixing error messages with path
func (_gdbf *CT_F) ValidateWithPath(path string) error {
	if _gdbf.FPr != nil {
		if _ebbd := _gdbf.FPr.ValidateWithPath(path + "\u002f\u0046\u0050\u0072"); _ebbd != nil {
			return _ebbd
		}
	}
	if _fegg := _gdbf.Num.ValidateWithPath(path + "\u002f\u004e\u0075\u006d"); _fegg != nil {
		return _fegg
	}
	if _badg := _gdbf.Den.ValidateWithPath(path + "\u002f\u0044\u0065\u006e"); _badg != nil {
		return _badg
	}
	return nil
}
func (_cfaa ST_BreakBinSub) MarshalXMLAttr(name _dd.Name) (_dd.Attr, error) {
	_aedb := _dd.Attr{}
	_aedb.Name = name
	switch _cfaa {
	case ST_BreakBinSubUnset:
		_aedb.Value = ""
	case ST_BreakBinSub__:
		_aedb.Value = "\u002d\u002d"
	case ST_BreakBinSub___:
		_aedb.Value = "\u002d\u002b"
	case ST_BreakBinSub____:
		_aedb.Value = "\u002b\u002d"
	}
	return _aedb, nil
}
func (_cfag *CT_GroupChrPr) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
_fgeb:
	for {
		_bbcbg, _daec := d.Token()
		if _daec != nil {
			return _daec
		}
		switch _cdc := _bbcbg.(type) {
		case _dd.StartElement:
			switch _cdc.Name {
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0063\u0068\u0072"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0063\u0068\u0072"}:
				_cfag.Chr = NewCT_Char()
				if _dfgc := d.DecodeElement(_cfag.Chr, &_cdc); _dfgc != nil {
					return _dfgc
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0070\u006f\u0073"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0070\u006f\u0073"}:
				_cfag.Pos = NewCT_TopBot()
				if _defba := d.DecodeElement(_cfag.Pos, &_cdc); _defba != nil {
					return _defba
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0076\u0065\u0072\u0074\u004a\u0063"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0076\u0065\u0072\u0074\u004a\u0063"}:
				_cfag.VertJc = NewCT_TopBot()
				if _add := d.DecodeElement(_cfag.VertJc, &_cdc); _add != nil {
					return _add
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0063\u0074\u0072\u006c\u0050\u0072"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0063\u0074\u0072\u006c\u0050\u0072"}:
				_cfag.CtrlPr = NewCT_CtrlPr()
				if _efdf := d.DecodeElement(_cfag.CtrlPr, &_cdc); _efdf != nil {
					return _efdf
				}
			default:
				_c.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0047r\u006f\u0075\u0070\u0043\u0068\u0072\u0050\u0072 \u0025\u0076", _cdc.Name)
				if _ddcb := d.Skip(); _ddcb != nil {
					return _ddcb
				}
			}
		case _dd.EndElement:
			break _fgeb
		case _dd.CharData:
		}
	}
	return nil
}
func (_fefe *CT_String) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	if _fefe.ValAttr != nil {
		start.Attr = append(start.Attr, _dd.Attr{Name: _dd.Name{Local: "\u006d\u003a\u0076a\u006c"}, Value: _a.Sprintf("\u0025\u0076", *_fefe.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_dd.EndElement{Name: start.Name})
	return nil
}
func (_fdea *ST_BreakBin) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
	_fefc, _eaacb := d.Token()
	if _eaacb != nil {
		return _eaacb
	}
	if _dgff, _aabbe := _fefc.(_dd.EndElement); _aabbe && _dgff.Name == start.Name {
		*_fdea = 1
		return nil
	}
	if _eacgf, _fcbe := _fefc.(_dd.CharData); !_fcbe {
		return _a.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _fefc)
	} else {
		switch string(_eacgf) {
		case "":
			*_fdea = 0
		case "\u0062\u0065\u0066\u006f\u0072\u0065":
			*_fdea = 1
		case "\u0061\u0066\u0074e\u0072":
			*_fdea = 2
		case "\u0072\u0065\u0070\u0065\u0061\u0074":
			*_fdea = 3
		}
	}
	_fefc, _eaacb = d.Token()
	if _eaacb != nil {
		return _eaacb
	}
	if _cfcgf, _acgf := _fefc.(_dd.EndElement); _acgf && _cfcgf.Name == start.Name {
		return nil
	}
	return _a.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _fefc)
}
func NewCT_PhantPr() *CT_PhantPr               { _eefb := &CT_PhantPr{}; return _eefb }
func (_dgdgdb ST_BreakBinSub) Validate() error { return _dgdgdb.ValidateWithPath("") }
func NewCT_SSup() *CT_SSup {
	_gaaeg := &CT_SSup{}
	_gaaeg.E = NewCT_OMathArg()
	_gaaeg.Sup = NewCT_OMathArg()
	return _gaaeg
}
func ParseUnionST_OnOff(s string) (_g.ST_OnOff, error) { return _g.ParseUnionST_OnOff(s) }

// Validate validates the CT_OMathArg and its children
func (_ebbdf *CT_OMathArg) Validate() error {
	return _ebbdf.ValidateWithPath("C\u0054\u005f\u004f\u004d\u0061\u0074\u0068\u0041\u0072\u0067")
}
func NewCT_MCS() *CT_MCS { _ddce := &CT_MCS{}; return _ddce }

const (
	ST_JcUnset       ST_Jc = 0
	ST_JcLeft        ST_Jc = 1
	ST_JcRight       ST_Jc = 2
	ST_JcCenter      ST_Jc = 3
	ST_JcCenterGroup ST_Jc = 4
)

func NewCT_RPRChoice() *CT_RPRChoice { _dcf := &CT_RPRChoice{}; return _dcf }

// ValidateWithPath validates the CT_RChoice and its children, prefixing error messages with path
func (_bfebb *CT_RChoice) ValidateWithPath(path string) error {
	for _daed, _cfgca := range _bfebb.T {
		if _befa := _cfgca.ValidateWithPath(_a.Sprintf("\u0025\u0073\u002f\u0054\u005b\u0025\u0064\u005d", path, _daed)); _befa != nil {
			return _befa
		}
	}
	return nil
}
func NewCT_Char() *CT_Char { _aec := &CT_Char{}; return _aec }
func NewCT_Nary() *CT_Nary {
	_fbbf := &CT_Nary{}
	_fbbf.Sub = NewCT_OMathArg()
	_fbbf.Sup = NewCT_OMathArg()
	_fbbf.E = NewCT_OMathArg()
	return _fbbf
}
func (_ade *CT_BorderBoxPr) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
_cc:
	for {
		_bcd, _aaa := d.Token()
		if _aaa != nil {
			return _aaa
		}
		switch _bgd := _bcd.(type) {
		case _dd.StartElement:
			switch _bgd.Name {
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0068i\u0064\u0065\u0054\u006f\u0070"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0068i\u0064\u0065\u0054\u006f\u0070"}:
				_ade.HideTop = NewCT_OnOff()
				if _fbd := d.DecodeElement(_ade.HideTop, &_bgd); _fbd != nil {
					return _fbd
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0068i\u0064\u0065\u0042\u006f\u0074"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0068i\u0064\u0065\u0042\u006f\u0074"}:
				_ade.HideBot = NewCT_OnOff()
				if _caaf := d.DecodeElement(_ade.HideBot, &_bgd); _caaf != nil {
					return _caaf
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0068\u0069\u0064\u0065\u004c\u0065\u0066\u0074"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0068\u0069\u0064\u0065\u004c\u0065\u0066\u0074"}:
				_ade.HideLeft = NewCT_OnOff()
				if _egf := d.DecodeElement(_ade.HideLeft, &_bgd); _egf != nil {
					return _egf
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0068i\u0064\u0065\u0052\u0069\u0067\u0068t"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0068i\u0064\u0065\u0052\u0069\u0067\u0068t"}:
				_ade.HideRight = NewCT_OnOff()
				if _gec := d.DecodeElement(_ade.HideRight, &_bgd); _gec != nil {
					return _gec
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0073t\u0072\u0069\u006b\u0065\u0048"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0073t\u0072\u0069\u006b\u0065\u0048"}:
				_ade.StrikeH = NewCT_OnOff()
				if _ccc := d.DecodeElement(_ade.StrikeH, &_bgd); _ccc != nil {
					return _ccc
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0073t\u0072\u0069\u006b\u0065\u0056"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0073t\u0072\u0069\u006b\u0065\u0056"}:
				_ade.StrikeV = NewCT_OnOff()
				if _cbg := d.DecodeElement(_ade.StrikeV, &_bgd); _cbg != nil {
					return _cbg
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0073\u0074\u0072\u0069\u006b\u0065\u0042\u004c\u0054\u0052"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0073\u0074\u0072\u0069\u006b\u0065\u0042\u004c\u0054\u0052"}:
				_ade.StrikeBLTR = NewCT_OnOff()
				if _bbc := d.DecodeElement(_ade.StrikeBLTR, &_bgd); _bbc != nil {
					return _bbc
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0073\u0074\u0072\u0069\u006b\u0065\u0054\u004c\u0042\u0052"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0073\u0074\u0072\u0069\u006b\u0065\u0054\u004c\u0042\u0052"}:
				_ade.StrikeTLBR = NewCT_OnOff()
				if _dgd := d.DecodeElement(_ade.StrikeTLBR, &_bgd); _dgd != nil {
					return _dgd
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0063\u0074\u0072\u006c\u0050\u0072"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0063\u0074\u0072\u006c\u0050\u0072"}:
				_ade.CtrlPr = NewCT_CtrlPr()
				if _ggf := d.DecodeElement(_ade.CtrlPr, &_bgd); _ggf != nil {
					return _ggf
				}
			default:
				_c.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069n\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006et\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0042\u006f\u0072\u0064\u0065\u0072\u0042o\u0078P\u0072\u0020\u0025\u0076", _bgd.Name)
				if _adb := d.Skip(); _adb != nil {
					return _adb
				}
			}
		case _dd.EndElement:
			break _cc
		case _dd.CharData:
		}
	}
	return nil
}
func (_eadb *CT_TopBot) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
	_eadb.ValAttr = ST_TopBot(1)
	for _, _afega := range start.Attr {
		if _afega.Name.Local == "\u0076\u0061\u006c" {
			_eadb.ValAttr.UnmarshalXMLAttr(_afega)
			continue
		}
	}
	for {
		_ceebc, _gcdeb := d.Token()
		if _gcdeb != nil {
			return _a.Errorf("p\u0061\u0072\u0073\u0069ng\u0020C\u0054\u005f\u0054\u006f\u0070B\u006f\u0074\u003a\u0020\u0025\u0073", _gcdeb)
		}
		if _bdda, _bafc := _ceebc.(_dd.EndElement); _bafc && _bdda.Name == start.Name {
			break
		}
	}
	return nil
}

type CT_Func struct {
	FuncPr *CT_FuncPr
	FName  *CT_OMathArg
	E      *CT_OMathArg
}

func (_gfdbf *ST_Shp) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
	_bbdb, _gcdec := d.Token()
	if _gcdec != nil {
		return _gcdec
	}
	if _cggbg, _fffe := _bbdb.(_dd.EndElement); _fffe && _cggbg.Name == start.Name {
		*_gfdbf = 1
		return nil
	}
	if _dddcc, _aebaa := _bbdb.(_dd.CharData); !_aebaa {
		return _a.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _bbdb)
	} else {
		switch string(_dddcc) {
		case "":
			*_gfdbf = 0
		case "\u0063\u0065\u006e\u0074\u0065\u0072\u0065\u0064":
			*_gfdbf = 1
		case "\u006d\u0061\u0074c\u0068":
			*_gfdbf = 2
		}
	}
	_bbdb, _gcdec = d.Token()
	if _gcdec != nil {
		return _gcdec
	}
	if _ffgbc, _dbca := _bbdb.(_dd.EndElement); _dbca && _ffgbc.Name == start.Name {
		return nil
	}
	return _a.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _bbdb)
}
func (_bgfb *EG_OMathMathElements) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	if _bgfb.Acc != nil {
		_fefdd := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0061c\u0063"}}
		e.EncodeElement(_bgfb.Acc, _fefdd)
	}
	if _bgfb.Bar != nil {
		_degc := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0062a\u0072"}}
		e.EncodeElement(_bgfb.Bar, _degc)
	}
	if _bgfb.Box != nil {
		_eggd := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0062o\u0078"}}
		e.EncodeElement(_bgfb.Box, _eggd)
	}
	if _bgfb.BorderBox != nil {
		_adbdg := _dd.StartElement{Name: _dd.Name{Local: "m\u003a\u0062\u006f\u0072\u0064\u0065\u0072\u0042\u006f\u0078"}}
		e.EncodeElement(_bgfb.BorderBox, _adbdg)
	}
	if _bgfb.D != nil {
		_gedf := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0064"}}
		e.EncodeElement(_bgfb.D, _gedf)
	}
	if _bgfb.EqArr != nil {
		_faeee := _dd.StartElement{Name: _dd.Name{Local: "\u006d:\u0065\u0071\u0041\u0072\u0072"}}
		e.EncodeElement(_bgfb.EqArr, _faeee)
	}
	if _bgfb.F != nil {
		_ggfb := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0066"}}
		e.EncodeElement(_bgfb.F, _ggfb)
	}
	if _bgfb.Func != nil {
		_gedff := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0066\u0075\u006e\u0063"}}
		e.EncodeElement(_bgfb.Func, _gedff)
	}
	if _bgfb.GroupChr != nil {
		_gffge := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0067\u0072\u006f\u0075\u0070\u0043\u0068\u0072"}}
		e.EncodeElement(_bgfb.GroupChr, _gffge)
	}
	if _bgfb.LimLow != nil {
		_acfcd := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u006c\u0069\u006d\u004c\u006f\u0077"}}
		e.EncodeElement(_bgfb.LimLow, _acfcd)
	}
	if _bgfb.LimUpp != nil {
		_bbcaa := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u006c\u0069\u006d\u0055\u0070\u0070"}}
		e.EncodeElement(_bgfb.LimUpp, _bbcaa)
	}
	if _bgfb.M != nil {
		_dfbf := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u006d"}}
		e.EncodeElement(_bgfb.M, _dfbf)
	}
	if _bgfb.Nary != nil {
		_afbgb := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u006e\u0061\u0072\u0079"}}
		e.EncodeElement(_bgfb.Nary, _afbgb)
	}
	if _bgfb.Phant != nil {
		_fgbf := _dd.StartElement{Name: _dd.Name{Local: "\u006d:\u0070\u0068\u0061\u006e\u0074"}}
		e.EncodeElement(_bgfb.Phant, _fgbf)
	}
	if _bgfb.Rad != nil {
		_eagc := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0072a\u0064"}}
		e.EncodeElement(_bgfb.Rad, _eagc)
	}
	if _bgfb.SPre != nil {
		_agfbb := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0073\u0050\u0072\u0065"}}
		e.EncodeElement(_bgfb.SPre, _agfbb)
	}
	if _bgfb.SSub != nil {
		_ecbag := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0073\u0053\u0075\u0062"}}
		e.EncodeElement(_bgfb.SSub, _ecbag)
	}
	if _bgfb.SSubSup != nil {
		_cefa := _dd.StartElement{Name: _dd.Name{Local: "\u006d:\u0073\u0053\u0075\u0062\u0053\u0075p"}}
		e.EncodeElement(_bgfb.SSubSup, _cefa)
	}
	if _bgfb.SSup != nil {
		_egeab := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0073\u0053\u0075\u0070"}}
		e.EncodeElement(_bgfb.SSup, _egeab)
	}
	if _bgfb.R != nil {
		_ddbef := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0072"}}
		e.EncodeElement(_bgfb.R, _ddbef)
	}
	return nil
}
func (_ecbbbe *CT_YAlign) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
	_ecbbbe.ValAttr = _g.ST_YAlign(1)
	for _, _adfc := range start.Attr {
		if _adfc.Name.Local == "\u0076\u0061\u006c" {
			_ecbbbe.ValAttr.UnmarshalXMLAttr(_adfc)
			continue
		}
	}
	for {
		_aedg, _ggeeg := d.Token()
		if _ggeeg != nil {
			return _a.Errorf("p\u0061\u0072\u0073\u0069ng\u0020C\u0054\u005f\u0059\u0041\u006ci\u0067\u006e\u003a\u0020\u0025\u0073", _ggeeg)
		}
		if _gdbg, _dabf := _aedg.(_dd.EndElement); _dabf && _gdbg.Name == start.Name {
			break
		}
	}
	return nil
}

// ValidateWithPath validates the CT_Integer255 and its children, prefixing error messages with path
func (_adf *CT_Integer255) ValidateWithPath(path string) error {
	if _adf.ValAttr < 1 {
		return _a.Errorf("%\u0073\u002f\u006d\u002e\u0056\u0061l\u0041\u0074\u0074\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u003e=\u0020\u0031\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, _adf.ValAttr)
	}
	if _adf.ValAttr > 255 {
		return _a.Errorf("\u0025\u0073/\u006d\u002e\u0056\u0061l\u0041\u0074t\u0072\u0020\u006d\u0075\u0073\u0074\u0020\u0062e\u0020\u003c\u003d\u0020\u0032\u0035\u0035\u0020\u0028\u0068\u0061\u0076e\u0020\u0025\u0076\u0029", path, _adf.ValAttr)
	}
	return nil
}
func NewCT_M() *CT_M { _gbdd := &CT_M{}; return _gbdd }
func (_bcag *CT_MPr) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
_bbdd:
	for {
		_eagd, _acdb := d.Token()
		if _acdb != nil {
			return _acdb
		}
		switch _cdd := _eagd.(type) {
		case _dd.StartElement:
			switch _cdd.Name {
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0062\u0061\u0073\u0065\u004a\u0063"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0062\u0061\u0073\u0065\u004a\u0063"}:
				_bcag.BaseJc = NewCT_YAlign()
				if _bfdg := d.DecodeElement(_bcag.BaseJc, &_cdd); _bfdg != nil {
					return _bfdg
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0070l\u0063\u0048\u0069\u0064\u0065"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0070l\u0063\u0048\u0069\u0064\u0065"}:
				_bcag.PlcHide = NewCT_OnOff()
				if _gce := d.DecodeElement(_bcag.PlcHide, &_cdd); _gce != nil {
					return _gce
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0072S\u0070\u0052\u0075\u006c\u0065"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0072S\u0070\u0052\u0075\u006c\u0065"}:
				_bcag.RSpRule = NewCT_SpacingRule()
				if _fed := d.DecodeElement(_bcag.RSpRule, &_cdd); _fed != nil {
					return _fed
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0063G\u0070\u0052\u0075\u006c\u0065"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0063G\u0070\u0052\u0075\u006c\u0065"}:
				_bcag.CGpRule = NewCT_SpacingRule()
				if _abd := d.DecodeElement(_bcag.CGpRule, &_cdd); _abd != nil {
					return _abd
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0072\u0053\u0070"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0072\u0053\u0070"}:
				_bcag.RSp = NewCT_UnSignedInteger()
				if _bdgd := d.DecodeElement(_bcag.RSp, &_cdd); _bdgd != nil {
					return _bdgd
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0063\u0053\u0070"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0063\u0053\u0070"}:
				_bcag.CSp = NewCT_UnSignedInteger()
				if _dgfa := d.DecodeElement(_bcag.CSp, &_cdd); _dgfa != nil {
					return _dgfa
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0063\u0047\u0070"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0063\u0047\u0070"}:
				_bcag.CGp = NewCT_UnSignedInteger()
				if _ebae := d.DecodeElement(_bcag.CGp, &_cdd); _ebae != nil {
					return _ebae
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u006d\u0063\u0073"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u006d\u0063\u0073"}:
				_bcag.Mcs = NewCT_MCS()
				if _cdbb := d.DecodeElement(_bcag.Mcs, &_cdd); _cdbb != nil {
					return _cdbb
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0063\u0074\u0072\u006c\u0050\u0072"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0063\u0074\u0072\u006c\u0050\u0072"}:
				_bcag.CtrlPr = NewCT_CtrlPr()
				if _dgb := d.DecodeElement(_bcag.CtrlPr, &_cdd); _dgb != nil {
					return _dgb
				}
			default:
				_c.Log.Debug("\u0073\u006b\u0069\u0070\u0070i\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u004d\u0050\u0072\u0020\u0025\u0076", _cdd.Name)
				if _fefb := d.Skip(); _fefb != nil {
					return _fefb
				}
			}
		case _dd.EndElement:
			break _bbdd
		case _dd.CharData:
		}
	}
	return nil
}

type ST_Jc byte
type EG_OMathElements struct{ EG_OMathMathElements []*EG_OMathMathElements }

func (_acfb *CT_MPr) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	e.EncodeToken(start)
	if _acfb.BaseJc != nil {
		_cbbg := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0062\u0061\u0073\u0065\u004a\u0063"}}
		e.EncodeElement(_acfb.BaseJc, _cbbg)
	}
	if _acfb.PlcHide != nil {
		_fgc := _dd.StartElement{Name: _dd.Name{Local: "\u006d:\u0070\u006c\u0063\u0048\u0069\u0064e"}}
		e.EncodeElement(_acfb.PlcHide, _fgc)
	}
	if _acfb.RSpRule != nil {
		_bfc := _dd.StartElement{Name: _dd.Name{Local: "\u006d:\u0072\u0053\u0070\u0052\u0075\u006ce"}}
		e.EncodeElement(_acfb.RSpRule, _bfc)
	}
	if _acfb.CGpRule != nil {
		_deba := _dd.StartElement{Name: _dd.Name{Local: "\u006d:\u0063\u0047\u0070\u0052\u0075\u006ce"}}
		e.EncodeElement(_acfb.CGpRule, _deba)
	}
	if _acfb.RSp != nil {
		_adba := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0072S\u0070"}}
		e.EncodeElement(_acfb.RSp, _adba)
	}
	if _acfb.CSp != nil {
		_gdf := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0063S\u0070"}}
		e.EncodeElement(_acfb.CSp, _gdf)
	}
	if _acfb.CGp != nil {
		_gcc := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0063G\u0070"}}
		e.EncodeElement(_acfb.CGp, _gcc)
	}
	if _acfb.Mcs != nil {
		_cegd := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u006dc\u0073"}}
		e.EncodeElement(_acfb.Mcs, _cegd)
	}
	if _acfb.CtrlPr != nil {
		_bbca := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0063\u0074\u0072\u006c\u0050\u0072"}}
		e.EncodeElement(_acfb.CtrlPr, _bbca)
	}
	e.EncodeToken(_dd.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the EG_ScriptStyle and its children, prefixing error messages with path
func (_bfcb *EG_ScriptStyle) ValidateWithPath(path string) error {
	if _bfcb.Scr != nil {
		if _bgbbe := _bfcb.Scr.ValidateWithPath(path + "\u002f\u0053\u0063\u0072"); _bgbbe != nil {
			return _bgbbe
		}
	}
	if _bfcb.Sty != nil {
		if _efe := _bfcb.Sty.ValidateWithPath(path + "\u002f\u0053\u0074\u0079"); _efe != nil {
			return _efe
		}
	}
	return nil
}

// ValidateWithPath validates the CT_MR and its children, prefixing error messages with path
func (_ebe *CT_MR) ValidateWithPath(path string) error {
	for _gegb, _dbaa := range _ebe.E {
		if _bbba := _dbaa.ValidateWithPath(_a.Sprintf("\u0025\u0073\u002f\u0045\u005b\u0025\u0064\u005d", path, _gegb)); _bbba != nil {
			return _bbba
		}
	}
	return nil
}
func (_fadbf ST_BreakBin) MarshalXMLAttr(name _dd.Name) (_dd.Attr, error) {
	_cfcg := _dd.Attr{}
	_cfcg.Name = name
	switch _fadbf {
	case ST_BreakBinUnset:
		_cfcg.Value = ""
	case ST_BreakBinBefore:
		_cfcg.Value = "\u0062\u0065\u0066\u006f\u0072\u0065"
	case ST_BreakBinAfter:
		_cfcg.Value = "\u0061\u0066\u0074e\u0072"
	case ST_BreakBinRepeat:
		_cfcg.Value = "\u0072\u0065\u0070\u0065\u0061\u0074"
	}
	return _cfcg, nil
}

// ValidateWithPath validates the CT_LimLowPr and its children, prefixing error messages with path
func (_cgde *CT_LimLowPr) ValidateWithPath(path string) error {
	if _cgde.CtrlPr != nil {
		if _dbbg := _cgde.CtrlPr.ValidateWithPath(path + "\u002fC\u0074\u0072\u006c\u0050\u0072"); _dbbg != nil {
			return _dbbg
		}
	}
	return nil
}

// Validate validates the CT_SSubSup and its children
func (_bcbbg *CT_SSubSup) Validate() error {
	return _bcbbg.ValidateWithPath("\u0043\u0054\u005f\u0053\u0053\u0075\u0062\u0053\u0075\u0070")
}

type ST_Shp byte
type ST_Script byte

// Validate validates the CT_ManualBreak and its children
func (_gba *CT_ManualBreak) Validate() error {
	return _gba.ValidateWithPath("\u0043\u0054\u005f\u004d\u0061\u006e\u0075\u0061\u006cB\u0072\u0065\u0061\u006b")
}

// Validate validates the OMath and its children
func (_decgb *OMath) Validate() error { return _decgb.ValidateWithPath("\u004f\u004d\u0061t\u0068") }
func NewCT_MCPr() *CT_MCPr            { _ccee := &CT_MCPr{}; return _ccee }

type CT_GroupChrPr struct {
	Chr    *CT_Char
	Pos    *CT_TopBot
	VertJc *CT_TopBot
	CtrlPr *CT_CtrlPr
}

// ValidateWithPath validates the CT_BreakBinSub and its children, prefixing error messages with path
func (_ef *CT_BreakBinSub) ValidateWithPath(path string) error {
	if _fce := _ef.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _fce != nil {
		return _fce
	}
	return nil
}

// ValidateWithPath validates the CT_Acc and its children, prefixing error messages with path
func (_bgg *CT_Acc) ValidateWithPath(path string) error {
	if _bgg.AccPr != nil {
		if _dgg := _bgg.AccPr.ValidateWithPath(path + "\u002f\u0041\u0063\u0063\u0050\u0072"); _dgg != nil {
			return _dgg
		}
	}
	if _ae := _bgg.E.ValidateWithPath(path + "\u002f\u0045"); _ae != nil {
		return _ae
	}
	return nil
}
func NewCT_UnSignedInteger() *CT_UnSignedInteger { _cedc := &CT_UnSignedInteger{}; return _cedc }

type CT_OMathJc struct{ ValAttr ST_Jc }

func (_gb *CT_Bar) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
	_gb.E = NewCT_OMathArg()
_cff:
	for {
		_ge, _afb := d.Token()
		if _afb != nil {
			return _afb
		}
		switch _df := _ge.(type) {
		case _dd.StartElement:
			switch _df.Name {
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0062\u0061\u0072P\u0072"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0062\u0061\u0072P\u0072"}:
				_gb.BarPr = NewCT_BarPr()
				if _dc := d.DecodeElement(_gb.BarPr, &_df); _dc != nil {
					return _dc
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0065"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0065"}:
				if _fe := d.DecodeElement(_gb.E, &_df); _fe != nil {
					return _fe
				}
			default:
				_c.Log.Debug("\u0073\u006b\u0069\u0070\u0070i\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0042\u0061\u0072\u0020\u0025\u0076", _df.Name)
				if _aee := d.Skip(); _aee != nil {
					return _aee
				}
			}
		case _dd.EndElement:
			break _cff
		case _dd.CharData:
		}
	}
	return nil
}

type CT_OMath struct{ EG_OMathMathElements []*EG_OMathMathElements }

func (_baac *CT_DPr) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
_gbdg:
	for {
		_cbb, _def := d.Token()
		if _def != nil {
			return _def
		}
		switch _bec := _cbb.(type) {
		case _dd.StartElement:
			switch _bec.Name {
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0062\u0065\u0067\u0043\u0068\u0072"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0062\u0065\u0067\u0043\u0068\u0072"}:
				_baac.BegChr = NewCT_Char()
				if _faf := d.DecodeElement(_baac.BegChr, &_bec); _faf != nil {
					return _faf
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0073\u0065\u0070\u0043\u0068\u0072"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0073\u0065\u0070\u0043\u0068\u0072"}:
				_baac.SepChr = NewCT_Char()
				if _dff := d.DecodeElement(_baac.SepChr, &_bec); _dff != nil {
					return _dff
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0065\u006e\u0064\u0043\u0068\u0072"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0065\u006e\u0064\u0043\u0068\u0072"}:
				_baac.EndChr = NewCT_Char()
				if _dfa := d.DecodeElement(_baac.EndChr, &_bec); _dfa != nil {
					return _dfa
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0067\u0072\u006f\u0077"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0067\u0072\u006f\u0077"}:
				_baac.Grow = NewCT_OnOff()
				if _ccd := d.DecodeElement(_baac.Grow, &_bec); _ccd != nil {
					return _ccd
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0073\u0068\u0070"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0073\u0068\u0070"}:
				_baac.Shp = NewCT_Shp()
				if _fbe := d.DecodeElement(_baac.Shp, &_bec); _fbe != nil {
					return _fbe
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0063\u0074\u0072\u006c\u0050\u0072"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0063\u0074\u0072\u006c\u0050\u0072"}:
				_baac.CtrlPr = NewCT_CtrlPr()
				if _ede := d.DecodeElement(_baac.CtrlPr, &_bec); _ede != nil {
					return _ede
				}
			default:
				_c.Log.Debug("\u0073\u006b\u0069\u0070\u0070i\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0044\u0050\u0072\u0020\u0025\u0076", _bec.Name)
				if _cce := d.Skip(); _cce != nil {
					return _cce
				}
			}
		case _dd.EndElement:
			break _gbdg
		case _dd.CharData:
		}
	}
	return nil
}
func (_cefc *CT_Style) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	if _cefc.ValAttr != ST_StyleUnset {
		_gbba, _fcgd := _cefc.ValAttr.MarshalXMLAttr(_dd.Name{Local: "\u006d\u003a\u0076a\u006c"})
		if _fcgd != nil {
			return _fcgd
		}
		start.Attr = append(start.Attr, _gbba)
	}
	e.EncodeToken(start)
	e.EncodeToken(_dd.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_String and its children
func (_cggee *CT_String) Validate() error {
	return _cggee.ValidateWithPath("\u0043T\u005f\u0053\u0074\u0072\u0069\u006eg")
}

type CT_GroupChr struct {
	GroupChrPr *CT_GroupChrPr
	E          *CT_OMathArg
}

// ValidateWithPath validates the CT_LimLow and its children, prefixing error messages with path
func (_ebf *CT_LimLow) ValidateWithPath(path string) error {
	if _ebf.LimLowPr != nil {
		if _fegf := _ebf.LimLowPr.ValidateWithPath(path + "\u002fL\u0069\u006d\u004c\u006f\u0077\u0050r"); _fegf != nil {
			return _fegf
		}
	}
	if _acd := _ebf.E.ValidateWithPath(path + "\u002f\u0045"); _acd != nil {
		return _acd
	}
	if _gbe := _ebf.Lim.ValidateWithPath(path + "\u002f\u004c\u0069\u006d"); _gbe != nil {
		return _gbe
	}
	return nil
}

type CT_MathPrChoice struct {
	WrapIndent *CT_TwipsMeasure
	WrapRight  *CT_OnOff
}

func NewCT_FuncPr() *CT_FuncPr { _cead := &CT_FuncPr{}; return _cead }
func NewCT_SPrePr() *CT_SPrePr { _fdde := &CT_SPrePr{}; return _fdde }
func (_ddbd *CT_OMath) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
_gabe:
	for {
		_gaag, _cegf := d.Token()
		if _cegf != nil {
			return _cegf
		}
		switch _gacba := _gaag.(type) {
		case _dd.StartElement:
			switch _gacba.Name {
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0061\u0063\u0063"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0061\u0063\u0063"}:
				_eeb := NewEG_OMathMathElements()
				_eeb.Acc = NewCT_Acc()
				if _eacf := d.DecodeElement(_eeb.Acc, &_gacba); _eacf != nil {
					return _eacf
				}
				_ddbd.EG_OMathMathElements = append(_ddbd.EG_OMathMathElements, _eeb)
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0062\u0061\u0072"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0062\u0061\u0072"}:
				_cecg := NewEG_OMathMathElements()
				_cecg.Bar = NewCT_Bar()
				if _fedb := d.DecodeElement(_cecg.Bar, &_gacba); _fedb != nil {
					return _fedb
				}
				_ddbd.EG_OMathMathElements = append(_ddbd.EG_OMathMathElements, _cecg)
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0062\u006f\u0078"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0062\u006f\u0078"}:
				_cdcd := NewEG_OMathMathElements()
				_cdcd.Box = NewCT_Box()
				if _ecbc := d.DecodeElement(_cdcd.Box, &_gacba); _ecbc != nil {
					return _ecbc
				}
				_ddbd.EG_OMathMathElements = append(_ddbd.EG_OMathMathElements, _cdcd)
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0062o\u0072\u0064\u0065\u0072\u0042\u006fx"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0062o\u0072\u0064\u0065\u0072\u0042\u006fx"}:
				_caga := NewEG_OMathMathElements()
				_caga.BorderBox = NewCT_BorderBox()
				if _ceaed := d.DecodeElement(_caga.BorderBox, &_gacba); _ceaed != nil {
					return _ceaed
				}
				_ddbd.EG_OMathMathElements = append(_ddbd.EG_OMathMathElements, _caga)
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0064"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0064"}:
				_bbedc := NewEG_OMathMathElements()
				_bbedc.D = NewCT_D()
				if _bggcb := d.DecodeElement(_bbedc.D, &_gacba); _bggcb != nil {
					return _bggcb
				}
				_ddbd.EG_OMathMathElements = append(_ddbd.EG_OMathMathElements, _bbedc)
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0065\u0071\u0041r\u0072"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0065\u0071\u0041r\u0072"}:
				_dadd := NewEG_OMathMathElements()
				_dadd.EqArr = NewCT_EqArr()
				if _fbdb := d.DecodeElement(_dadd.EqArr, &_gacba); _fbdb != nil {
					return _fbdb
				}
				_ddbd.EG_OMathMathElements = append(_ddbd.EG_OMathMathElements, _dadd)
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0066"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0066"}:
				_afa := NewEG_OMathMathElements()
				_afa.F = NewCT_F()
				if _badf := d.DecodeElement(_afa.F, &_gacba); _badf != nil {
					return _badf
				}
				_ddbd.EG_OMathMathElements = append(_ddbd.EG_OMathMathElements, _afa)
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0066\u0075\u006e\u0063"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0066\u0075\u006e\u0063"}:
				_bcfb := NewEG_OMathMathElements()
				_bcfb.Func = NewCT_Func()
				if _geb := d.DecodeElement(_bcfb.Func, &_gacba); _geb != nil {
					return _geb
				}
				_ddbd.EG_OMathMathElements = append(_ddbd.EG_OMathMathElements, _bcfb)
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0067\u0072\u006f\u0075\u0070\u0043\u0068\u0072"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0067\u0072\u006f\u0075\u0070\u0043\u0068\u0072"}:
				_gegd := NewEG_OMathMathElements()
				_gegd.GroupChr = NewCT_GroupChr()
				if _ddbb := d.DecodeElement(_gegd.GroupChr, &_gacba); _ddbb != nil {
					return _ddbb
				}
				_ddbd.EG_OMathMathElements = append(_ddbd.EG_OMathMathElements, _gegd)
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u006c\u0069\u006d\u004c\u006f\u0077"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u006c\u0069\u006d\u004c\u006f\u0077"}:
				_fabb := NewEG_OMathMathElements()
				_fabb.LimLow = NewCT_LimLow()
				if _defg := d.DecodeElement(_fabb.LimLow, &_gacba); _defg != nil {
					return _defg
				}
				_ddbd.EG_OMathMathElements = append(_ddbd.EG_OMathMathElements, _fabb)
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u006c\u0069\u006d\u0055\u0070\u0070"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u006c\u0069\u006d\u0055\u0070\u0070"}:
				_cee := NewEG_OMathMathElements()
				_cee.LimUpp = NewCT_LimUpp()
				if _gbbf := d.DecodeElement(_cee.LimUpp, &_gacba); _gbbf != nil {
					return _gbbf
				}
				_ddbd.EG_OMathMathElements = append(_ddbd.EG_OMathMathElements, _cee)
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u006d"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u006d"}:
				_agdf := NewEG_OMathMathElements()
				_agdf.M = NewCT_M()
				if _bcfg := d.DecodeElement(_agdf.M, &_gacba); _bcfg != nil {
					return _bcfg
				}
				_ddbd.EG_OMathMathElements = append(_ddbd.EG_OMathMathElements, _agdf)
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u006e\u0061\u0072\u0079"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u006e\u0061\u0072\u0079"}:
				_gbea := NewEG_OMathMathElements()
				_gbea.Nary = NewCT_Nary()
				if _cfgc := d.DecodeElement(_gbea.Nary, &_gacba); _cfgc != nil {
					return _cfgc
				}
				_ddbd.EG_OMathMathElements = append(_ddbd.EG_OMathMathElements, _gbea)
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0070\u0068\u0061n\u0074"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0070\u0068\u0061n\u0074"}:
				_gagf := NewEG_OMathMathElements()
				_gagf.Phant = NewCT_Phant()
				if _acgg := d.DecodeElement(_gagf.Phant, &_gacba); _acgg != nil {
					return _acgg
				}
				_ddbd.EG_OMathMathElements = append(_ddbd.EG_OMathMathElements, _gagf)
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0072\u0061\u0064"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0072\u0061\u0064"}:
				_cgge := NewEG_OMathMathElements()
				_cgge.Rad = NewCT_Rad()
				if _faec := d.DecodeElement(_cgge.Rad, &_gacba); _faec != nil {
					return _faec
				}
				_ddbd.EG_OMathMathElements = append(_ddbd.EG_OMathMathElements, _cgge)
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0073\u0050\u0072\u0065"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0073\u0050\u0072\u0065"}:
				_ddgd := NewEG_OMathMathElements()
				_ddgd.SPre = NewCT_SPre()
				if _efag := d.DecodeElement(_ddgd.SPre, &_gacba); _efag != nil {
					return _efag
				}
				_ddbd.EG_OMathMathElements = append(_ddbd.EG_OMathMathElements, _ddgd)
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0073\u0053\u0075\u0062"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0073\u0053\u0075\u0062"}:
				_aaec := NewEG_OMathMathElements()
				_aaec.SSub = NewCT_SSub()
				if _dfgf := d.DecodeElement(_aaec.SSub, &_gacba); _dfgf != nil {
					return _dfgf
				}
				_ddbd.EG_OMathMathElements = append(_ddbd.EG_OMathMathElements, _aaec)
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0073S\u0075\u0062\u0053\u0075\u0070"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0073S\u0075\u0062\u0053\u0075\u0070"}:
				_dcc := NewEG_OMathMathElements()
				_dcc.SSubSup = NewCT_SSubSup()
				if _fefg := d.DecodeElement(_dcc.SSubSup, &_gacba); _fefg != nil {
					return _fefg
				}
				_ddbd.EG_OMathMathElements = append(_ddbd.EG_OMathMathElements, _dcc)
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0073\u0053\u0075\u0070"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0073\u0053\u0075\u0070"}:
				_acde := NewEG_OMathMathElements()
				_acde.SSup = NewCT_SSup()
				if _cece := d.DecodeElement(_acde.SSup, &_gacba); _cece != nil {
					return _cece
				}
				_ddbd.EG_OMathMathElements = append(_ddbd.EG_OMathMathElements, _acde)
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0072"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0072"}:
				_bdgdb := NewEG_OMathMathElements()
				_bdgdb.R = NewCT_R()
				if _fbdd := d.DecodeElement(_bdgdb.R, &_gacba); _fbdd != nil {
					return _fbdd
				}
				_ddbd.EG_OMathMathElements = append(_ddbd.EG_OMathMathElements, _bdgdb)
			default:
				_c.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006eg\u0020\u0075\u006es\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u004f\u004d\u0061\u0074\u0068\u0020\u0025\u0076", _gacba.Name)
				if _age := d.Skip(); _age != nil {
					return _age
				}
			}
		case _dd.EndElement:
			break _gabe
		case _dd.CharData:
		}
	}
	return nil
}

type CT_OMathParaPr struct{ Jc *CT_OMathJc }

func (_ccca *CT_RPRChoice) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
_acdef:
	for {
		_acae, _afbeg := d.Token()
		if _afbeg != nil {
			return _afbeg
		}
		switch _eadc := _acae.(type) {
		case _dd.StartElement:
			switch _eadc.Name {
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u006e\u006f\u0072"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u006e\u006f\u0072"}:
				_ccca.Nor = NewCT_OnOff()
				if _cccaa := d.DecodeElement(_ccca.Nor, &_eadc); _cccaa != nil {
					return _cccaa
				}
			default:
				_c.Log.Debug("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075n\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054_R\u0050\u0052C\u0068\u006f\u0069\u0063\u0065\u0020\u0025\u0076", _eadc.Name)
				if _fdda := d.Skip(); _fdda != nil {
					return _fdda
				}
			}
		case _dd.EndElement:
			break _acdef
		case _dd.CharData:
		}
	}
	return nil
}
func (_gecge *CT_TopBot) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	_gccgg, _afce := _gecge.ValAttr.MarshalXMLAttr(_dd.Name{Local: "\u006d\u003a\u0076a\u006c"})
	if _afce != nil {
		return _afce
	}
	start.Attr = append(start.Attr, _gccgg)
	e.EncodeToken(start)
	e.EncodeToken(_dd.EndElement{Name: start.Name})
	return nil
}

type CT_LimUppPr struct{ CtrlPr *CT_CtrlPr }

func (_ccf ST_LimLoc) String() string {
	switch _ccf {
	case 0:
		return ""
	case 1:
		return "\u0075\u006e\u0064\u004f\u0076\u0072"
	case 2:
		return "\u0073\u0075\u0062\u0053\u0075\u0070"
	}
	return ""
}
func (_fddeb ST_FType) ValidateWithPath(path string) error {
	switch _fddeb {
	case 0, 1, 2, 3, 4:
	default:
		return _a.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_fddeb))
	}
	return nil
}
func (_fded ST_TopBot) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	return e.EncodeElement(_fded.String(), start)
}

type CT_OMathArgPr struct{ ArgSz *CT_Integer2 }

func NewCT_GroupChrPr() *CT_GroupChrPr { _ffb := &CT_GroupChrPr{}; return _ffb }

// Validate validates the CT_Char and its children
func (_cgbg *CT_Char) Validate() error {
	return _cgbg.ValidateWithPath("\u0043T\u005f\u0043\u0068\u0061\u0072")
}
func (_bcddg *MathPr) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
	_bcddg.CT_MathPr = *NewCT_MathPr()
_bfdbe:
	for {
		_eccg, _bcbbgb := d.Token()
		if _bcbbgb != nil {
			return _bcbbgb
		}
		switch _dbaf := _eccg.(type) {
		case _dd.StartElement:
			switch _dbaf.Name {
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u006d\u0061\u0074\u0068\u0046\u006f\u006e\u0074"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u006d\u0061\u0074\u0068\u0046\u006f\u006e\u0074"}:
				_bcddg.MathFont = NewCT_String()
				if _dfbd := d.DecodeElement(_bcddg.MathFont, &_dbaf); _dfbd != nil {
					return _dfbd
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0062\u0072\u006b\u0042\u0069\u006e"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0062\u0072\u006b\u0042\u0069\u006e"}:
				_bcddg.BrkBin = NewCT_BreakBin()
				if _gefa := d.DecodeElement(_bcddg.BrkBin, &_dbaf); _gefa != nil {
					return _gefa
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0062r\u006b\u0042\u0069\u006e\u0053\u0075b"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0062r\u006b\u0042\u0069\u006e\u0053\u0075b"}:
				_bcddg.BrkBinSub = NewCT_BreakBinSub()
				if _egfa := d.DecodeElement(_bcddg.BrkBinSub, &_dbaf); _egfa != nil {
					return _egfa
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0073m\u0061\u006c\u006c\u0046\u0072\u0061c"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0073m\u0061\u006c\u006c\u0046\u0072\u0061c"}:
				_bcddg.SmallFrac = NewCT_OnOff()
				if _cada := d.DecodeElement(_bcddg.SmallFrac, &_dbaf); _cada != nil {
					return _cada
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0064i\u0073\u0070\u0044\u0065\u0066"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0064i\u0073\u0070\u0044\u0065\u0066"}:
				_bcddg.DispDef = NewCT_OnOff()
				if _fafbb := d.DecodeElement(_bcddg.DispDef, &_dbaf); _fafbb != nil {
					return _fafbb
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u006cM\u0061\u0072\u0067\u0069\u006e"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u006cM\u0061\u0072\u0067\u0069\u006e"}:
				_bcddg.LMargin = NewCT_TwipsMeasure()
				if _faecg := d.DecodeElement(_bcddg.LMargin, &_dbaf); _faecg != nil {
					return _faecg
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0072M\u0061\u0072\u0067\u0069\u006e"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0072M\u0061\u0072\u0067\u0069\u006e"}:
				_bcddg.RMargin = NewCT_TwipsMeasure()
				if _ebcbf := d.DecodeElement(_bcddg.RMargin, &_dbaf); _ebcbf != nil {
					return _ebcbf
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0064\u0065\u0066J\u0063"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0064\u0065\u0066J\u0063"}:
				_bcddg.DefJc = NewCT_OMathJc()
				if _ffgaf := d.DecodeElement(_bcddg.DefJc, &_dbaf); _ffgaf != nil {
					return _ffgaf
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0070\u0072\u0065S\u0070"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0070\u0072\u0065S\u0070"}:
				_bcddg.PreSp = NewCT_TwipsMeasure()
				if _dcabf := d.DecodeElement(_bcddg.PreSp, &_dbaf); _dcabf != nil {
					return _dcabf
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0070\u006f\u0073\u0074\u0053\u0070"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0070\u006f\u0073\u0074\u0053\u0070"}:
				_bcddg.PostSp = NewCT_TwipsMeasure()
				if _ecbcf := d.DecodeElement(_bcddg.PostSp, &_dbaf); _ecbcf != nil {
					return _ecbcf
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0069n\u0074\u0065\u0072\u0053\u0070"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0069n\u0074\u0065\u0072\u0053\u0070"}:
				_bcddg.InterSp = NewCT_TwipsMeasure()
				if _caac := d.DecodeElement(_bcddg.InterSp, &_dbaf); _caac != nil {
					return _caac
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0069n\u0074\u0072\u0061\u0053\u0070"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0069n\u0074\u0072\u0061\u0053\u0070"}:
				_bcddg.IntraSp = NewCT_TwipsMeasure()
				if _cbeca := d.DecodeElement(_bcddg.IntraSp, &_dbaf); _cbeca != nil {
					return _cbeca
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0077\u0072\u0061\u0070\u0049\u006e\u0064\u0065\u006e\u0074"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0077\u0072\u0061\u0070\u0049\u006e\u0064\u0065\u006e\u0074"}:
				_bcddg.Choice = NewCT_MathPrChoice()
				if _fcbf := d.DecodeElement(&_bcddg.Choice.WrapIndent, &_dbaf); _fcbf != nil {
					return _fcbf
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0077r\u0061\u0070\u0052\u0069\u0067\u0068t"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0077r\u0061\u0070\u0052\u0069\u0067\u0068t"}:
				_bcddg.Choice = NewCT_MathPrChoice()
				if _gfaed := d.DecodeElement(&_bcddg.Choice.WrapRight, &_dbaf); _gfaed != nil {
					return _gfaed
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0069\u006e\u0074\u004c\u0069\u006d"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0069\u006e\u0074\u004c\u0069\u006d"}:
				_bcddg.IntLim = NewCT_LimLoc()
				if _eafb := d.DecodeElement(_bcddg.IntLim, &_dbaf); _eafb != nil {
					return _eafb
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u006ea\u0072\u0079\u004c\u0069\u006d"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u006ea\u0072\u0079\u004c\u0069\u006d"}:
				_bcddg.NaryLim = NewCT_LimLoc()
				if _deed := d.DecodeElement(_bcddg.NaryLim, &_dbaf); _deed != nil {
					return _deed
				}
			default:
				_c.Log.Debug("\u0073\u006b\u0069\u0070\u0070i\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u004d\u0061\u0074\u0068\u0050\u0072\u0020\u0025\u0076", _dbaf.Name)
				if _eeba := d.Skip(); _eeba != nil {
					return _eeba
				}
			}
		case _dd.EndElement:
			break _bfdbe
		case _dd.CharData:
		}
	}
	return nil
}
func (_bfcda ST_FType) MarshalXMLAttr(name _dd.Name) (_dd.Attr, error) {
	_gcaab := _dd.Attr{}
	_gcaab.Name = name
	switch _bfcda {
	case ST_FTypeUnset:
		_gcaab.Value = ""
	case ST_FTypeBar:
		_gcaab.Value = "\u0062\u0061\u0072"
	case ST_FTypeSkw:
		_gcaab.Value = "\u0073\u006b\u0077"
	case ST_FTypeLin:
		_gcaab.Value = "\u006c\u0069\u006e"
	case ST_FTypeNoBar:
		_gcaab.Value = "\u006e\u006f\u0042a\u0072"
	}
	return _gcaab, nil
}

// Validate validates the CT_Integer2 and its children
func (_dac *CT_Integer2) Validate() error {
	return _dac.ValidateWithPath("C\u0054\u005f\u0049\u006e\u0074\u0065\u0067\u0065\u0072\u0032")
}

// ValidateWithPath validates the CT_Rad and its children, prefixing error messages with path
func (_beefc *CT_Rad) ValidateWithPath(path string) error {
	if _beefc.RadPr != nil {
		if _gcdc := _beefc.RadPr.ValidateWithPath(path + "\u002f\u0052\u0061\u0064\u0050\u0072"); _gcdc != nil {
			return _gcdc
		}
	}
	if _ffce := _beefc.Deg.ValidateWithPath(path + "\u002f\u0044\u0065\u0067"); _ffce != nil {
		return _ffce
	}
	if _eaac := _beefc.E.ValidateWithPath(path + "\u002f\u0045"); _eaac != nil {
		return _eaac
	}
	return nil
}
func (_feee *ST_LimLoc) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
	_gfbf, _geac := d.Token()
	if _geac != nil {
		return _geac
	}
	if _abbf, _aaeb := _gfbf.(_dd.EndElement); _aaeb && _abbf.Name == start.Name {
		*_feee = 1
		return nil
	}
	if _aacf, _afac := _gfbf.(_dd.CharData); !_afac {
		return _a.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _gfbf)
	} else {
		switch string(_aacf) {
		case "":
			*_feee = 0
		case "\u0075\u006e\u0064\u004f\u0076\u0072":
			*_feee = 1
		case "\u0073\u0075\u0062\u0053\u0075\u0070":
			*_feee = 2
		}
	}
	_gfbf, _geac = d.Token()
	if _geac != nil {
		return _geac
	}
	if _cdge, _cgfe := _gfbf.(_dd.EndElement); _cgfe && _cdge.Name == start.Name {
		return nil
	}
	return _a.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _gfbf)
}
func NewCT_TopBot() *CT_TopBot { _gcegd := &CT_TopBot{}; _gcegd.ValAttr = ST_TopBot(1); return _gcegd }
func (_acbaa ST_BreakBin) ValidateWithPath(path string) error {
	switch _acbaa {
	case 0, 1, 2, 3:
	default:
		return _a.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_acbaa))
	}
	return nil
}
func NewCT_Bar() *CT_Bar { _bca := &CT_Bar{}; _bca.E = NewCT_OMathArg(); return _bca }

// ValidateWithPath validates the CT_M and its children, prefixing error messages with path
func (_adad *CT_M) ValidateWithPath(path string) error {
	if _adad.MPr != nil {
		if _babd := _adad.MPr.ValidateWithPath(path + "\u002f\u004d\u0050\u0072"); _babd != nil {
			return _babd
		}
	}
	for _dgdb, _cbad := range _adad.Mr {
		if _abfg := _cbad.ValidateWithPath(_a.Sprintf("\u0025s\u002f\u004d\u0072\u005b\u0025\u0064]", path, _dgdb)); _abfg != nil {
			return _abfg
		}
	}
	return nil
}
func NewCT_D() *CT_D { _ceb := &CT_D{}; return _ceb }
func (_afef *CT_FType) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
	_afef.ValAttr = ST_FType(1)
	for _, _fag := range start.Attr {
		if _fag.Name.Local == "\u0076\u0061\u006c" {
			_afef.ValAttr.UnmarshalXMLAttr(_fag)
			continue
		}
	}
	for {
		_gge, _fcecg := d.Token()
		if _fcecg != nil {
			return _a.Errorf("p\u0061r\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fF\u0054\u0079\u0070\u0065: \u0025\u0073", _fcecg)
		}
		if _acfe, _ced := _gge.(_dd.EndElement); _ced && _acfe.Name == start.Name {
			break
		}
	}
	return nil
}

// ValidateWithPath validates the CT_Script and its children, prefixing error messages with path
func (_eagea *CT_Script) ValidateWithPath(path string) error {
	if _gdce := _eagea.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _gdce != nil {
		return _gdce
	}
	return nil
}
func NewCT_Integer2() *CT_Integer2 { _beac := &CT_Integer2{}; _beac.ValAttr = -2; return _beac }

type CT_FuncPr struct{ CtrlPr *CT_CtrlPr }

// Validate validates the CT_EqArrPr and its children
func (_bfea *CT_EqArrPr) Validate() error {
	return _bfea.ValidateWithPath("\u0043\u0054\u005f\u0045\u0071\u0041\u0072\u0072\u0050\u0072")
}

type CT_Box struct {
	BoxPr *CT_BoxPr
	E     *CT_OMathArg
}
type CT_BorderBoxPr struct {
	HideTop    *CT_OnOff
	HideBot    *CT_OnOff
	HideLeft   *CT_OnOff
	HideRight  *CT_OnOff
	StrikeH    *CT_OnOff
	StrikeV    *CT_OnOff
	StrikeBLTR *CT_OnOff
	StrikeTLBR *CT_OnOff
	CtrlPr     *CT_CtrlPr
}

func (_eebb *CT_SSup) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	e.EncodeToken(start)
	if _eebb.SSupPr != nil {
		_fccg := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0073\u0053\u0075\u0070\u0050\u0072"}}
		e.EncodeElement(_eebb.SSupPr, _fccg)
	}
	_gfgb := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0065"}}
	e.EncodeElement(_eebb.E, _gfgb)
	_fcca := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0073u\u0070"}}
	e.EncodeElement(_eebb.Sup, _fcca)
	e.EncodeToken(_dd.EndElement{Name: start.Name})
	return nil
}
func (_ddfcg *EG_OMathElements) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	if _ddfcg.EG_OMathMathElements != nil {
		for _, _ffff := range _ddfcg.EG_OMathMathElements {
			_ffff.MarshalXML(e, _dd.StartElement{})
		}
	}
	return nil
}
func (_fcgdd *ST_Script) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
	_cgfc, _fbeef := d.Token()
	if _fbeef != nil {
		return _fbeef
	}
	if _eecd, _dfdd := _cgfc.(_dd.EndElement); _dfdd && _eecd.Name == start.Name {
		*_fcgdd = 1
		return nil
	}
	if _aggfa, _adbag := _cgfc.(_dd.CharData); !_adbag {
		return _a.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _cgfc)
	} else {
		switch string(_aggfa) {
		case "":
			*_fcgdd = 0
		case "\u0072\u006f\u006da\u006e":
			*_fcgdd = 1
		case "\u0073\u0063\u0072\u0069\u0070\u0074":
			*_fcgdd = 2
		case "\u0066r\u0061\u006b\u0074\u0075\u0072":
			*_fcgdd = 3
		case "\u0064\u006f\u0075\u0062\u006c\u0065\u002d\u0073\u0074\u0072\u0075\u0063\u006b":
			*_fcgdd = 4
		case "\u0073\u0061\u006e\u0073\u002d\u0073\u0065\u0072\u0069\u0066":
			*_fcgdd = 5
		case "\u006do\u006e\u006f\u0073\u0070\u0061\u0063e":
			*_fcgdd = 6
		}
	}
	_cgfc, _fbeef = d.Token()
	if _fbeef != nil {
		return _fbeef
	}
	if _dbbc, _bedfg := _cgfc.(_dd.EndElement); _bedfg && _dbbc.Name == start.Name {
		return nil
	}
	return _a.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _cgfc)
}
func NewCT_LimLoc() *CT_LimLoc { _ecfa := &CT_LimLoc{}; _ecfa.ValAttr = ST_LimLoc(1); return _ecfa }

// ValidateWithPath validates the CT_FType and its children, prefixing error messages with path
func (_adgc *CT_FType) ValidateWithPath(path string) error {
	if _adgc.ValAttr == ST_FTypeUnset {
		return _a.Errorf("\u0025\u0073\u002fV\u0061\u006c\u0041\u0074t\u0072\u0020\u0069\u0073\u0020\u0061\u0020m\u0061\u006e\u0064\u0061\u0074\u006f\u0072\u0079\u0020\u0066\u0069\u0065\u006c\u0064", path)
	}
	if _ecc := _adgc.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _ecc != nil {
		return _ecc
	}
	return nil
}

// ValidateWithPath validates the CT_MathPrChoice and its children, prefixing error messages with path
func (_babf *CT_MathPrChoice) ValidateWithPath(path string) error {
	if _babf.WrapIndent != nil {
		if _ggac := _babf.WrapIndent.ValidateWithPath(path + "/\u0057\u0072\u0061\u0070\u0049\u006e\u0064\u0065\u006e\u0074"); _ggac != nil {
			return _ggac
		}
	}
	if _babf.WrapRight != nil {
		if _eeef := _babf.WrapRight.ValidateWithPath(path + "\u002f\u0057\u0072\u0061\u0070\u0052\u0069\u0067\u0068\u0074"); _eeef != nil {
			return _eeef
		}
	}
	return nil
}
func (_bef *CT_BoxPr) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
_afbe:
	for {
		_bgag, _fbg := d.Token()
		if _fbg != nil {
			return _fbg
		}
		switch _bddc := _bgag.(type) {
		case _dd.StartElement:
			switch _bddc.Name {
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u006f\u0070\u0045m\u0075"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u006f\u0070\u0045m\u0075"}:
				_bef.OpEmu = NewCT_OnOff()
				if _beeg := d.DecodeElement(_bef.OpEmu, &_bddc); _beeg != nil {
					return _beeg
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u006eo\u0042\u0072\u0065\u0061\u006b"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u006eo\u0042\u0072\u0065\u0061\u006b"}:
				_bef.NoBreak = NewCT_OnOff()
				if _acbe := d.DecodeElement(_bef.NoBreak, &_bddc); _acbe != nil {
					return _acbe
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0064\u0069\u0066\u0066"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0064\u0069\u0066\u0066"}:
				_bef.Diff = NewCT_OnOff()
				if _baad := d.DecodeElement(_bef.Diff, &_bddc); _baad != nil {
					return _baad
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0062\u0072\u006b"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0062\u0072\u006b"}:
				_bef.Brk = NewCT_ManualBreak()
				if _bdb := d.DecodeElement(_bef.Brk, &_bddc); _bdb != nil {
					return _bdb
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0061\u006c\u006e"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0061\u006c\u006e"}:
				_bef.Aln = NewCT_OnOff()
				if _deb := d.DecodeElement(_bef.Aln, &_bddc); _deb != nil {
					return _deb
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0063\u0074\u0072\u006c\u0050\u0072"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0063\u0074\u0072\u006c\u0050\u0072"}:
				_bef.CtrlPr = NewCT_CtrlPr()
				if _bdg := d.DecodeElement(_bef.CtrlPr, &_bddc); _bdg != nil {
					return _bdg
				}
			default:
				_c.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006eg\u0020\u0075\u006es\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0042\u006f\u0078\u0050\u0072\u0020\u0025\u0076", _bddc.Name)
				if _ggab := d.Skip(); _ggab != nil {
					return _ggab
				}
			}
		case _dd.EndElement:
			break _afbe
		case _dd.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_OMathJc and its children, prefixing error messages with path
func (_edcf *CT_OMathJc) ValidateWithPath(path string) error {
	if _cgbge := _edcf.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _cgbge != nil {
		return _cgbge
	}
	return nil
}
func (_aceba *ST_Script) UnmarshalXMLAttr(attr _dd.Attr) error {
	switch attr.Value {
	case "":
		*_aceba = 0
	case "\u0072\u006f\u006da\u006e":
		*_aceba = 1
	case "\u0073\u0063\u0072\u0069\u0070\u0074":
		*_aceba = 2
	case "\u0066r\u0061\u006b\u0074\u0075\u0072":
		*_aceba = 3
	case "\u0064\u006f\u0075\u0062\u006c\u0065\u002d\u0073\u0074\u0072\u0075\u0063\u006b":
		*_aceba = 4
	case "\u0073\u0061\u006e\u0073\u002d\u0073\u0065\u0072\u0069\u0066":
		*_aceba = 5
	case "\u006do\u006e\u006f\u0073\u0070\u0061\u0063e":
		*_aceba = 6
	}
	return nil
}
func (_bfb *CT_GroupChrPr) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	e.EncodeToken(start)
	if _bfb.Chr != nil {
		_eaf := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0063h\u0072"}}
		e.EncodeElement(_bfb.Chr, _eaf)
	}
	if _bfb.Pos != nil {
		_gcbg := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0070o\u0073"}}
		e.EncodeElement(_bfb.Pos, _gcbg)
	}
	if _bfb.VertJc != nil {
		_gedg := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0076\u0065\u0072\u0074\u004a\u0063"}}
		e.EncodeElement(_bfb.VertJc, _gedg)
	}
	if _bfb.CtrlPr != nil {
		_aea := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0063\u0074\u0072\u006c\u0050\u0072"}}
		e.EncodeElement(_bfb.CtrlPr, _aea)
	}
	e.EncodeToken(_dd.EndElement{Name: start.Name})
	return nil
}
func (_bcaa *CT_LimLowPr) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
_fcgg:
	for {
		_fgec, _cdbg := d.Token()
		if _cdbg != nil {
			return _cdbg
		}
		switch _aeac := _fgec.(type) {
		case _dd.StartElement:
			switch _aeac.Name {
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0063\u0074\u0072\u006c\u0050\u0072"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0063\u0074\u0072\u006c\u0050\u0072"}:
				_bcaa.CtrlPr = NewCT_CtrlPr()
				if _bbcf := d.DecodeElement(_bcaa.CtrlPr, &_aeac); _bbcf != nil {
					return _bbcf
				}
			default:
				_c.Log.Debug("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u004c\u0069\u006d\u004c\u006f\u0077\u0050\u0072\u0020\u0025\u0076", _aeac.Name)
				if _dfge := d.Skip(); _dfge != nil {
					return _dfge
				}
			}
		case _dd.EndElement:
			break _fcgg
		case _dd.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_SPre and its children, prefixing error messages with path
func (_bgdgac *CT_SPre) ValidateWithPath(path string) error {
	if _bgdgac.SPrePr != nil {
		if _fgebb := _bgdgac.SPrePr.ValidateWithPath(path + "\u002fS\u0050\u0072\u0065\u0050\u0072"); _fgebb != nil {
			return _fgebb
		}
	}
	if _cdeg := _bgdgac.Sub.ValidateWithPath(path + "\u002f\u0053\u0075\u0062"); _cdeg != nil {
		return _cdeg
	}
	if _dgdgdd := _bgdgac.Sup.ValidateWithPath(path + "\u002f\u0053\u0075\u0070"); _dgdgdd != nil {
		return _dgdgdd
	}
	if _cca := _bgdgac.E.ValidateWithPath(path + "\u002f\u0045"); _cca != nil {
		return _cca
	}
	return nil
}

type CT_MCPr struct {
	Count *CT_Integer255
	McJc  *CT_XAlign
}

// ValidateWithPath validates the CT_LimUppPr and its children, prefixing error messages with path
func (_bbd *CT_LimUppPr) ValidateWithPath(path string) error {
	if _bbd.CtrlPr != nil {
		if _dgde := _bbd.CtrlPr.ValidateWithPath(path + "\u002fC\u0074\u0072\u006c\u0050\u0072"); _dgde != nil {
			return _dgde
		}
	}
	return nil
}
func NewCT_GroupChr() *CT_GroupChr { _ded := &CT_GroupChr{}; _ded.E = NewCT_OMathArg(); return _ded }
func (_bedg *OMath) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
	_bedg.CT_OMath = *NewCT_OMath()
_gbcgf:
	for {
		_abfe, _cgac := d.Token()
		if _cgac != nil {
			return _cgac
		}
		switch _afed := _abfe.(type) {
		case _dd.StartElement:
			switch _afed.Name {
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0061\u0063\u0063"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0061\u0063\u0063"}:
				_eeda := NewEG_OMathMathElements()
				_eeda.Acc = NewCT_Acc()
				if _acfbf := d.DecodeElement(_eeda.Acc, &_afed); _acfbf != nil {
					return _acfbf
				}
				_bedg.EG_OMathMathElements = append(_bedg.EG_OMathMathElements, _eeda)
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0062\u0061\u0072"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0062\u0061\u0072"}:
				_ddga := NewEG_OMathMathElements()
				_ddga.Bar = NewCT_Bar()
				if _bebfa := d.DecodeElement(_ddga.Bar, &_afed); _bebfa != nil {
					return _bebfa
				}
				_bedg.EG_OMathMathElements = append(_bedg.EG_OMathMathElements, _ddga)
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0062\u006f\u0078"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0062\u006f\u0078"}:
				_ccged := NewEG_OMathMathElements()
				_ccged.Box = NewCT_Box()
				if _aebc := d.DecodeElement(_ccged.Box, &_afed); _aebc != nil {
					return _aebc
				}
				_bedg.EG_OMathMathElements = append(_bedg.EG_OMathMathElements, _ccged)
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0062o\u0072\u0064\u0065\u0072\u0042\u006fx"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0062o\u0072\u0064\u0065\u0072\u0042\u006fx"}:
				_bbaf := NewEG_OMathMathElements()
				_bbaf.BorderBox = NewCT_BorderBox()
				if _bdec := d.DecodeElement(_bbaf.BorderBox, &_afed); _bdec != nil {
					return _bdec
				}
				_bedg.EG_OMathMathElements = append(_bedg.EG_OMathMathElements, _bbaf)
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0064"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0064"}:
				_gdaf := NewEG_OMathMathElements()
				_gdaf.D = NewCT_D()
				if _fdbb := d.DecodeElement(_gdaf.D, &_afed); _fdbb != nil {
					return _fdbb
				}
				_bedg.EG_OMathMathElements = append(_bedg.EG_OMathMathElements, _gdaf)
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0065\u0071\u0041r\u0072"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0065\u0071\u0041r\u0072"}:
				_bffb := NewEG_OMathMathElements()
				_bffb.EqArr = NewCT_EqArr()
				if _dgaga := d.DecodeElement(_bffb.EqArr, &_afed); _dgaga != nil {
					return _dgaga
				}
				_bedg.EG_OMathMathElements = append(_bedg.EG_OMathMathElements, _bffb)
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0066"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0066"}:
				_ebdb := NewEG_OMathMathElements()
				_ebdb.F = NewCT_F()
				if _fagb := d.DecodeElement(_ebdb.F, &_afed); _fagb != nil {
					return _fagb
				}
				_bedg.EG_OMathMathElements = append(_bedg.EG_OMathMathElements, _ebdb)
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0066\u0075\u006e\u0063"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0066\u0075\u006e\u0063"}:
				_gdcaa := NewEG_OMathMathElements()
				_gdcaa.Func = NewCT_Func()
				if _bacd := d.DecodeElement(_gdcaa.Func, &_afed); _bacd != nil {
					return _bacd
				}
				_bedg.EG_OMathMathElements = append(_bedg.EG_OMathMathElements, _gdcaa)
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0067\u0072\u006f\u0075\u0070\u0043\u0068\u0072"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0067\u0072\u006f\u0075\u0070\u0043\u0068\u0072"}:
				_abga := NewEG_OMathMathElements()
				_abga.GroupChr = NewCT_GroupChr()
				if _fdded := d.DecodeElement(_abga.GroupChr, &_afed); _fdded != nil {
					return _fdded
				}
				_bedg.EG_OMathMathElements = append(_bedg.EG_OMathMathElements, _abga)
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u006c\u0069\u006d\u004c\u006f\u0077"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u006c\u0069\u006d\u004c\u006f\u0077"}:
				_dea := NewEG_OMathMathElements()
				_dea.LimLow = NewCT_LimLow()
				if _dbeg := d.DecodeElement(_dea.LimLow, &_afed); _dbeg != nil {
					return _dbeg
				}
				_bedg.EG_OMathMathElements = append(_bedg.EG_OMathMathElements, _dea)
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u006c\u0069\u006d\u0055\u0070\u0070"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u006c\u0069\u006d\u0055\u0070\u0070"}:
				_debc := NewEG_OMathMathElements()
				_debc.LimUpp = NewCT_LimUpp()
				if _cdgdg := d.DecodeElement(_debc.LimUpp, &_afed); _cdgdg != nil {
					return _cdgdg
				}
				_bedg.EG_OMathMathElements = append(_bedg.EG_OMathMathElements, _debc)
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u006d"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u006d"}:
				_efdb := NewEG_OMathMathElements()
				_efdb.M = NewCT_M()
				if _caacc := d.DecodeElement(_efdb.M, &_afed); _caacc != nil {
					return _caacc
				}
				_bedg.EG_OMathMathElements = append(_bedg.EG_OMathMathElements, _efdb)
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u006e\u0061\u0072\u0079"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u006e\u0061\u0072\u0079"}:
				_bfcbe := NewEG_OMathMathElements()
				_bfcbe.Nary = NewCT_Nary()
				if _beag := d.DecodeElement(_bfcbe.Nary, &_afed); _beag != nil {
					return _beag
				}
				_bedg.EG_OMathMathElements = append(_bedg.EG_OMathMathElements, _bfcbe)
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0070\u0068\u0061n\u0074"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0070\u0068\u0061n\u0074"}:
				_fdce := NewEG_OMathMathElements()
				_fdce.Phant = NewCT_Phant()
				if _faae := d.DecodeElement(_fdce.Phant, &_afed); _faae != nil {
					return _faae
				}
				_bedg.EG_OMathMathElements = append(_bedg.EG_OMathMathElements, _fdce)
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0072\u0061\u0064"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0072\u0061\u0064"}:
				_gfgcf := NewEG_OMathMathElements()
				_gfgcf.Rad = NewCT_Rad()
				if _caabe := d.DecodeElement(_gfgcf.Rad, &_afed); _caabe != nil {
					return _caabe
				}
				_bedg.EG_OMathMathElements = append(_bedg.EG_OMathMathElements, _gfgcf)
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0073\u0050\u0072\u0065"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0073\u0050\u0072\u0065"}:
				_gdcc := NewEG_OMathMathElements()
				_gdcc.SPre = NewCT_SPre()
				if _egedb := d.DecodeElement(_gdcc.SPre, &_afed); _egedb != nil {
					return _egedb
				}
				_bedg.EG_OMathMathElements = append(_bedg.EG_OMathMathElements, _gdcc)
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0073\u0053\u0075\u0062"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0073\u0053\u0075\u0062"}:
				_facd := NewEG_OMathMathElements()
				_facd.SSub = NewCT_SSub()
				if _dfca := d.DecodeElement(_facd.SSub, &_afed); _dfca != nil {
					return _dfca
				}
				_bedg.EG_OMathMathElements = append(_bedg.EG_OMathMathElements, _facd)
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0073S\u0075\u0062\u0053\u0075\u0070"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0073S\u0075\u0062\u0053\u0075\u0070"}:
				_baba := NewEG_OMathMathElements()
				_baba.SSubSup = NewCT_SSubSup()
				if _agdd := d.DecodeElement(_baba.SSubSup, &_afed); _agdd != nil {
					return _agdd
				}
				_bedg.EG_OMathMathElements = append(_bedg.EG_OMathMathElements, _baba)
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0073\u0053\u0075\u0070"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0073\u0053\u0075\u0070"}:
				_gccab := NewEG_OMathMathElements()
				_gccab.SSup = NewCT_SSup()
				if _baaf := d.DecodeElement(_gccab.SSup, &_afed); _baaf != nil {
					return _baaf
				}
				_bedg.EG_OMathMathElements = append(_bedg.EG_OMathMathElements, _gccab)
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0072"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0072"}:
				_bfdba := NewEG_OMathMathElements()
				_bfdba.R = NewCT_R()
				if _bbdaa := d.DecodeElement(_bfdba.R, &_afed); _bbdaa != nil {
					return _bbdaa
				}
				_bedg.EG_OMathMathElements = append(_bedg.EG_OMathMathElements, _bfdba)
			default:
				_c.Log.Debug("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006fn \u004f\u004d\u0061t\u0068 \u0025\u0076", _afed.Name)
				if _bbfaa := d.Skip(); _bbfaa != nil {
					return _bbfaa
				}
			}
		case _dd.EndElement:
			break _gbcgf
		case _dd.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_BoxPr and its children, prefixing error messages with path
func (_ec *CT_BoxPr) ValidateWithPath(path string) error {
	if _ec.OpEmu != nil {
		if _ecg := _ec.OpEmu.ValidateWithPath(path + "\u002f\u004f\u0070\u0045\u006d\u0075"); _ecg != nil {
			return _ecg
		}
	}
	if _ec.NoBreak != nil {
		if _aba := _ec.NoBreak.ValidateWithPath(path + "\u002f\u004e\u006f\u0042\u0072\u0065\u0061\u006b"); _aba != nil {
			return _aba
		}
	}
	if _ec.Diff != nil {
		if _gbb := _ec.Diff.ValidateWithPath(path + "\u002f\u0044\u0069f\u0066"); _gbb != nil {
			return _gbb
		}
	}
	if _ec.Brk != nil {
		if _dda := _ec.Brk.ValidateWithPath(path + "\u002f\u0042\u0072\u006b"); _dda != nil {
			return _dda
		}
	}
	if _ec.Aln != nil {
		if _aaag := _ec.Aln.ValidateWithPath(path + "\u002f\u0041\u006c\u006e"); _aaag != nil {
			return _aaag
		}
	}
	if _ec.CtrlPr != nil {
		if _gf := _ec.CtrlPr.ValidateWithPath(path + "\u002fC\u0074\u0072\u006c\u0050\u0072"); _gf != nil {
			return _gf
		}
	}
	return nil
}
func (_gedc *CT_MathPr) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
_agcd:
	for {
		_dgaf, _eacg := d.Token()
		if _eacg != nil {
			return _eacg
		}
		switch _eccc := _dgaf.(type) {
		case _dd.StartElement:
			switch _eccc.Name {
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u006d\u0061\u0074\u0068\u0046\u006f\u006e\u0074"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u006d\u0061\u0074\u0068\u0046\u006f\u006e\u0074"}:
				_gedc.MathFont = NewCT_String()
				if _aegf := d.DecodeElement(_gedc.MathFont, &_eccc); _aegf != nil {
					return _aegf
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0062\u0072\u006b\u0042\u0069\u006e"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0062\u0072\u006b\u0042\u0069\u006e"}:
				_gedc.BrkBin = NewCT_BreakBin()
				if _efcc := d.DecodeElement(_gedc.BrkBin, &_eccc); _efcc != nil {
					return _efcc
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0062r\u006b\u0042\u0069\u006e\u0053\u0075b"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0062r\u006b\u0042\u0069\u006e\u0053\u0075b"}:
				_gedc.BrkBinSub = NewCT_BreakBinSub()
				if _adega := d.DecodeElement(_gedc.BrkBinSub, &_eccc); _adega != nil {
					return _adega
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0073m\u0061\u006c\u006c\u0046\u0072\u0061c"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0073m\u0061\u006c\u006c\u0046\u0072\u0061c"}:
				_gedc.SmallFrac = NewCT_OnOff()
				if _dgfg := d.DecodeElement(_gedc.SmallFrac, &_eccc); _dgfg != nil {
					return _dgfg
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0064i\u0073\u0070\u0044\u0065\u0066"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0064i\u0073\u0070\u0044\u0065\u0066"}:
				_gedc.DispDef = NewCT_OnOff()
				if _dcge := d.DecodeElement(_gedc.DispDef, &_eccc); _dcge != nil {
					return _dcge
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u006cM\u0061\u0072\u0067\u0069\u006e"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u006cM\u0061\u0072\u0067\u0069\u006e"}:
				_gedc.LMargin = NewCT_TwipsMeasure()
				if _gcca := d.DecodeElement(_gedc.LMargin, &_eccc); _gcca != nil {
					return _gcca
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0072M\u0061\u0072\u0067\u0069\u006e"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0072M\u0061\u0072\u0067\u0069\u006e"}:
				_gedc.RMargin = NewCT_TwipsMeasure()
				if _bgab := d.DecodeElement(_gedc.RMargin, &_eccc); _bgab != nil {
					return _bgab
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0064\u0065\u0066J\u0063"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0064\u0065\u0066J\u0063"}:
				_gedc.DefJc = NewCT_OMathJc()
				if _gbgc := d.DecodeElement(_gedc.DefJc, &_eccc); _gbgc != nil {
					return _gbgc
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0070\u0072\u0065S\u0070"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0070\u0072\u0065S\u0070"}:
				_gedc.PreSp = NewCT_TwipsMeasure()
				if _fgff := d.DecodeElement(_gedc.PreSp, &_eccc); _fgff != nil {
					return _fgff
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0070\u006f\u0073\u0074\u0053\u0070"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0070\u006f\u0073\u0074\u0053\u0070"}:
				_gedc.PostSp = NewCT_TwipsMeasure()
				if _ffgg := d.DecodeElement(_gedc.PostSp, &_eccc); _ffgg != nil {
					return _ffgg
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0069n\u0074\u0065\u0072\u0053\u0070"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0069n\u0074\u0065\u0072\u0053\u0070"}:
				_gedc.InterSp = NewCT_TwipsMeasure()
				if _bdcc := d.DecodeElement(_gedc.InterSp, &_eccc); _bdcc != nil {
					return _bdcc
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0069n\u0074\u0072\u0061\u0053\u0070"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0069n\u0074\u0072\u0061\u0053\u0070"}:
				_gedc.IntraSp = NewCT_TwipsMeasure()
				if _dbce := d.DecodeElement(_gedc.IntraSp, &_eccc); _dbce != nil {
					return _dbce
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0077\u0072\u0061\u0070\u0049\u006e\u0064\u0065\u006e\u0074"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0077\u0072\u0061\u0070\u0049\u006e\u0064\u0065\u006e\u0074"}:
				_gedc.Choice = NewCT_MathPrChoice()
				if _ggcgc := d.DecodeElement(&_gedc.Choice.WrapIndent, &_eccc); _ggcgc != nil {
					return _ggcgc
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0077r\u0061\u0070\u0052\u0069\u0067\u0068t"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0077r\u0061\u0070\u0052\u0069\u0067\u0068t"}:
				_gedc.Choice = NewCT_MathPrChoice()
				if _bdcce := d.DecodeElement(&_gedc.Choice.WrapRight, &_eccc); _bdcce != nil {
					return _bdcce
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0069\u006e\u0074\u004c\u0069\u006d"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0069\u006e\u0074\u004c\u0069\u006d"}:
				_gedc.IntLim = NewCT_LimLoc()
				if _dagg := d.DecodeElement(_gedc.IntLim, &_eccc); _dagg != nil {
					return _dagg
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u006ea\u0072\u0079\u004c\u0069\u006d"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u006ea\u0072\u0079\u004c\u0069\u006d"}:
				_gedc.NaryLim = NewCT_LimLoc()
				if _bgce := d.DecodeElement(_gedc.NaryLim, &_eccc); _bgce != nil {
					return _bgce
				}
			default:
				_c.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u004d\u0061\u0074h\u0050\u0072 \u0025\u0076", _eccc.Name)
				if _cbbd := d.Skip(); _cbbd != nil {
					return _cbbd
				}
			}
		case _dd.EndElement:
			break _agcd
		case _dd.CharData:
		}
	}
	return nil
}

type CT_RadPr struct {
	DegHide *CT_OnOff
	CtrlPr  *CT_CtrlPr
}

func (_egea *CT_OMathArg) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	e.EncodeToken(start)
	if _egea.ArgPr != nil {
		_febg := _dd.StartElement{Name: _dd.Name{Local: "\u006d:\u0061\u0072\u0067\u0050\u0072"}}
		e.EncodeElement(_egea.ArgPr, _febg)
	}
	if _egea.EG_OMathMathElements != nil {
		for _, _fcgf := range _egea.EG_OMathMathElements {
			_fcgf.MarshalXML(e, _dd.StartElement{})
		}
	}
	if _egea.CtrlPr != nil {
		_ffbg := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0063\u0074\u0072\u006c\u0050\u0072"}}
		e.EncodeElement(_egea.CtrlPr, _ffbg)
	}
	e.EncodeToken(_dd.EndElement{Name: start.Name})
	return nil
}
func (_acaa *CT_EqArrPr) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	e.EncodeToken(start)
	if _acaa.BaseJc != nil {
		_ddca := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0062\u0061\u0073\u0065\u004a\u0063"}}
		e.EncodeElement(_acaa.BaseJc, _ddca)
	}
	if _acaa.MaxDist != nil {
		_gab := _dd.StartElement{Name: _dd.Name{Local: "\u006d:\u006d\u0061\u0078\u0044\u0069\u0073t"}}
		e.EncodeElement(_acaa.MaxDist, _gab)
	}
	if _acaa.ObjDist != nil {
		_ggb := _dd.StartElement{Name: _dd.Name{Local: "\u006d:\u006f\u0062\u006a\u0044\u0069\u0073t"}}
		e.EncodeElement(_acaa.ObjDist, _ggb)
	}
	if _acaa.RSpRule != nil {
		_dga := _dd.StartElement{Name: _dd.Name{Local: "\u006d:\u0072\u0053\u0070\u0052\u0075\u006ce"}}
		e.EncodeElement(_acaa.RSpRule, _dga)
	}
	if _acaa.RSp != nil {
		_eef := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0072S\u0070"}}
		e.EncodeElement(_acaa.RSp, _eef)
	}
	if _acaa.CtrlPr != nil {
		_daa := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0063\u0074\u0072\u006c\u0050\u0072"}}
		e.EncodeElement(_acaa.CtrlPr, _daa)
	}
	e.EncodeToken(_dd.EndElement{Name: start.Name})
	return nil
}

type CT_Integer255 struct{ ValAttr int64 }

func (_geefb ST_LimLoc) MarshalXMLAttr(name _dd.Name) (_dd.Attr, error) {
	_cbff := _dd.Attr{}
	_cbff.Name = name
	switch _geefb {
	case ST_LimLocUnset:
		_cbff.Value = ""
	case ST_LimLocUndOvr:
		_cbff.Value = "\u0075\u006e\u0064\u004f\u0076\u0072"
	case ST_LimLocSubSup:
		_cbff.Value = "\u0073\u0075\u0062\u0053\u0075\u0070"
	}
	return _cbff, nil
}
func (_ccdac ST_Jc) String() string {
	switch _ccdac {
	case 0:
		return ""
	case 1:
		return "\u006c\u0065\u0066\u0074"
	case 2:
		return "\u0072\u0069\u0067h\u0074"
	case 3:
		return "\u0063\u0065\u006e\u0074\u0065\u0072"
	case 4:
		return "c\u0065\u006e\u0074\u0065\u0072\u0047\u0072\u006f\u0075\u0070"
	}
	return ""
}

type CT_LimUpp struct {
	LimUppPr *CT_LimUppPr
	E        *CT_OMathArg
	Lim      *CT_OMathArg
}

// ValidateWithPath validates the EG_OMathMathElements and its children, prefixing error messages with path
func (_dbcbb *EG_OMathMathElements) ValidateWithPath(path string) error {
	if _dbcbb.Acc != nil {
		if _bdbb := _dbcbb.Acc.ValidateWithPath(path + "\u002f\u0041\u0063\u0063"); _bdbb != nil {
			return _bdbb
		}
	}
	if _dbcbb.Bar != nil {
		if _begd := _dbcbb.Bar.ValidateWithPath(path + "\u002f\u0042\u0061\u0072"); _begd != nil {
			return _begd
		}
	}
	if _dbcbb.Box != nil {
		if _cbcga := _dbcbb.Box.ValidateWithPath(path + "\u002f\u0042\u006f\u0078"); _cbcga != nil {
			return _cbcga
		}
	}
	if _dbcbb.BorderBox != nil {
		if _ebcbg := _dbcbb.BorderBox.ValidateWithPath(path + "\u002f\u0042\u006f\u0072\u0064\u0065\u0072\u0042\u006f\u0078"); _ebcbg != nil {
			return _ebcbg
		}
	}
	if _dbcbb.D != nil {
		if _gebe := _dbcbb.D.ValidateWithPath(path + "\u002f\u0044"); _gebe != nil {
			return _gebe
		}
	}
	if _dbcbb.EqArr != nil {
		if _bggce := _dbcbb.EqArr.ValidateWithPath(path + "\u002f\u0045\u0071\u0041\u0072\u0072"); _bggce != nil {
			return _bggce
		}
	}
	if _dbcbb.F != nil {
		if _dace := _dbcbb.F.ValidateWithPath(path + "\u002f\u0046"); _dace != nil {
			return _dace
		}
	}
	if _dbcbb.Func != nil {
		if _cfcc := _dbcbb.Func.ValidateWithPath(path + "\u002f\u0046\u0075n\u0063"); _cfcc != nil {
			return _cfcc
		}
	}
	if _dbcbb.GroupChr != nil {
		if _dbad := _dbcbb.GroupChr.ValidateWithPath(path + "\u002fG\u0072\u006f\u0075\u0070\u0043\u0068r"); _dbad != nil {
			return _dbad
		}
	}
	if _dbcbb.LimLow != nil {
		if _eegd := _dbcbb.LimLow.ValidateWithPath(path + "\u002fL\u0069\u006d\u004c\u006f\u0077"); _eegd != nil {
			return _eegd
		}
	}
	if _dbcbb.LimUpp != nil {
		if _ggfbe := _dbcbb.LimUpp.ValidateWithPath(path + "\u002fL\u0069\u006d\u0055\u0070\u0070"); _ggfbe != nil {
			return _ggfbe
		}
	}
	if _dbcbb.M != nil {
		if _edaf := _dbcbb.M.ValidateWithPath(path + "\u002f\u004d"); _edaf != nil {
			return _edaf
		}
	}
	if _dbcbb.Nary != nil {
		if _debaa := _dbcbb.Nary.ValidateWithPath(path + "\u002f\u004e\u0061r\u0079"); _debaa != nil {
			return _debaa
		}
	}
	if _dbcbb.Phant != nil {
		if _efaa := _dbcbb.Phant.ValidateWithPath(path + "\u002f\u0050\u0068\u0061\u006e\u0074"); _efaa != nil {
			return _efaa
		}
	}
	if _dbcbb.Rad != nil {
		if _caefe := _dbcbb.Rad.ValidateWithPath(path + "\u002f\u0052\u0061\u0064"); _caefe != nil {
			return _caefe
		}
	}
	if _dbcbb.SPre != nil {
		if _cfbb := _dbcbb.SPre.ValidateWithPath(path + "\u002f\u0053\u0050r\u0065"); _cfbb != nil {
			return _cfbb
		}
	}
	if _dbcbb.SSub != nil {
		if _cadb := _dbcbb.SSub.ValidateWithPath(path + "\u002f\u0053\u0053u\u0062"); _cadb != nil {
			return _cadb
		}
	}
	if _dbcbb.SSubSup != nil {
		if _bddg := _dbcbb.SSubSup.ValidateWithPath(path + "\u002f\u0053\u0053\u0075\u0062\u0053\u0075\u0070"); _bddg != nil {
			return _bddg
		}
	}
	if _dbcbb.SSup != nil {
		if _abdde := _dbcbb.SSup.ValidateWithPath(path + "\u002f\u0053\u0053u\u0070"); _abdde != nil {
			return _abdde
		}
	}
	if _dbcbb.R != nil {
		if _bcbf := _dbcbb.R.ValidateWithPath(path + "\u002f\u0052"); _bcbf != nil {
			return _bcbf
		}
	}
	return nil
}
func (_faba *CT_M) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	e.EncodeToken(start)
	if _faba.MPr != nil {
		_adege := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u006dP\u0072"}}
		e.EncodeElement(_faba.MPr, _adege)
	}
	_aed := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u006d\u0072"}}
	for _, _cfgd := range _faba.Mr {
		e.EncodeElement(_cfgd, _aed)
	}
	e.EncodeToken(_dd.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_SSup and its children
func (_aadc *CT_SSup) Validate() error {
	return _aadc.ValidateWithPath("\u0043T\u005f\u0053\u0053\u0075\u0070")
}
func NewCT_LimUpp() *CT_LimUpp {
	_ffcf := &CT_LimUpp{}
	_ffcf.E = NewCT_OMathArg()
	_ffcf.Lim = NewCT_OMathArg()
	return _ffcf
}
func NewCT_LimLowPr() *CT_LimLowPr { _cegb := &CT_LimLowPr{}; return _cegb }
func NewCT_RadPr() *CT_RadPr       { _fgeg := &CT_RadPr{}; return _fgeg }
func (_bgddb ST_Jc) ValidateWithPath(path string) error {
	switch _bgddb {
	case 0, 1, 2, 3, 4:
	default:
		return _a.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_bgddb))
	}
	return nil
}
func (_accd *CT_XAlign) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	_cbac, _edcg := _accd.ValAttr.MarshalXMLAttr(_dd.Name{Local: "\u006d\u003a\u0076a\u006c"})
	if _edcg != nil {
		return _edcg
	}
	start.Attr = append(start.Attr, _cbac)
	e.EncodeToken(start)
	e.EncodeToken(_dd.EndElement{Name: start.Name})
	return nil
}

type EG_ScriptStyle struct {
	Scr *CT_Script
	Sty *CT_Style
}

func NewCT_BorderBox() *CT_BorderBox { _gdb := &CT_BorderBox{}; _gdb.E = NewCT_OMathArg(); return _gdb }
func (_gegc *CT_SpacingRule) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	start.Attr = append(start.Attr, _dd.Attr{Name: _dd.Name{Local: "\u006d\u003a\u0076a\u006c"}, Value: _a.Sprintf("\u0025\u0076", _gegc.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_dd.EndElement{Name: start.Name})
	return nil
}
func NewCT_BreakBin() *CT_BreakBin { _eac := &CT_BreakBin{}; return _eac }

// ValidateWithPath validates the CT_Nary and its children, prefixing error messages with path
func (_fcdf *CT_Nary) ValidateWithPath(path string) error {
	if _fcdf.NaryPr != nil {
		if _fbeb := _fcdf.NaryPr.ValidateWithPath(path + "\u002fN\u0061\u0072\u0079\u0050\u0072"); _fbeb != nil {
			return _fbeb
		}
	}
	if _daab := _fcdf.Sub.ValidateWithPath(path + "\u002f\u0053\u0075\u0062"); _daab != nil {
		return _daab
	}
	if _ebc := _fcdf.Sup.ValidateWithPath(path + "\u002f\u0053\u0075\u0070"); _ebc != nil {
		return _ebc
	}
	if _bgcc := _fcdf.E.ValidateWithPath(path + "\u002f\u0045"); _bgcc != nil {
		return _bgcc
	}
	return nil
}
func (_fadgd *ST_FType) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
	_gad, _aeggd := d.Token()
	if _aeggd != nil {
		return _aeggd
	}
	if _gbfb, _fgfda := _gad.(_dd.EndElement); _fgfda && _gbfb.Name == start.Name {
		*_fadgd = 1
		return nil
	}
	if _feca, _dcbf := _gad.(_dd.CharData); !_dcbf {
		return _a.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _gad)
	} else {
		switch string(_feca) {
		case "":
			*_fadgd = 0
		case "\u0062\u0061\u0072":
			*_fadgd = 1
		case "\u0073\u006b\u0077":
			*_fadgd = 2
		case "\u006c\u0069\u006e":
			*_fadgd = 3
		case "\u006e\u006f\u0042a\u0072":
			*_fadgd = 4
		}
	}
	_gad, _aeggd = d.Token()
	if _aeggd != nil {
		return _aeggd
	}
	if _eafba, _abcfc := _gad.(_dd.EndElement); _abcfc && _eafba.Name == start.Name {
		return nil
	}
	return _a.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _gad)
}

// Validate validates the CT_SSub and its children
func (_bdbd *CT_SSub) Validate() error {
	return _bdbd.ValidateWithPath("\u0043T\u005f\u0053\u0053\u0075\u0062")
}
func (_dcgg ST_Script) String() string {
	switch _dcgg {
	case 0:
		return ""
	case 1:
		return "\u0072\u006f\u006da\u006e"
	case 2:
		return "\u0073\u0063\u0072\u0069\u0070\u0074"
	case 3:
		return "\u0066r\u0061\u006b\u0074\u0075\u0072"
	case 4:
		return "\u0064\u006f\u0075\u0062\u006c\u0065\u002d\u0073\u0074\u0072\u0075\u0063\u006b"
	case 5:
		return "\u0073\u0061\u006e\u0073\u002d\u0073\u0065\u0072\u0069\u0066"
	case 6:
		return "\u006do\u006e\u006f\u0073\u0070\u0061\u0063e"
	}
	return ""
}
func (_defef ST_TopBot) ValidateWithPath(path string) error {
	switch _defef {
	case 0, 1, 2:
	default:
		return _a.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_defef))
	}
	return nil
}
func (_ebd *CT_BarPr) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	e.EncodeToken(start)
	if _ebd.Pos != nil {
		_ff := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0070o\u0073"}}
		e.EncodeElement(_ebd.Pos, _ff)
	}
	if _ebd.CtrlPr != nil {
		_dbb := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0063\u0074\u0072\u006c\u0050\u0072"}}
		e.EncodeElement(_ebd.CtrlPr, _dbb)
	}
	e.EncodeToken(_dd.EndElement{Name: start.Name})
	return nil
}

const (
	ST_LimLocUnset  ST_LimLoc = 0
	ST_LimLocUndOvr ST_LimLoc = 1
	ST_LimLocSubSup ST_LimLoc = 2
)

// Validate validates the CT_Func and its children
func (_cgga *CT_Func) Validate() error {
	return _cgga.ValidateWithPath("\u0043T\u005f\u0046\u0075\u006e\u0063")
}
func (_ggafe *OMathPara) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
	_ggafe.CT_OMathPara = *NewCT_OMathPara()
_bgee:
	for {
		_bbgee, _cfae := d.Token()
		if _cfae != nil {
			return _cfae
		}
		switch _bgdc := _bbgee.(type) {
		case _dd.StartElement:
			switch _bgdc.Name {
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "o\u004d\u0061\u0074\u0068\u0050\u0061\u0072\u0061\u0050\u0072"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "o\u004d\u0061\u0074\u0068\u0050\u0061\u0072\u0061\u0050\u0072"}:
				_ggafe.OMathParaPr = NewCT_OMathParaPr()
				if _adbfd := d.DecodeElement(_ggafe.OMathParaPr, &_bgdc); _adbfd != nil {
					return _adbfd
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u006f\u004d\u0061t\u0068"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u006f\u004d\u0061t\u0068"}:
				_adadf := NewCT_OMath()
				if _fdga := d.DecodeElement(_adadf, &_bgdc); _fdga != nil {
					return _fdga
				}
				_ggafe.OMath = append(_ggafe.OMath, _adadf)
			default:
				_c.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u004f\u004d\u0061\u0074\u0068\u0050a\u0072\u0061 \u0025\u0076", _bgdc.Name)
				if _dbafa := d.Skip(); _dbafa != nil {
					return _dbafa
				}
			}
		case _dd.EndElement:
			break _bgee
		case _dd.CharData:
		}
	}
	return nil
}
func (_aaefd *ST_Shp) UnmarshalXMLAttr(attr _dd.Attr) error {
	switch attr.Value {
	case "":
		*_aaefd = 0
	case "\u0063\u0065\u006e\u0074\u0065\u0072\u0065\u0064":
		*_aaefd = 1
	case "\u006d\u0061\u0074c\u0068":
		*_aaefd = 2
	}
	return nil
}
func (_dgbfd ST_LimLoc) ValidateWithPath(path string) error {
	switch _dgbfd {
	case 0, 1, 2:
	default:
		return _a.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_dgbfd))
	}
	return nil
}

// ValidateWithPath validates the CT_Style and its children, prefixing error messages with path
func (_bede *CT_Style) ValidateWithPath(path string) error {
	if _adebf := _bede.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _adebf != nil {
		return _adebf
	}
	return nil
}

// ValidateWithPath validates the CT_GroupChrPr and its children, prefixing error messages with path
func (_aag *CT_GroupChrPr) ValidateWithPath(path string) error {
	if _aag.Chr != nil {
		if _egc := _aag.Chr.ValidateWithPath(path + "\u002f\u0043\u0068\u0072"); _egc != nil {
			return _egc
		}
	}
	if _aag.Pos != nil {
		if _agbe := _aag.Pos.ValidateWithPath(path + "\u002f\u0050\u006f\u0073"); _agbe != nil {
			return _agbe
		}
	}
	if _aag.VertJc != nil {
		if _bcdc := _aag.VertJc.ValidateWithPath(path + "\u002fV\u0065\u0072\u0074\u004a\u0063"); _bcdc != nil {
			return _bcdc
		}
	}
	if _aag.CtrlPr != nil {
		if _ffbe := _aag.CtrlPr.ValidateWithPath(path + "\u002fC\u0074\u0072\u006c\u0050\u0072"); _ffbe != nil {
			return _ffbe
		}
	}
	return nil
}
func NewMathPr() *MathPr { _eegc := &MathPr{}; _eegc.CT_MathPr = *NewCT_MathPr(); return _eegc }
func (_eegeg *CT_LimLoc) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
	_eegeg.ValAttr = ST_LimLoc(1)
	for _, _edg := range start.Attr {
		if _edg.Name.Local == "\u0076\u0061\u006c" {
			_eegeg.ValAttr.UnmarshalXMLAttr(_edg)
			continue
		}
	}
	for {
		_cad, _cec := d.Token()
		if _cec != nil {
			return _a.Errorf("p\u0061\u0072\u0073\u0069ng\u0020C\u0054\u005f\u004c\u0069\u006dL\u006f\u0063\u003a\u0020\u0025\u0073", _cec)
		}
		if _ccb, _cccf := _cad.(_dd.EndElement); _cccf && _ccb.Name == start.Name {
			break
		}
	}
	return nil
}

const (
	ST_BreakBinUnset  ST_BreakBin = 0
	ST_BreakBinBefore ST_BreakBin = 1
	ST_BreakBinAfter  ST_BreakBin = 2
	ST_BreakBinRepeat ST_BreakBin = 3
)

func (_cdb *CT_EqArrPr) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
_gbfa:
	for {
		_bgc, _ffcd := d.Token()
		if _ffcd != nil {
			return _ffcd
		}
		switch _bgf := _bgc.(type) {
		case _dd.StartElement:
			switch _bgf.Name {
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0062\u0061\u0073\u0065\u004a\u0063"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0062\u0061\u0073\u0065\u004a\u0063"}:
				_cdb.BaseJc = NewCT_YAlign()
				if _acaf := d.DecodeElement(_cdb.BaseJc, &_bgf); _acaf != nil {
					return _acaf
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u006da\u0078\u0044\u0069\u0073\u0074"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u006da\u0078\u0044\u0069\u0073\u0074"}:
				_cdb.MaxDist = NewCT_OnOff()
				if _bfeb := d.DecodeElement(_cdb.MaxDist, &_bgf); _bfeb != nil {
					return _bfeb
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u006fb\u006a\u0044\u0069\u0073\u0074"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u006fb\u006a\u0044\u0069\u0073\u0074"}:
				_cdb.ObjDist = NewCT_OnOff()
				if _acfc := d.DecodeElement(_cdb.ObjDist, &_bgf); _acfc != nil {
					return _acfc
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0072S\u0070\u0052\u0075\u006c\u0065"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0072S\u0070\u0052\u0075\u006c\u0065"}:
				_cdb.RSpRule = NewCT_SpacingRule()
				if _bff := d.DecodeElement(_cdb.RSpRule, &_bgf); _bff != nil {
					return _bff
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0072\u0053\u0070"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0072\u0053\u0070"}:
				_cdb.RSp = NewCT_UnSignedInteger()
				if _defb := d.DecodeElement(_cdb.RSp, &_bgf); _defb != nil {
					return _defb
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0063\u0074\u0072\u006c\u0050\u0072"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0063\u0074\u0072\u006c\u0050\u0072"}:
				_cdb.CtrlPr = NewCT_CtrlPr()
				if _dcgb := d.DecodeElement(_cdb.CtrlPr, &_bgf); _dcgb != nil {
					return _dcgb
				}
			default:
				_c.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006ce\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005fE\u0071\u0041\u0072\u0072\u0050\u0072\u0020\u0025\u0076", _bgf.Name)
				if _cab := d.Skip(); _cab != nil {
					return _cab
				}
			}
		case _dd.EndElement:
			break _gbfa
		case _dd.CharData:
		}
	}
	return nil
}

type CT_OMathPara struct {
	OMathParaPr *CT_OMathParaPr
	OMath       []*CT_OMath
}

func (_adga ST_BreakBinSub) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	return e.EncodeElement(_adga.String(), start)
}

// ValidateWithPath validates the CT_MathPr and its children, prefixing error messages with path
func (_fec *CT_MathPr) ValidateWithPath(path string) error {
	if _fec.MathFont != nil {
		if _cbgda := _fec.MathFont.ValidateWithPath(path + "\u002fM\u0061\u0074\u0068\u0046\u006f\u006et"); _cbgda != nil {
			return _cbgda
		}
	}
	if _fec.BrkBin != nil {
		if _ccbef := _fec.BrkBin.ValidateWithPath(path + "\u002fB\u0072\u006b\u0042\u0069\u006e"); _ccbef != nil {
			return _ccbef
		}
	}
	if _fec.BrkBinSub != nil {
		if _ceae := _fec.BrkBinSub.ValidateWithPath(path + "\u002f\u0042\u0072\u006b\u0042\u0069\u006e\u0053\u0075\u0062"); _ceae != nil {
			return _ceae
		}
	}
	if _fec.SmallFrac != nil {
		if _cecb := _fec.SmallFrac.ValidateWithPath(path + "\u002f\u0053\u006d\u0061\u006c\u006c\u0046\u0072\u0061\u0063"); _cecb != nil {
			return _cecb
		}
	}
	if _fec.DispDef != nil {
		if _gagg := _fec.DispDef.ValidateWithPath(path + "\u002f\u0044\u0069\u0073\u0070\u0044\u0065\u0066"); _gagg != nil {
			return _gagg
		}
	}
	if _fec.LMargin != nil {
		if _cege := _fec.LMargin.ValidateWithPath(path + "\u002f\u004c\u004d\u0061\u0072\u0067\u0069\u006e"); _cege != nil {
			return _cege
		}
	}
	if _fec.RMargin != nil {
		if _cgcb := _fec.RMargin.ValidateWithPath(path + "\u002f\u0052\u004d\u0061\u0072\u0067\u0069\u006e"); _cgcb != nil {
			return _cgcb
		}
	}
	if _fec.DefJc != nil {
		if _bdgcd := _fec.DefJc.ValidateWithPath(path + "\u002f\u0044\u0065\u0066\u004a\u0063"); _bdgcd != nil {
			return _bdgcd
		}
	}
	if _fec.PreSp != nil {
		if _bcf := _fec.PreSp.ValidateWithPath(path + "\u002f\u0050\u0072\u0065\u0053\u0070"); _bcf != nil {
			return _bcf
		}
	}
	if _fec.PostSp != nil {
		if _dffe := _fec.PostSp.ValidateWithPath(path + "\u002fP\u006f\u0073\u0074\u0053\u0070"); _dffe != nil {
			return _dffe
		}
	}
	if _fec.InterSp != nil {
		if _cgec := _fec.InterSp.ValidateWithPath(path + "\u002f\u0049\u006e\u0074\u0065\u0072\u0053\u0070"); _cgec != nil {
			return _cgec
		}
	}
	if _fec.IntraSp != nil {
		if _bdfbg := _fec.IntraSp.ValidateWithPath(path + "\u002f\u0049\u006e\u0074\u0072\u0061\u0053\u0070"); _bdfbg != nil {
			return _bdfbg
		}
	}
	if _fec.Choice != nil {
		if _bdag := _fec.Choice.ValidateWithPath(path + "\u002fC\u0068\u006f\u0069\u0063\u0065"); _bdag != nil {
			return _bdag
		}
	}
	if _fec.IntLim != nil {
		if _eged := _fec.IntLim.ValidateWithPath(path + "\u002fI\u006e\u0074\u004c\u0069\u006d"); _eged != nil {
			return _eged
		}
	}
	if _fec.NaryLim != nil {
		if _bbaa := _fec.NaryLim.ValidateWithPath(path + "\u002f\u004e\u0061\u0072\u0079\u004c\u0069\u006d"); _bbaa != nil {
			return _bbaa
		}
	}
	return nil
}

// Validate validates the CT_YAlign and its children
func (_aefa *CT_YAlign) Validate() error {
	return _aefa.ValidateWithPath("\u0043T\u005f\u0059\u0041\u006c\u0069\u0067n")
}

// ValidateWithPath validates the CT_OMath and its children, prefixing error messages with path
func (_gffg *CT_OMath) ValidateWithPath(path string) error {
	for _ccba, _eaec := range _gffg.EG_OMathMathElements {
		if _ffgd := _eaec.ValidateWithPath(_a.Sprintf("%\u0073\u002f\u0045\u0047\u005f\u004fM\u0061\u0074\u0068\u004d\u0061\u0074\u0068\u0045\u006ce\u006d\u0065\u006et\u0073[\u0025\u0064\u005d", path, _ccba)); _ffgd != nil {
			return _ffgd
		}
	}
	return nil
}

// Validate validates the CT_OMath and its children
func (_ddeb *CT_OMath) Validate() error {
	return _ddeb.ValidateWithPath("\u0043\u0054\u005f\u004f\u004d\u0061\u0074\u0068")
}
func (_aebb *ST_BreakBinSub) UnmarshalXMLAttr(attr _dd.Attr) error {
	switch attr.Value {
	case "":
		*_aebb = 0
	case "\u002d\u002d":
		*_aebb = 1
	case "\u002d\u002b":
		*_aebb = 2
	case "\u002b\u002d":
		*_aebb = 3
	}
	return nil
}
func (_aaba *EG_ScriptStyle) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	start.Name.Local = "\u006d\u003aE\u0047\u005f\u0053c\u0072\u0069\u0070\u0074\u0053\u0074\u0079\u006c\u0065"
	if _aaba.Scr != nil {
		_bbgd := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0073c\u0072"}}
		e.EncodeElement(_aaba.Scr, _bbgd)
	}
	if _aaba.Sty != nil {
		_abaag := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0073t\u0079"}}
		e.EncodeElement(_aaba.Sty, _abaag)
	}
	return nil
}
func (_aef *CT_BoxPr) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	e.EncodeToken(start)
	if _aef.OpEmu != nil {
		_ggc := _dd.StartElement{Name: _dd.Name{Local: "\u006d:\u006f\u0070\u0045\u006d\u0075"}}
		e.EncodeElement(_aef.OpEmu, _ggc)
	}
	if _aef.NoBreak != nil {
		_acba := _dd.StartElement{Name: _dd.Name{Local: "\u006d:\u006e\u006f\u0042\u0072\u0065\u0061k"}}
		e.EncodeElement(_aef.NoBreak, _acba)
	}
	if _aef.Diff != nil {
		_gbc := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0064\u0069\u0066\u0066"}}
		e.EncodeElement(_aef.Diff, _gbc)
	}
	if _aef.Brk != nil {
		_bfg := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0062r\u006b"}}
		e.EncodeElement(_aef.Brk, _bfg)
	}
	if _aef.Aln != nil {
		_gbd := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0061l\u006e"}}
		e.EncodeElement(_aef.Aln, _gbd)
	}
	if _aef.CtrlPr != nil {
		_cfe := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0063\u0074\u0072\u006c\u0050\u0072"}}
		e.EncodeElement(_aef.CtrlPr, _cfe)
	}
	e.EncodeToken(_dd.EndElement{Name: start.Name})
	return nil
}
func (_daddf ST_Script) ValidateWithPath(path string) error {
	switch _daddf {
	case 0, 1, 2, 3, 4, 5, 6:
	default:
		return _a.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_daddf))
	}
	return nil
}

// Validate validates the CT_AccPr and its children
func (_cf *CT_AccPr) Validate() error {
	return _cf.ValidateWithPath("\u0043\u0054\u005f\u0041\u0063\u0063\u0050\u0072")
}
func NewEG_OMathElements() *EG_OMathElements { _ecfc := &EG_OMathElements{}; return _ecfc }
func (_ecce ST_Script) Validate() error      { return _ecce.ValidateWithPath("") }

type CT_LimLoc struct{ ValAttr ST_LimLoc }

func (_gdbd *CT_SSub) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	e.EncodeToken(start)
	if _gdbd.SSubPr != nil {
		_fbce := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0073\u0053\u0075\u0062\u0050\u0072"}}
		e.EncodeElement(_gdbd.SSubPr, _fbce)
	}
	_dfbc := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0065"}}
	e.EncodeElement(_gdbd.E, _dfbc)
	_abeg := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0073u\u0062"}}
	e.EncodeElement(_gdbd.Sub, _abeg)
	e.EncodeToken(_dd.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_EqArrPr and its children, prefixing error messages with path
func (_fdfc *CT_EqArrPr) ValidateWithPath(path string) error {
	if _fdfc.BaseJc != nil {
		if _bdgc := _fdfc.BaseJc.ValidateWithPath(path + "\u002fB\u0061\u0073\u0065\u004a\u0063"); _bdgc != nil {
			return _bdgc
		}
	}
	if _fdfc.MaxDist != nil {
		if _ddd := _fdfc.MaxDist.ValidateWithPath(path + "\u002f\u004d\u0061\u0078\u0044\u0069\u0073\u0074"); _ddd != nil {
			return _ddd
		}
	}
	if _fdfc.ObjDist != nil {
		if _ddad := _fdfc.ObjDist.ValidateWithPath(path + "\u002f\u004f\u0062\u006a\u0044\u0069\u0073\u0074"); _ddad != nil {
			return _ddad
		}
	}
	if _fdfc.RSpRule != nil {
		if _bdf := _fdfc.RSpRule.ValidateWithPath(path + "\u002f\u0052\u0053\u0070\u0052\u0075\u006c\u0065"); _bdf != nil {
			return _bdf
		}
	}
	if _fdfc.RSp != nil {
		if _degf := _fdfc.RSp.ValidateWithPath(path + "\u002f\u0052\u0053\u0070"); _degf != nil {
			return _degf
		}
	}
	if _fdfc.CtrlPr != nil {
		if _fgb := _fdfc.CtrlPr.ValidateWithPath(path + "\u002fC\u0074\u0072\u006c\u0050\u0072"); _fgb != nil {
			return _fgb
		}
	}
	return nil
}
func NewCT_TwipsMeasure() *CT_TwipsMeasure { _gaf := &CT_TwipsMeasure{}; return _gaf }
func NewCT_MathPr() *CT_MathPr             { _fbbd := &CT_MathPr{}; return _fbbd }
func (_agbec *CT_SSup) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
	_agbec.E = NewCT_OMathArg()
	_agbec.Sup = NewCT_OMathArg()
_ddaf:
	for {
		_afcc, _bacc := d.Token()
		if _bacc != nil {
			return _bacc
		}
		switch _cbef := _afcc.(type) {
		case _dd.StartElement:
			switch _cbef.Name {
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0073\u0053\u0075\u0070\u0050\u0072"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0073\u0053\u0075\u0070\u0050\u0072"}:
				_agbec.SSupPr = NewCT_SSupPr()
				if _caff := d.DecodeElement(_agbec.SSupPr, &_cbef); _caff != nil {
					return _caff
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0065"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0065"}:
				if _fegc := d.DecodeElement(_agbec.E, &_cbef); _fegc != nil {
					return _fegc
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0073\u0075\u0070"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0073\u0075\u0070"}:
				if _beceb := d.DecodeElement(_agbec.Sup, &_cbef); _beceb != nil {
					return _beceb
				}
			default:
				_c.Log.Debug("\u0073\u006b\u0069p\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043T\u005f\u0053\u0053\u0075\u0070\u0020\u0025\u0076", _cbef.Name)
				if _eacfc := d.Skip(); _eacfc != nil {
					return _eacfc
				}
			}
		case _dd.EndElement:
			break _ddaf
		case _dd.CharData:
		}
	}
	return nil
}
func (_beca *CT_LimLoc) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	_cac, _adbb := _beca.ValAttr.MarshalXMLAttr(_dd.Name{Local: "\u006d\u003a\u0076a\u006c"})
	if _adbb != nil {
		return _adbb
	}
	start.Attr = append(start.Attr, _cac)
	e.EncodeToken(start)
	e.EncodeToken(_dd.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_F and its children
func (_cabe *CT_F) Validate() error { return _cabe.ValidateWithPath("\u0043\u0054\u005f\u0046") }
func (_feb *CT_GroupChr) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	e.EncodeToken(start)
	if _feb.GroupChrPr != nil {
		_gca := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0067r\u006f\u0075\u0070\u0043\u0068\u0072\u0050\u0072"}}
		e.EncodeElement(_feb.GroupChrPr, _gca)
	}
	_fegb := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0065"}}
	e.EncodeElement(_feb.E, _fegb)
	e.EncodeToken(_dd.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_RPR and its children, prefixing error messages with path
func (_dbg *CT_RPR) ValidateWithPath(path string) error {
	if _dbg.Lit != nil {
		if _gacc := _dbg.Lit.ValidateWithPath(path + "\u002f\u004c\u0069\u0074"); _gacc != nil {
			return _gacc
		}
	}
	if _dbg.Choice != nil {
		if _ebbc := _dbg.Choice.ValidateWithPath(path + "\u002fC\u0068\u006f\u0069\u0063\u0065"); _ebbc != nil {
			return _ebbc
		}
	}
	if _dbg.Brk != nil {
		if _bafb := _dbg.Brk.ValidateWithPath(path + "\u002f\u0042\u0072\u006b"); _bafb != nil {
			return _bafb
		}
	}
	if _dbg.Aln != nil {
		if _ebda := _dbg.Aln.ValidateWithPath(path + "\u002f\u0041\u006c\u006e"); _ebda != nil {
			return _ebda
		}
	}
	return nil
}
func NewCT_Shp() *CT_Shp { _dafe := &CT_Shp{}; _dafe.ValAttr = ST_Shp(1); return _dafe }
func (_bfaf ST_Script) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	return e.EncodeElement(_bfaf.String(), start)
}
func (_aaccc ST_TopBot) Validate() error { return _aaccc.ValidateWithPath("") }

// ValidateWithPath validates the CT_NaryPr and its children, prefixing error messages with path
func (_bdac *CT_NaryPr) ValidateWithPath(path string) error {
	if _bdac.Chr != nil {
		if _befc := _bdac.Chr.ValidateWithPath(path + "\u002f\u0043\u0068\u0072"); _befc != nil {
			return _befc
		}
	}
	if _bdac.LimLoc != nil {
		if _feed := _bdac.LimLoc.ValidateWithPath(path + "\u002fL\u0069\u006d\u004c\u006f\u0063"); _feed != nil {
			return _feed
		}
	}
	if _bdac.Grow != nil {
		if _gda := _bdac.Grow.ValidateWithPath(path + "\u002f\u0047\u0072o\u0077"); _gda != nil {
			return _gda
		}
	}
	if _bdac.SubHide != nil {
		if _cdec := _bdac.SubHide.ValidateWithPath(path + "\u002f\u0053\u0075\u0062\u0048\u0069\u0064\u0065"); _cdec != nil {
			return _cdec
		}
	}
	if _bdac.SupHide != nil {
		if _fgcc := _bdac.SupHide.ValidateWithPath(path + "\u002f\u0053\u0075\u0070\u0048\u0069\u0064\u0065"); _fgcc != nil {
			return _fgcc
		}
	}
	if _bdac.CtrlPr != nil {
		if _fadda := _bdac.CtrlPr.ValidateWithPath(path + "\u002fC\u0074\u0072\u006c\u0050\u0072"); _fadda != nil {
			return _fadda
		}
	}
	return nil
}

type CT_MR struct{ E []*CT_OMathArg }

func (_egeaa ST_LimLoc) Validate() error { return _egeaa.ValidateWithPath("") }
func (_ffee *CT_Nary) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	e.EncodeToken(start)
	if _ffee.NaryPr != nil {
		_ccbd := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u006e\u0061\u0072\u0079\u0050\u0072"}}
		e.EncodeElement(_ffee.NaryPr, _ccbd)
	}
	_egcg := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0073u\u0062"}}
	e.EncodeElement(_ffee.Sub, _egcg)
	_ggdc := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0073u\u0070"}}
	e.EncodeElement(_ffee.Sup, _ggdc)
	_bdbe := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0065"}}
	e.EncodeElement(_ffee.E, _bdbe)
	e.EncodeToken(_dd.EndElement{Name: start.Name})
	return nil
}

type ST_BreakBinSub byte

func (_edcgc ST_TopBot) MarshalXMLAttr(name _dd.Name) (_dd.Attr, error) {
	_dfcg := _dd.Attr{}
	_dfcg.Name = name
	switch _edcgc {
	case ST_TopBotUnset:
		_dfcg.Value = ""
	case ST_TopBotTop:
		_dfcg.Value = "\u0074\u006f\u0070"
	case ST_TopBotBot:
		_dfcg.Value = "\u0062\u006f\u0074"
	}
	return _dfcg, nil
}
func NewCT_XAlign() *CT_XAlign   { _eca := &CT_XAlign{}; _eca.ValAttr = _g.ST_XAlign(1); return _eca }
func NewCT_OMathJc() *CT_OMathJc { _abce := &CT_OMathJc{}; return _abce }

// Validate validates the CT_BreakBinSub and its children
func (_dcb *CT_BreakBinSub) Validate() error {
	return _dcb.ValidateWithPath("\u0043\u0054\u005f\u0042\u0072\u0065\u0061\u006b\u0042i\u006e\u0053\u0075\u0062")
}

// Validate validates the CT_M and its children
func (_ecba *CT_M) Validate() error { return _ecba.ValidateWithPath("\u0043\u0054\u005f\u004d") }

// Validate validates the CT_FType and its children
func (_efg *CT_FType) Validate() error {
	return _efg.ValidateWithPath("\u0043\u0054\u005f\u0046\u0054\u0079\u0070\u0065")
}
func (_ga *CT_Acc) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
	_ga.E = NewCT_OMathArg()
_b:
	for {
		_bd, _eg := d.Token()
		if _eg != nil {
			return _eg
		}
		switch _ee := _bd.(type) {
		case _dd.StartElement:
			switch _ee.Name {
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0061\u0063\u0063P\u0072"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0061\u0063\u0063P\u0072"}:
				_ga.AccPr = NewCT_AccPr()
				if _ad := d.DecodeElement(_ga.AccPr, &_ee); _ad != nil {
					return _ad
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0065"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0065"}:
				if _bg := d.DecodeElement(_ga.E, &_ee); _bg != nil {
					return _bg
				}
			default:
				_c.Log.Debug("\u0073\u006b\u0069\u0070\u0070i\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0041\u0063\u0063\u0020\u0025\u0076", _ee.Name)
				if _bb := d.Skip(); _bb != nil {
					return _bb
				}
			}
		case _dd.EndElement:
			break _b
		case _dd.CharData:
		}
	}
	return nil
}
func (_aeb *CT_BarPr) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
_cfa:
	for {
		_bdaa, _bf := d.Token()
		if _bf != nil {
			return _bf
		}
		switch _fef := _bdaa.(type) {
		case _dd.StartElement:
			switch _fef.Name {
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0070\u006f\u0073"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0070\u006f\u0073"}:
				_aeb.Pos = NewCT_TopBot()
				if _be := d.DecodeElement(_aeb.Pos, &_fef); _be != nil {
					return _be
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0063\u0074\u0072\u006c\u0050\u0072"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0063\u0074\u0072\u006c\u0050\u0072"}:
				_aeb.CtrlPr = NewCT_CtrlPr()
				if _bdd := d.DecodeElement(_aeb.CtrlPr, &_fef); _bdd != nil {
					return _bdd
				}
			default:
				_c.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006eg\u0020\u0075\u006es\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0042\u0061\u0072\u0050\u0072\u0020\u0025\u0076", _fef.Name)
				if _bgb := d.Skip(); _bgb != nil {
					return _bgb
				}
			}
		case _dd.EndElement:
			break _cfa
		case _dd.CharData:
		}
	}
	return nil
}
func (_bbbf *CT_OMathParaPr) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	e.EncodeToken(start)
	if _bbbf.Jc != nil {
		_bbbb := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u006a\u0063"}}
		e.EncodeElement(_bbbf.Jc, _bbbb)
	}
	e.EncodeToken(_dd.EndElement{Name: start.Name})
	return nil
}
func (_cfcf *CT_UnSignedInteger) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	start.Attr = append(start.Attr, _dd.Attr{Name: _dd.Name{Local: "\u006d\u003a\u0076a\u006c"}, Value: _a.Sprintf("\u0025\u0076", _cfcf.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_dd.EndElement{Name: start.Name})
	return nil
}
func (_egfe *CT_Box) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
	_egfe.E = NewCT_OMathArg()
_eea:
	for {
		_bad, _cge := d.Token()
		if _cge != nil {
			return _cge
		}
		switch _ffd := _bad.(type) {
		case _dd.StartElement:
			switch _ffd.Name {
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0062\u006f\u0078P\u0072"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0062\u006f\u0078P\u0072"}:
				_egfe.BoxPr = NewCT_BoxPr()
				if _abe := d.DecodeElement(_egfe.BoxPr, &_ffd); _abe != nil {
					return _abe
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0065"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0065"}:
				if _cda := d.DecodeElement(_egfe.E, &_ffd); _cda != nil {
					return _cda
				}
			default:
				_c.Log.Debug("\u0073\u006b\u0069\u0070\u0070i\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0042\u006f\u0078\u0020\u0025\u0076", _ffd.Name)
				if _gbf := d.Skip(); _gbf != nil {
					return _gbf
				}
			}
		case _dd.EndElement:
			break _eea
		case _dd.CharData:
		}
	}
	return nil
}
func NewCT_SSubSupPr() *CT_SSubSupPr { _baff := &CT_SSubSupPr{}; return _baff }
func (_gfgc *CT_ManualBreak) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
	for _, _adgb := range start.Attr {
		if _adgb.Name.Local == "\u0061\u006c\u006eA\u0074" {
			_gaeb, _edac := _f.ParseInt(_adgb.Value, 10, 64)
			if _edac != nil {
				return _edac
			}
			_gfgc.AlnAtAttr = &_gaeb
			continue
		}
	}
	for {
		_aggf, _gcaa := d.Token()
		if _gcaa != nil {
			return _a.Errorf("\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fM\u0061\u006e\u0075\u0061\u006c\u0042\u0072\u0065\u0061\u006b:\u0020\u0025\u0073", _gcaa)
		}
		if _bgbd, _edd := _aggf.(_dd.EndElement); _edd && _bgbd.Name == start.Name {
			break
		}
	}
	return nil
}
func (_afde *CT_ManualBreak) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	if _afde.AlnAtAttr != nil {
		start.Attr = append(start.Attr, _dd.Attr{Name: _dd.Name{Local: "\u006d:\u0061\u006c\u006e\u0041\u0074"}, Value: _a.Sprintf("\u0025\u0076", *_afde.AlnAtAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_dd.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_Shp and its children, prefixing error messages with path
func (_adee *CT_Shp) ValidateWithPath(path string) error {
	if _adee.ValAttr == ST_ShpUnset {
		return _a.Errorf("\u0025\u0073\u002fV\u0061\u006c\u0041\u0074t\u0072\u0020\u0069\u0073\u0020\u0061\u0020m\u0061\u006e\u0064\u0061\u0074\u006f\u0072\u0079\u0020\u0066\u0069\u0065\u006c\u0064", path)
	}
	if _ecfg := _adee.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _ecfg != nil {
		return _ecfg
	}
	return nil
}
func (_beage ST_Jc) MarshalXMLAttr(name _dd.Name) (_dd.Attr, error) {
	_debf := _dd.Attr{}
	_debf.Name = name
	switch _beage {
	case ST_JcUnset:
		_debf.Value = ""
	case ST_JcLeft:
		_debf.Value = "\u006c\u0065\u0066\u0074"
	case ST_JcRight:
		_debf.Value = "\u0072\u0069\u0067h\u0074"
	case ST_JcCenter:
		_debf.Value = "\u0063\u0065\u006e\u0074\u0065\u0072"
	case ST_JcCenterGroup:
		_debf.Value = "c\u0065\u006e\u0074\u0065\u0072\u0047\u0072\u006f\u0075\u0070"
	}
	return _debf, nil
}

// ValidateWithPath validates the CT_XAlign and its children, prefixing error messages with path
func (_abfa *CT_XAlign) ValidateWithPath(path string) error {
	if _abfa.ValAttr == _g.ST_XAlignUnset {
		return _a.Errorf("\u0025\u0073\u002fV\u0061\u006c\u0041\u0074t\u0072\u0020\u0069\u0073\u0020\u0061\u0020m\u0061\u006e\u0064\u0061\u0074\u006f\u0072\u0079\u0020\u0066\u0069\u0065\u006c\u0064", path)
	}
	if _cabee := _abfa.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _cabee != nil {
		return _cabee
	}
	return nil
}
func (_adca *ST_LimLoc) UnmarshalXMLAttr(attr _dd.Attr) error {
	switch attr.Value {
	case "":
		*_adca = 0
	case "\u0075\u006e\u0064\u004f\u0076\u0072":
		*_adca = 1
	case "\u0073\u0075\u0062\u0053\u0075\u0070":
		*_adca = 2
	}
	return nil
}
func (_ecaa ST_Jc) Validate() error { return _ecaa.ValidateWithPath("") }
func NewCT_SSubSup() *CT_SSubSup {
	_gdeg := &CT_SSubSup{}
	_gdeg.E = NewCT_OMathArg()
	_gdeg.Sub = NewCT_OMathArg()
	_gdeg.Sup = NewCT_OMathArg()
	return _gdeg
}

// Validate validates the CT_MCS and its children
func (_gacb *CT_MCS) Validate() error {
	return _gacb.ValidateWithPath("\u0043\u0054\u005f\u004d\u0043\u0053")
}

type CT_Text struct {
	SpaceAttr *string
	Content   string
}

func (_bggba *ST_Style) UnmarshalXMLAttr(attr _dd.Attr) error {
	switch attr.Value {
	case "":
		*_bggba = 0
	case "\u0070":
		*_bggba = 1
	case "\u0062":
		*_bggba = 2
	case "\u0069":
		*_bggba = 3
	case "\u0062\u0069":
		*_bggba = 4
	}
	return nil
}

// Validate validates the CT_LimUppPr and its children
func (_gdbb *CT_LimUppPr) Validate() error {
	return _gdbb.ValidateWithPath("C\u0054\u005f\u004c\u0069\u006d\u0055\u0070\u0070\u0050\u0072")
}
func NewCT_MPr() *CT_MPr { _aadf := &CT_MPr{}; return _aadf }
func (_fbb *CT_FuncPr) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
_beed:
	for {
		_caf, _geda := d.Token()
		if _geda != nil {
			return _geda
		}
		switch _dab := _caf.(type) {
		case _dd.StartElement:
			switch _dab.Name {
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0063\u0074\u0072\u006c\u0050\u0072"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0063\u0074\u0072\u006c\u0050\u0072"}:
				_fbb.CtrlPr = NewCT_CtrlPr()
				if _cede := d.DecodeElement(_fbb.CtrlPr, &_dab); _cede != nil {
					return _cede
				}
			default:
				_c.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u0046\u0075\u006ec\u0050\u0072 \u0025\u0076", _dab.Name)
				if _gcd := d.Skip(); _gcd != nil {
					return _gcd
				}
			}
		case _dd.EndElement:
			break _beed
		case _dd.CharData:
		}
	}
	return nil
}
func NewCT_OMath() *CT_OMath { _fadg := &CT_OMath{}; return _fadg }

// ValidateWithPath validates the CT_Integer2 and its children, prefixing error messages with path
func (_ecb *CT_Integer2) ValidateWithPath(path string) error {
	if _ecb.ValAttr < -2 {
		return _a.Errorf("\u0025\u0073/m\u002e\u0056\u0061l\u0041\u0074\u0074\u0072 mu\u0073t \u0062\u0065\u0020\u003e\u003d\u0020\u002d2 \u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, _ecb.ValAttr)
	}
	if _ecb.ValAttr > 2 {
		return _a.Errorf("%\u0073\u002f\u006d\u002e\u0056\u0061l\u0041\u0074\u0074\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u003c=\u0020\u0032\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, _ecb.ValAttr)
	}
	return nil
}
func (_bbb *CT_D) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	e.EncodeToken(start)
	if _bbb.DPr != nil {
		_fda := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0064P\u0072"}}
		e.EncodeElement(_bbb.DPr, _fda)
	}
	_gbg := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0065"}}
	for _, _aad := range _bbb.E {
		e.EncodeElement(_aad, _gbg)
	}
	e.EncodeToken(_dd.EndElement{Name: start.Name})
	return nil
}
func (_eeac ST_FType) String() string {
	switch _eeac {
	case 0:
		return ""
	case 1:
		return "\u0062\u0061\u0072"
	case 2:
		return "\u0073\u006b\u0077"
	case 3:
		return "\u006c\u0069\u006e"
	case 4:
		return "\u006e\u006f\u0042a\u0072"
	}
	return ""
}
func (_gbgcg *CT_MathPrChoice) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	if _gbgcg.WrapIndent != nil {
		_fadd := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0077r\u0061\u0070\u0049\u006e\u0064\u0065\u006e\u0074"}}
		e.EncodeElement(_gbgcg.WrapIndent, _fadd)
	}
	if _gbgcg.WrapRight != nil {
		_acaac := _dd.StartElement{Name: _dd.Name{Local: "m\u003a\u0077\u0072\u0061\u0070\u0052\u0069\u0067\u0068\u0074"}}
		e.EncodeElement(_gbgcg.WrapRight, _acaac)
	}
	return nil
}

// Validate validates the CT_SpacingRule and its children
func (_bag *CT_SpacingRule) Validate() error {
	return _bag.ValidateWithPath("\u0043\u0054\u005f\u0053\u0070\u0061\u0063\u0069\u006eg\u0052\u0075\u006c\u0065")
}
func (_dfaa *ST_Jc) UnmarshalXMLAttr(attr _dd.Attr) error {
	switch attr.Value {
	case "":
		*_dfaa = 0
	case "\u006c\u0065\u0066\u0074":
		*_dfaa = 1
	case "\u0072\u0069\u0067h\u0074":
		*_dfaa = 2
	case "\u0063\u0065\u006e\u0074\u0065\u0072":
		*_dfaa = 3
	case "c\u0065\u006e\u0074\u0065\u0072\u0047\u0072\u006f\u0075\u0070":
		*_dfaa = 4
	}
	return nil
}
func (_faee *CT_PhantPr) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	e.EncodeToken(start)
	if _faee.Show != nil {
		_beff := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0073\u0068\u006f\u0077"}}
		e.EncodeElement(_faee.Show, _beff)
	}
	if _faee.ZeroWid != nil {
		_ggeb := _dd.StartElement{Name: _dd.Name{Local: "\u006d:\u007a\u0065\u0072\u006f\u0057\u0069d"}}
		e.EncodeElement(_faee.ZeroWid, _ggeb)
	}
	if _faee.ZeroAsc != nil {
		_eacec := _dd.StartElement{Name: _dd.Name{Local: "\u006d:\u007a\u0065\u0072\u006f\u0041\u0073c"}}
		e.EncodeElement(_faee.ZeroAsc, _eacec)
	}
	if _faee.ZeroDesc != nil {
		_aggc := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u007a\u0065\u0072\u006f\u0044\u0065\u0073\u0063"}}
		e.EncodeElement(_faee.ZeroDesc, _aggc)
	}
	if _faee.Transp != nil {
		_egcgcc := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0074\u0072\u0061\u006e\u0073\u0070"}}
		e.EncodeElement(_faee.Transp, _egcgcc)
	}
	if _faee.CtrlPr != nil {
		_dgdbe := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0063\u0074\u0072\u006c\u0050\u0072"}}
		e.EncodeElement(_faee.CtrlPr, _dgdbe)
	}
	e.EncodeToken(_dd.EndElement{Name: start.Name})
	return nil
}
func NewCT_BorderBoxPr() *CT_BorderBoxPr { _cfb := &CT_BorderBoxPr{}; return _cfb }
func (_daadg *CT_SSubSupPr) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	e.EncodeToken(start)
	if _daadg.AlnScr != nil {
		_edbeb := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0061\u006c\u006e\u0053\u0063\u0072"}}
		e.EncodeElement(_daadg.AlnScr, _edbeb)
	}
	if _daadg.CtrlPr != nil {
		_bbab := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0063\u0074\u0072\u006c\u0050\u0072"}}
		e.EncodeElement(_daadg.CtrlPr, _bbab)
	}
	e.EncodeToken(_dd.EndElement{Name: start.Name})
	return nil
}
func (_cdce ST_Style) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	return e.EncodeElement(_cdce.String(), start)
}
func (_cfgad *CT_SSupPr) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	e.EncodeToken(start)
	if _cfgad.CtrlPr != nil {
		_ddadf := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0063\u0074\u0072\u006c\u0050\u0072"}}
		e.EncodeElement(_cfgad.CtrlPr, _ddadf)
	}
	e.EncodeToken(_dd.EndElement{Name: start.Name})
	return nil
}
func NewCT_F() *CT_F {
	_afd := &CT_F{}
	_afd.Num = NewCT_OMathArg()
	_afd.Den = NewCT_OMathArg()
	return _afd
}

// ValidateWithPath validates the CT_SSupPr and its children, prefixing error messages with path
func (_afae *CT_SSupPr) ValidateWithPath(path string) error {
	if _afae.CtrlPr != nil {
		if _aecg := _afae.CtrlPr.ValidateWithPath(path + "\u002fC\u0074\u0072\u006c\u0050\u0072"); _aecg != nil {
			return _aecg
		}
	}
	return nil
}

const (
	ST_BreakBinSubUnset ST_BreakBinSub = 0
	ST_BreakBinSub__    ST_BreakBinSub = 1
	ST_BreakBinSub___   ST_BreakBinSub = 2
	ST_BreakBinSub____  ST_BreakBinSub = 3
)

func (_gbga *CT_SPrePr) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	e.EncodeToken(start)
	if _gbga.CtrlPr != nil {
		_faff := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0063\u0074\u0072\u006c\u0050\u0072"}}
		e.EncodeElement(_gbga.CtrlPr, _faff)
	}
	e.EncodeToken(_dd.EndElement{Name: start.Name})
	return nil
}
func (_egdg *CT_MCS) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
_fac:
	for {
		_bbed, _aaed := d.Token()
		if _aaed != nil {
			return _aaed
		}
		switch _cbgdc := _bbed.(type) {
		case _dd.StartElement:
			switch _cbgdc.Name {
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u006d\u0063"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u006d\u0063"}:
				_afc := NewCT_MC()
				if _cgf := d.DecodeElement(_afc, &_cbgdc); _cgf != nil {
					return _cgf
				}
				_egdg.Mc = append(_egdg.Mc, _afc)
			default:
				_c.Log.Debug("\u0073\u006b\u0069\u0070\u0070i\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u004d\u0043\u0053\u0020\u0025\u0076", _cbgdc.Name)
				if _bbcg := d.Skip(); _bbcg != nil {
					return _bbcg
				}
			}
		case _dd.EndElement:
			break _fac
		case _dd.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_SpacingRule and its children, prefixing error messages with path
func (_fgfd *CT_SpacingRule) ValidateWithPath(path string) error {
	if _fgfd.ValAttr < 0 {
		return _a.Errorf("%\u0073\u002f\u006d\u002e\u0056\u0061l\u0041\u0074\u0074\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u003e=\u0020\u0030\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, _fgfd.ValAttr)
	}
	if _fgfd.ValAttr > 4 {
		return _a.Errorf("%\u0073\u002f\u006d\u002e\u0056\u0061l\u0041\u0074\u0074\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u003c=\u0020\u0034\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, _fgfd.ValAttr)
	}
	return nil
}
func NewCT_OnOff() *CT_OnOff { _bcfgf := &CT_OnOff{}; return _bcfgf }
func (_bbfg *CT_SSubPr) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
_agcbc:
	for {
		_bfae, _gcba := d.Token()
		if _gcba != nil {
			return _gcba
		}
		switch _eaca := _bfae.(type) {
		case _dd.StartElement:
			switch _eaca.Name {
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0063\u0074\u0072\u006c\u0050\u0072"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0063\u0074\u0072\u006c\u0050\u0072"}:
				_bbfg.CtrlPr = NewCT_CtrlPr()
				if _acdd := d.DecodeElement(_bbfg.CtrlPr, &_eaca); _acdd != nil {
					return _acdd
				}
			default:
				_c.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u0053\u0053\u0075b\u0050\u0072 \u0025\u0076", _eaca.Name)
				if _febb := d.Skip(); _febb != nil {
					return _febb
				}
			}
		case _dd.EndElement:
			break _agcbc
		case _dd.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_SSup and its children, prefixing error messages with path
func (_fadgcg *CT_SSup) ValidateWithPath(path string) error {
	if _fadgcg.SSupPr != nil {
		if _babdc := _fadgcg.SSupPr.ValidateWithPath(path + "\u002fS\u0053\u0075\u0070\u0050\u0072"); _babdc != nil {
			return _babdc
		}
	}
	if _gdee := _fadgcg.E.ValidateWithPath(path + "\u002f\u0045"); _gdee != nil {
		return _gdee
	}
	if _dgeea := _fadgcg.Sup.ValidateWithPath(path + "\u002f\u0053\u0075\u0070"); _dgeea != nil {
		return _dgeea
	}
	return nil
}

// Validate validates the CT_OMathJc and its children
func (_acbf *CT_OMathJc) Validate() error {
	return _acbf.ValidateWithPath("\u0043\u0054\u005f\u004f\u004d\u0061\u0074\u0068\u004a\u0063")
}

type CT_LimLow struct {
	LimLowPr *CT_LimLowPr
	E        *CT_OMathArg
	Lim      *CT_OMathArg
}

// Validate validates the CT_UnSignedInteger and its children
func (_dbde *CT_UnSignedInteger) Validate() error {
	return _dbde.ValidateWithPath("\u0043T\u005fU\u006e\u0053\u0069\u0067\u006ee\u0064\u0049n\u0074\u0065\u0067\u0065\u0072")
}
func NewCT_R() *CT_R { _eageb := &CT_R{}; return _eageb }
func (_aded *CT_SSubSup) UnmarshalXML(d *_dd.Decoder, start _dd.StartElement) error {
	_aded.E = NewCT_OMathArg()
	_aded.Sub = NewCT_OMathArg()
	_aded.Sup = NewCT_OMathArg()
_bega:
	for {
		_gcde, _bdcg := d.Token()
		if _bdcg != nil {
			return _bdcg
		}
		switch _beaa := _gcde.(type) {
		case _dd.StartElement:
			switch _beaa.Name {
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0073S\u0075\u0062\u0053\u0075\u0070\u0050r"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0073S\u0075\u0062\u0053\u0075\u0070\u0050r"}:
				_aded.SSubSupPr = NewCT_SSubSupPr()
				if _ebbcd := d.DecodeElement(_aded.SSubSupPr, &_beaa); _ebbcd != nil {
					return _ebbcd
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0065"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0065"}:
				if _dffa := d.DecodeElement(_aded.E, &_beaa); _dffa != nil {
					return _dffa
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0073\u0075\u0062"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0073\u0075\u0062"}:
				if _eedb := d.DecodeElement(_aded.Sub, &_beaa); _eedb != nil {
					return _eedb
				}
			case _dd.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", Local: "\u0073\u0075\u0070"}, _dd.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u006d\u0061\u0074\u0068", Local: "\u0073\u0075\u0070"}:
				if _ecbbb := d.DecodeElement(_aded.Sup, &_beaa); _ecbbb != nil {
					return _ecbbb
				}
			default:
				_c.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006ce\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005fS\u0053\u0075\u0062\u0053\u0075\u0070\u0020\u0025\u0076", _beaa.Name)
				if _ebcf := d.Skip(); _ebcf != nil {
					return _ebcf
				}
			}
		case _dd.EndElement:
			break _bega
		case _dd.CharData:
		}
	}
	return nil
}

const (
	ST_ShpUnset    ST_Shp = 0
	ST_ShpCentered ST_Shp = 1
	ST_ShpMatch    ST_Shp = 2
)

func (_dfgaf *CT_SSubPr) MarshalXML(e *_dd.Encoder, start _dd.StartElement) error {
	e.EncodeToken(start)
	if _dfgaf.CtrlPr != nil {
		_fdeb := _dd.StartElement{Name: _dd.Name{Local: "\u006d\u003a\u0063\u0074\u0072\u006c\u0050\u0072"}}
		e.EncodeElement(_dfgaf.CtrlPr, _fdeb)
	}
	e.EncodeToken(_dd.EndElement{Name: start.Name})
	return nil
}

type CT_Bar struct {
	BarPr *CT_BarPr
	E     *CT_OMathArg
}

func init() {
	_ddg.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", "\u0043\u0054\u005f\u0049\u006e\u0074\u0065\u0067\u0065\u0072\u0032\u0035\u0035", NewCT_Integer255)
	_ddg.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", "C\u0054\u005f\u0049\u006e\u0074\u0065\u0067\u0065\u0072\u0032", NewCT_Integer2)
	_ddg.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", "\u0043\u0054\u005f\u0053\u0070\u0061\u0063\u0069\u006eg\u0052\u0075\u006c\u0065", NewCT_SpacingRule)
	_ddg.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", "\u0043T\u005fU\u006e\u0053\u0069\u0067\u006ee\u0064\u0049n\u0074\u0065\u0067\u0065\u0072", NewCT_UnSignedInteger)
	_ddg.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", "\u0043T\u005f\u0043\u0068\u0061\u0072", NewCT_Char)
	_ddg.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", "\u0043\u0054\u005f\u004f\u006e\u004f\u0066\u0066", NewCT_OnOff)
	_ddg.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", "\u0043T\u005f\u0053\u0074\u0072\u0069\u006eg", NewCT_String)
	_ddg.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", "\u0043T\u005f\u0058\u0041\u006c\u0069\u0067n", NewCT_XAlign)
	_ddg.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", "\u0043T\u005f\u0059\u0041\u006c\u0069\u0067n", NewCT_YAlign)
	_ddg.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", "\u0043\u0054\u005f\u0053\u0068\u0070", NewCT_Shp)
	_ddg.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", "\u0043\u0054\u005f\u0046\u0054\u0079\u0070\u0065", NewCT_FType)
	_ddg.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", "\u0043T\u005f\u004c\u0069\u006d\u004c\u006fc", NewCT_LimLoc)
	_ddg.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", "\u0043T\u005f\u0054\u006f\u0070\u0042\u006ft", NewCT_TopBot)
	_ddg.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", "\u0043T\u005f\u0053\u0063\u0072\u0069\u0070t", NewCT_Script)
	_ddg.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", "\u0043\u0054\u005f\u0053\u0074\u0079\u006c\u0065", NewCT_Style)
	_ddg.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", "\u0043\u0054\u005f\u004d\u0061\u006e\u0075\u0061\u006cB\u0072\u0065\u0061\u006b", NewCT_ManualBreak)
	_ddg.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", "\u0043\u0054\u005f\u0052\u0050\u0052", NewCT_RPR)
	_ddg.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", "\u0043T\u005f\u0054\u0065\u0078\u0074", NewCT_Text)
	_ddg.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", "\u0043\u0054\u005f\u0052", NewCT_R)
	_ddg.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", "\u0043T\u005f\u0043\u0074\u0072\u006c\u0050r", NewCT_CtrlPr)
	_ddg.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", "\u0043\u0054\u005f\u0041\u0063\u0063\u0050\u0072", NewCT_AccPr)
	_ddg.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", "\u0043\u0054\u005f\u0041\u0063\u0063", NewCT_Acc)
	_ddg.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", "\u0043\u0054\u005f\u0042\u0061\u0072\u0050\u0072", NewCT_BarPr)
	_ddg.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", "\u0043\u0054\u005f\u0042\u0061\u0072", NewCT_Bar)
	_ddg.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", "\u0043\u0054\u005f\u0042\u006f\u0078\u0050\u0072", NewCT_BoxPr)
	_ddg.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", "\u0043\u0054\u005f\u0042\u006f\u0078", NewCT_Box)
	_ddg.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", "\u0043\u0054\u005f\u0042\u006f\u0072\u0064\u0065\u0072B\u006f\u0078\u0050\u0072", NewCT_BorderBoxPr)
	_ddg.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", "\u0043\u0054\u005fB\u006f\u0072\u0064\u0065\u0072\u0042\u006f\u0078", NewCT_BorderBox)
	_ddg.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", "\u0043\u0054\u005f\u0044\u0050\u0072", NewCT_DPr)
	_ddg.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", "\u0043\u0054\u005f\u0044", NewCT_D)
	_ddg.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", "\u0043\u0054\u005f\u0045\u0071\u0041\u0072\u0072\u0050\u0072", NewCT_EqArrPr)
	_ddg.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", "\u0043\u0054\u005f\u0045\u0071\u0041\u0072\u0072", NewCT_EqArr)
	_ddg.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", "\u0043\u0054\u005f\u0046\u0050\u0072", NewCT_FPr)
	_ddg.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", "\u0043\u0054\u005f\u0046", NewCT_F)
	_ddg.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", "\u0043T\u005f\u0046\u0075\u006e\u0063\u0050r", NewCT_FuncPr)
	_ddg.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", "\u0043T\u005f\u0046\u0075\u006e\u0063", NewCT_Func)
	_ddg.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", "\u0043\u0054\u005f\u0047\u0072\u006f\u0075\u0070\u0043\u0068\u0072\u0050\u0072", NewCT_GroupChrPr)
	_ddg.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", "C\u0054\u005f\u0047\u0072\u006f\u0075\u0070\u0043\u0068\u0072", NewCT_GroupChr)
	_ddg.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", "C\u0054\u005f\u004c\u0069\u006d\u004c\u006f\u0077\u0050\u0072", NewCT_LimLowPr)
	_ddg.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", "\u0043T\u005f\u004c\u0069\u006d\u004c\u006fw", NewCT_LimLow)
	_ddg.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", "C\u0054\u005f\u004c\u0069\u006d\u0055\u0070\u0070\u0050\u0072", NewCT_LimUppPr)
	_ddg.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", "\u0043T\u005f\u004c\u0069\u006d\u0055\u0070p", NewCT_LimUpp)
	_ddg.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", "\u0043T\u005f\u004d\u0043\u0050\u0072", NewCT_MCPr)
	_ddg.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", "\u0043\u0054\u005fM\u0043", NewCT_MC)
	_ddg.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", "\u0043\u0054\u005f\u004d\u0043\u0053", NewCT_MCS)
	_ddg.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", "\u0043\u0054\u005f\u004d\u0050\u0072", NewCT_MPr)
	_ddg.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", "\u0043\u0054\u005fM\u0052", NewCT_MR)
	_ddg.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", "\u0043\u0054\u005f\u004d", NewCT_M)
	_ddg.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", "\u0043T\u005f\u004e\u0061\u0072\u0079\u0050r", NewCT_NaryPr)
	_ddg.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", "\u0043T\u005f\u004e\u0061\u0072\u0079", NewCT_Nary)
	_ddg.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", "\u0043\u0054\u005f\u0050\u0068\u0061\u006e\u0074\u0050\u0072", NewCT_PhantPr)
	_ddg.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", "\u0043\u0054\u005f\u0050\u0068\u0061\u006e\u0074", NewCT_Phant)
	_ddg.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", "\u0043\u0054\u005f\u0052\u0061\u0064\u0050\u0072", NewCT_RadPr)
	_ddg.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", "\u0043\u0054\u005f\u0052\u0061\u0064", NewCT_Rad)
	_ddg.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", "\u0043T\u005f\u0053\u0050\u0072\u0065\u0050r", NewCT_SPrePr)
	_ddg.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", "\u0043T\u005f\u0053\u0050\u0072\u0065", NewCT_SPre)
	_ddg.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", "\u0043T\u005f\u0053\u0053\u0075\u0062\u0050r", NewCT_SSubPr)
	_ddg.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", "\u0043T\u005f\u0053\u0053\u0075\u0062", NewCT_SSub)
	_ddg.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", "\u0043\u0054\u005fS\u0053\u0075\u0062\u0053\u0075\u0070\u0050\u0072", NewCT_SSubSupPr)
	_ddg.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", "\u0043\u0054\u005f\u0053\u0053\u0075\u0062\u0053\u0075\u0070", NewCT_SSubSup)
	_ddg.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", "\u0043T\u005f\u0053\u0053\u0075\u0070\u0050r", NewCT_SSupPr)
	_ddg.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", "\u0043T\u005f\u0053\u0053\u0075\u0070", NewCT_SSup)
	_ddg.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", "\u0043\u0054\u005f\u004f\u004d\u0061\u0074\u0068\u0041\u0072\u0067\u0050\u0072", NewCT_OMathArgPr)
	_ddg.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", "C\u0054\u005f\u004f\u004d\u0061\u0074\u0068\u0041\u0072\u0067", NewCT_OMathArg)
	_ddg.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", "\u0043\u0054\u005f\u004f\u004d\u0061\u0074\u0068\u004a\u0063", NewCT_OMathJc)
	_ddg.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", "\u0043\u0054\u005f\u004f\u004d\u0061\u0074\u0068\u0050a\u0072\u0061\u0050\u0072", NewCT_OMathParaPr)
	_ddg.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", "\u0043T\u005fT\u0077\u0069\u0070\u0073\u004d\u0065\u0061\u0073\u0075\u0072\u0065", NewCT_TwipsMeasure)
	_ddg.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", "C\u0054\u005f\u0042\u0072\u0065\u0061\u006b\u0042\u0069\u006e", NewCT_BreakBin)
	_ddg.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", "\u0043\u0054\u005f\u0042\u0072\u0065\u0061\u006b\u0042i\u006e\u0053\u0075\u0062", NewCT_BreakBinSub)
	_ddg.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", "\u0043T\u005f\u004d\u0061\u0074\u0068\u0050r", NewCT_MathPr)
	_ddg.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", "\u0043\u0054\u005fO\u004d\u0061\u0074\u0068\u0050\u0061\u0072\u0061", NewCT_OMathPara)
	_ddg.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", "\u0043\u0054\u005f\u004f\u004d\u0061\u0074\u0068", NewCT_OMath)
	_ddg.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", "\u006d\u0061\u0074\u0068\u0050\u0072", NewMathPr)
	_ddg.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", "\u006fM\u0061\u0074\u0068\u0050\u0061\u0072a", NewOMathPara)
	_ddg.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", "\u006f\u004d\u0061t\u0068", NewOMath)
	_ddg.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", "\u0045\u0047\u005f\u0053\u0063\u0072\u0069\u0070\u0074S\u0074\u0079\u006c\u0065", NewEG_ScriptStyle)
	_ddg.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", "E\u0047_\u004f\u004d\u0061\u0074\u0068\u004d\u0061\u0074h\u0045\u006c\u0065\u006den\u0074\u0073", NewEG_OMathMathElements)
	_ddg.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075m\u0065\u006e\u0074\u002f\u0032\u00300\u0036\u002f\u006da\u0074\u0068", "\u0045\u0047_\u004f\u004d\u0061t\u0068\u0045\u006c\u0065\u006d\u0065\u006e\u0074\u0073", NewEG_OMathElements)
}
