//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package content_types

import (
	_c "encoding/xml"
	_fg "fmt"
	_b "github.com/sanhuanshisanshao/unioffice"
	_g "github.com/sanhuanshisanshao/unioffice/common/logger"
	_e "regexp"
)

// ValidateWithPath validates the CT_Default and its children, prefixing error messages with path
func (_fc *CT_Default) ValidateWithPath(path string) error {
	if !ST_ExtensionPatternRe.MatchString(_fc.ExtensionAttr) {
		return _fg.Errorf("\u0025s\u002f\u006d.\u0045\u0078\u0074\u0065n\u0073\u0069\u006fn\u0041\u0074\u0074\u0072\u0020\u006d\u0075\u0073\u0074 m\u0061\u0074\u0063h\u0020\u0027%\u0073\u0027\u0020\u0028\u0068\u0061v\u0065\u0020%\u0076\u0029", path, ST_ExtensionPatternRe, _fc.ExtensionAttr)
	}
	if !ST_ContentTypePatternRe.MatchString(_fc.ContentTypeAttr) {
		return _fg.Errorf("\u0025\u0073/\u006d\u002e\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0054\u0079\u0070\u0065\u0041\u0074\u0074\u0072\u0020\u006d\u0075\u0073\u0074\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0027\u0025\u0073\u0027\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025\u0076\u0029", path, ST_ContentTypePatternRe, _fc.ContentTypeAttr)
	}
	return nil
}
func (_cgcb *Types) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_cgcb.CT_Types = *NewCT_Types()
_gdb:
	for {
		_bfg, _dcf := d.Token()
		if _dcf != nil {
			return _dcf
		}
		switch _cgg := _bfg.(type) {
		case _c.StartElement:
			switch _cgg.Name {
			case _c.Name{Space: "ht\u0074\u0070:\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0070\u0061\u0063\u006b\u0061\u0067\u0065\u002f\u00320\u00306\u002f\u0063\u006f\u006e\u0074\u0065\u006e\u0074-\u0074y\u0070\u0065s", Local: "\u0044e\u0066\u0061\u0075\u006c\u0074"}:
				_gfe := NewDefault()
				if _ga := d.DecodeElement(_gfe, &_cgg); _ga != nil {
					return _ga
				}
				_cgcb.Default = append(_cgcb.Default, _gfe)
			case _c.Name{Space: "ht\u0074\u0070:\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0070\u0061\u0063\u006b\u0061\u0067\u0065\u002f\u00320\u00306\u002f\u0063\u006f\u006e\u0074\u0065\u006e\u0074-\u0074y\u0070\u0065s", Local: "\u004f\u0076\u0065\u0072\u0072\u0069\u0064\u0065"}:
				_bad := NewOverride()
				if _efc := d.DecodeElement(_bad, &_cgg); _efc != nil {
					return _efc
				}
				_cgcb.Override = append(_cgcb.Override, _bad)
			default:
				_g.Log.Debug("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006fn \u0054\u0079\u0070e\u0073 \u0025\u0076", _cgg.Name)
				if _gcfb := d.Skip(); _gcfb != nil {
					return _gcfb
				}
			}
		case _c.EndElement:
			break _gdb
		case _c.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the Override and its children, prefixing error messages with path
func (_edbc *Override) ValidateWithPath(path string) error {
	if _bcce := _edbc.CT_Override.ValidateWithPath(path); _bcce != nil {
		return _bcce
	}
	return nil
}
func (_gcf *Default) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	return _gcf.CT_Default.MarshalXML(e, start)
}

type Types struct{ CT_Types }

func NewCT_Types() *CT_Types { _dg := &CT_Types{}; return _dg }

// ValidateWithPath validates the CT_Override and its children, prefixing error messages with path
func (_gd *CT_Override) ValidateWithPath(path string) error {
	if !ST_ContentTypePatternRe.MatchString(_gd.ContentTypeAttr) {
		return _fg.Errorf("\u0025\u0073/\u006d\u002e\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0054\u0079\u0070\u0065\u0041\u0074\u0074\u0072\u0020\u006d\u0075\u0073\u0074\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0027\u0025\u0073\u0027\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025\u0076\u0029", path, ST_ContentTypePatternRe, _gd.ContentTypeAttr)
	}
	return nil
}

type CT_Override struct {
	ContentTypeAttr string
	PartNameAttr    string
}

// Validate validates the Default and its children
func (_fe *Default) Validate() error {
	return _fe.ValidateWithPath("\u0044e\u0066\u0061\u0075\u006c\u0074")
}

// Validate validates the CT_Override and its children
func (_cbg *CT_Override) Validate() error {
	return _cbg.ValidateWithPath("C\u0054\u005f\u004f\u0076\u0065\u0072\u0072\u0069\u0064\u0065")
}
func (_da *CT_Types) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
_gdg:
	for {
		_eg, _fd := d.Token()
		if _fd != nil {
			return _fd
		}
		switch _dgg := _eg.(type) {
		case _c.StartElement:
			switch _dgg.Name {
			case _c.Name{Space: "ht\u0074\u0070:\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0070\u0061\u0063\u006b\u0061\u0067\u0065\u002f\u00320\u00306\u002f\u0063\u006f\u006e\u0074\u0065\u006e\u0074-\u0074y\u0070\u0065s", Local: "\u0044e\u0066\u0061\u0075\u006c\u0074"}:
				_fgb := NewDefault()
				if _ced := d.DecodeElement(_fgb, &_dgg); _ced != nil {
					return _ced
				}
				_da.Default = append(_da.Default, _fgb)
			case _c.Name{Space: "ht\u0074\u0070:\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0070\u0061\u0063\u006b\u0061\u0067\u0065\u002f\u00320\u00306\u002f\u0063\u006f\u006e\u0074\u0065\u006e\u0074-\u0074y\u0070\u0065s", Local: "\u004f\u0076\u0065\u0072\u0072\u0069\u0064\u0065"}:
				_bcd := NewOverride()
				if _bcc := d.DecodeElement(_bcd, &_dgg); _bcc != nil {
					return _bcc
				}
				_da.Override = append(_da.Override, _bcd)
			default:
				_g.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006eg\u0020\u0075\u006es\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0054\u0079\u0070\u0065\u0073\u0020\u0025\u0076", _dgg.Name)
				if _ecd := d.Skip(); _ecd != nil {
					return _ecd
				}
			}
		case _c.EndElement:
			break _gdg
		case _c.CharData:
		}
	}
	return nil
}
func (_ea *CT_Default) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "\u0045x\u0074\u0065\u006e\u0073\u0069\u006fn"}, Value: _fg.Sprintf("\u0025\u0076", _ea.ExtensionAttr)})
	start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "C\u006f\u006e\u0074\u0065\u006e\u0074\u0054\u0079\u0070\u0065"}, Value: _fg.Sprintf("\u0025\u0076", _ea.ContentTypeAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func (_eff *Default) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_eff.CT_Default = *NewCT_Default()
	for _, _dbc := range start.Attr {
		if _dbc.Name.Local == "\u0045x\u0074\u0065\u006e\u0073\u0069\u006fn" {
			_fca, _cgc := _dbc.Value, error(nil)
			if _cgc != nil {
				return _cgc
			}
			_eff.ExtensionAttr = _fca
			continue
		}
		if _dbc.Name.Local == "C\u006f\u006e\u0074\u0065\u006e\u0074\u0054\u0079\u0070\u0065" {
			_cec, _gbe := _dbc.Value, error(nil)
			if _gbe != nil {
				return _gbe
			}
			_eff.ContentTypeAttr = _cec
			continue
		}
	}
	for {
		_bd, _ead := d.Token()
		if _ead != nil {
			return _fg.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0044\u0065\u0066\u0061\u0075\u006c\u0074\u003a\u0020\u0025\u0073", _ead)
		}
		if _gfc, _fbc := _bd.(_c.EndElement); _fbc && _gfc.Name == start.Name {
			break
		}
	}
	return nil
}

// ValidateWithPath validates the CT_Types and its children, prefixing error messages with path
func (_af *CT_Types) ValidateWithPath(path string) error {
	for _dbf, _ef := range _af.Default {
		if _ffc := _ef.ValidateWithPath(_fg.Sprintf("\u0025\u0073\u002f\u0044\u0065\u0066\u0061\u0075\u006ct\u005b\u0025\u0064\u005d", path, _dbf)); _ffc != nil {
			return _ffc
		}
	}
	for _aaf, _bf := range _af.Override {
		if _dcd := _bf.ValidateWithPath(_fg.Sprintf("\u0025s\u002fO\u0076\u0065\u0072\u0072\u0069\u0064\u0065\u005b\u0025\u0064\u005d", path, _aaf)); _dcd != nil {
			return _dcd
		}
	}
	return nil
}
func NewDefault() *Default { _ege := &Default{}; _ege.CT_Default = *NewCT_Default(); return _ege }
func (_ad *CT_Override) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "C\u006f\u006e\u0074\u0065\u006e\u0074\u0054\u0079\u0070\u0065"}, Value: _fg.Sprintf("\u0025\u0076", _ad.ContentTypeAttr)})
	start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "\u0050\u0061\u0072\u0074\u004e\u0061\u006d\u0065"}, Value: _fg.Sprintf("\u0025\u0076", _ad.PartNameAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_Default and its children
func (_cd *CT_Default) Validate() error {
	return _cd.ValidateWithPath("\u0043\u0054\u005f\u0044\u0065\u0066\u0061\u0075\u006c\u0074")
}
func NewTypes() *Types { _fgbg := &Types{}; _fgbg.CT_Types = *NewCT_Types(); return _fgbg }

const ST_ContentTypePattern = "\u005e\\\u0070{\u004c\u0061\u0074\u0069\u006e\u007d\u002b\u002f\u002e\u002a\u0024"

// ValidateWithPath validates the Types and its children, prefixing error messages with path
func (_dde *Types) ValidateWithPath(path string) error {
	if _gdf := _dde.CT_Types.ValidateWithPath(path); _gdf != nil {
		return _gdf
	}
	return nil
}
func (_cea *Override) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_cea.CT_Override = *NewCT_Override()
	for _, _be := range start.Attr {
		if _be.Name.Local == "C\u006f\u006e\u0074\u0065\u006e\u0074\u0054\u0079\u0070\u0065" {
			_bb, _fba := _be.Value, error(nil)
			if _fba != nil {
				return _fba
			}
			_cea.ContentTypeAttr = _bb
			continue
		}
		if _be.Name.Local == "\u0050\u0061\u0072\u0074\u004e\u0061\u006d\u0065" {
			_egg, _dba := _be.Value, error(nil)
			if _dba != nil {
				return _dba
			}
			_cea.PartNameAttr = _egg
			continue
		}
	}
	for {
		_edb, _afc := d.Token()
		if _afc != nil {
			return _fg.Errorf("p\u0061r\u0073\u0069\u006e\u0067\u0020\u004f\u0076\u0065r\u0072\u0069\u0064\u0065: \u0025\u0073", _afc)
		}
		if _cgf, _fdf := _edb.(_c.EndElement); _fdf && _cgf.Name == start.Name {
			break
		}
	}
	return nil
}
func NewCT_Default() *CT_Default {
	_gb := &CT_Default{}
	_gb.ExtensionAttr = "\u0078\u006d\u006c"
	_gb.ContentTypeAttr = "\u0061p\u0070l\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0078\u006d\u006c"
	return _gb
}
func NewOverride() *Override { _aag := &Override{}; _aag.CT_Override = *NewCT_Override(); return _aag }

const ST_ExtensionPattern = "\u0028\u005b\u0021\u0024\u0026\u0027\\\u0028\u005c\u0029\u005c\u002a\\\u002b\u002c\u003a\u003d\u005d\u007c(\u0025\u005b\u0030\u002d\u0039a\u002d\u0066\u0041\u002d\u0046\u005d\u005b\u0030\u002d\u0039\u0061\u002df\u0041\u002d\u0046\u005d\u0029\u007c\u005b\u003a\u0040\u005d\u007c\u005b\u0061\u002d\u007aA\u002d\u005a\u0030\u002d\u0039\u005c\u002d\u005f~\u005d\u0029\u002b"

type CT_Default struct {
	ExtensionAttr   string
	ContentTypeAttr string
}

// Validate validates the CT_Types and its children
func (_aae *CT_Types) Validate() error {
	return _aae.ValidateWithPath("\u0043\u0054\u005f\u0054\u0079\u0070\u0065\u0073")
}

// Validate validates the Override and its children
func (_bbc *Override) Validate() error {
	return _bbc.ValidateWithPath("\u004f\u0076\u0065\u0072\u0072\u0069\u0064\u0065")
}
func (_db *CT_Types) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	if _db.Default != nil {
		_ac := _c.StartElement{Name: _c.Name{Local: "\u0044e\u0066\u0061\u0075\u006c\u0074"}}
		for _, _ag := range _db.Default {
			e.EncodeElement(_ag, _ac)
		}
	}
	if _db.Override != nil {
		_gdc := _c.StartElement{Name: _c.Name{Local: "\u004f\u0076\u0065\u0072\u0072\u0069\u0064\u0065"}}
		for _, _dd := range _db.Override {
			e.EncodeElement(_dd, _gdc)
		}
	}
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func NewCT_Override() *CT_Override {
	_fbd := &CT_Override{}
	_fbd.ContentTypeAttr = "\u0061p\u0070l\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0078\u006d\u006c"
	return _fbd
}
func (_bag *Override) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	return _bag.CT_Override.MarshalXML(e, start)
}
func (_ec *CT_Override) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_ec.ContentTypeAttr = "\u0061p\u0070l\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0078\u006d\u006c"
	for _, _ff := range start.Attr {
		if _ff.Name.Local == "C\u006f\u006e\u0074\u0065\u006e\u0074\u0054\u0079\u0070\u0065" {
			_ba, _aa := _ff.Value, error(nil)
			if _aa != nil {
				return _aa
			}
			_ec.ContentTypeAttr = _ba
			continue
		}
		if _ff.Name.Local == "\u0050\u0061\u0072\u0074\u004e\u0061\u006d\u0065" {
			_ffg, _ab := _ff.Value, error(nil)
			if _ab != nil {
				return _ab
			}
			_ec.PartNameAttr = _ffg
			continue
		}
	}
	for {
		_gcg, _eb := d.Token()
		if _eb != nil {
			return _fg.Errorf("\u0070\u0061\u0072si\u006e\u0067\u0020\u0043\u0054\u005f\u004f\u0076\u0065\u0072\u0072\u0069\u0064\u0065\u003a\u0020\u0025\u0073", _eb)
		}
		if _abb, _ce := _gcg.(_c.EndElement); _ce && _abb.Name == start.Name {
			break
		}
	}
	return nil
}

type Override struct{ CT_Override }

// ValidateWithPath validates the Default and its children, prefixing error messages with path
func (_egf *Default) ValidateWithPath(path string) error {
	if _daf := _egf.CT_Default.ValidateWithPath(path); _daf != nil {
		return _daf
	}
	return nil
}

var ST_ExtensionPatternRe = _e.MustCompile(ST_ExtensionPattern)

// Validate validates the Types and its children
func (_dafd *Types) Validate() error { return _dafd.ValidateWithPath("\u0054\u0079\u0070e\u0073") }
func (_ee *CT_Default) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_ee.ExtensionAttr = "\u0078\u006d\u006c"
	_ee.ContentTypeAttr = "\u0061p\u0070l\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0078\u006d\u006c"
	for _, _gf := range start.Attr {
		if _gf.Name.Local == "\u0045x\u0074\u0065\u006e\u0073\u0069\u006fn" {
			_cg, _dc := _gf.Value, error(nil)
			if _dc != nil {
				return _dc
			}
			_ee.ExtensionAttr = _cg
			continue
		}
		if _gf.Name.Local == "C\u006f\u006e\u0074\u0065\u006e\u0074\u0054\u0079\u0070\u0065" {
			_ed, _cgb := _gf.Value, error(nil)
			if _cgb != nil {
				return _cgb
			}
			_ee.ContentTypeAttr = _ed
			continue
		}
	}
	for {
		_gc, _cb := d.Token()
		if _cb != nil {
			return _fg.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0043\u0054\u005f\u0044\u0065\u0066\u0061\u0075\u006c\u0074\u003a\u0020%\u0073", _cb)
		}
		if _fb, _a := _gc.(_c.EndElement); _a && _fb.Name == start.Name {
			break
		}
	}
	return nil
}

type CT_Types struct {
	Default  []*Default
	Override []*Override
}

func (_cee *Types) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "\u0078\u006d\u006cn\u0073"}, Value: "ht\u0074\u0070:\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0070\u0061\u0063\u006b\u0061\u0067\u0065\u002f\u00320\u00306\u002f\u0063\u006f\u006e\u0074\u0065\u006e\u0074-\u0074y\u0070\u0065s"})
	start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"}, Value: "\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"})
	start.Name.Local = "\u0054\u0079\u0070e\u0073"
	return _cee.CT_Types.MarshalXML(e, start)
}

type Default struct{ CT_Default }

var ST_ContentTypePatternRe = _e.MustCompile(ST_ContentTypePattern)

func init() {
	_b.RegisterConstructor("ht\u0074\u0070:\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0070\u0061\u0063\u006b\u0061\u0067\u0065\u002f\u00320\u00306\u002f\u0063\u006f\u006e\u0074\u0065\u006e\u0074-\u0074y\u0070\u0065s", "\u0043\u0054\u005f\u0054\u0079\u0070\u0065\u0073", NewCT_Types)
	_b.RegisterConstructor("ht\u0074\u0070:\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0070\u0061\u0063\u006b\u0061\u0067\u0065\u002f\u00320\u00306\u002f\u0063\u006f\u006e\u0074\u0065\u006e\u0074-\u0074y\u0070\u0065s", "\u0043\u0054\u005f\u0044\u0065\u0066\u0061\u0075\u006c\u0074", NewCT_Default)
	_b.RegisterConstructor("ht\u0074\u0070:\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0070\u0061\u0063\u006b\u0061\u0067\u0065\u002f\u00320\u00306\u002f\u0063\u006f\u006e\u0074\u0065\u006e\u0074-\u0074y\u0070\u0065s", "C\u0054\u005f\u004f\u0076\u0065\u0072\u0072\u0069\u0064\u0065", NewCT_Override)
	_b.RegisterConstructor("ht\u0074\u0070:\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0070\u0061\u0063\u006b\u0061\u0067\u0065\u002f\u00320\u00306\u002f\u0063\u006f\u006e\u0074\u0065\u006e\u0074-\u0074y\u0070\u0065s", "\u0054\u0079\u0070e\u0073", NewTypes)
	_b.RegisterConstructor("ht\u0074\u0070:\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0070\u0061\u0063\u006b\u0061\u0067\u0065\u002f\u00320\u00306\u002f\u0063\u006f\u006e\u0074\u0065\u006e\u0074-\u0074y\u0070\u0065s", "\u0044e\u0066\u0061\u0075\u006c\u0074", NewDefault)
	_b.RegisterConstructor("ht\u0074\u0070:\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0070\u0061\u0063\u006b\u0061\u0067\u0065\u002f\u00320\u00306\u002f\u0063\u006f\u006e\u0074\u0065\u006e\u0074-\u0074y\u0070\u0065s", "\u004f\u0076\u0065\u0072\u0072\u0069\u0064\u0065", NewOverride)
}
