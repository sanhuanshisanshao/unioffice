//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package schemaLibrary

import (
	_g "encoding/xml"
	_df "fmt"
	_de "github.com/sanhuanshisanshao/unioffice"
	_da "github.com/sanhuanshisanshao/unioffice/common/logger"
)

// ValidateWithPath validates the CT_Schema and its children, prefixing error messages with path
func (_eb *CT_Schema) ValidateWithPath(path string) error { return nil }

type CT_Schema struct {
	UriAttr              *string
	ManifestLocationAttr *string
	SchemaLocationAttr   *string
	SchemaLanguageAttr   *string
}

func (_dce *SchemaLibrary) UnmarshalXML(d *_g.Decoder, start _g.StartElement) error {
	_dce.CT_SchemaLibrary = *NewCT_SchemaLibrary()
_ed:
	for {
		_efc, _dff := d.Token()
		if _dff != nil {
			return _dff
		}
		switch _gcd := _efc.(type) {
		case _g.StartElement:
			switch _gcd.Name {
			case _g.Name{Space: "\u0068\u0074\u0074\u0070:\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067/\u0073\u0063\u0068\u0065\u006da\u004c\u0069\u0062\u0072\u0061\u0072\u0079\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e", Local: "\u0073\u0063\u0068\u0065\u006d\u0061"}:
				_ddf := NewCT_Schema()
				if _eg := d.DecodeElement(_ddf, &_gcd); _eg != nil {
					return _eg
				}
				_dce.Schema = append(_dce.Schema, _ddf)
			default:
				_da.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0053\u0063\u0068\u0065m\u0061\u004c\u0069\u0062\u0072\u0061\u0072\u0079 \u0025\u0076", _gcd.Name)
				if _deb := d.Skip(); _deb != nil {
					return _deb
				}
			}
		case _g.EndElement:
			break _ed
		case _g.CharData:
		}
	}
	return nil
}

// Validate validates the SchemaLibrary and its children
func (_dcec *SchemaLibrary) Validate() error {
	return _dcec.ValidateWithPath("\u0053\u0063\u0068\u0065\u006d\u0061\u004c\u0069\u0062\u0072\u0061\u0072\u0079")
}
func NewSchemaLibrary() *SchemaLibrary {
	_fc := &SchemaLibrary{}
	_fc.CT_SchemaLibrary = *NewCT_SchemaLibrary()
	return _fc
}
func (_dd *CT_Schema) MarshalXML(e *_g.Encoder, start _g.StartElement) error {
	if _dd.UriAttr != nil {
		start.Attr = append(start.Attr, _g.Attr{Name: _g.Name{Local: "\u006d\u0061\u003a\u0075\u0072\u0069"}, Value: _df.Sprintf("\u0025\u0076", *_dd.UriAttr)})
	}
	if _dd.ManifestLocationAttr != nil {
		start.Attr = append(start.Attr, _g.Attr{Name: _g.Name{Local: "\u006d\u0061\u003a\u006dan\u0069\u0066\u0065\u0073\u0074\u004c\u006f\u0063\u0061\u0074\u0069\u006f\u006e"}, Value: _df.Sprintf("\u0025\u0076", *_dd.ManifestLocationAttr)})
	}
	if _dd.SchemaLocationAttr != nil {
		start.Attr = append(start.Attr, _g.Attr{Name: _g.Name{Local: "\u006d\u0061\u003a\u0073\u0063\u0068\u0065\u006d\u0061\u004c\u006f\u0063a\u0074\u0069\u006f\u006e"}, Value: _df.Sprintf("\u0025\u0076", *_dd.SchemaLocationAttr)})
	}
	if _dd.SchemaLanguageAttr != nil {
		start.Attr = append(start.Attr, _g.Attr{Name: _g.Name{Local: "\u006d\u0061\u003a\u0073\u0063\u0068\u0065\u006d\u0061\u004c\u0061\u006eg\u0075\u0061\u0067\u0065"}, Value: _df.Sprintf("\u0025\u0076", *_dd.SchemaLanguageAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_g.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the SchemaLibrary and its children, prefixing error messages with path
func (_dfb *SchemaLibrary) ValidateWithPath(path string) error {
	if _ea := _dfb.CT_SchemaLibrary.ValidateWithPath(path); _ea != nil {
		return _ea
	}
	return nil
}
func NewCT_SchemaLibrary() *CT_SchemaLibrary { _cg := &CT_SchemaLibrary{}; return _cg }

type CT_SchemaLibrary struct{ Schema []*CT_Schema }

func (_ce *CT_SchemaLibrary) MarshalXML(e *_g.Encoder, start _g.StartElement) error {
	e.EncodeToken(start)
	if _ce.Schema != nil {
		_dg := _g.StartElement{Name: _g.Name{Local: "\u006da\u003a\u0073\u0063\u0068\u0065\u006da"}}
		for _, _gb := range _ce.Schema {
			e.EncodeElement(_gb, _dg)
		}
	}
	e.EncodeToken(_g.EndElement{Name: start.Name})
	return nil
}

type SchemaLibrary struct{ CT_SchemaLibrary }

// Validate validates the CT_SchemaLibrary and its children
func (_ef *CT_SchemaLibrary) Validate() error {
	return _ef.ValidateWithPath("\u0043\u0054_\u0053\u0063\u0068e\u006d\u0061\u004c\u0069\u0062\u0072\u0061\u0072\u0079")
}
func (_ad *CT_Schema) UnmarshalXML(d *_g.Decoder, start _g.StartElement) error {
	for _, _c := range start.Attr {
		if _c.Name.Local == "\u0075\u0072\u0069" {
			_b, _dfc := _c.Value, error(nil)
			if _dfc != nil {
				return _dfc
			}
			_ad.UriAttr = &_b
			continue
		}
		if _c.Name.Local == "\u006d\u0061n\u0069\u0066\u0065s\u0074\u004c\u006f\u0063\u0061\u0074\u0069\u006f\u006e" {
			_cf, _cb := _c.Value, error(nil)
			if _cb != nil {
				return _cb
			}
			_ad.ManifestLocationAttr = &_cf
			continue
		}
		if _c.Name.Local == "\u0073\u0063\u0068\u0065\u006d\u0061\u004c\u006f\u0063a\u0074\u0069\u006f\u006e" {
			_dac, _gg := _c.Value, error(nil)
			if _gg != nil {
				return _gg
			}
			_ad.SchemaLocationAttr = &_dac
			continue
		}
		if _c.Name.Local == "\u0073\u0063\u0068\u0065\u006d\u0061\u004c\u0061\u006eg\u0075\u0061\u0067\u0065" {
			_gge, _bc := _c.Value, error(nil)
			if _bc != nil {
				return _bc
			}
			_ad.SchemaLanguageAttr = &_gge
			continue
		}
	}
	for {
		_fe, _ab := d.Token()
		if _ab != nil {
			return _df.Errorf("p\u0061\u0072\u0073\u0069ng\u0020C\u0054\u005f\u0053\u0063\u0068e\u006d\u0061\u003a\u0020\u0025\u0073", _ab)
		}
		if _e, _cc := _fe.(_g.EndElement); _cc && _e.Name == start.Name {
			break
		}
	}
	return nil
}

// ValidateWithPath validates the CT_SchemaLibrary and its children, prefixing error messages with path
func (_ag *CT_SchemaLibrary) ValidateWithPath(path string) error {
	for _ec, _af := range _ag.Schema {
		if _db := _af.ValidateWithPath(_df.Sprintf("\u0025\u0073\u002f\u0053\u0063\u0068\u0065\u006d\u0061\u005b\u0025\u0064\u005d", path, _ec)); _db != nil {
			return _db
		}
	}
	return nil
}
func NewCT_Schema() *CT_Schema { _a := &CT_Schema{}; return _a }
func (_cd *CT_SchemaLibrary) UnmarshalXML(d *_g.Decoder, start _g.StartElement) error {
_gdc:
	for {
		_cff, _feg := d.Token()
		if _feg != nil {
			return _feg
		}
		switch _dc := _cff.(type) {
		case _g.StartElement:
			switch _dc.Name {
			case _g.Name{Space: "\u0068\u0074\u0074\u0070:\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067/\u0073\u0063\u0068\u0065\u006da\u004c\u0069\u0062\u0072\u0061\u0072\u0079\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e", Local: "\u0073\u0063\u0068\u0065\u006d\u0061"}:
				_cbg := NewCT_Schema()
				if _dgd := d.DecodeElement(_cbg, &_dc); _dgd != nil {
					return _dgd
				}
				_cd.Schema = append(_cd.Schema, _cbg)
			default:
				_da.Log.Debug("\u0073\u006b\u0069\u0070\u0070i\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0053\u0063\u0068\u0065\u006d\u0061\u004c\u0069\u0062\u0072\u0061\u0072\u0079\u0020\u0025v", _dc.Name)
				if _fd := d.Skip(); _fd != nil {
					return _fd
				}
			}
		case _g.EndElement:
			break _gdc
		case _g.CharData:
		}
	}
	return nil
}

// Validate validates the CT_Schema and its children
func (_gd *CT_Schema) Validate() error {
	return _gd.ValidateWithPath("\u0043T\u005f\u0053\u0063\u0068\u0065\u006da")
}
func (_agd *SchemaLibrary) MarshalXML(e *_g.Encoder, start _g.StartElement) error {
	start.Attr = append(start.Attr, _g.Attr{Name: _g.Name{Local: "\u0078\u006d\u006cn\u0073"}, Value: "\u0068\u0074\u0074\u0070:\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067/\u0073\u0063\u0068\u0065\u006da\u004c\u0069\u0062\u0072\u0061\u0072\u0079\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e"})
	start.Attr = append(start.Attr, _g.Attr{Name: _g.Name{Local: "\u0078\u006d\u006c\u006e\u0073\u003a\u006d\u0061"}, Value: "\u0068\u0074\u0074\u0070:\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067/\u0073\u0063\u0068\u0065\u006da\u004c\u0069\u0062\u0072\u0061\u0072\u0079\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e"})
	start.Attr = append(start.Attr, _g.Attr{Name: _g.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"}, Value: "\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"})
	start.Name.Local = "\u006d\u0061:\u0073\u0063\u0068e\u006d\u0061\u004c\u0069\u0062\u0072\u0061\u0072\u0079"
	return _agd.CT_SchemaLibrary.MarshalXML(e, start)
}
func init() {
	_de.RegisterConstructor("\u0068\u0074\u0074\u0070:\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067/\u0073\u0063\u0068\u0065\u006da\u004c\u0069\u0062\u0072\u0061\u0072\u0079\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e", "\u0043T\u005f\u0053\u0063\u0068\u0065\u006da", NewCT_Schema)
	_de.RegisterConstructor("\u0068\u0074\u0074\u0070:\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067/\u0073\u0063\u0068\u0065\u006da\u004c\u0069\u0062\u0072\u0061\u0072\u0079\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e", "\u0043\u0054_\u0053\u0063\u0068e\u006d\u0061\u004c\u0069\u0062\u0072\u0061\u0072\u0079", NewCT_SchemaLibrary)
	_de.RegisterConstructor("\u0068\u0074\u0074\u0070:\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067/\u0073\u0063\u0068\u0065\u006da\u004c\u0069\u0062\u0072\u0061\u0072\u0079\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e", "\u0073\u0063\u0068\u0065\u006d\u0061\u004c\u0069\u0062\u0072\u0061\u0072\u0079", NewSchemaLibrary)
}
